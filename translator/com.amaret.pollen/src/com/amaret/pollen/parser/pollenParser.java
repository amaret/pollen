// $ANTLR 3.4 /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g 2014-01-16 18:53:13

    package com.amaret.pollen.parser;
    import java.util.EnumSet;
    import java.util.ArrayList;
    import java.lang.*;
    import java.io.*;
    import com.amaret.pollen.parser.*;
    import com.amaret.pollen.driver.ProcessUnits;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class pollenParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_EQ", "ASSIGN", "BIND", "BITAND_EQ", "BITOR_EQ", "BITXOR_EQ", "BIT_NOT", "CHAR", "D", "DEC", "DELIM", "DIV_EQ", "D_ARG", "D_ARR", "D_ARR_DIM", "D_CLASS", "D_COMPOSITION", "D_ENUM", "D_ENUMVAL", "D_FCN_CTOR", "D_FCN_DCL", "D_FCN_DEF", "D_FCN_REF", "D_FCN_TYP_NM", "D_FIELD", "D_FORMAL", "D_INJ", "D_INSTANCE", "D_META", "D_MODULE", "D_PROTOCOL", "D_VAR", "E", "EQ", "EXPORT", "E_ADDR", "E_BINARY", "E_CALL", "E_CONST", "E_EXPR", "E_HASH", "E_IDENT", "E_INDEX", "E_INJ", "E_NEW", "E_NUMLIT", "E_PAREN", "E_QUEST", "E_SELF", "E_TYP", "E_UNARY", "E_VEC", "FCNBODY", "GT", "GT_EQ", "H", "HEX_LIT", "HOST", "I", "IDENT", "IJ_BEG", "IJ_END", "ILLEGAL_CHARACTER", "IMPORT", "INC", "INJECT", "INT_LIT", "LIST", "LOG_NOT", "LSHFT_EQ", "LT", "LT_EQ", "LU", "MINUS", "ML_COMMENT", "MODULE", "MOD_EQ", "MUL_EQ", "NIL", "NL", "NOT_EQ", "O", "OCT_LIT", "PEG", "PLUS", "QNAME", "REAL_LIT", "RSHFT_EQ", "SEMI", "SL_COMMENT", "STRING", "SUB_EQ", "S_ASSIGN", "S_BIND", "S_BLOCK", "S_BREAK", "S_CASE", "S_CONTINUE", "S_DECL", "S_ELIF", "S_EXPR", "S_FOR", "S_FOREACH", "S_IF", "S_INJ", "S_PACKAGE", "S_PEG", "S_PRINT", "S_PROVIDED", "S_RETURN", "S_SWITCH", "S_WHILE", "THIS", "T_ARR", "T_LST", "T_STD", "T_USR", "UNIT", "VOID", "WS", "'%'", "'&&'", "'&'", "'('", "')'", "'*'", "','", "'.'", "'/'", "':'", "'<<'", "'>>'", "'?'", "'@'", "'['", "']'", "'^'", "'as'", "'bool'", "'break'", "'byte'", "'case'", "'class'", "'composition'", "'const'", "'continue'", "'default'", "'do'", "'elif'", "'else'", "'enum'", "'err'", "'export'", "'extends'", "'false'", "'for'", "'from'", "'host'", "'if'", "'implements'", "'import'", "'int16'", "'int32'", "'int8'", "'log'", "'meta'", "'module'", "'new'", "'null'", "'out'", "'package'", "'preset'", "'print'", "'protocol'", "'provided'", "'public'", "'return'", "'string'", "'switch'", "'true'", "'type'", "'uint16'", "'uint32'", "'uint8'", "'volatile'", "'while'", "'{'", "'|'", "'||'", "'}'"
    };

    public static final int EOF=-1;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int ADD_EQ=4;
    public static final int ASSIGN=5;
    public static final int BIND=6;
    public static final int BITAND_EQ=7;
    public static final int BITOR_EQ=8;
    public static final int BITXOR_EQ=9;
    public static final int BIT_NOT=10;
    public static final int CHAR=11;
    public static final int D=12;
    public static final int DEC=13;
    public static final int DELIM=14;
    public static final int DIV_EQ=15;
    public static final int D_ARG=16;
    public static final int D_ARR=17;
    public static final int D_ARR_DIM=18;
    public static final int D_CLASS=19;
    public static final int D_COMPOSITION=20;
    public static final int D_ENUM=21;
    public static final int D_ENUMVAL=22;
    public static final int D_FCN_CTOR=23;
    public static final int D_FCN_DCL=24;
    public static final int D_FCN_DEF=25;
    public static final int D_FCN_REF=26;
    public static final int D_FCN_TYP_NM=27;
    public static final int D_FIELD=28;
    public static final int D_FORMAL=29;
    public static final int D_INJ=30;
    public static final int D_INSTANCE=31;
    public static final int D_META=32;
    public static final int D_MODULE=33;
    public static final int D_PROTOCOL=34;
    public static final int D_VAR=35;
    public static final int E=36;
    public static final int EQ=37;
    public static final int EXPORT=38;
    public static final int E_ADDR=39;
    public static final int E_BINARY=40;
    public static final int E_CALL=41;
    public static final int E_CONST=42;
    public static final int E_EXPR=43;
    public static final int E_HASH=44;
    public static final int E_IDENT=45;
    public static final int E_INDEX=46;
    public static final int E_INJ=47;
    public static final int E_NEW=48;
    public static final int E_NUMLIT=49;
    public static final int E_PAREN=50;
    public static final int E_QUEST=51;
    public static final int E_SELF=52;
    public static final int E_TYP=53;
    public static final int E_UNARY=54;
    public static final int E_VEC=55;
    public static final int FCNBODY=56;
    public static final int GT=57;
    public static final int GT_EQ=58;
    public static final int H=59;
    public static final int HEX_LIT=60;
    public static final int HOST=61;
    public static final int I=62;
    public static final int IDENT=63;
    public static final int IJ_BEG=64;
    public static final int IJ_END=65;
    public static final int ILLEGAL_CHARACTER=66;
    public static final int IMPORT=67;
    public static final int INC=68;
    public static final int INJECT=69;
    public static final int INT_LIT=70;
    public static final int LIST=71;
    public static final int LOG_NOT=72;
    public static final int LSHFT_EQ=73;
    public static final int LT=74;
    public static final int LT_EQ=75;
    public static final int LU=76;
    public static final int MINUS=77;
    public static final int ML_COMMENT=78;
    public static final int MODULE=79;
    public static final int MOD_EQ=80;
    public static final int MUL_EQ=81;
    public static final int NIL=82;
    public static final int NL=83;
    public static final int NOT_EQ=84;
    public static final int O=85;
    public static final int OCT_LIT=86;
    public static final int PEG=87;
    public static final int PLUS=88;
    public static final int QNAME=89;
    public static final int REAL_LIT=90;
    public static final int RSHFT_EQ=91;
    public static final int SEMI=92;
    public static final int SL_COMMENT=93;
    public static final int STRING=94;
    public static final int SUB_EQ=95;
    public static final int S_ASSIGN=96;
    public static final int S_BIND=97;
    public static final int S_BLOCK=98;
    public static final int S_BREAK=99;
    public static final int S_CASE=100;
    public static final int S_CONTINUE=101;
    public static final int S_DECL=102;
    public static final int S_ELIF=103;
    public static final int S_EXPR=104;
    public static final int S_FOR=105;
    public static final int S_FOREACH=106;
    public static final int S_IF=107;
    public static final int S_INJ=108;
    public static final int S_PACKAGE=109;
    public static final int S_PEG=110;
    public static final int S_PRINT=111;
    public static final int S_PROVIDED=112;
    public static final int S_RETURN=113;
    public static final int S_SWITCH=114;
    public static final int S_WHILE=115;
    public static final int THIS=116;
    public static final int T_ARR=117;
    public static final int T_LST=118;
    public static final int T_STD=119;
    public static final int T_USR=120;
    public static final int UNIT=121;
    public static final int VOID=122;
    public static final int WS=123;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public pollenParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public pollenParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[407+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return pollenParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g"; }



    	private boolean isMetaInstance = false;
    	private boolean isVoidInstance = false; // deferred instantiation: '{}'. No code gen.
    	private boolean hasHostConstructor = false;  // constructors with 0 parms will by synthesized if not declared.
    	private boolean hasTargetConstructor = false;
    	private boolean instantiateToDefaults = false; // A meta type imported with no '{..}'
    	private UnitNode client = null;
    	private ImportNode clientImport = null;
    	// Trigger meta instantiation via this constructor
    	public pollenParser(TokenStream tokens, UnitNode cl, ImportNode cli) {
    	    this(tokens, new RecognizerSharedState());
    	    isMetaInstance = (cl != null && cli != null); 
    	    client = cl;
    	    clientImport = cli;
    	    isVoidInstance = (cli != null && cli.getMeta() != null && cli.getMeta().size() == 0);
    	    instantiateToDefaults = (cli != null && cli.getMeta() == null);
    	}
    	    
        EnumSet<Flags> featureFlags = EnumSet.noneOf(Flags.class); 
        EnumSet<Flags> metaFlags = EnumSet.noneOf(Flags.class); 
        EnumSet<Flags> stmtFlags = EnumSet.noneOf(Flags.class);
        EnumSet<Flags> typeMods = EnumSet.noneOf(Flags.class);
        
        private class TypeInfo {
            public EnumSet<Flags> getUnitFlags() {
                            return uf;
                    }    
                    public void setUnitFlags(EnumSet<Flags> unitFlags) {
                            uf.addAll(unitFlags);
                    }    
                    public String getTypeName() {
                            return tn;
                    }    
                    public void setTypeName(String typeName) {
                            this.tn = typeName;
                    }    
                    EnumSet<Flags> uf = EnumSet.noneOf(Flags.class);
                    String tn = "";  
        }    
        public String getParseUnitTypeName() {
        	return ti.getTypeName();
        }
        public EnumSet<Flags> getParseUnitFlags() {
        	return ti.getUnitFlags();
        }

        
        ArrayList<TypeInfo> tl = new ArrayList<TypeInfo>();
        TypeInfo ti;
        
        String getInject(String text) {
            return text.substring(text.indexOf("+{")+2,text.lastIndexOf("}+"));
        }
        
        void handleIntrinsics(CommonTree t) {
        	if (t.getText().indexOf('.') == -1) 
        		return;
        	char c = t.getText().charAt(0);
        	switch (c) {
        	case 'p':
        		String s = t.getText();             
        		if (s.substring(0, s.indexOf('.')).equals("pollen")) {
        			s = s.replaceFirst("\\.", "__");
        			t.getToken().setText(s);
        		}       
        		break;
        	default:
        		break;        
        	}    
        }

        
        void DBG(String dbg) {
        	System.out.println(dbg);
        }
        	/**
        	 * Synthesize tree to handle qualified pollen names in injected text. 
    	* @param root
    	* @param inject
    	* @return the root of the synthesized tree.
    	*/
        private BaseNode addInjectChild(BaseNode root, TypedInject inject) {

        	root = (root == null) ? (BaseNode)adaptor.nil() : root;
        	if (inject.isName()) {
        		BaseNode id =  (BaseNode)adaptor.becomeRoot(
        				new ExprNode.Ident(E_IDENT, "E_IDENT")
        				, (BaseNode) adaptor.nil());
        		adaptor.addChild(root, id);
        		adaptor.addChild(id, 
        				(BaseNode)adaptor.create(pollenParser.IDENT, (inject.getText())));
        	}
        	else {
        		adaptor.addChild(root, 
        				(BaseNode)adaptor.create(INJECT, (inject.getText())));
        	}
        	root = (BaseNode)adaptor.rulePostProcessing(root);
        	return root;
        }
        class TypedInject {
        	private boolean isName = false;
        	public boolean isName() {
    			return isName;
    	}
    	public String getText() {
    			return text;
    	}
    	private String text = "";
        	public TypedInject(String str,boolean name) {
        		text = str;
        		isName = name;
        	}
        }

            	/**
            	 * Split the text that was injected into a list of IDENT and INJECT nodes.
            	 * The IDENTs will be emitted as pollen names formatted for output.
            	 * @param root
            	 * @param inject
            	 * @return a BaseNode with child nodes for the injects or names in the order encountered.
            	 */
                public BaseNode createInjectNodes(BaseNode root, String inject) {
                	final char BT = '`';
                	if (inject.indexOf(BT) == -1) {
                		return addInjectChild(root, new TypedInject(inject, false));
                		
                	}
                	List<TypedInject> l = new ArrayList<TypedInject>();
                	int startBT = 0;
                	int endBT = 0;
                	String name = "", data = "";
                	while (true) {
                		startBT = inject.indexOf(BT);
            			endBT = inject.indexOf(BT, startBT+1);

                		if (startBT > 0) { // data
                			l.add(new TypedInject(inject.substring(0, startBT), false));
                		} 
                		else if (startBT == -1) { // remaining inject is all data
                			endBT = -1;
                			l.add(new TypedInject(inject, false));
                		} 

                		if (endBT == -1)
                			break; 
                		l.add(new TypedInject(inject.substring(startBT+1, endBT), true));// a pollen name
                		inject = inject.substring(endBT+1);
                	}
                	
                	for (TypedInject t : l) {
                		addInjectChild(root, t);
                	}
                	return root;
            	}

        // Override to extract PollenException message when present
        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
            String hdr = getErrorHeader(e);
            String msg = getErrorMessage(e, tokenNames);
            if ( e instanceof PollenException) {
            			msg = e.toString();
            }
            hdr = pollenLexer.getFileName()+ ", " + hdr;
            emitErrorMessage(hdr+" "+msg);       
            if (msg.matches(".*mismatched input.*"))
               ParseUnit.current().reportFailure("Illegal program");

            
        }

        String pkgName;
        void DBG_LT() {
          System.out.print("LT: "); 
        	if (input.LT(0) != null) System.out.print(input.LT(0).getText() + ", "); 
        	if (input.LT(1) != null) System.out.print(input.LT(1).getText() + ", "); 
        	if (input.LT(2) != null) System.out.print(input.LT(2).getText() + ", "); 
        	System.out.println();
        }
        /** A mismatched char or Token or tree node */
    	public class PollenException extends RecognitionException {
    		
    		String msg;

    		public PollenException(String m, IntStream input) {
    			super(input);
    			msg = m;
    		}
    		public String toString() {
    			return "PollenException(" + msg + ")";
    		}
    	}
    	public class PollenFatalException extends Exception {
    		String msg;

    		public PollenFatalException(String m) {
    			msg = m;
    		}
    		public String toString() {
    			return "PollenFatalException(" + msg + ")";
    		}
    	}
    	public void reportFailure( Exception e )
        {
        	ParseUnit.current().reportFailure(e);
        }


    public static class unit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:365:1: unit : ( NL )* unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) ;
    public final pollenParser.unit_return unit() throws RecognitionException {
        pollenParser.unit_return retval = new pollenParser.unit_return();
        retval.start = input.LT(1);

        int unit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL1=null;
        pollenParser.unitPackage_return unitPackage2 =null;


        BaseNode NL1_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_unitPackage=new RewriteRuleSubtreeStream(adaptor,"rule unitPackage");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:366:5: ( ( NL )* unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:366:9: ( NL )* unitPackage
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:366:9: ( NL )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==NL) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:366:10: NL
            	    {
            	    NL1=(Atom)match(input,NL,FOLLOW_NL_in_unit686); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL1);


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            pushFollow(FOLLOW_unitPackage_in_unit690);
            unitPackage2=unitPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitPackage.add(unitPackage2.getTree());

            // AST REWRITE
            // elements: unitPackage
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 366:29: -> ^( UNIT[\"UNIT\"] unitPackage )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:366:32: ^( UNIT[\"UNIT\"] unitPackage )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new UnitNode(UNIT, "UNIT")
                , root_1);

                adaptor.addChild(root_1, stream_unitPackage.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, unit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unit"


    protected static class unitPackage_scope {
        Object unitImports;
    }
    protected Stack unitPackage_stack = new Stack();


    public static class unitPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitPackage"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:1: unitPackage : stmtPackage importList importIntrinsicPrint stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList ;
    public final pollenParser.unitPackage_return unitPackage() throws RecognitionException {
        unitPackage_stack.push(new unitPackage_scope());
        pollenParser.unitPackage_return retval = new pollenParser.unitPackage_return();
        retval.start = input.LT(1);

        int unitPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtPackage_return stmtPackage3 =null;

        pollenParser.importList_return importList4 =null;

        pollenParser.importIntrinsicPrint_return importIntrinsicPrint5 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList6 =null;

        pollenParser.unitTypeDefinition_return unitTypeDefinition7 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList8 =null;

        pollenParser.pollenEOF_return pollenEOF9 =null;


        RewriteRuleSubtreeStream stream_stmtInjectionList=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjectionList");
        RewriteRuleSubtreeStream stream_importIntrinsicPrint=new RewriteRuleSubtreeStream(adaptor,"rule importIntrinsicPrint");
        RewriteRuleSubtreeStream stream_importList=new RewriteRuleSubtreeStream(adaptor,"rule importList");
        RewriteRuleSubtreeStream stream_stmtPackage=new RewriteRuleSubtreeStream(adaptor,"rule stmtPackage");
        RewriteRuleSubtreeStream stream_pollenEOF=new RewriteRuleSubtreeStream(adaptor,"rule pollenEOF");
        RewriteRuleSubtreeStream stream_unitTypeDefinition=new RewriteRuleSubtreeStream(adaptor,"rule unitTypeDefinition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:2: ( stmtPackage importList importIntrinsicPrint stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:11: stmtPackage importList importIntrinsicPrint stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF
            {
            pushFollow(FOLLOW_stmtPackage_in_unitPackage730);
            stmtPackage3=stmtPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtPackage.add(stmtPackage3.getTree());

            pushFollow(FOLLOW_importList_in_unitPackage742);
            importList4=importList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importList.add(importList4.getTree());

            if ( state.backtracking==0 ) {((unitPackage_scope)unitPackage_stack.peek()).unitImports = (importList4!=null?((BaseNode)importList4.tree):null);}

            pushFollow(FOLLOW_importIntrinsicPrint_in_unitPackage766);
            importIntrinsicPrint5=importIntrinsicPrint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importIntrinsicPrint.add(importIntrinsicPrint5.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage781);
            stmtInjectionList6=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtInjectionList.add(stmtInjectionList6.getTree());

            pushFollow(FOLLOW_unitTypeDefinition_in_unitPackage797);
            unitTypeDefinition7=unitTypeDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitTypeDefinition.add(unitTypeDefinition7.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage812);
            stmtInjectionList8=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtInjectionList.add(stmtInjectionList8.getTree());

            pushFollow(FOLLOW_pollenEOF_in_unitPackage827);
            pollenEOF9=pollenEOF();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pollenEOF.add(pollenEOF9.getTree());

            // AST REWRITE
            // elements: unitTypeDefinition, importList, stmtPackage, stmtInjectionList, stmtInjectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 379:15: -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList
            {
                adaptor.addChild(root_0, stream_stmtPackage.nextTree());

                adaptor.addChild(root_0, stream_importList.nextTree());

                adaptor.addChild(root_0, stream_stmtInjectionList.nextTree());

                adaptor.addChild(root_0, stream_unitTypeDefinition.nextTree());

                adaptor.addChild(root_0, stream_stmtInjectionList.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, unitPackage_StartIndex); }

            unitPackage_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitPackage"


    public static class pollenEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pollenEOF"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:381:1: pollenEOF : EOF !;
    public final pollenParser.pollenEOF_return pollenEOF() throws RecognitionException {
        pollenParser.pollenEOF_return retval = new pollenParser.pollenEOF_return();
        retval.start = input.LT(1);

        int pollenEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom EOF10=null;

        BaseNode EOF10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:2: ( EOF !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:4: EOF !
            {
            root_0 = (BaseNode)adaptor.nil();


            EOF10=(Atom)match(input,EOF,FOLLOW_EOF_in_pollenEOF864); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (java.lang.ClassCastException e) {

                //ignore: antlr bug

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, pollenEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pollenEOF"


    public static class stmtInjectionList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjectionList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:387:1: stmtInjectionList : ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) ;
    public final pollenParser.stmtInjectionList_return stmtInjectionList() throws RecognitionException {
        pollenParser.stmtInjectionList_return retval = new pollenParser.stmtInjectionList_return();
        retval.start = input.LT(1);

        int stmtInjectionList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtInjection_return stmtInjection11 =null;


        RewriteRuleSubtreeStream stream_stmtInjection=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjection");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:2: ( ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:3: ( stmtInjection )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:3: ( stmtInjection )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==INJECT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:4: stmtInjection
            	    {
            	    pushFollow(FOLLOW_stmtInjection_in_stmtInjectionList882);
            	    stmtInjection11=stmtInjection();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtInjection.add(stmtInjection11.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtInjection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 388:20: -> ^( LIST[\"LIST\"] ( stmtInjection )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:23: ^( LIST[\"LIST\"] ( stmtInjection )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:48: ( stmtInjection )*
                while ( stream_stmtInjection.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtInjection.nextTree());

                }
                stream_stmtInjection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, stmtInjectionList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjectionList"


    public static class stmtPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPackage"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:390:1: stmtPackage : ( 'package' qualName delim -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) );
    public final pollenParser.stmtPackage_return stmtPackage() throws RecognitionException {
        pollenParser.stmtPackage_return retval = new pollenParser.stmtPackage_return();
        retval.start = input.LT(1);

        int stmtPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal12=null;
        pollenParser.qualName_return qualName13 =null;

        pollenParser.delim_return delim14 =null;


        BaseNode string_literal12_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

           String pkg = ParseUnit.mkPackageName(ParseUnit.current().getCurrPath());

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:394:2: ( 'package' qualName delim -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==174) ) {
                alt3=1;
            }
            else if ( (LA3_0==EOF||LA3_0==INJECT||(LA3_0 >= 146 && LA3_0 <= 147)||LA3_0==154||LA3_0==160||LA3_0==164||(LA3_0 >= 169 && LA3_0 <= 170)||LA3_0==177) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:394:4: 'package' qualName delim
                    {
                    string_literal12=(Atom)match(input,174,FOLLOW_174_in_stmtPackage912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_174.add(string_literal12);


                    pushFollow(FOLLOW_qualName_in_stmtPackage914);
                    qualName13=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName13.getTree());

                    pushFollow(FOLLOW_delim_in_stmtPackage916);
                    delim14=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim14.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 394:29: -> ^( S_PACKAGE[pkg] qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:394:32: ^( S_PACKAGE[pkg] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:395:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 395:4: -> ^( S_PACKAGE[pkg] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:395:7: ^( S_PACKAGE[pkg] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, stmtPackage_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPackage"


    public static class stmtExport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtExport"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:397:1: stmtExport : 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) ;
    public final pollenParser.stmtExport_return stmtExport() throws RecognitionException {
        pollenParser.stmtExport_return retval = new pollenParser.stmtExport_return();
        retval.start = input.LT(1);

        int stmtExport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal15=null;
        pollenParser.qualName_return qualName16 =null;

        pollenParser.delim_return delim17 =null;


        BaseNode string_literal15_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:398:5: ( 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:398:9: 'export' qualName delim
            {
            string_literal15=(Atom)match(input,156,FOLLOW_156_in_stmtExport951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal15);


            pushFollow(FOLLOW_qualName_in_stmtExport953);
            qualName16=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName16.getTree());

            pushFollow(FOLLOW_delim_in_stmtExport955);
            delim17=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim17.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 398:33: -> ^( EXPORT[\"EXPORT\"] qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:398:36: ^( EXPORT[\"EXPORT\"] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExportNode(EXPORT, "EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, stmtExport_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtExport"


    public static class classDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:400:1: classDefinition : 'class' IDENT extendsClause implementsClause braceOpen classFeatureList[name] braceClose -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause ) ;
    public final pollenParser.classDefinition_return classDefinition() throws RecognitionException {
        pollenParser.classDefinition_return retval = new pollenParser.classDefinition_return();
        retval.start = input.LT(1);

        int classDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal18=null;
        Atom IDENT19=null;
        pollenParser.extendsClause_return extendsClause20 =null;

        pollenParser.implementsClause_return implementsClause21 =null;

        pollenParser.braceOpen_return braceOpen22 =null;

        pollenParser.classFeatureList_return classFeatureList23 =null;

        pollenParser.braceClose_return braceClose24 =null;


        BaseNode string_literal18_tree=null;
        BaseNode IDENT19_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleSubtreeStream stream_classFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule classFeatureList");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        		ti = new TypeInfo();
        		tl.add(ti);		
        		ti.setUnitFlags(metaFlags); 
        		metaFlags = EnumSet.noneOf(Flags.class);		
        		String qual = "";
        		String name = "";
        		hasHostConstructor = false;
        		hasTargetConstructor = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:416:2: ( 'class' IDENT extendsClause implementsClause braceOpen classFeatureList[name] braceClose -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:416:4: 'class' IDENT extendsClause implementsClause braceOpen classFeatureList[name] braceClose
            {
            string_literal18=(Atom)match(input,146,FOLLOW_146_in_classDefinition990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal18);


            IDENT19=(Atom)match(input,IDENT,FOLLOW_IDENT_in_classDefinition992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT19);


            if ( state.backtracking==0 ) { 
            	      	ti.setTypeName((IDENT19!=null?IDENT19.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.CLASS));
            	      	if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
            	      		// if there is an 'as' name in the instantiating context, qualify the unit name 
            	      		qual = clientImport.getAs().getText();
            	      	}
            	      	name = qual.isEmpty() ? ti.getTypeName() : qual;
            	      }

            pushFollow(FOLLOW_extendsClause_in_classDefinition1004);
            extendsClause20=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause20.getTree());

            pushFollow(FOLLOW_implementsClause_in_classDefinition1008);
            implementsClause21=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause21.getTree());

            pushFollow(FOLLOW_braceOpen_in_classDefinition1012);
            braceOpen22=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen22.getTree());

            pushFollow(FOLLOW_classFeatureList_in_classDefinition1014);
            classFeatureList23=classFeatureList(name);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFeatureList.add(classFeatureList23.getTree());

            pushFollow(FOLLOW_braceClose_in_classDefinition1017);
            braceClose24=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose24.getTree());

            // AST REWRITE
            // elements: IDENT, extendsClause, classFeatureList, implementsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 428:3: -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:428:6: ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Class(D_CLASS, "D_CLASS", ti.getUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_classFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               	ti = tl.remove(tl.size()-1);
               	if (tl.size() > 0)
               	  ti = tl.get(tl.size()-1);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, classDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classDefinition"


    public static class classFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:431:1: classFeatureList[String n] : ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy ) ;
    public final pollenParser.classFeatureList_return classFeatureList(String n) throws RecognitionException {
        pollenParser.classFeatureList_return retval = new pollenParser.classFeatureList_return();
        retval.start = input.LT(1);

        int classFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.classFeature_return classFeature25 =null;

        pollenParser.classHostCtor_return classHostCtor26 =null;

        pollenParser.classTargCtor_return classTargCtor27 =null;

        pollenParser.intrinsicUnitName_return intrinsicUnitName28 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy29 =null;


        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");
        RewriteRuleSubtreeStream stream_classTargCtor=new RewriteRuleSubtreeStream(adaptor,"rule classTargCtor");
        RewriteRuleSubtreeStream stream_classFeature=new RewriteRuleSubtreeStream(adaptor,"rule classFeature");
        RewriteRuleSubtreeStream stream_intrinsicUnitName=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicUnitName");
        RewriteRuleSubtreeStream stream_classHostCtor=new RewriteRuleSubtreeStream(adaptor,"rule classHostCtor");

          EnumSet<Flags> fh = EnumSet.noneOf(Flags.class);
          fh.add(Flags.CONSTRUCTOR); fh.add(Flags.HOST);
          EnumSet<Flags> ft = EnumSet.noneOf(Flags.class);
          ft.add(Flags.CONSTRUCTOR); 

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:438:2: ( ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:438:4: ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:438:4: ( classFeature )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==IDENT||LA4_0==INJECT||LA4_0==127||LA4_0==142||LA4_0==144||LA4_0==146||LA4_0==148||LA4_0==154||LA4_0==161||(LA4_0 >= 165 && LA4_0 <= 167)||LA4_0==171||LA4_0==175||LA4_0==179||LA4_0==181||(LA4_0 >= 185 && LA4_0 <= 188)) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:438:4: classFeature
            	    {
            	    pushFollow(FOLLOW_classFeature_in_classFeatureList1062);
            	    classFeature25=classFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFeature.add(classFeature25.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            pushFollow(FOLLOW_classHostCtor_in_classFeatureList1065);
            classHostCtor26=classHostCtor(fh);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classHostCtor.add(classHostCtor26.getTree());

            pushFollow(FOLLOW_classTargCtor_in_classFeatureList1068);
            classTargCtor27=classTargCtor(ft);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classTargCtor.add(classTargCtor27.getTree());

            pushFollow(FOLLOW_intrinsicUnitName_in_classFeatureList1072);
            intrinsicUnitName28=intrinsicUnitName(n);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicUnitName.add(intrinsicUnitName28.getTree());

            pushFollow(FOLLOW_intrinsicPrintProxy_in_classFeatureList1075);
            intrinsicPrintProxy29=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy29.getTree());

            // AST REWRITE
            // elements: classHostCtor, classFeature, intrinsicUnitName, classTargCtor, intrinsicPrintProxy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 439:4: -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:7: ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:440:9: ( classFeature )*
                while ( stream_classFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFeature.nextTree());

                }
                stream_classFeature.reset();

                adaptor.addChild(root_1, stream_classHostCtor.nextTree());

                adaptor.addChild(root_1, stream_classTargCtor.nextTree());

                adaptor.addChild(root_1, stream_intrinsicUnitName.nextTree());

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, classFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeatureList"


    public static class classFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:446:1: classFeature : ( fcnDefinition | enumDefinition | fieldDeclaration | classDefinition | injectionDecl );
    public final pollenParser.classFeature_return classFeature() throws RecognitionException {
        pollenParser.classFeature_return retval = new pollenParser.classFeature_return();
        retval.start = input.LT(1);

        int classFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition30 =null;

        pollenParser.enumDefinition_return enumDefinition31 =null;

        pollenParser.fieldDeclaration_return fieldDeclaration32 =null;

        pollenParser.classDefinition_return classDefinition33 =null;

        pollenParser.injectionDecl_return injectionDecl34 =null;




        	featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:450:5: ( fcnDefinition | enumDefinition | fieldDeclaration | classDefinition | injectionDecl )
            int alt5=5;
            switch ( input.LA(1) ) {
            case IDENT:
            case 127:
            case 142:
            case 144:
            case 161:
            case 165:
            case 166:
            case 167:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA5_1 = input.LA(2);

                if ( (synpred5_pollen()) ) {
                    alt5=1;
                }
                else if ( (synpred7_pollen()) ) {
                    alt5=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 5, 1, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                alt5=2;
                }
                break;
            case 175:
            case 179:
                {
                alt5=1;
                }
                break;
            case 148:
            case 171:
            case 188:
                {
                alt5=3;
                }
                break;
            case 146:
                {
                alt5=4;
                }
                break;
            case INJECT:
                {
                alt5=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:450:9: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_classFeature1161);
                    fcnDefinition30=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition30.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:451:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_classFeature1172);
                    enumDefinition31=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition31.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:452:9: fieldDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fieldDeclaration_in_classFeature1182);
                    fieldDeclaration32=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration32.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:453:9: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_classFeature1192);
                    classDefinition33=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition33.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:454:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_classFeature1202);
                    injectionDecl34=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, classFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeature"


    public static class classHostCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classHostCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:457:1: classHostCtor[EnumSet<Flags> fh] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.classHostCtor_return classHostCtor(EnumSet<Flags> fh) throws RecognitionException {
        pollenParser.classHostCtor_return retval = new pollenParser.classHostCtor_return();
        retval.start = input.LT(1);

        int classHostCtor_StartIndex = input.index();

        BaseNode root_0 = null;


        	featureFlags = fh.clone();	
        	if (!hasHostConstructor) {
        		fh.add(Flags.PUBLIC);
        		fh.add(Flags.CONSTRUCTOR);
        	}
        	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:466:2: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==NL) ) {
                int LA6_1 = input.LA(2);

                if ( (((synpred9_pollen()&&synpred9_pollen())&&(!hasHostConstructor ))) ) {
                    alt6=1;
                }
                else if ( (true) ) {
                    alt6=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA6_0==193) ) {
                int LA6_2 = input.LA(2);

                if ( (((synpred9_pollen()&&synpred9_pollen())&&(!hasHostConstructor ))) ) {
                    alt6=1;
                }
                else if ( (true) ) {
                    alt6=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:466:5: {...}?
                    {
                    if ( !((!hasHostConstructor )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "classHostCtor", "!hasHostConstructor ");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 466:29: -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:467:4: ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", fh)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:468:4: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:469:5: ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", fh)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:470:6: ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:470:31: ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_CLASS_HOST)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:472:4: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:473:4: ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", fh)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:5: ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:476:4: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:476:35: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:476:61: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 478:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, classHostCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classHostCtor"


    public static class classTargCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classTargCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:480:1: classTargCtor[EnumSet<Flags> ft] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.classTargCtor_return classTargCtor(EnumSet<Flags> ft) throws RecognitionException {
        pollenParser.classTargCtor_return retval = new pollenParser.classTargCtor_return();
        retval.start = input.LT(1);

        int classTargCtor_StartIndex = input.index();

        BaseNode root_0 = null;


        	featureFlags = ft.clone();
        	if (!hasTargetConstructor) {
        		ft.add(Flags.PUBLIC);
        		ft.add(Flags.CONSTRUCTOR);
        	}

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:488:2: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==NL) ) {
                int LA7_1 = input.LA(2);

                if ( (((synpred10_pollen()&&synpred10_pollen())&&(!hasTargetConstructor))) ) {
                    alt7=1;
                }
                else if ( (true) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==193) ) {
                int LA7_2 = input.LA(2);

                if ( (((synpred10_pollen()&&synpred10_pollen())&&(!hasTargetConstructor))) ) {
                    alt7=1;
                }
                else if ( (true) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:488:4: {...}?
                    {
                    if ( !((!hasTargetConstructor)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "classTargCtor", "!hasTargetConstructor");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 488:29: -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:489:5: ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", ft)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:490:5: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:491:6: ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", ft)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:492:7: ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:492:32: ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_CLASS_TARGET)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:494:5: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:495:5: ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", ft)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:496:6: ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:498:5: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:498:36: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:498:62: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:500:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 500:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, classTargCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classTargCtor"


    public static class moduleDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:502:1: moduleDefinition : 'module' IDENT extendsClause implementsClause braceOpen moduleFeatureList[name] braceClose -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause ) ;
    public final pollenParser.moduleDefinition_return moduleDefinition() throws RecognitionException {
        pollenParser.moduleDefinition_return retval = new pollenParser.moduleDefinition_return();
        retval.start = input.LT(1);

        int moduleDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal35=null;
        Atom IDENT36=null;
        pollenParser.extendsClause_return extendsClause37 =null;

        pollenParser.implementsClause_return implementsClause38 =null;

        pollenParser.braceOpen_return braceOpen39 =null;

        pollenParser.moduleFeatureList_return moduleFeatureList40 =null;

        pollenParser.braceClose_return braceClose41 =null;


        BaseNode string_literal35_tree=null;
        BaseNode IDENT36_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_moduleFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        		ti = new TypeInfo();
        		ti.setUnitFlags(metaFlags); 
        		metaFlags = EnumSet.noneOf(Flags.class);		
        		tl.add(ti);		
        		String qual = "";
        		String name = "";
        		hasHostConstructor = false;
        		hasTargetConstructor = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:518:2: ( 'module' IDENT extendsClause implementsClause braceOpen moduleFeatureList[name] braceClose -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:518:7: 'module' IDENT extendsClause implementsClause braceOpen moduleFeatureList[name] braceClose
            {
            string_literal35=(Atom)match(input,170,FOLLOW_170_in_moduleDefinition1622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal35);


            IDENT36=(Atom)match(input,IDENT,FOLLOW_IDENT_in_moduleDefinition1624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT36);


            if ( state.backtracking==0 ) { 
            	      	ti.setTypeName((IDENT36!=null?IDENT36.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.MODULE));
            	      	if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
            	      		// if there is an 'as' name in the instantiating context, qualify the unit name 
            	      		qual = clientImport.getAs().getText();
            	      	}
            	      	name = qual.isEmpty() ? ti.getTypeName() : qual;
            	      }

            pushFollow(FOLLOW_extendsClause_in_moduleDefinition1642);
            extendsClause37=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause37.getTree());

            pushFollow(FOLLOW_implementsClause_in_moduleDefinition1651);
            implementsClause38=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause38.getTree());

            pushFollow(FOLLOW_braceOpen_in_moduleDefinition1656);
            braceOpen39=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen39.getTree());

            pushFollow(FOLLOW_moduleFeatureList_in_moduleDefinition1658);
            moduleFeatureList40=moduleFeatureList(name);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleFeatureList.add(moduleFeatureList40.getTree());

            pushFollow(FOLLOW_braceClose_in_moduleDefinition1661);
            braceClose41=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose41.getTree());

            // AST REWRITE
            // elements: extendsClause, implementsClause, moduleFeatureList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 530:4: -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:530:7: ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_MODULE, "D_MODULE", ti.getUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_moduleFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               	ti = tl.remove(tl.size()-1);
               	if (tl.size() > 0)
               	  ti = tl.get(tl.size()-1);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, moduleDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleDefinition"


    public static class moduleFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:533:1: moduleFeatureList[String n] : ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy ) ;
    public final pollenParser.moduleFeatureList_return moduleFeatureList(String n) throws RecognitionException {
        pollenParser.moduleFeatureList_return retval = new pollenParser.moduleFeatureList_return();
        retval.start = input.LT(1);

        int moduleFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.moduleFeature_return moduleFeature42 =null;

        pollenParser.moduleHostCtor_return moduleHostCtor43 =null;

        pollenParser.moduleTargCtor_return moduleTargCtor44 =null;

        pollenParser.intrinsicUnitName_return intrinsicUnitName45 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy46 =null;


        RewriteRuleSubtreeStream stream_moduleHostCtor=new RewriteRuleSubtreeStream(adaptor,"rule moduleHostCtor");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");
        RewriteRuleSubtreeStream stream_intrinsicUnitName=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicUnitName");
        RewriteRuleSubtreeStream stream_moduleTargCtor=new RewriteRuleSubtreeStream(adaptor,"rule moduleTargCtor");
        RewriteRuleSubtreeStream stream_moduleFeature=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeature");

          	EnumSet<Flags> fh = EnumSet.noneOf(Flags.class);
          	fh.add(Flags.CONSTRUCTOR); fh.add(Flags.HOST);
          	EnumSet<Flags> ft = EnumSet.noneOf(Flags.class);
          	ft.add(Flags.CONSTRUCTOR); 

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:2: ( ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:4: ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:4: ( moduleFeature )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==IDENT||LA8_0==INJECT||LA8_0==127||LA8_0==142||LA8_0==144||LA8_0==146||LA8_0==148||LA8_0==154||LA8_0==161||(LA8_0 >= 165 && LA8_0 <= 167)||LA8_0==171||LA8_0==175||LA8_0==179||LA8_0==181||(LA8_0 >= 185 && LA8_0 <= 188)) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:4: moduleFeature
            	    {
            	    pushFollow(FOLLOW_moduleFeature_in_moduleFeatureList1707);
            	    moduleFeature42=moduleFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_moduleFeature.add(moduleFeature42.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            pushFollow(FOLLOW_moduleHostCtor_in_moduleFeatureList1710);
            moduleHostCtor43=moduleHostCtor(fh);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleHostCtor.add(moduleHostCtor43.getTree());

            pushFollow(FOLLOW_moduleTargCtor_in_moduleFeatureList1713);
            moduleTargCtor44=moduleTargCtor(ft);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleTargCtor.add(moduleTargCtor44.getTree());

            pushFollow(FOLLOW_intrinsicUnitName_in_moduleFeatureList1716);
            intrinsicUnitName45=intrinsicUnitName(n);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicUnitName.add(intrinsicUnitName45.getTree());

            pushFollow(FOLLOW_intrinsicPrintProxy_in_moduleFeatureList1719);
            intrinsicPrintProxy46=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy46.getTree());

            // AST REWRITE
            // elements: intrinsicUnitName, moduleFeature, moduleTargCtor, intrinsicPrintProxy, moduleHostCtor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 541:4: -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:541:7: ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:542:5: ( moduleFeature )*
                while ( stream_moduleFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_moduleFeature.nextTree());

                }
                stream_moduleFeature.reset();

                adaptor.addChild(root_1, stream_moduleHostCtor.nextTree());

                adaptor.addChild(root_1, stream_moduleTargCtor.nextTree());

                adaptor.addChild(root_1, stream_intrinsicUnitName.nextTree());

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, moduleFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeatureList"


    public static class intrinsicPrintProxy_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicPrintProxy"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:549:1: intrinsicPrintProxy : ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) ) | -> NIL );
    public final pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy() throws RecognitionException {
        pollenParser.intrinsicPrintProxy_return retval = new pollenParser.intrinsicPrintProxy_return();
        retval.start = input.LT(1);

        int intrinsicPrintProxy_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:2: ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) ) | -> NIL )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==NL) ) {
                int LA9_1 = input.LA(2);

                if ( (((synpred12_pollen()&&synpred12_pollen())&&(ProcessUnits.doEmitPrintProxy()))) ) {
                    alt9=1;
                }
                else if ( (true) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA9_0==193) ) {
                int LA9_2 = input.LA(2);

                if ( (((synpred12_pollen()&&synpred12_pollen())&&(ProcessUnits.doEmitPrintProxy()))) ) {
                    alt9=1;
                }
                else if ( (true) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:4: {...}?
                    {
                    if ( !((ProcessUnits.doEmitPrintProxy())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicPrintProxy", "ProcessUnits.doEmitPrintProxy()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 551:4: -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:551:7: ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER))
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:5: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROXY)
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:556:6: ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Typ(E_TYP, "E_TYP")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:557:7: ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.noneOf(Flags.class))
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenPrint())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:561:6: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 561:6: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, intrinsicPrintProxy_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "intrinsicPrintProxy"


    public static class intrinsicUnitName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicUnitName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:567:1: intrinsicUnitName[String n] : ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) ) | -> NIL );
    public final pollenParser.intrinsicUnitName_return intrinsicUnitName(String n) throws RecognitionException {
        pollenParser.intrinsicUnitName_return retval = new pollenParser.intrinsicUnitName_return();
        retval.start = input.LT(1);

        int intrinsicUnitName_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:2: ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) ) | -> NIL )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==NL) ) {
                int LA10_1 = input.LA(2);

                if ( (((synpred13_pollen()&&synpred13_pollen())&&(true))) ) {
                    alt10=1;
                }
                else if ( (true) ) {
                    alt10=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 10, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA10_0==193) ) {
                int LA10_2 = input.LA(2);

                if ( (((synpred13_pollen()&&synpred13_pollen())&&(true))) ) {
                    alt10=1;
                }
                else if ( (true) ) {
                    alt10=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 10, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }
            switch (alt10) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:4: {...}?
                    {
                    if ( !((true)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicUnitName", "true");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 568:12: -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:15: ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:569:6: ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(QNAME, "string")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_UNITVAR)
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:573:6: ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", EnumSet.of(LitFlags.STR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(STRING, "\"" + n + "\"")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:6: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 577:6: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, intrinsicUnitName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "intrinsicUnitName"


    public static class moduleHostCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleHostCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:1: moduleHostCtor[EnumSet<Flags> fh] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.moduleHostCtor_return moduleHostCtor(EnumSet<Flags> fh) throws RecognitionException {
        pollenParser.moduleHostCtor_return retval = new pollenParser.moduleHostCtor_return();
        retval.start = input.LT(1);

        int moduleHostCtor_StartIndex = input.index();

        BaseNode root_0 = null;


        	featureFlags = fh.clone();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:583:2: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==NL) ) {
                int LA11_1 = input.LA(2);

                if ( (((synpred14_pollen()&&synpred14_pollen())&&(!hasHostConstructor ))) ) {
                    alt11=1;
                }
                else if ( (true) ) {
                    alt11=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 11, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA11_0==193) ) {
                int LA11_2 = input.LA(2);

                if ( (((synpred14_pollen()&&synpred14_pollen())&&(!hasHostConstructor ))) ) {
                    alt11=1;
                }
                else if ( (true) ) {
                    alt11=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 11, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;

            }
            switch (alt11) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:583:8: {...}?
                    {
                    if ( !((!hasHostConstructor )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "moduleHostCtor", "!hasHostConstructor ");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 583:32: -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:7: ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", fh)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:585:7: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:586:8: ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", fh)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:587:9: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:587:34: ^( T_STD[\"T_STD\", fh] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", fh)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_MODULE_HOST)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:589:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:590:7: ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", fh)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:591:8: ^( T_USR[\"T_USR\", fh] IDENT[ti.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:7: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:38: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:64: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:594:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 594:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, moduleHostCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleHostCtor"


    public static class moduleTargCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleTargCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:596:1: moduleTargCtor[EnumSet<Flags> ft] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.moduleTargCtor_return moduleTargCtor(EnumSet<Flags> ft) throws RecognitionException {
        pollenParser.moduleTargCtor_return retval = new pollenParser.moduleTargCtor_return();
        retval.start = input.LT(1);

        int moduleTargCtor_StartIndex = input.index();

        BaseNode root_0 = null;


        	featureFlags = ft.clone();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:2: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==NL) ) {
                int LA12_1 = input.LA(2);

                if ( (((synpred15_pollen()&&synpred15_pollen())&&(!hasTargetConstructor))) ) {
                    alt12=1;
                }
                else if ( (true) ) {
                    alt12=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA12_0==193) ) {
                int LA12_2 = input.LA(2);

                if ( (((synpred15_pollen()&&synpred15_pollen())&&(!hasTargetConstructor))) ) {
                    alt12=1;
                }
                else if ( (true) ) {
                    alt12=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:7: {...}?
                    {
                    if ( !((!hasTargetConstructor)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "moduleTargCtor", "!hasTargetConstructor");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 600:32: -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:601:8: ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", ft)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:602:7: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:603:8: ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", ft)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:604:9: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:604:34: ^( T_STD[\"T_STD\", ft] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", ft)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_MODULE_TARGET)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:606:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:607:7: ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", ft)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:608:8: ^( T_USR[\"T_USR\", ft] IDENT[ti.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:7: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:38: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:64: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:612:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 612:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, moduleTargCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleTargCtor"


    public static class moduleFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:614:1: moduleFeature : ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl );
    public final pollenParser.moduleFeature_return moduleFeature() throws RecognitionException {
        pollenParser.moduleFeature_return retval = new pollenParser.moduleFeature_return();
        retval.start = input.LT(1);

        int moduleFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition47 =null;

        pollenParser.varDeclaration_return varDeclaration48 =null;

        pollenParser.enumDefinition_return enumDefinition49 =null;

        pollenParser.classDefinition_return classDefinition50 =null;

        pollenParser.injectionDecl_return injectionDecl51 =null;




        	featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:2: ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl )
            int alt13=5;
            switch ( input.LA(1) ) {
            case IDENT:
            case 127:
            case 142:
            case 144:
            case 161:
            case 165:
            case 166:
            case 167:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA13_1 = input.LA(2);

                if ( (synpred16_pollen()) ) {
                    alt13=1;
                }
                else if ( (synpred17_pollen()) ) {
                    alt13=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
                }
                break;
            case 175:
            case 179:
                {
                alt13=1;
                }
                break;
            case 148:
            case 171:
            case 188:
                {
                alt13=2;
                }
                break;
            case 154:
                {
                alt13=3;
                }
                break;
            case 146:
                {
                alt13=4;
                }
                break;
            case INJECT:
                {
                alt13=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:6: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_moduleFeature2527);
                    fcnDefinition47=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition47.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:9: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_moduleFeature2537);
                    varDeclaration48=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration48.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:620:6: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_moduleFeature2544);
                    enumDefinition49=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition49.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:621:6: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_moduleFeature2551);
                    classDefinition50=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition50.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:622:6: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_moduleFeature2558);
                    injectionDecl51=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, moduleFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeature"


    protected static class enumDefinition_scope {
        int val;
    }
    protected Stack enumDefinition_stack = new Stack();


    public static class enumDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:637:1: enumDefinition : 'enum' ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags(), qual] IDENT enumList ) ;
    public final pollenParser.enumDefinition_return enumDefinition() throws RecognitionException {
        enumDefinition_stack.push(new enumDefinition_scope());
        pollenParser.enumDefinition_return retval = new pollenParser.enumDefinition_return();
        retval.start = input.LT(1);

        int enumDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal52=null;
        Atom IDENT53=null;
        pollenParser.braceOpen_return braceOpen54 =null;

        pollenParser.enumList_return enumList55 =null;

        pollenParser.braceClose_return braceClose56 =null;


        BaseNode string_literal52_tree=null;
        BaseNode IDENT53_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_enumList=new RewriteRuleSubtreeStream(adaptor,"rule enumList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

                                ((enumDefinition_scope)enumDefinition_stack.peek()).val = -1;
        		ti = new TypeInfo();
        		ti.setUnitFlags(metaFlags); 
        		metaFlags = EnumSet.noneOf(Flags.class);		
        		tl.add(ti);		
        		String qual = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:654:2: ( 'enum' ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags(), qual] IDENT enumList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:654:5: 'enum' ( IDENT braceOpen enumList braceClose )
            {
            string_literal52=(Atom)match(input,154,FOLLOW_154_in_enumDefinition2591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal52);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:654:11: ( IDENT braceOpen enumList braceClose )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:654:12: IDENT braceOpen enumList braceClose
            {
            IDENT53=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumDefinition2593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT53);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT53!=null?IDENT53.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.ENUM));
            			if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
            	      	// if there is an 'as' name in the instantiating context, qualify the unit name 
            	      	qual = clientImport.getAs().getText();
            	      }
            		}

            pushFollow(FOLLOW_braceOpen_in_enumDefinition2602);
            braceOpen54=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen54.getTree());

            pushFollow(FOLLOW_enumList_in_enumDefinition2604);
            enumList55=enumList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumList.add(enumList55.getTree());

            pushFollow(FOLLOW_braceClose_in_enumDefinition2606);
            braceClose56=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose56.getTree());

            }


            // AST REWRITE
            // elements: enumList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 662:3: -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags(), qual] IDENT enumList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:6: ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags(), qual] IDENT enumList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_ENUM, "D_ENUM", ti.getUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_enumList.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               	ti = tl.remove(tl.size()-1);
               	if (tl.size() > 0)
               	  ti = tl.get(tl.size()-1);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, enumDefinition_StartIndex); }

            enumDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "enumDefinition"


    public static class enumList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:665:1: enumList : enumElement ( ',' ( delim )? enumElement )* -> ^( LIST[\"LIST\"] ( enumElement )+ ) ;
    public final pollenParser.enumList_return enumList() throws RecognitionException {
        pollenParser.enumList_return retval = new pollenParser.enumList_return();
        retval.start = input.LT(1);

        int enumList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal58=null;
        pollenParser.enumElement_return enumElement57 =null;

        pollenParser.delim_return delim59 =null;

        pollenParser.enumElement_return enumElement60 =null;


        BaseNode char_literal58_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_enumElement=new RewriteRuleSubtreeStream(adaptor,"rule enumElement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:2: ( enumElement ( ',' ( delim )? enumElement )* -> ^( LIST[\"LIST\"] ( enumElement )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:4: enumElement ( ',' ( delim )? enumElement )*
            {
            pushFollow(FOLLOW_enumElement_in_enumList2642);
            enumElement57=enumElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumElement.add(enumElement57.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:16: ( ',' ( delim )? enumElement )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==130) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:17: ',' ( delim )? enumElement
            	    {
            	    char_literal58=(Atom)match(input,130,FOLLOW_130_in_enumList2645); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal58);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:21: ( delim )?
            	    int alt14=2;
            	    int LA14_0 = input.LA(1);

            	    if ( (LA14_0==NL||LA14_0==SEMI) ) {
            	        alt14=1;
            	    }
            	    else if ( (LA14_0==IDENT) ) {
            	        int LA14_3 = input.LA(2);

            	        if ( (synpred20_pollen()) ) {
            	            alt14=1;
            	        }
            	    }
            	    switch (alt14) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:22: delim
            	            {
            	            pushFollow(FOLLOW_delim_in_enumList2648);
            	            delim59=delim();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_delim.add(delim59.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_enumElement_in_enumList2652);
            	    enumElement60=enumElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumElement.add(enumElement60.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            // AST REWRITE
            // elements: enumElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 666:44: -> ^( LIST[\"LIST\"] ( enumElement )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:47: ^( LIST[\"LIST\"] ( enumElement )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_enumElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, enumList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumList"


    public static class enumElement_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumElement"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:1: enumElement : ( IDENT ASSIGN INT_LIT -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT ) | IDENT -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT[ctext] ) );
    public final pollenParser.enumElement_return enumElement() throws RecognitionException {
        pollenParser.enumElement_return retval = new pollenParser.enumElement_return();
        retval.start = input.LT(1);

        int enumElement_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT61=null;
        Atom ASSIGN62=null;
        Atom INT_LIT63=null;
        Atom IDENT64=null;

        BaseNode IDENT61_tree=null;
        BaseNode ASSIGN62_tree=null;
        BaseNode INT_LIT63_tree=null;
        BaseNode IDENT64_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");


        	String ctext = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:673:2: ( IDENT ASSIGN INT_LIT -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT ) | IDENT -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT[ctext] ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==IDENT) ) {
                int LA16_1 = input.LA(2);

                if ( (synpred22_pollen()) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:673:4: IDENT ASSIGN INT_LIT
                    {
                    IDENT61=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement2683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT61);


                    ASSIGN62=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_enumElement2685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN62);


                    INT_LIT63=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_enumElement2687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT63);


                    if ( state.backtracking==0 ) { ((enumDefinition_scope)enumDefinition_stack.peek()).val = Integer.valueOf((INT_LIT63!=null?INT_LIT63.getText():null)); 
                    			   ((enumDefinition_scope)enumDefinition_stack.peek()).val++; 	}

                    // AST REWRITE
                    // elements: INT_LIT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 676:4: -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:676:7: ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", ti.getUnitFlags())
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, 
                        stream_INT_LIT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:677:4: IDENT
                    {
                    IDENT64=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement2718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT64);


                    if ( state.backtracking==0 ) { 
                    			  if (((enumDefinition_scope)enumDefinition_stack.peek()).val == -1) ((enumDefinition_scope)enumDefinition_stack.peek()).val = 0; 
                    			  ctext = Integer.toString(((enumDefinition_scope)enumDefinition_stack.peek()).val++);
                    			}

                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 682:4: -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT[ctext] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:682:7: ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] IDENT INT_LIT[ctext] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", ti.getUnitFlags())
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(INT_LIT, ctext)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, enumElement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumElement"


    public static class protocolDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:1: protocolDefinition : 'protocol' IDENT extendsClause implementsClause braceOpen protocolFeatureList braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause ) ;
    public final pollenParser.protocolDefinition_return protocolDefinition() throws RecognitionException {
        pollenParser.protocolDefinition_return retval = new pollenParser.protocolDefinition_return();
        retval.start = input.LT(1);

        int protocolDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal65=null;
        Atom IDENT66=null;
        pollenParser.extendsClause_return extendsClause67 =null;

        pollenParser.implementsClause_return implementsClause68 =null;

        pollenParser.braceOpen_return braceOpen69 =null;

        pollenParser.protocolFeatureList_return protocolFeatureList70 =null;

        pollenParser.braceClose_return braceClose71 =null;


        BaseNode string_literal65_tree=null;
        BaseNode IDENT66_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_protocolFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        		ti = new TypeInfo();
        		ti.setUnitFlags(metaFlags); 
        		metaFlags = EnumSet.noneOf(Flags.class);		
        		tl.add(ti);		
        		String qual = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:2: ( 'protocol' IDENT extendsClause implementsClause braceOpen protocolFeatureList braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:4: 'protocol' IDENT extendsClause implementsClause braceOpen protocolFeatureList braceClose
            {
            string_literal65=(Atom)match(input,177,FOLLOW_177_in_protocolDefinition2762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal65);


            IDENT66=(Atom)match(input,IDENT,FOLLOW_IDENT_in_protocolDefinition2764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT66);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT66!=null?IDENT66.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.PROTOCOL));
            			if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
            	      	// if there is an 'as' name in the instantiating context, qualify the unit name 
            	      	qual = clientImport.getAs().getText();
            	      }
            		}

            pushFollow(FOLLOW_extendsClause_in_protocolDefinition2772);
            extendsClause67=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause67.getTree());

            pushFollow(FOLLOW_implementsClause_in_protocolDefinition2776);
            implementsClause68=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause68.getTree());

            pushFollow(FOLLOW_braceOpen_in_protocolDefinition2780);
            braceOpen69=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen69.getTree());

            pushFollow(FOLLOW_protocolFeatureList_in_protocolDefinition2782);
            protocolFeatureList70=protocolFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocolFeatureList.add(protocolFeatureList70.getTree());

            pushFollow(FOLLOW_braceClose_in_protocolDefinition2784);
            braceClose71=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose71.getTree());

            // AST REWRITE
            // elements: implementsClause, IDENT, extendsClause, protocolFeatureList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 707:3: -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:6: ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_PROTOCOL, "D_PROTOCOL", ti.getUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_protocolFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               	ti = tl.remove(tl.size()-1);
               	if (tl.size() > 0)
               	  ti = tl.get(tl.size()-1);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, protocolDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolDefinition"


    public static class protocolFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:710:1: protocolFeatureList : ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) ;
    public final pollenParser.protocolFeatureList_return protocolFeatureList() throws RecognitionException {
        pollenParser.protocolFeatureList_return retval = new pollenParser.protocolFeatureList_return();
        retval.start = input.LT(1);

        int protocolFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.protocolFeature_return protocolFeature72 =null;


        RewriteRuleSubtreeStream stream_protocolFeature=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:2: ( ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:4: ( protocolFeature )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:4: ( protocolFeature )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==IDENT||LA17_0==INJECT||LA17_0==127||LA17_0==142||LA17_0==144||LA17_0==154||LA17_0==161||(LA17_0 >= 165 && LA17_0 <= 167)||LA17_0==175||LA17_0==179||LA17_0==181||(LA17_0 >= 185 && LA17_0 <= 187)) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:4: protocolFeature
            	    {
            	    pushFollow(FOLLOW_protocolFeature_in_protocolFeatureList2824);
            	    protocolFeature72=protocolFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protocolFeature.add(protocolFeature72.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            // AST REWRITE
            // elements: protocolFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 711:21: -> ^( LIST[\"LIST\"] ( protocolFeature )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:24: ^( LIST[\"LIST\"] ( protocolFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:49: ( protocolFeature )*
                while ( stream_protocolFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_protocolFeature.nextTree());

                }
                stream_protocolFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, protocolFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeatureList"


    public static class protocolFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:713:1: protocolFeature : ( enumDefinition | fcnDeclaration | injectionDecl );
    public final pollenParser.protocolFeature_return protocolFeature() throws RecognitionException {
        pollenParser.protocolFeature_return retval = new pollenParser.protocolFeature_return();
        retval.start = input.LT(1);

        int protocolFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.enumDefinition_return enumDefinition73 =null;

        pollenParser.fcnDeclaration_return fcnDeclaration74 =null;

        pollenParser.injectionDecl_return injectionDecl75 =null;




        	featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:5: ( enumDefinition | fcnDeclaration | injectionDecl )
            int alt18=3;
            switch ( input.LA(1) ) {
            case 154:
                {
                alt18=1;
                }
                break;
            case IDENT:
            case 127:
            case 142:
            case 144:
            case 161:
            case 165:
            case 166:
            case 167:
            case 175:
            case 179:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt18=2;
                }
                break;
            case INJECT:
                {
                alt18=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }

            switch (alt18) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_protocolFeature2858);
                    enumDefinition73=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition73.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:718:9: fcnDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDeclaration_in_protocolFeature2868);
                    fcnDeclaration74=fcnDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDeclaration74.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:719:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_protocolFeature2879);
                    injectionDecl75=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl75.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, protocolFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeature"


    public static class compositionDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:721:1: compositionDefinition : 'composition' IDENT extendsClause implementsClause braceOpen compositionFeatureList braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause ) ;
    public final pollenParser.compositionDefinition_return compositionDefinition() throws RecognitionException {
        pollenParser.compositionDefinition_return retval = new pollenParser.compositionDefinition_return();
        retval.start = input.LT(1);

        int compositionDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal76=null;
        Atom IDENT77=null;
        pollenParser.extendsClause_return extendsClause78 =null;

        pollenParser.implementsClause_return implementsClause79 =null;

        pollenParser.braceOpen_return braceOpen80 =null;

        pollenParser.compositionFeatureList_return compositionFeatureList81 =null;

        pollenParser.braceClose_return braceClose82 =null;


        BaseNode string_literal76_tree=null;
        BaseNode IDENT77_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_compositionFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        		ti = new TypeInfo();
        		ti.setUnitFlags(metaFlags); 
        		metaFlags = EnumSet.noneOf(Flags.class);		
        		tl.add(ti);		
        		String qual = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:2: ( 'composition' IDENT extendsClause implementsClause braceOpen compositionFeatureList braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:4: 'composition' IDENT extendsClause implementsClause braceOpen compositionFeatureList braceClose
            {
            string_literal76=(Atom)match(input,147,FOLLOW_147_in_compositionDefinition2900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal76);


            IDENT77=(Atom)match(input,IDENT,FOLLOW_IDENT_in_compositionDefinition2902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT77);


            if ( state.backtracking==0 ) { 
            		  ti.setTypeName((IDENT77!=null?IDENT77.getText():null)); 
            		  ti.setUnitFlags(EnumSet.of(Flags.COMPOSITION));
            		  if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
            	      	// if there is an 'as' name in the instantiating context, qualify the unit name 
            	      	qual = clientImport.getAs().getText();
            	      }		  
            		}

            pushFollow(FOLLOW_extendsClause_in_compositionDefinition2910);
            extendsClause78=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause78.getTree());

            pushFollow(FOLLOW_implementsClause_in_compositionDefinition2916);
            implementsClause79=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause79.getTree());

            pushFollow(FOLLOW_braceOpen_in_compositionDefinition2920);
            braceOpen80=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen80.getTree());

            pushFollow(FOLLOW_compositionFeatureList_in_compositionDefinition2922);
            compositionFeatureList81=compositionFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compositionFeatureList.add(compositionFeatureList81.getTree());

            pushFollow(FOLLOW_braceClose_in_compositionDefinition2924);
            braceClose82=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose82.getTree());

            // AST REWRITE
            // elements: implementsClause, extendsClause, compositionFeatureList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 746:4: -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:746:7: ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_COMPOSITION, "D_COMPOSITION", ti.getUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_compositionFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               	ti = tl.remove(tl.size()-1);
               	if (tl.size() > 0)
               	  ti = tl.get(tl.size()-1);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, compositionDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionDefinition"


    public static class compositionFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:749:1: compositionFeatureList : ( compositionFeature )* -> ^( LIST[\"LIST\"] ( compositionFeature )* ) ;
    public final pollenParser.compositionFeatureList_return compositionFeatureList() throws RecognitionException {
        pollenParser.compositionFeatureList_return retval = new pollenParser.compositionFeatureList_return();
        retval.start = input.LT(1);

        int compositionFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.compositionFeature_return compositionFeature83 =null;


        RewriteRuleSubtreeStream stream_compositionFeature=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:2: ( ( compositionFeature )* -> ^( LIST[\"LIST\"] ( compositionFeature )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:4: ( compositionFeature )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:4: ( compositionFeature )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==IDENT||LA19_0==INJECT||LA19_0==127||LA19_0==142||LA19_0==144||LA19_0==148||LA19_0==154||LA19_0==156||LA19_0==161||(LA19_0 >= 165 && LA19_0 <= 167)||LA19_0==171||LA19_0==175||LA19_0==179||LA19_0==181||(LA19_0 >= 185 && LA19_0 <= 188)) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:4: compositionFeature
            	    {
            	    pushFollow(FOLLOW_compositionFeature_in_compositionFeatureList2970);
            	    compositionFeature83=compositionFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compositionFeature.add(compositionFeature83.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // AST REWRITE
            // elements: compositionFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 750:24: -> ^( LIST[\"LIST\"] ( compositionFeature )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:27: ^( LIST[\"LIST\"] ( compositionFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:52: ( compositionFeature )*
                while ( stream_compositionFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_compositionFeature.nextTree());

                }
                stream_compositionFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, compositionFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeatureList"


    public static class compositionFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:752:1: compositionFeature : ( stmtExport | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl );
    public final pollenParser.compositionFeature_return compositionFeature() throws RecognitionException {
        pollenParser.compositionFeature_return retval = new pollenParser.compositionFeature_return();
        retval.start = input.LT(1);

        int compositionFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtExport_return stmtExport84 =null;

        pollenParser.fcnDefinitionHost_return fcnDefinitionHost85 =null;

        pollenParser.enumDefinition_return enumDefinition86 =null;

        pollenParser.varDeclaration_return varDeclaration87 =null;

        pollenParser.injectionDecl_return injectionDecl88 =null;




        	featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:756:3: ( stmtExport | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl )
            int alt20=5;
            switch ( input.LA(1) ) {
            case 156:
                {
                alt20=1;
                }
                break;
            case IDENT:
            case 127:
            case 142:
            case 144:
            case 161:
            case 165:
            case 166:
            case 167:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA20_2 = input.LA(2);

                if ( (synpred28_pollen()) ) {
                    alt20=2;
                }
                else if ( (synpred30_pollen()) ) {
                    alt20=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 2, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                alt20=3;
                }
                break;
            case 175:
            case 179:
                {
                alt20=2;
                }
                break;
            case 148:
            case 171:
            case 188:
                {
                alt20=4;
                }
                break;
            case INJECT:
                {
                alt20=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:756:6: stmtExport
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtExport_in_compositionFeature3001);
                    stmtExport84=stmtExport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtExport84.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:757:8: fcnDefinitionHost
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionHost_in_compositionFeature3012);
                    fcnDefinitionHost85=fcnDefinitionHost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionHost85.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:758:8: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_compositionFeature3021);
                    enumDefinition86=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition86.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:8: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_compositionFeature3030);
                    varDeclaration87=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration87.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:760:8: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_compositionFeature3039);
                    injectionDecl88=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl88.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, compositionFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeature"


    protected static class stmtImport_scope {
        String qpkg;
        String qimp;
        String asName;
    }
    protected Stack stmtImport_stack = new Stack();


    public static class stmtImport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImport"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:762:1: stmtImport : ( 'from' ! importFrom | ( 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) );
    public final pollenParser.stmtImport_return stmtImport() throws RecognitionException {
        stmtImport_stack.push(new stmtImport_scope());
        pollenParser.stmtImport_return retval = new pollenParser.stmtImport_return();
        retval.start = input.LT(1);

        int stmtImport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal89=null;
        Atom string_literal91=null;
        pollenParser.importFrom_return importFrom90 =null;

        pollenParser.qualName_return qualName92 =null;

        pollenParser.metaArguments_return metaArguments93 =null;

        pollenParser.importAs_return importAs94 =null;

        pollenParser.delim_return delim95 =null;


        BaseNode string_literal89_tree=null;
        BaseNode string_literal91_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");

        	String defaultPkg = "";
        	String path = this.getTokenStream().getSourceName();
           	int k = path.lastIndexOf(File.separator);
           	int j = path.lastIndexOf(File.separator, k-1);
           	j = j == -1 ? 0 : j+1;
            	// the default package is the containing directory
            	defaultPkg = path.substring(j, k);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:6: ( 'from' ! importFrom | ( 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==160) ) {
                alt22=1;
            }
            else if ( (LA22_0==164) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:11: 'from' ! importFrom
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal89=(Atom)match(input,160,FOLLOW_160_in_stmtImport3064); if (state.failed) return retval;

                    pushFollow(FOLLOW_importFrom_in_stmtImport3067);
                    importFrom90=importFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importFrom90.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:8: ( 'import' qualName ( metaArguments )? importAs delim )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:8: ( 'import' qualName ( metaArguments )? importAs delim )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:9: 'import' qualName ( metaArguments )? importAs delim
                    {
                    string_literal91=(Atom)match(input,164,FOLLOW_164_in_stmtImport3082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_164.add(string_literal91);


                    pushFollow(FOLLOW_qualName_in_stmtImport3084);
                    qualName92=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName92.getTree());

                    if ( state.backtracking==0 ) {	
                        			if ((qualName92!=null?input.toString(qualName92.start,qualName92.stop):null).equals("pollen.environment")) {
                        				((stmtImport_scope)stmtImport_stack.peek()).qimp = ProcessUnits.getPollenEnv();
                        				defaultPkg = ProcessUnits.getPollenEnvPkg();
                        				if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                        					throw new PollenException("Missing module specification for pollen.environment", input);
                        			}
                        			else if ((qualName92!=null?input.toString(qualName92.start,qualName92.stop):null).equals("pollen.print")) {
                        				((stmtImport_scope)stmtImport_stack.peek()).qimp = ProcessUnits.getPollenPrint();
                        				defaultPkg = ProcessUnits.getPollenPrintPkg();
                        				if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                        				    	throw new PollenException("Missing module specification for pollen.print", input);
                        			}
                        			else {
                        				((stmtImport_scope)stmtImport_stack.peek()).qimp = (qualName92!=null?input.toString(qualName92.start,qualName92.stop):null);
                        			}
                        		}

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:10: ( metaArguments )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==190) ) {
                        int LA21_1 = input.LA(2);

                        if ( (synpred32_pollen()) ) {
                            alt21=1;
                        }
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:11: metaArguments
                            {
                            pushFollow(FOLLOW_metaArguments_in_stmtImport3107);
                            metaArguments93=metaArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments93.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_importAs_in_stmtImport3120);
                    importAs94=importAs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importAs.add(importAs94.getTree());

                    pushFollow(FOLLOW_delim_in_stmtImport3132);
                    delim95=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim95.getTree());

                    }


                    if ( state.backtracking==0 ) {
                             	ParseUnit.current().addToImportsMaps(((stmtImport_scope)stmtImport_stack.peek()).qimp, ((stmtImport_scope)stmtImport_stack.peek()).asName, defaultPkg);
                             }

                    // AST REWRITE
                    // elements: metaArguments, importAs
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 803:10: -> ^( IMPORT[\"IMPORT\"] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:13: ^( IMPORT[\"IMPORT\"] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, defaultPkg)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qimp)
                        );

                        adaptor.addChild(root_1, stream_importAs.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:96: ( metaArguments )?
                        if ( stream_metaArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArguments.nextTree());

                        }
                        stream_metaArguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, stmtImport_StartIndex); }

            stmtImport_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "stmtImport"


    public static class importFrom_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importFrom"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:811:1: importFrom : (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) ;
    public final pollenParser.importFrom_return importFrom() throws RecognitionException {
        pollenParser.importFrom_return retval = new pollenParser.importFrom_return();
        retval.start = input.LT(1);

        int importFrom_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal96=null;
        pollenParser.qualName_return q1 =null;

        pollenParser.qualName_return q2 =null;

        pollenParser.metaArguments_return metaArguments97 =null;

        pollenParser.importAs_return importAs98 =null;

        pollenParser.delim_return delim99 =null;


        BaseNode string_literal96_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:5: ( (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:10: (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:10: (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:11: q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim
            {
            pushFollow(FOLLOW_qualName_in_importFrom3217);
            q1=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(q1.getTree());

            if ( state.backtracking==0 ) {	
                			((stmtImport_scope)stmtImport_stack.peek()).qpkg = ((q1!=null?input.toString(q1.start,q1.stop):null).equals("pollen.environment")) ? ProcessUnits.getPollenEnvPkg() : (q1!=null?input.toString(q1.start,q1.stop):null);
                			if (((stmtImport_scope)stmtImport_stack.peek()).qpkg.isEmpty())
                				throw new PollenException("Missing module specification for pollen.environment", input);
                		}

            string_literal96=(Atom)match(input,164,FOLLOW_164_in_importFrom3235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal96);


            pushFollow(FOLLOW_qualName_in_importFrom3246);
            q2=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(q2.getTree());

            if ( state.backtracking==0 ) {	
                			((stmtImport_scope)stmtImport_stack.peek()).qimp = ((q2!=null?input.toString(q2.start,q2.stop):null).equals("pollen.environment")) ? ProcessUnits.getPollenEnv() : (q2!=null?input.toString(q2.start,q2.stop):null);
                			if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                				throw new PollenException("Missing module specification for pollen.environment", input);
                		}

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:10: ( metaArguments )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==190) ) {
                int LA23_1 = input.LA(2);

                if ( (synpred33_pollen()) ) {
                    alt23=1;
                }
            }
            switch (alt23) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:11: metaArguments
                    {
                    pushFollow(FOLLOW_metaArguments_in_importFrom3269);
                    metaArguments97=metaArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments97.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_importAs_in_importFrom3282);
            importAs98=importAs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importAs.add(importAs98.getTree());

            pushFollow(FOLLOW_delim_in_importFrom3284);
            delim99=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim99.getTree());

            }


            if ( state.backtracking==0 ) {
                     	ParseUnit.current().addToImportsMaps(((stmtImport_scope)stmtImport_stack.peek()).qimp, ((stmtImport_scope)stmtImport_stack.peek()).asName, ((stmtImport_scope)stmtImport_stack.peek()).qpkg);
                     }

            // AST REWRITE
            // elements: metaArguments, importAs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 835:10: -> ^( IMPORT[\"IMPORT\"] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:835:13: ^( IMPORT[\"IMPORT\"] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ImportNode(IMPORT, "IMPORT")
                , root_1);

                adaptor.addChild(root_1, 
                (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qpkg)
                );

                adaptor.addChild(root_1, 
                (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qimp)
                );

                adaptor.addChild(root_1, stream_importAs.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:835:103: ( metaArguments )?
                if ( stream_metaArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaArguments.nextTree());

                }
                stream_metaArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
             }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, importFrom_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importFrom"


    public static class importAs_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importAs"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:838:1: importAs : ( 'as' q1= qualName -> qualName | -> NIL );
    public final pollenParser.importAs_return importAs() throws RecognitionException {
        pollenParser.importAs_return retval = new pollenParser.importAs_return();
        retval.start = input.LT(1);

        int importAs_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal100=null;
        pollenParser.qualName_return q1 =null;


        BaseNode string_literal100_tree=null;
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:2: ( 'as' q1= qualName -> qualName | -> NIL )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==141) ) {
                alt24=1;
            }
            else if ( (LA24_0==EOF||(LA24_0 >= BIT_NOT && LA24_0 <= CHAR)||LA24_0==DEC||LA24_0==HEX_LIT||LA24_0==IDENT||(LA24_0 >= INC && LA24_0 <= INT_LIT)||LA24_0==LOG_NOT||LA24_0==MINUS||LA24_0==NL||LA24_0==OCT_LIT||LA24_0==REAL_LIT||LA24_0==SEMI||LA24_0==STRING||LA24_0==127||(LA24_0 >= 137 && LA24_0 <= 138)||(LA24_0 >= 142 && LA24_0 <= 151)||LA24_0==154||LA24_0==156||(LA24_0 >= 158 && LA24_0 <= 162)||(LA24_0 >= 164 && LA24_0 <= 167)||(LA24_0 >= 169 && LA24_0 <= 172)||(LA24_0 >= 175 && LA24_0 <= 183)||(LA24_0 >= 185 && LA24_0 <= 190)||LA24_0==193) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:4: 'as' q1= qualName
                    {
                    string_literal100=(Atom)match(input,141,FOLLOW_141_in_importAs3342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(string_literal100);


                    pushFollow(FOLLOW_qualName_in_importAs3346);
                    q1=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(q1.getTree());

                    if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).asName = (q1!=null?input.toString(q1.start,q1.stop):null); }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 841:3: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:843:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 843:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, importAs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importAs"


    public static class importList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:846:1: importList : stmtImports ;
    public final pollenParser.importList_return importList() throws RecognitionException {
        pollenParser.importList_return retval = new pollenParser.importList_return();
        retval.start = input.LT(1);

        int importList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtImports_return stmtImports101 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:847:2: ( stmtImports )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:847:6: stmtImports
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_stmtImports_in_importList3381);
            stmtImports101=stmtImports();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtImports101.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, importList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importList"


    public static class stmtImports_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImports"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:849:1: stmtImports : ( ( stmtImport )+ -> ^( LIST[\"LIST\"] ( stmtImport )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.stmtImports_return stmtImports() throws RecognitionException {
        pollenParser.stmtImports_return retval = new pollenParser.stmtImports_return();
        retval.start = input.LT(1);

        int stmtImports_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtImport_return stmtImport102 =null;


        RewriteRuleSubtreeStream stream_stmtImport=new RewriteRuleSubtreeStream(adaptor,"rule stmtImport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:2: ( ( stmtImport )+ -> ^( LIST[\"LIST\"] ( stmtImport )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==160||LA26_0==164) ) {
                alt26=1;
            }
            else if ( (LA26_0==EOF||LA26_0==INJECT||(LA26_0 >= 146 && LA26_0 <= 147)||LA26_0==154||(LA26_0 >= 169 && LA26_0 <= 170)||LA26_0==177) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }
            switch (alt26) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:4: ( stmtImport )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:4: ( stmtImport )+
                    int cnt25=0;
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==160||LA25_0==164) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:4: stmtImport
                    	    {
                    	    pushFollow(FOLLOW_stmtImport_in_stmtImports3392);
                    	    stmtImport102=stmtImport();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmtImport.add(stmtImport102.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt25 >= 1 ) break loop25;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(25, input);
                                throw eee;
                        }
                        cnt25++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmtImport
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 850:17: -> ^( LIST[\"LIST\"] ( stmtImport )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:20: ^( LIST[\"LIST\"] ( stmtImport )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmtImport.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmtImport.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmtImport.nextTree());

                        }
                        stream_stmtImport.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:851:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 851:4: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:851:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, stmtImports_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtImports"


    protected static class importIntrinsicPrint_scope {
        List<Object> l;
    }
    protected Stack importIntrinsicPrint_stack = new Stack();


    public static class importIntrinsicPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importIntrinsicPrint"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:859:1: importIntrinsicPrint : m1= importPrintImpl m2= importPrintProtocol ;
    public final pollenParser.importIntrinsicPrint_return importIntrinsicPrint() throws RecognitionException {
        importIntrinsicPrint_stack.push(new importIntrinsicPrint_scope());
        pollenParser.importIntrinsicPrint_return retval = new pollenParser.importIntrinsicPrint_return();
        retval.start = input.LT(1);

        int importIntrinsicPrint_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.importPrintImpl_return m1 =null;

        pollenParser.importPrintProtocol_return m2 =null;




        	((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l = new ArrayList<Object>();	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:875:2: (m1= importPrintImpl m2= importPrintProtocol )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:875:5: m1= importPrintImpl m2= importPrintProtocol
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_importPrintImpl_in_importIntrinsicPrint3452);
            m1=importPrintImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m1.getTree());

            if ( state.backtracking==0 ) {  ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null));}

            pushFollow(FOLLOW_importPrintProtocol_in_importIntrinsicPrint3463);
            m2=importPrintProtocol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m2.getTree());

            if ( state.backtracking==0 ) {  ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null));}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
             	for (Object o : ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l) {
             		if (o instanceof ImportNode) {
             			// add the instantiated import to unit imports
             			((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);			
             		}
             	}
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, importIntrinsicPrint_StartIndex); }

            importIntrinsicPrint_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "importIntrinsicPrint"


    public static class importPrintImpl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintImpl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:880:1: importPrintImpl : ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL ) | -> NIL );
    public final pollenParser.importPrintImpl_return importPrintImpl() throws RecognitionException {
        pollenParser.importPrintImpl_return retval = new pollenParser.importPrintImpl_return();
        retval.start = input.LT(1);

        int importPrintImpl_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:2: ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL ) | -> NIL )
            int alt27=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA27_1 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 1, input);

                    throw nvae;

                }
                }
                break;
            case 169:
                {
                int LA27_2 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 2, input);

                    throw nvae;

                }
                }
                break;
            case 170:
                {
                int LA27_3 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 3, input);

                    throw nvae;

                }
                }
                break;
            case 146:
                {
                int LA27_4 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 4, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA27_5 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 5, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                int LA27_6 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 6, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA27_7 = input.LA(2);

                if ( (((synpred37_pollen()&&synpred37_pollen())&&(ProcessUnits.doImportPrint()))) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }

            switch (alt27) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:4: {...}?
                    {
                    if ( !((ProcessUnits.doImportPrint())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importPrintImpl", "ProcessUnits.doImportPrint()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 882:6: -> ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:882:9: ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", EnumSet.noneOf(Flags.class))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenPrintPkg())
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenPrint())
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:6: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 886:6: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, importPrintImpl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importPrintImpl"


    public static class importPrintProtocol_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintProtocol"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:1: importPrintProtocol : ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[\"pollen.lang\"] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL ) | -> NIL );
    public final pollenParser.importPrintProtocol_return importPrintProtocol() throws RecognitionException {
        pollenParser.importPrintProtocol_return retval = new pollenParser.importPrintProtocol_return();
        retval.start = input.LT(1);

        int importPrintProtocol_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:2: ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[\"pollen.lang\"] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL ) | -> NIL )
            int alt28=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA28_1 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 1, input);

                    throw nvae;

                }
                }
                break;
            case 169:
                {
                int LA28_2 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 2, input);

                    throw nvae;

                }
                }
                break;
            case 170:
                {
                int LA28_3 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 3, input);

                    throw nvae;

                }
                }
                break;
            case 146:
                {
                int LA28_4 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 4, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA28_5 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 5, input);

                    throw nvae;

                }
                }
                break;
            case 147:
                {
                int LA28_6 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 6, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA28_7 = input.LA(2);

                if ( ((((ProcessUnits.doImportPrint())&&(ProcessUnits.doImportPrint()))&&synpred38_pollen())) ) {
                    alt28=1;
                }
                else if ( (true) ) {
                    alt28=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }

            switch (alt28) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:4: {...}?
                    {
                    if ( !((ProcessUnits.doImportPrint())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importPrintProtocol", "ProcessUnits.doImportPrint()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 890:6: -> ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[\"pollen.lang\"] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:890:9: ^( IMPORT[\"IMPORT\", EnumSet.noneOf(Flags.class)] IDENT[\"pollen.lang\"] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", EnumSet.noneOf(Flags.class))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, "pollen.lang")
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:6: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 894:6: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, importPrintProtocol_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importPrintProtocol"


    public static class meta_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "meta"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:896:1: meta : ({...}? 'meta' ! ( braceOpen metaParmsGen braceClose ) | -> LIST[\"LIST\"] );
    public final pollenParser.meta_return meta() throws RecognitionException {
        pollenParser.meta_return retval = new pollenParser.meta_return();
        retval.start = input.LT(1);

        int meta_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal103=null;
        pollenParser.braceOpen_return braceOpen104 =null;

        pollenParser.metaParmsGen_return metaParmsGen105 =null;

        pollenParser.braceClose_return braceClose106 =null;


        BaseNode string_literal103_tree=null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:2: ({...}? 'meta' ! ( braceOpen metaParmsGen braceClose ) | -> LIST[\"LIST\"] )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==169) ) {
                alt29=1;
            }
            else if ( ((LA29_0 >= 146 && LA29_0 <= 147)||LA29_0==154||LA29_0==170||LA29_0==177) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:4: {...}? 'meta' ! ( braceOpen metaParmsGen braceClose )
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    if ( !((isMetaInstance)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "meta", "isMetaInstance");
                    }

                    string_literal103=(Atom)match(input,169,FOLLOW_169_in_meta3599); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { metaFlags.add(Flags.META);}

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:904:4: ( braceOpen metaParmsGen braceClose )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:904:5: braceOpen metaParmsGen braceClose
                    {
                    pushFollow(FOLLOW_braceOpen_in_meta3617);
                    braceOpen104=braceOpen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceOpen104.getTree());

                    pushFollow(FOLLOW_metaParmsGen_in_meta3624);
                    metaParmsGen105=metaParmsGen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaParmsGen105.getTree());

                    pushFollow(FOLLOW_braceClose_in_meta3630);
                    braceClose106=braceClose();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceClose106.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:909:6: 
                    {
                    if ( state.backtracking==0 ) { isMetaInstance = false;}

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 909:33: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, meta_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "meta"


    protected static class metaParmsGen_scope {
        int idx;
        List<Object> l;
    }
    protected Stack metaParmsGen_stack = new Stack();


    public static class metaParmsGen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmsGen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:912:1: metaParmsGen : m1= metaParmGen ( NL )* ( ',' ( NL )* m2= metaParmGen )* -> ^( LIST[\"LIST\"] ( metaParmGen )+ ) ;
    public final pollenParser.metaParmsGen_return metaParmsGen() throws RecognitionException {
        metaParmsGen_stack.push(new metaParmsGen_scope());
        pollenParser.metaParmsGen_return retval = new pollenParser.metaParmsGen_return();
        retval.start = input.LT(1);

        int metaParmsGen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL107=null;
        Atom char_literal108=null;
        Atom NL109=null;
        pollenParser.metaParmGen_return m1 =null;

        pollenParser.metaParmGen_return m2 =null;


        BaseNode NL107_tree=null;
        BaseNode char_literal108_tree=null;
        BaseNode NL109_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_metaParmGen=new RewriteRuleSubtreeStream(adaptor,"rule metaParmGen");

        	((metaParmsGen_scope)metaParmsGen_stack.peek()).idx = 0;
        	((metaParmsGen_scope)metaParmsGen_stack.peek()).l = new ArrayList<Object>();	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:2: (m1= metaParmGen ( NL )* ( ',' ( NL )* m2= metaParmGen )* -> ^( LIST[\"LIST\"] ( metaParmGen )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:4: m1= metaParmGen ( NL )* ( ',' ( NL )* m2= metaParmGen )*
            {
            pushFollow(FOLLOW_metaParmGen_in_metaParmsGen3693);
            m1=metaParmGen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaParmGen.add(m1.getTree());

            if ( state.backtracking==0 ) { ((metaParmsGen_scope)metaParmsGen_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null)); }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:55: ( NL )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==NL) ) {
                    int LA30_1 = input.LA(2);

                    if ( (synpred40_pollen()) ) {
                        alt30=1;
                    }


                }


                switch (alt30) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:55: NL
            	    {
            	    NL107=(Atom)match(input,NL,FOLLOW_NL_in_metaParmsGen3697); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL107);


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:3: ( ',' ( NL )* m2= metaParmGen )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==130) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:5: ',' ( NL )* m2= metaParmGen
            	    {
            	    char_literal108=(Atom)match(input,130,FOLLOW_130_in_metaParmsGen3704); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal108);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:9: ( NL )*
            	    loop31:
            	    do {
            	        int alt31=2;
            	        int LA31_0 = input.LA(1);

            	        if ( (LA31_0==NL) ) {
            	            alt31=1;
            	        }


            	        switch (alt31) {
            	    	case 1 :
            	    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:9: NL
            	    	    {
            	    	    NL109=(Atom)match(input,NL,FOLLOW_NL_in_metaParmsGen3706); if (state.failed) return retval; 
            	    	    if ( state.backtracking==0 ) stream_NL.add(NL109);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop31;
            	        }
            	    } while (true);


            	    pushFollow(FOLLOW_metaParmGen_in_metaParmsGen3714);
            	    m2=metaParmGen();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_metaParmGen.add(m2.getTree());

            	    if ( state.backtracking==0 ) { ((metaParmsGen_scope)metaParmsGen_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null)); }

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // AST REWRITE
            // elements: metaParmGen
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 933:3: -> ^( LIST[\"LIST\"] ( metaParmGen )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:6: ^( LIST[\"LIST\"] ( metaParmGen )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_metaParmGen.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_metaParmGen.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaParmGen.nextTree());

                }
                stream_metaParmGen.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
             	for (Object o : ((metaParmsGen_scope)metaParmsGen_stack.peek()).l) {
             		if (o instanceof ImportNode) {
             			// add the instantiated import to unit imports
             			((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);			
             		}
             	}
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, metaParmsGen_StartIndex); }

            metaParmsGen_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "metaParmsGen"


    public static class metaParmGen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmGen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:951:1: metaParmGen : ( 'type' IDENT ( '=' typeName )? -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( '=' primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) ) );
    public final pollenParser.metaParmGen_return metaParmGen() throws RecognitionException {
        pollenParser.metaParmGen_return retval = new pollenParser.metaParmGen_return();
        retval.start = input.LT(1);

        int metaParmGen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom id=null;
        Atom string_literal110=null;
        Atom IDENT111=null;
        Atom char_literal112=null;
        Atom char_literal115=null;
        pollenParser.typeName_return typeName113 =null;

        pollenParser.builtinType_return builtinType114 =null;

        pollenParser.primitiveLit_return primitiveLit116 =null;


        BaseNode id_tree=null;
        BaseNode string_literal110_tree=null;
        BaseNode IDENT111_tree=null;
        BaseNode char_literal112_tree=null;
        BaseNode char_literal115_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        RewriteRuleSubtreeStream stream_primitiveLit=new RewriteRuleSubtreeStream(adaptor,"rule primitiveLit");

        	// for import stmt 
        	String name = "";
        	String as = "";
        	String from = ""; 
        	ExprNode.Const arg = null;	
        	EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);		
        	String ctext = "";
        	EnumSet<LitFlags> lf = EnumSet.noneOf(LitFlags.class);
        	if (isVoidInstance) {

        		metaFlags.add(Flags.VOID_INSTANCE);
        	}


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:970:2: ( 'type' IDENT ( '=' typeName )? -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( '=' primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==184) ) {
                alt35=1;
            }
            else if ( (LA35_0==142||LA35_0==144||(LA35_0 >= 165 && LA35_0 <= 167)||LA35_0==181||(LA35_0 >= 185 && LA35_0 <= 187)) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:970:4: 'type' IDENT ( '=' typeName )?
                    {
                    string_literal110=(Atom)match(input,184,FOLLOW_184_in_metaParmGen3761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal110);


                    IDENT111=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaParmGen3763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT111);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:970:17: ( '=' typeName )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==ASSIGN) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:970:19: '=' typeName
                            {
                            char_literal112=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaParmGen3767); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal112);


                            pushFollow(FOLLOW_typeName_in_metaParmGen3769);
                            typeName113=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(typeName113.getTree());

                            if ( state.backtracking==0 ) {name = (typeName113!=null?input.toString(typeName113.start,typeName113.stop):null);}

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { 
                    			   flags.add(Flags.TYPE_META_ARG); 
                    			   // get 'as' name
                    			   as = (IDENT111!=null?IDENT111.getText():null);
                    		    	   // get 'from' pkg
                      		    	   for (ImportNode imp: client.getImports()) {
                    		    		if (clientImport.getName().getText().equals(imp.getName().getText())) {
                    		    			from = imp.getFrom().getText();
                    		    			break;
                    		    		}
                    		    	}	
                    		    	// get import name
                    		    	if (instantiateToDefaults || isVoidInstance) {
                    		    		// instantiate to defaults
                    		    		if (name.isEmpty()) {
                    		    			if (isVoidInstance)
                    		    				throw new PollenException("Using \'{}\' to instantiate a meta type requires default values for all meta parameters", input);
                    		    			if (clientImport.getMeta() == null)
                    		    				throw new PollenException("Instantiating a meta type without parameters requires default values for all meta parameters", input);
                    		    		}
                    		    	}
                    		    	else {
                    		    	BaseNode b = (clientImport.getMeta() != null && clientImport.getMeta().size() >= ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx+1) 
                    		    			? clientImport.getMeta().get(((metaParmsGen_scope)metaParmsGen_stack.peek()).idx) : null ;
                    		    	
                    		    	  if (b != null && b.getType() != pollenParser.NIL) { // if false, will use default
                    		    		  // get instantiation value
                    		    		  
                    		    		  if (b instanceof TypeNode.Usr) {
                    		    			  name = ((TypeNode.Usr) b).getName().getText();	
                    		    			   String handlerName = ""; 
                                        		    		   int i = name.indexOf('.');
                                        		    		   if (i != -1) { // type is a function ref: "HP.handler"
                                        		    		   	// handler name ignored for now
                                        		    			handlerName = "." + name.substring(i+1);   // the fcn name, 'handler'  
                                        		    			name = name.substring(0, i);  // HP, the unit type                  		    				              		    				  
                                        		    		    }
                    		    			  // fixups
                    		    			  String n = ParseUnit.current().getTypeName(client.getQualName(), name);
                    		    			  String f = ParseUnit.current().getPackage(client.getQualName(),name);
                    		    			  if (n != null) {
                    		    			      name = n;
                    		    			      from = f != null ? f : from;		    			      
                    		    			  }		
                    		    		  }
                    		    		  else if (b instanceof TypeNode.Std) {
                    		    			  name = ((TypeNode.Std) b).getIdent().getText();		    			
                    		    		  }
                    		    		  else if (b.getType() == pollenLexer.VOID) // deferred instantiation
                                         				name = b.getText();
                    		    		  else {
                    		    			  throw new PollenFatalException("Meta type parameter requires type to instantiate");
                    		    		  }
                    		    	  }
                    		    	  else {
                    			 	    if (name.isEmpty()) { // no default supplied
                    			 	  	    throw new PollenException("Missing actual parameter for meta type instantiation where no default value specified", input);
                    			 	    }
                    				}		    		
                    		    	}

                    	    	}

                    // AST REWRITE
                    // elements: IDENT, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1033:4: -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1033:7: ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", flags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, from)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, name)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, as)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:7: builtinType id= IDENT ( '=' primitiveLit )?
                    {
                    pushFollow(FOLLOW_builtinType_in_metaParmGen3813);
                    builtinType114=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType114.getTree());

                    id=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaParmGen3817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:28: ( '=' primitiveLit )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==ASSIGN) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:29: '=' primitiveLit
                            {
                            char_literal115=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaParmGen3820); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal115);


                            pushFollow(FOLLOW_primitiveLit_in_metaParmGen3822);
                            primitiveLit116=primitiveLit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_primitiveLit.add(primitiveLit116.getTree());

                            if ( state.backtracking==0 ) { ctext = (primitiveLit116!=null?input.toString(primitiveLit116.start,primitiveLit116.stop):null); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    	 		flags.add(Flags.META_ARG);
                    	 		if (instantiateToDefaults || isVoidInstance) {
                    		    		// instantiate to defaults
                    		    		if (ctext.isEmpty()) {
                    		    			if (isVoidInstance)
                    		    				throw new PollenException("Using \'{}\' to instantiate a meta type requires default values for all meta parameters", input);
                    		    			if (clientImport.getMeta() == null)
                    		    				throw new PollenException("Instantiating a meta type without parameters requires default values for all meta parameters", input);
                    		    		}
                    		    	}
                    		    	else {
                    		    	  BaseNode b = (clientImport.getMeta() != null && clientImport.getMeta().size() >= ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx+1) 
                    		    			? clientImport.getMeta().get(((metaParmsGen_scope)metaParmsGen_stack.peek()).idx) : null ;
                    		    			
                    		    	  if (b != null && b.getType() != pollenParser.NIL) { // if false, will use default
                    			 		
                    			 		  if (b.getType() != pollenLexer.VOID && !(b instanceof ExprNode.Const)) 
                       			 			throw new PollenFatalException("Invalid meta value parameter specification (must be a constant)");
                    	  		 		  ctext = b.getText();
                    			 		
                    			 		  lf = EnumSet.noneOf(LitFlags.class);
                    			 		  if (b instanceof ExprNode.Const) {
                    			 			  arg = (ExprNode.Const) b;
                    			 			  ctext = arg.getValue().getText();
                    			 			  EnumSet<LitFlags> formalType = (builtinType114!=null?builtinType114.f:null);
                    			 			  lf = arg.getLitFlags();
                    			 			  if (!(arg.getLitFlags().contains(LitFlags.NUM) && formalType.contains(LitFlags.NUM))) {
                    			 				  if (!(arg.getLitFlags().equals(formalType)))
                    			 					  throw new PollenException("Fomal and actual meta value parameters have inconsistent types", input);	 		
                    			 			  }
                    			 		  }
                    			 	 }
                    			 	 else {
                    			 	    if (ctext.isEmpty()) { // no default supplied
                    			 	  	    throw new PollenException("Missing actual parameter for meta type instantiation where no default value specified", input);
                    			 	    }
                    			 	 }
                    		 		}
                    	 		}

                    // AST REWRITE
                    // elements: builtinType, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1076:3: -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1076:6: ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1077:4: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1079:5: ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", lf)
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ctext)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	((metaParmsGen_scope)metaParmsGen_stack.peek()).idx++;
            }
        }
        catch (PollenFatalException e) {

                ParseUnit.current().reportFailure(e);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, metaParmGen_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaParmGen"


    public static class metaArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArguments"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1084:1: metaArguments : ( '{' metaArgument ( NL )* ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )* '}' -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | '{' '}' -> LIST[\"LIST\"] );
    public final pollenParser.metaArguments_return metaArguments() throws RecognitionException {
        pollenParser.metaArguments_return retval = new pollenParser.metaArguments_return();
        retval.start = input.LT(1);

        int metaArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal117=null;
        Atom NL119=null;
        Atom char_literal120=null;
        Atom NL121=null;
        Atom NL123=null;
        Atom char_literal124=null;
        Atom char_literal125=null;
        Atom char_literal126=null;
        pollenParser.metaArgument_return metaArgument118 =null;

        pollenParser.metaArgument_return metaArgument122 =null;


        BaseNode char_literal117_tree=null;
        BaseNode NL119_tree=null;
        BaseNode char_literal120_tree=null;
        BaseNode NL121_tree=null;
        BaseNode NL123_tree=null;
        BaseNode char_literal124_tree=null;
        BaseNode char_literal125_tree=null;
        BaseNode char_literal126_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_metaArgument=new RewriteRuleSubtreeStream(adaptor,"rule metaArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:4: ( '{' metaArgument ( NL )* ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )* '}' -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | '{' '}' -> LIST[\"LIST\"] )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==190) ) {
                int LA40_1 = input.LA(2);

                if ( (synpred50_pollen()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:7: '{' metaArgument ( NL )* ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )* '}'
                    {
                    char_literal117=(Atom)match(input,190,FOLLOW_190_in_metaArguments3909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal117);


                    pushFollow(FOLLOW_metaArgument_in_metaArguments3911);
                    metaArgument118=metaArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument118.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:24: ( NL )*
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( (LA36_0==NL) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:25: NL
                    	    {
                    	    NL119=(Atom)match(input,NL,FOLLOW_NL_in_metaArguments3914); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL119);


                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:30: ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==130) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:31: ',' ( ( NL )* ) metaArgument ( ( NL )* )
                    	    {
                    	    char_literal120=(Atom)match(input,130,FOLLOW_130_in_metaArguments3919); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal120);


                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:35: ( ( NL )* )
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: ( NL )*
                    	    {
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: ( NL )*
                    	    loop37:
                    	    do {
                    	        int alt37=2;
                    	        int LA37_0 = input.LA(1);

                    	        if ( (LA37_0==NL) ) {
                    	            int LA37_1 = input.LA(2);

                    	            if ( (synpred47_pollen()) ) {
                    	                alt37=1;
                    	            }


                    	        }


                    	        switch (alt37) {
                    	    	case 1 :
                    	    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: NL
                    	    	    {
                    	    	    NL121=(Atom)match(input,NL,FOLLOW_NL_in_metaArguments3922); if (state.failed) return retval; 
                    	    	    if ( state.backtracking==0 ) stream_NL.add(NL121);


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop37;
                    	        }
                    	    } while (true);


                    	    }


                    	    pushFollow(FOLLOW_metaArgument_in_metaArguments3926);
                    	    metaArgument122=metaArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument122.getTree());

                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:54: ( ( NL )* )
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:55: ( NL )*
                    	    {
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:55: ( NL )*
                    	    loop38:
                    	    do {
                    	        int alt38=2;
                    	        int LA38_0 = input.LA(1);

                    	        if ( (LA38_0==NL) ) {
                    	            alt38=1;
                    	        }


                    	        switch (alt38) {
                    	    	case 1 :
                    	    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:55: NL
                    	    	    {
                    	    	    NL123=(Atom)match(input,NL,FOLLOW_NL_in_metaArguments3929); if (state.failed) return retval; 
                    	    	    if ( state.backtracking==0 ) stream_NL.add(NL123);


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop38;
                    	        }
                    	    } while (true);


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);


                    char_literal124=(Atom)match(input,193,FOLLOW_193_in_metaArguments3936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal124);


                    // AST REWRITE
                    // elements: metaArgument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1085:67: -> ^( LIST[\"LIST\"] ( metaArgument )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:70: ^( LIST[\"LIST\"] ( metaArgument )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_metaArgument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_metaArgument.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArgument.nextTree());

                        }
                        stream_metaArgument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1086:6: '{' '}'
                    {
                    char_literal125=(Atom)match(input,190,FOLLOW_190_in_metaArguments3956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal125);


                    char_literal126=(Atom)match(input,193,FOLLOW_193_in_metaArguments3958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal126);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1086:19: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, metaArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArguments"


    public static class metaArgument_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgument"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1089:1: metaArgument : ( primitiveLit | typeNameScalar | -> NIL );
    public final pollenParser.metaArgument_return metaArgument() throws RecognitionException {
        pollenParser.metaArgument_return retval = new pollenParser.metaArgument_return();
        retval.start = input.LT(1);

        int metaArgument_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit127 =null;

        pollenParser.typeNameScalar_return typeNameScalar128 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1090:2: ( primitiveLit | typeNameScalar | -> NIL )
            int alt41=3;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 158:
            case 172:
            case 183:
                {
                alt41=1;
                }
                break;
            case IDENT:
            case 142:
            case 144:
            case 165:
            case 166:
            case 167:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt41=2;
                }
                break;
            case EOF:
            case NL:
            case 130:
            case 193:
                {
                alt41=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1090:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_metaArgument3987);
                    primitiveLit127=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit127.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1091:4: typeNameScalar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_typeNameScalar_in_metaArgument3993);
                    typeNameScalar128=typeNameScalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar128.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1092:5: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1092:5: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, metaArgument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArgument"


    public static class typeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:1: typeName : typeNameScalar ;
    public final pollenParser.typeName_return typeName() throws RecognitionException {
        pollenParser.typeName_return retval = new pollenParser.typeName_return();
        retval.start = input.LT(1);

        int typeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeNameScalar_return typeNameScalar129 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1095:2: ( typeNameScalar )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1095:4: typeNameScalar
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeNameScalar_in_typeName4011);
            typeNameScalar129=typeNameScalar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar129.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, typeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeName"


    public static class typeNameScalar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameScalar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:1: typeNameScalar : ( builtinType -> ^( T_STD[\"T_STD\", typeMods] builtinType ) | userTypeName );
    public final pollenParser.typeNameScalar_return typeNameScalar() throws RecognitionException {
        pollenParser.typeNameScalar_return retval = new pollenParser.typeNameScalar_return();
        retval.start = input.LT(1);

        int typeNameScalar_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType130 =null;

        pollenParser.userTypeName_return userTypeName131 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:2: ( builtinType -> ^( T_STD[\"T_STD\", typeMods] builtinType ) | userTypeName )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==142||LA42_0==144||(LA42_0 >= 165 && LA42_0 <= 167)||LA42_0==181||(LA42_0 >= 185 && LA42_0 <= 187)) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:4: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameScalar4024);
                    builtinType130=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType130.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1098:16: -> ^( T_STD[\"T_STD\", typeMods] builtinType )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:19: ^( T_STD[\"T_STD\", typeMods] builtinType )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", typeMods)
                        , root_1);

                        adaptor.addChild(root_1, stream_builtinType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1099:4: userTypeName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_typeNameScalar4043);
                    userTypeName131=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeName131.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, typeNameScalar_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeNameScalar"


    public static class userTypeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1101:1: userTypeName : qualName -> ^( T_USR[\"T_USR\", typeMods] qualName ) ;
    public final pollenParser.userTypeName_return userTypeName() throws RecognitionException {
        pollenParser.userTypeName_return retval = new pollenParser.userTypeName_return();
        retval.start = input.LT(1);

        int userTypeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName132 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1102:2: ( qualName -> ^( T_USR[\"T_USR\", typeMods] qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1102:4: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeName4053);
            qualName132=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName132.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1102:13: -> ^( T_USR[\"T_USR\", typeMods] qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1102:16: ^( T_USR[\"T_USR\", typeMods] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", typeMods)
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, userTypeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "userTypeName"


    public static class typeNameArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1104:1: typeNameArray : ( builtinType -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) ) | userTypeNameArr );
    public final pollenParser.typeNameArray_return typeNameArray() throws RecognitionException {
        pollenParser.typeNameArray_return retval = new pollenParser.typeNameArray_return();
        retval.start = input.LT(1);

        int typeNameArray_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType133 =null;

        pollenParser.userTypeNameArr_return userTypeNameArr134 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1105:2: ( builtinType -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) ) | userTypeNameArr )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==142||LA43_0==144||(LA43_0 >= 165 && LA43_0 <= 167)||LA43_0==181||(LA43_0 >= 185 && LA43_0 <= 187)) ) {
                alt43=1;
            }
            else if ( (LA43_0==IDENT) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1105:4: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameArray4079);
                    builtinType133=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType133.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1105:16: -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1105:19: ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Arr(T_ARR, "T_ARR", typeMods)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1105:60: ^( T_STD[\"T_STD\", typeMods] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1106:4: userTypeNameArr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeNameArr_in_typeNameArray4108);
                    userTypeNameArr134=userTypeNameArr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeNameArr134.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, typeNameArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeNameArray"


    public static class userTypeNameArr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeNameArr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1108:1: userTypeNameArr : qualName -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) ) ;
    public final pollenParser.userTypeNameArr_return userTypeNameArr() throws RecognitionException {
        pollenParser.userTypeNameArr_return retval = new pollenParser.userTypeNameArr_return();
        retval.start = input.LT(1);

        int userTypeNameArr_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName135 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1109:2: ( qualName -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1109:4: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeNameArr4118);
            qualName135=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName135.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1109:13: -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1109:16: ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Arr(T_ARR, "T_ARR", typeMods)
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1109:57: ^( T_USR[\"T_USR\", typeMods] qualName )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", typeMods)
                , root_2);

                adaptor.addChild(root_2, stream_qualName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, userTypeNameArr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "userTypeNameArr"


    protected static class unitTypeDefinition_scope {
        Object meta;
    }
    protected Stack unitTypeDefinition_stack = new Stack();


    public static class unitTypeDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitTypeDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1112:1: unitTypeDefinition : ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition ) ;
    public final pollenParser.unitTypeDefinition_return unitTypeDefinition() throws RecognitionException {
        unitTypeDefinition_stack.push(new unitTypeDefinition_scope());
        pollenParser.unitTypeDefinition_return retval = new pollenParser.unitTypeDefinition_return();
        retval.start = input.LT(1);

        int unitTypeDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.meta_return meta136 =null;

        pollenParser.moduleDefinition_return moduleDefinition137 =null;

        pollenParser.classDefinition_return classDefinition138 =null;

        pollenParser.protocolDefinition_return protocolDefinition139 =null;

        pollenParser.compositionDefinition_return compositionDefinition140 =null;

        pollenParser.enumDefinition_return enumDefinition141 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1121:4: ( ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1121:8: ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1121:8: ( meta !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1121:9: meta !
            {
            pushFollow(FOLLOW_meta_in_unitTypeDefinition4166);
            meta136=meta();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta = (meta136!=null?((BaseNode)meta136.tree):null); }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1122:6: ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition )
            int alt44=5;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==170) && (synpred55_pollen())) {
                alt44=1;
            }
            else if ( (LA44_0==146) && (synpred56_pollen())) {
                alt44=2;
            }
            else if ( (LA44_0==177) && (synpred57_pollen())) {
                alt44=3;
            }
            else if ( (LA44_0==147) && (synpred58_pollen())) {
                alt44=4;
            }
            else if ( (LA44_0==154) && (synpred59_pollen())) {
                alt44=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1123:17: ( 'module' )=> moduleDefinition
                    {
                    pushFollow(FOLLOW_moduleDefinition_in_unitTypeDefinition4203);
                    moduleDefinition137=moduleDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleDefinition137.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1124:8: ( 'class' )=> classDefinition
                    {
                    pushFollow(FOLLOW_classDefinition_in_unitTypeDefinition4224);
                    classDefinition138=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition138.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1125:11: ( 'protocol' )=> protocolDefinition
                    {
                    pushFollow(FOLLOW_protocolDefinition_in_unitTypeDefinition4242);
                    protocolDefinition139=protocolDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocolDefinition139.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:11: ( 'composition' )=> compositionDefinition
                    {
                    pushFollow(FOLLOW_compositionDefinition_in_unitTypeDefinition4261);
                    compositionDefinition140=compositionDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compositionDefinition140.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:11: ( 'enum' )=> enumDefinition
                    {
                    pushFollow(FOLLOW_enumDefinition_in_unitTypeDefinition4280);
                    enumDefinition141=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition141.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               // debug
               if (ParseUnit.isDebugMode())
            	System.out.println("       " + ti.getTypeName() + ", " + ti.getUnitFlags().toString());
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, unitTypeDefinition_StartIndex); }

            unitTypeDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitTypeDefinition"


    public static class extendsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extendsClause"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1130:1: extendsClause : ( 'extends' qualName -> qualName | -> NIL );
    public final pollenParser.extendsClause_return extendsClause() throws RecognitionException {
        pollenParser.extendsClause_return retval = new pollenParser.extendsClause_return();
        retval.start = input.LT(1);

        int extendsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal142=null;
        pollenParser.qualName_return qualName143 =null;


        BaseNode string_literal142_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1131:5: ( 'extends' qualName -> qualName | -> NIL )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==157) ) {
                alt45=1;
            }
            else if ( (LA45_0==NL||LA45_0==163||LA45_0==190) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1131:9: 'extends' qualName
                    {
                    string_literal142=(Atom)match(input,157,FOLLOW_157_in_extendsClause4305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal142);


                    pushFollow(FOLLOW_qualName_in_extendsClause4307);
                    qualName143=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName143.getTree());

                    if ( state.backtracking==0 ) {
                        	if (ti.getUnitFlags().contains(Flags.CLASS) || ti.getUnitFlags().contains(Flags.MODULE))
                        		throw new PollenException("\'extends\' clause is not supported for classes or modules", input);
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1136:6: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1137:8: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1137:8: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, extendsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extendsClause"


    public static class implementsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementsClause"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1140:1: implementsClause : ( 'implements' qualName -> qualName | -> NIL );
    public final pollenParser.implementsClause_return implementsClause() throws RecognitionException {
        pollenParser.implementsClause_return retval = new pollenParser.implementsClause_return();
        retval.start = input.LT(1);

        int implementsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal144=null;
        pollenParser.qualName_return qualName145 =null;


        BaseNode string_literal144_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1141:5: ( 'implements' qualName -> qualName | -> NIL )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==163) ) {
                alt46=1;
            }
            else if ( (LA46_0==NL||LA46_0==190) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1141:9: 'implements' qualName
                    {
                    string_literal144=(Atom)match(input,163,FOLLOW_163_in_implementsClause4352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(string_literal144);


                    pushFollow(FOLLOW_qualName_in_implementsClause4354);
                    qualName145=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName145.getTree());

                    if ( state.backtracking==0 ) {
                        	if (ti.getUnitFlags().contains(Flags.PROTOCOL))
                        		throw new PollenException("\'implements\' clause is not supported for protocols", input);
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1146:6: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1147:8: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1147:8: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, implementsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implementsClause"


    public static class braceClose_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceClose"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1149:1: braceClose : ( NL !)* '}' ! ( NL !)* ;
    public final pollenParser.braceClose_return braceClose() throws RecognitionException {
        pollenParser.braceClose_return retval = new pollenParser.braceClose_return();
        retval.start = input.LT(1);

        int braceClose_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL146=null;
        Atom char_literal147=null;
        Atom NL148=null;

        BaseNode NL146_tree=null;
        BaseNode char_literal147_tree=null;
        BaseNode NL148_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:5: ( ( NL !)* '}' ! ( NL !)* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:10: ( NL !)* '}' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:10: ( NL !)*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==NL) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:11: NL !
            	    {
            	    NL146=(Atom)match(input,NL,FOLLOW_NL_in_braceClose4401); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            char_literal147=(Atom)match(input,193,FOLLOW_193_in_braceClose4406); if (state.failed) return retval;

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:22: ( NL !)*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==NL) ) {
                    int LA48_1 = input.LA(2);

                    if ( (synpred63_pollen()) ) {
                        alt48=1;
                    }


                }


                switch (alt48) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:23: NL !
            	    {
            	    NL148=(Atom)match(input,NL,FOLLOW_NL_in_braceClose4410); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, braceClose_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceClose"


    public static class braceCloseAtEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceCloseAtEOF"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1152:1: braceCloseAtEOF : ( ( NL !)* ) '}' ! ( NL !)* ;
    public final pollenParser.braceCloseAtEOF_return braceCloseAtEOF() throws RecognitionException {
        pollenParser.braceCloseAtEOF_return retval = new pollenParser.braceCloseAtEOF_return();
        retval.start = input.LT(1);

        int braceCloseAtEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL149=null;
        Atom char_literal150=null;
        Atom NL151=null;

        BaseNode NL149_tree=null;
        BaseNode char_literal150_tree=null;
        BaseNode NL151_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:5: ( ( ( NL !)* ) '}' ! ( NL !)* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:9: ( ( NL !)* ) '}' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:9: ( ( NL !)* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:10: ( NL !)*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:12: ( NL !)*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==NL) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:12: NL !
            	    {
            	    NL149=(Atom)match(input,NL,FOLLOW_NL_in_braceCloseAtEOF4434); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }


            char_literal150=(Atom)match(input,193,FOLLOW_193_in_braceCloseAtEOF4439); if (state.failed) return retval;

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:21: ( NL !)*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==NL) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:22: NL !
            	    {
            	    NL151=(Atom)match(input,NL,FOLLOW_NL_in_braceCloseAtEOF4443); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, braceCloseAtEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceCloseAtEOF"


    public static class braceOpen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceOpen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1158:1: braceOpen : ( NL !)* '{' ! ( NL !)* ;
    public final pollenParser.braceOpen_return braceOpen() throws RecognitionException {
        pollenParser.braceOpen_return retval = new pollenParser.braceOpen_return();
        retval.start = input.LT(1);

        int braceOpen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL152=null;
        Atom char_literal153=null;
        Atom NL154=null;

        BaseNode NL152_tree=null;
        BaseNode char_literal153_tree=null;
        BaseNode NL154_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:5: ( ( NL !)* '{' ! ( NL !)* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:10: ( NL !)* '{' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:10: ( NL !)*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==NL) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:11: NL !
            	    {
            	    NL152=(Atom)match(input,NL,FOLLOW_NL_in_braceOpen4468); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            char_literal153=(Atom)match(input,190,FOLLOW_190_in_braceOpen4473); if (state.failed) return retval;

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:22: ( NL !)*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==NL) ) {
                    int LA52_1 = input.LA(2);

                    if ( (synpred67_pollen()) ) {
                        alt52=1;
                    }


                }


                switch (alt52) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:23: NL !
            	    {
            	    NL154=(Atom)match(input,NL,FOLLOW_NL_in_braceOpen4477); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, braceOpen_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceOpen"


    public static class equalityOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1161:1: equalityOp : ( EQ | NOT_EQ );
    public final pollenParser.equalityOp_return equalityOp() throws RecognitionException {
        pollenParser.equalityOp_return retval = new pollenParser.equalityOp_return();
        retval.start = input.LT(1);

        int equalityOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set155=null;

        BaseNode set155_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1162:2: ( EQ | NOT_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set155=(Atom)input.LT(1);

            if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set155)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, equalityOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equalityOp"


    public static class relationalOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1164:1: relationalOp : ( LT | GT | LT_EQ | GT_EQ );
    public final pollenParser.relationalOp_return relationalOp() throws RecognitionException {
        pollenParser.relationalOp_return retval = new pollenParser.relationalOp_return();
        retval.start = input.LT(1);

        int relationalOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set156=null;

        BaseNode set156_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1165:2: ( LT | GT | LT_EQ | GT_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set156=(Atom)input.LT(1);

            if ( (input.LA(1) >= GT && input.LA(1) <= GT_EQ)||(input.LA(1) >= LT && input.LA(1) <= LT_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set156)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, relationalOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relationalOp"


    public static class shiftOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1167:1: shiftOp : ( '<<' | '>>' );
    public final pollenParser.shiftOp_return shiftOp() throws RecognitionException {
        pollenParser.shiftOp_return retval = new pollenParser.shiftOp_return();
        retval.start = input.LT(1);

        int shiftOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set157=null;

        BaseNode set157_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1168:2: ( '<<' | '>>' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set157=(Atom)input.LT(1);

            if ( (input.LA(1) >= 134 && input.LA(1) <= 135) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set157)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, shiftOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shiftOp"


    public static class incDecOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incDecOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1170:1: incDecOp : ( INC | DEC );
    public final pollenParser.incDecOp_return incDecOp() throws RecognitionException {
        pollenParser.incDecOp_return retval = new pollenParser.incDecOp_return();
        retval.start = input.LT(1);

        int incDecOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set158=null;

        BaseNode set158_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1171:2: ( INC | DEC )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set158=(Atom)input.LT(1);

            if ( input.LA(1)==DEC||input.LA(1)==INC ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set158)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, incDecOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "incDecOp"


    public static class addSubOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addSubOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1173:1: addSubOp : ( PLUS | MINUS );
    public final pollenParser.addSubOp_return addSubOp() throws RecognitionException {
        pollenParser.addSubOp_return retval = new pollenParser.addSubOp_return();
        retval.start = input.LT(1);

        int addSubOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set159=null;

        BaseNode set159_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1174:2: ( PLUS | MINUS )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set159=(Atom)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set159)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, addSubOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "addSubOp"


    public static class assignOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1176:1: assignOp : ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ );
    public final pollenParser.assignOp_return assignOp() throws RecognitionException {
        pollenParser.assignOp_return retval = new pollenParser.assignOp_return();
        retval.start = input.LT(1);

        int assignOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set160=null;

        BaseNode set160_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1177:2: ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set160=(Atom)input.LT(1);

            if ( input.LA(1)==ADD_EQ||(input.LA(1) >= BITAND_EQ && input.LA(1) <= BITXOR_EQ)||input.LA(1)==DIV_EQ||input.LA(1)==LSHFT_EQ||(input.LA(1) >= MOD_EQ && input.LA(1) <= MUL_EQ)||input.LA(1)==RSHFT_EQ||input.LA(1)==SUB_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set160)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, assignOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignOp"


    public static class multDivModOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multDivModOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1179:1: multDivModOp : ( '*' | '/' | '%' );
    public final pollenParser.multDivModOp_return multDivModOp() throws RecognitionException {
        pollenParser.multDivModOp_return retval = new pollenParser.multDivModOp_return();
        retval.start = input.LT(1);

        int multDivModOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set161=null;

        BaseNode set161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1180:2: ( '*' | '/' | '%' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set161=(Atom)input.LT(1);

            if ( input.LA(1)==124||input.LA(1)==129||input.LA(1)==132 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set161)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, multDivModOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multDivModOp"


    public static class logicalNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalNotOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1182:1: logicalNotOp : LOG_NOT ;
    public final pollenParser.logicalNotOp_return logicalNotOp() throws RecognitionException {
        pollenParser.logicalNotOp_return retval = new pollenParser.logicalNotOp_return();
        retval.start = input.LT(1);

        int logicalNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom LOG_NOT162=null;

        BaseNode LOG_NOT162_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1183:2: ( LOG_NOT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1183:5: LOG_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            LOG_NOT162=(Atom)match(input,LOG_NOT,FOLLOW_LOG_NOT_in_logicalNotOp4655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOG_NOT162_tree = 
            (BaseNode)adaptor.create(LOG_NOT162)
            ;
            adaptor.addChild(root_0, LOG_NOT162_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, logicalNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalNotOp"


    public static class bitwiseNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitwiseNotOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1185:1: bitwiseNotOp : BIT_NOT ;
    public final pollenParser.bitwiseNotOp_return bitwiseNotOp() throws RecognitionException {
        pollenParser.bitwiseNotOp_return retval = new pollenParser.bitwiseNotOp_return();
        retval.start = input.LT(1);

        int bitwiseNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIT_NOT163=null;

        BaseNode BIT_NOT163_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1186:2: ( BIT_NOT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1186:4: BIT_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            BIT_NOT163=(Atom)match(input,BIT_NOT,FOLLOW_BIT_NOT_in_bitwiseNotOp4666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIT_NOT163_tree = 
            (BaseNode)adaptor.create(BIT_NOT163)
            ;
            adaptor.addChild(root_0, BIT_NOT163_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, bitwiseNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitwiseNotOp"


    public static class exprList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1188:1: exprList : ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.exprList_return exprList() throws RecognitionException {
        pollenParser.exprList_return retval = new pollenParser.exprList_return();
        retval.start = input.LT(1);

        int exprList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal165=null;
        pollenParser.expr_return expr164 =null;

        pollenParser.expr_return expr166 =null;


        BaseNode char_literal165_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1189:2: ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0 >= BIT_NOT && LA54_0 <= CHAR)||LA54_0==DEC||LA54_0==HEX_LIT||LA54_0==IDENT||(LA54_0 >= INC && LA54_0 <= INT_LIT)||LA54_0==LOG_NOT||LA54_0==MINUS||LA54_0==OCT_LIT||LA54_0==REAL_LIT||LA54_0==STRING||LA54_0==127||(LA54_0 >= 137 && LA54_0 <= 138)||LA54_0==158||(LA54_0 >= 171 && LA54_0 <= 172)||LA54_0==183) ) {
                alt54=1;
            }
            else if ( (LA54_0==EOF||LA54_0==128||LA54_0==139) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1189:4: expr ( ',' expr )*
                    {
                    pushFollow(FOLLOW_expr_in_exprList4677);
                    expr164=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr164.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1189:9: ( ',' expr )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( (LA53_0==130) ) {
                            alt53=1;
                        }


                        switch (alt53) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1189:10: ',' expr
                    	    {
                    	    char_literal165=(Atom)match(input,130,FOLLOW_130_in_exprList4680); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal165);


                    	    pushFollow(FOLLOW_expr_in_exprList4682);
                    	    expr166=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr166.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1190:3: -> ^( LIST[\"LIST\"] ( expr )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1190:6: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1191:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1191:4: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, exprList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprList"


    public static class expr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1193:1: expr : ( exprLogicalOr '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr ) | exprLogicalOr );
    public final pollenParser.expr_return expr() throws RecognitionException {
        pollenParser.expr_return retval = new pollenParser.expr_return();
        retval.start = input.LT(1);

        int expr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal168=null;
        Atom char_literal170=null;
        pollenParser.exprLogicalOr_return exprLogicalOr167 =null;

        pollenParser.expr_return expr169 =null;

        pollenParser.expr_return expr171 =null;

        pollenParser.exprLogicalOr_return exprLogicalOr172 =null;


        BaseNode char_literal168_tree=null;
        BaseNode char_literal170_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_exprLogicalOr=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalOr");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1194:2: ( exprLogicalOr '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr ) | exprLogicalOr )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( ((LA55_0 >= BIT_NOT && LA55_0 <= CHAR)||LA55_0==DEC||LA55_0==HEX_LIT||LA55_0==IDENT||(LA55_0 >= INC && LA55_0 <= INT_LIT)||LA55_0==LOG_NOT||LA55_0==MINUS||LA55_0==OCT_LIT||LA55_0==REAL_LIT||LA55_0==STRING||LA55_0==127||(LA55_0 >= 137 && LA55_0 <= 138)||LA55_0==158||(LA55_0 >= 171 && LA55_0 <= 172)||LA55_0==183) ) {
                int LA55_1 = input.LA(2);

                if ( (synpred88_pollen()) ) {
                    alt55=1;
                }
                else if ( (true) ) {
                    alt55=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1194:4: exprLogicalOr '?' expr ':' expr
                    {
                    pushFollow(FOLLOW_exprLogicalOr_in_expr4721);
                    exprLogicalOr167=exprLogicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprLogicalOr.add(exprLogicalOr167.getTree());

                    char_literal168=(Atom)match(input,136,FOLLOW_136_in_expr4723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal168);


                    pushFollow(FOLLOW_expr_in_expr4725);
                    expr169=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr169.getTree());

                    char_literal170=(Atom)match(input,133,FOLLOW_133_in_expr4727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal170);


                    pushFollow(FOLLOW_expr_in_expr4729);
                    expr171=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr171.getTree());

                    // AST REWRITE
                    // elements: expr, exprLogicalOr, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1194:36: -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1194:39: ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Quest(E_QUEST, "E_QUEST")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprLogicalOr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1195:4: exprLogicalOr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprLogicalOr_in_expr4752);
                    exprLogicalOr172=exprLogicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprLogicalOr172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class exprLogicalOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalOr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1197:1: exprLogicalOr : ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* ;
    public final pollenParser.exprLogicalOr_return exprLogicalOr() throws RecognitionException {
        pollenParser.exprLogicalOr_return retval = new pollenParser.exprLogicalOr_return();
        retval.start = input.LT(1);

        int exprLogicalOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal174=null;
        pollenParser.exprLogicalAnd_return exprLogicalAnd173 =null;

        pollenParser.exprLogicalAnd_return exprLogicalAnd175 =null;


        BaseNode string_literal174_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_exprLogicalAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1198:2: ( ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1198:4: ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1198:4: ( exprLogicalAnd -> exprLogicalAnd )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1198:5: exprLogicalAnd
            {
            pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr4770);
            exprLogicalAnd173=exprLogicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd173.getTree());

            // AST REWRITE
            // elements: exprLogicalAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1198:20: -> exprLogicalAnd
            {
                adaptor.addChild(root_0, stream_exprLogicalAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1199:3: ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==192) ) {
                    int LA56_1 = input.LA(2);

                    if ( (synpred89_pollen()) ) {
                        alt56=1;
                    }


                }


                switch (alt56) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1200:4: '||' exprLogicalAnd
            	    {
            	    string_literal174=(Atom)match(input,192,FOLLOW_192_in_exprLogicalOr4784); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_192.add(string_literal174);


            	    pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr4786);
            	    exprLogicalAnd175=exprLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd175.getTree());

            	    // AST REWRITE
            	    // elements: exprLogicalOr, 192, exprLogicalAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1201:5: -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1201:8: ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_192.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprLogicalAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, exprLogicalOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalOr"


    public static class exprLogicalAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalAnd"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1204:1: exprLogicalAnd : ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* ;
    public final pollenParser.exprLogicalAnd_return exprLogicalAnd() throws RecognitionException {
        pollenParser.exprLogicalAnd_return retval = new pollenParser.exprLogicalAnd_return();
        retval.start = input.LT(1);

        int exprLogicalAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal177=null;
        pollenParser.exprBitwiseOr_return exprBitwiseOr176 =null;

        pollenParser.exprBitwiseOr_return exprBitwiseOr178 =null;


        BaseNode string_literal177_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_exprBitwiseOr=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseOr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1205:2: ( ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1205:4: ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1205:4: ( exprBitwiseOr -> exprBitwiseOr )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1205:5: exprBitwiseOr
            {
            pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd4825);
            exprBitwiseOr176=exprBitwiseOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr176.getTree());

            // AST REWRITE
            // elements: exprBitwiseOr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1205:19: -> exprBitwiseOr
            {
                adaptor.addChild(root_0, stream_exprBitwiseOr.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1206:2: ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==125) ) {
                    int LA57_1 = input.LA(2);

                    if ( (synpred90_pollen()) ) {
                        alt57=1;
                    }


                }


                switch (alt57) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1207:3: '&&' exprBitwiseOr
            	    {
            	    string_literal177=(Atom)match(input,125,FOLLOW_125_in_exprLogicalAnd4837); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(string_literal177);


            	    pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd4839);
            	    exprBitwiseOr178=exprBitwiseOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr178.getTree());

            	    // AST REWRITE
            	    // elements: exprLogicalAnd, 125, exprBitwiseOr
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1208:4: -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1208:7: ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_125.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseOr.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, exprLogicalAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalAnd"


    public static class exprBitwiseOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseOr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1211:1: exprBitwiseOr : ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* ;
    public final pollenParser.exprBitwiseOr_return exprBitwiseOr() throws RecognitionException {
        pollenParser.exprBitwiseOr_return retval = new pollenParser.exprBitwiseOr_return();
        retval.start = input.LT(1);

        int exprBitwiseOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal180=null;
        pollenParser.exprBitwiseXor_return exprBitwiseXor179 =null;

        pollenParser.exprBitwiseXor_return exprBitwiseXor181 =null;


        BaseNode char_literal180_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_exprBitwiseXor=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseXor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1212:2: ( ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1212:4: ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1212:4: ( exprBitwiseXor -> exprBitwiseXor )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1212:5: exprBitwiseXor
            {
            pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr4876);
            exprBitwiseXor179=exprBitwiseXor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor179.getTree());

            // AST REWRITE
            // elements: exprBitwiseXor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1212:20: -> exprBitwiseXor
            {
                adaptor.addChild(root_0, stream_exprBitwiseXor.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1213:2: ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==191) ) {
                    int LA58_1 = input.LA(2);

                    if ( (synpred91_pollen()) ) {
                        alt58=1;
                    }


                }


                switch (alt58) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:3: '|' exprBitwiseXor
            	    {
            	    char_literal180=(Atom)match(input,191,FOLLOW_191_in_exprBitwiseOr4888); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_191.add(char_literal180);


            	    pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr4890);
            	    exprBitwiseXor181=exprBitwiseXor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor181.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseOr, exprBitwiseXor, 191
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1215:3: -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1215:6: ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_191.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseXor.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, exprBitwiseOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseOr"


    public static class exprBitwiseXor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseXor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1218:1: exprBitwiseXor : ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* ;
    public final pollenParser.exprBitwiseXor_return exprBitwiseXor() throws RecognitionException {
        pollenParser.exprBitwiseXor_return retval = new pollenParser.exprBitwiseXor_return();
        retval.start = input.LT(1);

        int exprBitwiseXor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal183=null;
        pollenParser.exprBitwiseAnd_return exprBitwiseAnd182 =null;

        pollenParser.exprBitwiseAnd_return exprBitwiseAnd184 =null;


        BaseNode char_literal183_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_exprBitwiseAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1219:2: ( ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1219:4: ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1219:4: ( exprBitwiseAnd -> exprBitwiseAnd )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1219:5: exprBitwiseAnd
            {
            pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor4926);
            exprBitwiseAnd182=exprBitwiseAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd182.getTree());

            // AST REWRITE
            // elements: exprBitwiseAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1219:20: -> exprBitwiseAnd
            {
                adaptor.addChild(root_0, stream_exprBitwiseAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1220:2: ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==140) ) {
                    int LA59_1 = input.LA(2);

                    if ( (synpred92_pollen()) ) {
                        alt59=1;
                    }


                }


                switch (alt59) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1221:3: '^' exprBitwiseAnd
            	    {
            	    char_literal183=(Atom)match(input,140,FOLLOW_140_in_exprBitwiseXor4938); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_140.add(char_literal183);


            	    pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor4940);
            	    exprBitwiseAnd184=exprBitwiseAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd184.getTree());

            	    // AST REWRITE
            	    // elements: 140, exprBitwiseXor, exprBitwiseAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1222:3: -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1222:6: ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_140.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, exprBitwiseXor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseXor"


    public static class exprBitwiseAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseAnd"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1225:1: exprBitwiseAnd : ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* ;
    public final pollenParser.exprBitwiseAnd_return exprBitwiseAnd() throws RecognitionException {
        pollenParser.exprBitwiseAnd_return retval = new pollenParser.exprBitwiseAnd_return();
        retval.start = input.LT(1);

        int exprBitwiseAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal186=null;
        pollenParser.exprEquality_return exprEquality185 =null;

        pollenParser.exprEquality_return exprEquality187 =null;


        BaseNode char_literal186_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_exprEquality=new RewriteRuleSubtreeStream(adaptor,"rule exprEquality");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1226:2: ( ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1226:4: ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1226:4: ( exprEquality -> exprEquality )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1226:5: exprEquality
            {
            pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd4976);
            exprEquality185=exprEquality();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality185.getTree());

            // AST REWRITE
            // elements: exprEquality
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1226:18: -> exprEquality
            {
                adaptor.addChild(root_0, stream_exprEquality.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1227:2: ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==126) ) {
                    int LA60_1 = input.LA(2);

                    if ( (synpred93_pollen()) ) {
                        alt60=1;
                    }


                }


                switch (alt60) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1228:3: '&' exprEquality
            	    {
            	    char_literal186=(Atom)match(input,126,FOLLOW_126_in_exprBitwiseAnd4988); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal186);


            	    pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd4990);
            	    exprEquality187=exprEquality();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality187.getTree());

            	    // AST REWRITE
            	    // elements: 126, exprEquality, exprBitwiseAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1229:3: -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1229:6: ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_126.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprEquality.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, exprBitwiseAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseAnd"


    public static class exprEquality_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprEquality"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1232:1: exprEquality : ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* ;
    public final pollenParser.exprEquality_return exprEquality() throws RecognitionException {
        pollenParser.exprEquality_return retval = new pollenParser.exprEquality_return();
        retval.start = input.LT(1);

        int exprEquality_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprRelational_return exprRelational188 =null;

        pollenParser.equalityOp_return equalityOp189 =null;

        pollenParser.exprRelational_return exprRelational190 =null;


        RewriteRuleSubtreeStream stream_equalityOp=new RewriteRuleSubtreeStream(adaptor,"rule equalityOp");
        RewriteRuleSubtreeStream stream_exprRelational=new RewriteRuleSubtreeStream(adaptor,"rule exprRelational");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1233:2: ( ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1233:4: ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1233:4: ( exprRelational -> exprRelational )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1233:5: exprRelational
            {
            pushFollow(FOLLOW_exprRelational_in_exprEquality5026);
            exprRelational188=exprRelational();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational188.getTree());

            // AST REWRITE
            // elements: exprRelational
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1233:20: -> exprRelational
            {
                adaptor.addChild(root_0, stream_exprRelational.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1234:2: ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==EQ||LA61_0==NOT_EQ) ) {
                    int LA61_1 = input.LA(2);

                    if ( (synpred94_pollen()) ) {
                        alt61=1;
                    }


                }


                switch (alt61) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1235:3: equalityOp exprRelational
            	    {
            	    pushFollow(FOLLOW_equalityOp_in_exprEquality5039);
            	    equalityOp189=equalityOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityOp.add(equalityOp189.getTree());

            	    pushFollow(FOLLOW_exprRelational_in_exprEquality5041);
            	    exprRelational190=exprRelational();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational190.getTree());

            	    // AST REWRITE
            	    // elements: exprEquality, exprRelational, equalityOp
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1236:3: -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1236:6: ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_equalityOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprRelational.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, exprEquality_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprEquality"


    public static class exprRelational_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprRelational"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1239:1: exprRelational : ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* ;
    public final pollenParser.exprRelational_return exprRelational() throws RecognitionException {
        pollenParser.exprRelational_return retval = new pollenParser.exprRelational_return();
        retval.start = input.LT(1);

        int exprRelational_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprShift_return exprShift191 =null;

        pollenParser.relationalOp_return relationalOp192 =null;

        pollenParser.exprShift_return exprShift193 =null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_exprShift=new RewriteRuleSubtreeStream(adaptor,"rule exprShift");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:2: ( ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:4: ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:4: ( exprShift -> exprShift )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:5: exprShift
            {
            pushFollow(FOLLOW_exprShift_in_exprRelational5077);
            exprShift191=exprShift();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprShift.add(exprShift191.getTree());

            // AST REWRITE
            // elements: exprShift
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1240:15: -> exprShift
            {
                adaptor.addChild(root_0, stream_exprShift.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1241:2: ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0 >= GT && LA62_0 <= GT_EQ)||(LA62_0 >= LT && LA62_0 <= LT_EQ)) ) {
                    int LA62_1 = input.LA(2);

                    if ( (synpred95_pollen()) ) {
                        alt62=1;
                    }


                }


                switch (alt62) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1242:3: relationalOp exprShift
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_exprRelational5090);
            	    relationalOp192=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relationalOp.add(relationalOp192.getTree());

            	    pushFollow(FOLLOW_exprShift_in_exprRelational5092);
            	    exprShift193=exprShift();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprShift.add(exprShift193.getTree());

            	    // AST REWRITE
            	    // elements: relationalOp, exprRelational, exprShift
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1243:3: -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1243:6: ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_relationalOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprShift.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, exprRelational_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprRelational"


    public static class exprShift_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprShift"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1246:1: exprShift : ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* ;
    public final pollenParser.exprShift_return exprShift() throws RecognitionException {
        pollenParser.exprShift_return retval = new pollenParser.exprShift_return();
        retval.start = input.LT(1);

        int exprShift_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprAddSub_return exprAddSub194 =null;

        pollenParser.shiftOp_return shiftOp195 =null;

        pollenParser.exprAddSub_return exprAddSub196 =null;


        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        RewriteRuleSubtreeStream stream_exprAddSub=new RewriteRuleSubtreeStream(adaptor,"rule exprAddSub");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1247:2: ( ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1247:4: ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1247:4: ( exprAddSub -> exprAddSub )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1247:5: exprAddSub
            {
            pushFollow(FOLLOW_exprAddSub_in_exprShift5129);
            exprAddSub194=exprAddSub();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub194.getTree());

            // AST REWRITE
            // elements: exprAddSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1247:16: -> exprAddSub
            {
                adaptor.addChild(root_0, stream_exprAddSub.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1248:2: ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( ((LA63_0 >= 134 && LA63_0 <= 135)) ) {
                    int LA63_1 = input.LA(2);

                    if ( (synpred96_pollen()) ) {
                        alt63=1;
                    }


                }


                switch (alt63) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:3: shiftOp exprAddSub
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_exprShift5142);
            	    shiftOp195=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftOp.add(shiftOp195.getTree());

            	    pushFollow(FOLLOW_exprAddSub_in_exprShift5145);
            	    exprAddSub196=exprAddSub();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub196.getTree());

            	    // AST REWRITE
            	    // elements: shiftOp, exprAddSub, exprShift
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1250:3: -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1250:6: ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_shiftOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprAddSub.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, exprShift_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprShift"


    public static class exprAddSub_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAddSub"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1253:1: exprAddSub : ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* ;
    public final pollenParser.exprAddSub_return exprAddSub() throws RecognitionException {
        pollenParser.exprAddSub_return retval = new pollenParser.exprAddSub_return();
        retval.start = input.LT(1);

        int exprAddSub_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprMultDiv_return exprMultDiv197 =null;

        pollenParser.addSubOp_return addSubOp198 =null;

        pollenParser.exprMultDiv_return exprMultDiv199 =null;


        RewriteRuleSubtreeStream stream_addSubOp=new RewriteRuleSubtreeStream(adaptor,"rule addSubOp");
        RewriteRuleSubtreeStream stream_exprMultDiv=new RewriteRuleSubtreeStream(adaptor,"rule exprMultDiv");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1254:2: ( ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1254:4: ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1254:4: ( exprMultDiv -> exprMultDiv )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1254:5: exprMultDiv
            {
            pushFollow(FOLLOW_exprMultDiv_in_exprAddSub5182);
            exprMultDiv197=exprMultDiv();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv197.getTree());

            // AST REWRITE
            // elements: exprMultDiv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1254:17: -> exprMultDiv
            {
                adaptor.addChild(root_0, stream_exprMultDiv.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1255:2: ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==MINUS||LA64_0==PLUS) ) {
                    int LA64_1 = input.LA(2);

                    if ( (synpred97_pollen()) ) {
                        alt64=1;
                    }


                }


                switch (alt64) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1256:3: addSubOp exprMultDiv
            	    {
            	    pushFollow(FOLLOW_addSubOp_in_exprAddSub5194);
            	    addSubOp198=addSubOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_addSubOp.add(addSubOp198.getTree());

            	    pushFollow(FOLLOW_exprMultDiv_in_exprAddSub5196);
            	    exprMultDiv199=exprMultDiv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv199.getTree());

            	    // AST REWRITE
            	    // elements: addSubOp, exprAddSub, exprMultDiv
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1257:3: -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1257:6: ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_addSubOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprMultDiv.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, exprAddSub_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprAddSub"


    public static class exprMultDiv_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprMultDiv"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1260:1: exprMultDiv : ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* ;
    public final pollenParser.exprMultDiv_return exprMultDiv() throws RecognitionException {
        pollenParser.exprMultDiv_return retval = new pollenParser.exprMultDiv_return();
        retval.start = input.LT(1);

        int exprMultDiv_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprUnary_return exprUnary200 =null;

        pollenParser.multDivModOp_return multDivModOp201 =null;

        pollenParser.exprUnary_return exprUnary202 =null;


        RewriteRuleSubtreeStream stream_multDivModOp=new RewriteRuleSubtreeStream(adaptor,"rule multDivModOp");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1261:2: ( ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1261:4: ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1261:4: ( exprUnary -> exprUnary )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1261:5: exprUnary
            {
            pushFollow(FOLLOW_exprUnary_in_exprMultDiv5239);
            exprUnary200=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary200.getTree());

            // AST REWRITE
            // elements: exprUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1261:15: -> exprUnary
            {
                adaptor.addChild(root_0, stream_exprUnary.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1262:2: ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==124||LA65_0==129||LA65_0==132) ) {
                    int LA65_1 = input.LA(2);

                    if ( (synpred98_pollen()) ) {
                        alt65=1;
                    }


                }


                switch (alt65) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1263:3: multDivModOp exprUnary
            	    {
            	    pushFollow(FOLLOW_multDivModOp_in_exprMultDiv5251);
            	    multDivModOp201=multDivModOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multDivModOp.add(multDivModOp201.getTree());

            	    pushFollow(FOLLOW_exprUnary_in_exprMultDiv5253);
            	    exprUnary202=exprUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary202.getTree());

            	    // AST REWRITE
            	    // elements: exprUnary, exprMultDiv, multDivModOp
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1264:3: -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1264:6: ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_multDivModOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprUnary.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, exprMultDiv_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprMultDiv"


    public static class exprNew_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprNew"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1267:1: exprNew : 'new' qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) ) ;
    public final pollenParser.exprNew_return exprNew() throws RecognitionException {
        pollenParser.exprNew_return retval = new pollenParser.exprNew_return();
        retval.start = input.LT(1);

        int exprNew_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal203=null;
        pollenParser.qualName_return qualName204 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList205 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess206 =null;


        BaseNode string_literal203_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");

        	String ctor = (typeMods.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;
        	if (!(typeMods.contains(Flags.HOST)))
        		ctor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1274:2: ( 'new' qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1274:4: 'new' qualName fcnArgumentList ( fieldOrArrayAccess )?
            {
            string_literal203=(Atom)match(input,171,FOLLOW_171_in_exprNew5295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal203);


            pushFollow(FOLLOW_qualName_in_exprNew5297);
            qualName204=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName204.getTree());

            pushFollow(FOLLOW_fcnArgumentList_in_exprNew5299);
            fcnArgumentList205=fcnArgumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList205.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1274:35: ( fieldOrArrayAccess )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==138) ) {
                int LA66_1 = input.LA(2);

                if ( (synpred99_pollen()) ) {
                    alt66=1;
                }
            }
            else if ( (LA66_0==131) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1274:35: fieldOrArrayAccess
                    {
                    pushFollow(FOLLOW_fieldOrArrayAccess_in_exprNew5301);
                    fieldOrArrayAccess206=fieldOrArrayAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess206.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: fcnArgumentList, fieldOrArrayAccess
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1275:2: -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1275:5: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.New(E_NEW, "E_NEW")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1276:4: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Call(E_CALL, "E_CALL")
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1277:4: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Ident(E_IDENT, "E_IDENT")
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, (qualName204!=null?input.toString(qualName204.start,qualName204.stop):null) + "." + ctor)
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1277:93: ( fieldOrArrayAccess )?
                if ( stream_fieldOrArrayAccess.hasNext() ) {
                    adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                }
                stream_fieldOrArrayAccess.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, exprNew_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprNew"


    public static class exprUnary_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprUnary"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1279:1: exprUnary : ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] expr MINUS ) | '(' expr ')' -> ^( E_PAREN[\"E_PAREN\"] expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew );
    public final pollenParser.exprUnary_return exprUnary() throws RecognitionException {
        pollenParser.exprUnary_return retval = new pollenParser.exprUnary_return();
        retval.start = input.LT(1);

        int exprUnary_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom MINUS214=null;
        Atom char_literal216=null;
        Atom char_literal218=null;
        pollenParser.primitiveLit_return primitiveLit207 =null;

        pollenParser.injectionCode_return injectionCode208 =null;

        pollenParser.arrayLit_return arrayLit209 =null;

        pollenParser.logicalNotOp_return logicalNotOp210 =null;

        pollenParser.expr_return expr211 =null;

        pollenParser.bitwiseNotOp_return bitwiseNotOp212 =null;

        pollenParser.expr_return expr213 =null;

        pollenParser.expr_return expr215 =null;

        pollenParser.expr_return expr217 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray219 =null;

        pollenParser.incDecOp_return incDecOp220 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray221 =null;

        pollenParser.incDecOp_return incDecOp222 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray223 =null;

        pollenParser.exprNew_return exprNew224 =null;


        BaseNode MINUS214_tree=null;
        BaseNode char_literal216_tree=null;
        BaseNode char_literal218_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arrayLit=new RewriteRuleSubtreeStream(adaptor,"rule arrayLit");
        RewriteRuleSubtreeStream stream_incDecOp=new RewriteRuleSubtreeStream(adaptor,"rule incDecOp");
        RewriteRuleSubtreeStream stream_logicalNotOp=new RewriteRuleSubtreeStream(adaptor,"rule logicalNotOp");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_bitwiseNotOp=new RewriteRuleSubtreeStream(adaptor,"rule bitwiseNotOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1280:2: ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] expr MINUS ) | '(' expr ')' -> ^( E_PAREN[\"E_PAREN\"] expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew )
            int alt67=11;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 158:
            case 172:
            case 183:
                {
                alt67=1;
                }
                break;
            case INJECT:
                {
                alt67=2;
                }
                break;
            case 138:
                {
                alt67=3;
                }
                break;
            case LOG_NOT:
                {
                alt67=4;
                }
                break;
            case BIT_NOT:
                {
                alt67=5;
                }
                break;
            case MINUS:
                {
                alt67=6;
                }
                break;
            case 127:
                {
                alt67=7;
                }
                break;
            case 171:
                {
                int LA67_8 = input.LA(2);

                if ( (synpred107_pollen()) ) {
                    alt67=8;
                }
                else if ( (synpred108_pollen()) ) {
                    alt67=9;
                }
                else if ( (true) ) {
                    alt67=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 8, input);

                    throw nvae;

                }
                }
                break;
            case DEC:
            case INC:
                {
                alt67=10;
                }
                break;
            case IDENT:
            case 137:
                {
                int LA67_13 = input.LA(2);

                if ( (synpred107_pollen()) ) {
                    alt67=8;
                }
                else if ( (synpred108_pollen()) ) {
                    alt67=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }

            switch (alt67) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1280:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_exprUnary5362);
                    primitiveLit207=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit207.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1281:4: injectionCode
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionCode_in_exprUnary5367);
                    injectionCode208=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionCode208.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1282:4: arrayLit
                    {
                    pushFollow(FOLLOW_arrayLit_in_exprUnary5372);
                    arrayLit209=arrayLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLit.add(arrayLit209.getTree());

                    // AST REWRITE
                    // elements: arrayLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1282:16: -> ^( E_VEC[\"E_VEC\"] arrayLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1282:19: ^( E_VEC[\"E_VEC\"] arrayLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_arrayLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1283:4: logicalNotOp expr
                    {
                    pushFollow(FOLLOW_logicalNotOp_in_exprUnary5394);
                    logicalNotOp210=logicalNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicalNotOp.add(logicalNotOp210.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary5396);
                    expr211=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr211.getTree());

                    // AST REWRITE
                    // elements: logicalNotOp, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1283:25: -> ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1283:28: ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_logicalNotOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1284:4: bitwiseNotOp expr
                    {
                    pushFollow(FOLLOW_bitwiseNotOp_in_exprUnary5421);
                    bitwiseNotOp212=bitwiseNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bitwiseNotOp.add(bitwiseNotOp212.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary5423);
                    expr213=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr213.getTree());

                    // AST REWRITE
                    // elements: expr, bitwiseNotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1284:26: -> ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1284:29: ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_bitwiseNotOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1285:4: MINUS expr
                    {
                    MINUS214=(Atom)match(input,MINUS,FOLLOW_MINUS_in_exprUnary5449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS214);


                    pushFollow(FOLLOW_expr_in_exprUnary5451);
                    expr215=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr215.getTree());

                    // AST REWRITE
                    // elements: MINUS, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1285:18: -> ^( E_UNARY[\"E_UNARY\"] expr MINUS )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1285:21: ^( E_UNARY[\"E_UNARY\"] expr MINUS )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, 
                        stream_MINUS.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1286:4: '(' expr ')'
                    {
                    char_literal216=(Atom)match(input,127,FOLLOW_127_in_exprUnary5476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal216);


                    pushFollow(FOLLOW_expr_in_exprUnary5478);
                    expr217=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr217.getTree());

                    char_literal218=(Atom)match(input,128,FOLLOW_128_in_exprUnary5480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal218);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1286:20: -> ^( E_PAREN[\"E_PAREN\"] expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1286:23: ^( E_PAREN[\"E_PAREN\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Paren(E_PAREN, "E_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1287:4: varOrFcnOrArray incDecOp
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary5503);
                    varOrFcnOrArray219=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray219.getTree());

                    pushFollow(FOLLOW_incDecOp_in_exprUnary5505);
                    incDecOp220=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp220.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1287:31: -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1287:34: ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY", true)
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:4: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary5528);
                    varOrFcnOrArray221=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray221.getTree());

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1289:4: incDecOp varOrFcnOrArray
                    {
                    pushFollow(FOLLOW_incDecOp_in_exprUnary5533);
                    incDecOp222=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp222.getTree());

                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary5535);
                    varOrFcnOrArray223=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray223.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1289:31: -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1289:34: ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1290:4: exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_exprUnary5558);
                    exprNew224=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew224.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, exprUnary_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprUnary"


    public static class fcnDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1292:1: fcnDefinition : fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) ;
    public final pollenParser.fcnDefinition_return fcnDefinition() throws RecognitionException {
        pollenParser.fcnDefinition_return retval = new pollenParser.fcnDefinition_return();
        retval.start = input.LT(1);

        int fcnDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr225 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName226 =null;

        pollenParser.formalParameterList_return formalParameterList227 =null;

        pollenParser.fcnBody_return fcnBody228 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1293:2: ( fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1293:4: fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDefinition5568);
            fcnAttr225=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr225.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinition5572);
            fcnType_fcnName226=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName226.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinition5574);
            formalParameterList227=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList227.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinition5576);
            fcnBody228=fcnBody((formalParameterList227!=null?((BaseNode)formalParameterList227.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody228.getTree());

            // AST REWRITE
            // elements: fcnBody, formalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1295:3: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1295:6: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1298:4: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1299:5: ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, fcnDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinition"


    public static class fcnDefinitionHost_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinitionHost"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1303:1: fcnDefinitionHost : fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) ;
    public final pollenParser.fcnDefinitionHost_return fcnDefinitionHost() throws RecognitionException {
        pollenParser.fcnDefinitionHost_return retval = new pollenParser.fcnDefinitionHost_return();
        retval.start = input.LT(1);

        int fcnDefinitionHost_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr229 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName230 =null;

        pollenParser.formalParameterList_return formalParameterList231 =null;

        pollenParser.fcnBody_return fcnBody232 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1305:2: ( fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1305:4: fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDefinitionHost5658);
            fcnAttr229=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr229.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinitionHost5665);
            fcnType_fcnName230=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName230.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinitionHost5668);
            formalParameterList231=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList231.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinitionHost5670);
            fcnBody232=fcnBody((formalParameterList231!=null?((BaseNode)formalParameterList231.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody232.getTree());

            if ( state.backtracking==0 ) { 	featureFlags.add(Flags.PUBLIC); /* enforce */ 	
            			if (!featureFlags.contains(Flags.HOST))
                   				throw new PollenException("Composition features must be one of host functions, export statements, or enum definitions.", input);
            		}

            // AST REWRITE
            // elements: fcnBody, formalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1311:3: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1311:6: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1315:5: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1316:6: ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, fcnDefinitionHost_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinitionHost"


    public static class fcnAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1324:1: fcnAttr : ( 'public' | 'host' | 'preset' )* ;
    public final pollenParser.fcnAttr_return fcnAttr() throws RecognitionException {
        pollenParser.fcnAttr_return retval = new pollenParser.fcnAttr_return();
        retval.start = input.LT(1);

        int fcnAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal233=null;
        Atom string_literal234=null;
        Atom string_literal235=null;

        BaseNode string_literal233_tree=null;
        BaseNode string_literal234_tree=null;
        BaseNode string_literal235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:2: ( ( 'public' | 'host' | 'preset' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:4: ( 'public' | 'host' | 'preset' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:4: ( 'public' | 'host' | 'preset' )*
            loop68:
            do {
                int alt68=4;
                switch ( input.LA(1) ) {
                case 179:
                    {
                    alt68=1;
                    }
                    break;
                case 161:
                    {
                    alt68=2;
                    }
                    break;
                case 175:
                    {
                    alt68=3;
                    }
                    break;

                }

                switch (alt68) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:6: 'public'
            	    {
            	    string_literal233=(Atom)match(input,179,FOLLOW_179_in_fcnAttr5769); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal233_tree = 
            	    (BaseNode)adaptor.create(string_literal233)
            	    ;
            	    adaptor.addChild(root_0, string_literal233_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.PUBLIC); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1326:5: 'host'
            	    {
            	    string_literal234=(Atom)match(input,161,FOLLOW_161_in_fcnAttr5778); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal234_tree = 
            	    (BaseNode)adaptor.create(string_literal234)
            	    ;
            	    adaptor.addChild(root_0, string_literal234_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.HOST); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1327:5: 'preset'
            	    {
            	    string_literal235=(Atom)match(input,175,FOLLOW_175_in_fcnAttr5787); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal235_tree = 
            	    (BaseNode)adaptor.create(string_literal235)
            	    ;
            	    adaptor.addChild(root_0, string_literal235_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.PRESET); }

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, fcnAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnAttr"


    public static class fcnBody_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnBody"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1330:1: fcnBody[CommonTree formals] : braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) ;
    public final pollenParser.fcnBody_return fcnBody(CommonTree formals) throws RecognitionException {
        pollenParser.fcnBody_return retval = new pollenParser.fcnBody_return();
        retval.start = input.LT(1);

        int fcnBody_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen236 =null;

        pollenParser.stmts_return stmts237 =null;

        pollenParser.braceClose_return braceClose238 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1331:3: ( braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1331:5: braceOpen ( stmts ) braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_fcnBody5807);
            braceOpen236=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen236.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1331:15: ( stmts )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1331:16: stmts
            {
            pushFollow(FOLLOW_stmts_in_fcnBody5810);
            stmts237=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts237.getTree());

            }


            pushFollow(FOLLOW_braceClose_in_fcnBody5814);
            braceClose238=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose238.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1331:36: -> ^( FCNBODY[\"FCNBODY\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1331:39: ^( FCNBODY[\"FCNBODY\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new BodyNode(FCNBODY, "FCNBODY")
                , root_1);

                adaptor.addChild(root_1, formals);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, fcnBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnBody"


    public static class fcnDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1333:1: fcnDeclaration : fcnAttr fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ) ;
    public final pollenParser.fcnDeclaration_return fcnDeclaration() throws RecognitionException {
        pollenParser.fcnDeclaration_return retval = new pollenParser.fcnDeclaration_return();
        retval.start = input.LT(1);

        int fcnDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr239 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName240 =null;

        pollenParser.formalParameterList_return formalParameterList241 =null;

        pollenParser.delim_return delim242 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1334:4: ( fcnAttr fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1334:6: fcnAttr fcnType_fcnName ( formalParameterList ) delim
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDeclaration5843);
            fcnAttr239=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr239.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDeclaration5847);
            fcnType_fcnName240=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName240.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1335:19: ( formalParameterList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1335:20: formalParameterList
            {
            pushFollow(FOLLOW_formalParameterList_in_fcnDeclaration5850);
            formalParameterList241=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList241.getTree());

            }


            pushFollow(FOLLOW_delim_in_fcnDeclaration5853);
            delim242=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim242.getTree());

            if ( state.backtracking==0 ) {
            			if (ti.getUnitFlags().contains(Flags.PROTOCOL))
            				featureFlags.add(Flags.PUBLIC);
            		}

            // AST REWRITE
            // elements: formalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1340:4: -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1340:7: ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DCL, "D_FCN_DCL", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1343:4: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1344:4: ^( T_USR[\"T_USR\", featureFlags] IDENT[ti.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, ti.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, fcnDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDeclaration"


    public static class fcnType_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnType_fcnName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1348:1: fcnType_fcnName : ( typeNameArray varArraySpec qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName ) | typeName qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] ) | qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName );
    public final pollenParser.fcnType_fcnName_return fcnType_fcnName() throws RecognitionException {
        pollenParser.fcnType_fcnName_return retval = new pollenParser.fcnType_fcnName_return();
        retval.start = input.LT(1);

        int fcnType_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeNameArray_return typeNameArray243 =null;

        pollenParser.varArraySpec_return varArraySpec244 =null;

        pollenParser.qualName_return qualName245 =null;

        pollenParser.typeName_return typeName246 =null;

        pollenParser.qualName_return qualName247 =null;

        pollenParser.typeName_return typeName248 =null;

        pollenParser.typeName_return typeName249 =null;

        pollenParser.typeName_return typeName250 =null;

        pollenParser.qualName_return qualName251 =null;

        pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName252 =null;


        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");

        	String modCtor = "";
        	String clsCtor = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1356:2: ( typeNameArray varArraySpec qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName ) | typeName qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] ) | qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName )
            int alt69=7;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==142) ) {
                int LA69_1 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==144) ) {
                int LA69_2 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==167) ) {
                int LA69_3 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==165) ) {
                int LA69_4 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==166) ) {
                int LA69_5 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==181) ) {
                int LA69_6 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==187) ) {
                int LA69_7 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==185) ) {
                int LA69_8 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==186) ) {
                int LA69_9 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==IDENT) ) {
                int LA69_10 = input.LA(2);

                if ( (synpred113_pollen()) ) {
                    alt69=1;
                }
                else if ( (synpred114_pollen()) ) {
                    alt69=2;
                }
                else if ( (((((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred115_pollen())) ) {
                    alt69=3;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )&&(input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ))&&synpred116_pollen())) ) {
                    alt69=4;
                }
                else if ( (((synpred117_pollen()&&synpred117_pollen())&&(input.LT(1).getText().equals(ti.getTypeName()) ))) ) {
                    alt69=5;
                }
                else if ( (synpred118_pollen()) ) {
                    alt69=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA69_0==127) && (synpred120_pollen())) {
                alt69=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1356:4: typeNameArray varArraySpec qualName
                    {
                    pushFollow(FOLLOW_typeNameArray_in_fcnType_fcnName5947);
                    typeNameArray243=typeNameArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray243.getTree());

                    pushFollow(FOLLOW_varArraySpec_in_fcnType_fcnName5949);
                    varArraySpec244=varArraySpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec244.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName5951);
                    qualName245=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName245.getTree());

                    // AST REWRITE
                    // elements: typeNameArray, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1357:3: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1357:6: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1358:4: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1359:5: ^( LIST[\"LIST\"] typeNameArray )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeNameArray.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1361:4: typeName qualName
                    {
                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName6010);
                    typeName246=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName246.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName6012);
                    qualName247=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName247.getTree());

                    // AST REWRITE
                    // elements: typeName, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1362:3: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1362:6: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1363:4: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1364:5: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1366:4: {...}? typeName
                    {
                    if ( !(((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "(featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName6081);
                    typeName248=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName248.getTree());

                    if ( state.backtracking==0 ) { 
                    		  String n;
                    		  featureFlags.remove(Flags.PUBLIC);
                    		  featureFlags.add(Flags.HOST);
                    		  if (!ti.getUnitFlags().contains(Flags.COMPOSITION)) {
                    		  	ParseUnit.current().reportError(ti.getTypeName(), "\'preset\' initializer only allowed in compositions: initializer ignored"); 
                    		  	featureFlags.remove(Flags.PRESET);
                    		  	n = "preset";
                    		  }
                    		  else {
                    		  	n = ParseUnit.PRESET_INIT;
                    		  }
                    		}

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1381:3: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1381:6: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1382:4: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1383:4: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1383:29: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.PRESET_INIT)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1385:4: {...}? typeName
                    {
                    if ( !((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName6170);
                    typeName249=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName249.getTree());

                    if ( state.backtracking==0 ) { 
                    		  featureFlags.add(Flags.CONSTRUCTOR); 
                    		  if (featureFlags.contains(Flags.HOST)) hasHostConstructor = true;
                    		  if (!featureFlags.contains(Flags.HOST)) hasTargetConstructor = true;
                    		  modCtor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_MODULE_HOST : ParseUnit.CTOR_MODULE_TARGET;
                    		}

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1393:3: -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1393:6: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1394:4: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1395:4: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1395:29: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, modCtor)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1397:4: {...}? typeName
                    {
                    if ( !((input.LT(1).getText().equals(ti.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "input.LT(1).getText().equals(ti.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName6259);
                    typeName250=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName250.getTree());

                    if ( state.backtracking==0 ) { 
                    		  featureFlags.add(Flags.CONSTRUCTOR); 
                    		  if (featureFlags.contains(Flags.HOST)) hasHostConstructor = true;
                    		  if (!featureFlags.contains(Flags.HOST)) hasTargetConstructor = true;
                    		  clsCtor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;
                    		}

                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1405:3: -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:6: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1406:4: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1406:49: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, clsCtor)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1407:4: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName6316);
                    qualName251=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName251.getTree());

                    if ( state.backtracking==0 ) { featureFlags.add(Flags.VOID_FCN); }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1409:3: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1409:6: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1409:54: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1410:5: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1410:30: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:4: ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName6404);
                    fcnTypes_fcnName252=fcnTypes_fcnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnTypes_fcnName252.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, fcnType_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnType_fcnName"


    public static class fcnTypes_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes_fcnName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1413:1: fcnTypes_fcnName : '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName ) ;
    public final pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName() throws RecognitionException {
        pollenParser.fcnTypes_fcnName_return retval = new pollenParser.fcnTypes_fcnName_return();
        retval.start = input.LT(1);

        int fcnTypes_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal253=null;
        Atom char_literal255=null;
        pollenParser.fcnTypes_return fcnTypes254 =null;

        pollenParser.qualName_return qualName256 =null;


        BaseNode char_literal253_tree=null;
        BaseNode char_literal255_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnTypes");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1414:2: ( '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1414:4: '(' fcnTypes ')' qualName
            {
            char_literal253=(Atom)match(input,127,FOLLOW_127_in_fcnTypes_fcnName6415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal253);


            pushFollow(FOLLOW_fcnTypes_in_fcnTypes_fcnName6417);
            fcnTypes254=fcnTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnTypes.add(fcnTypes254.getTree());

            char_literal255=(Atom)match(input,128,FOLLOW_128_in_fcnTypes_fcnName6419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal255);


            pushFollow(FOLLOW_qualName_in_fcnTypes_fcnName6421);
            qualName256=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName256.getTree());

            // AST REWRITE
            // elements: qualName, fcnTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1414:30: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1414:33: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                , root_1);

                adaptor.addChild(root_1, stream_fcnTypes.nextTree());

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, fcnTypes_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes_fcnName"


    public static class fcnTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1416:1: fcnTypes : typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) ;
    public final pollenParser.fcnTypes_return fcnTypes() throws RecognitionException {
        pollenParser.fcnTypes_return retval = new pollenParser.fcnTypes_return();
        retval.start = input.LT(1);

        int fcnTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal258=null;
        pollenParser.typeName_return typeName257 =null;

        pollenParser.typeName_return typeName259 =null;


        BaseNode char_literal258_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:2: ( typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:4: typeName ( ',' typeName )*
            {
            pushFollow(FOLLOW_typeName_in_fcnTypes6448);
            typeName257=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName257.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:13: ( ',' typeName )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==130) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:14: ',' typeName
            	    {
            	    char_literal258=(Atom)match(input,130,FOLLOW_130_in_fcnTypes6451); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal258);


            	    pushFollow(FOLLOW_typeName_in_fcnTypes6453);
            	    typeName259=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeName.add(typeName259.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            // AST REWRITE
            // elements: typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1417:29: -> ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:32: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:77: ^( LIST[\"LIST\"] ( typeName )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_typeName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_typeName.nextTree());

                }
                stream_typeName.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, fcnTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes"


    public static class formalParameterList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:1: formalParameterList : '(' formalParameters ')' -> formalParameters ;
    public final pollenParser.formalParameterList_return formalParameterList() throws RecognitionException {
        pollenParser.formalParameterList_return retval = new pollenParser.formalParameterList_return();
        retval.start = input.LT(1);

        int formalParameterList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal260=null;
        Atom char_literal262=null;
        pollenParser.formalParameters_return formalParameters261 =null;


        BaseNode char_literal260_tree=null;
        BaseNode char_literal262_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:2: ( '(' formalParameters ')' -> formalParameters )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:4: '(' formalParameters ')'
            {
            char_literal260=(Atom)match(input,127,FOLLOW_127_in_formalParameterList6488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal260);


            pushFollow(FOLLOW_formalParameters_in_formalParameterList6490);
            formalParameters261=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters261.getTree());

            char_literal262=(Atom)match(input,128,FOLLOW_128_in_formalParameterList6492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal262);


            // AST REWRITE
            // elements: formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1420:29: -> formalParameters
            {
                adaptor.addChild(root_0, stream_formalParameters.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, formalParameterList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterList"


    public static class formalParameters_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameters"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1427:1: formalParameters : ( formalParameter ( ',' formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.formalParameters_return formalParameters() throws RecognitionException {
        pollenParser.formalParameters_return retval = new pollenParser.formalParameters_return();
        retval.start = input.LT(1);

        int formalParameters_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal264=null;
        pollenParser.formalParameter_return formalParameter263 =null;

        pollenParser.formalParameter_return formalParameter265 =null;


        BaseNode char_literal264_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:2: ( formalParameter ( ',' formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==IDENT||LA72_0==142||LA72_0==144||(LA72_0 >= 165 && LA72_0 <= 167)||LA72_0==181||(LA72_0 >= 184 && LA72_0 <= 187)) ) {
                alt72=1;
            }
            else if ( (LA72_0==128) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:4: formalParameter ( ',' formalParameter )*
                    {
                    pushFollow(FOLLOW_formalParameter_in_formalParameters6516);
                    formalParameter263=formalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter263.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:20: ( ',' formalParameter )*
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==130) ) {
                            alt71=1;
                        }


                        switch (alt71) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:21: ',' formalParameter
                    	    {
                    	    char_literal264=(Atom)match(input,130,FOLLOW_130_in_formalParameters6519); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal264);


                    	    pushFollow(FOLLOW_formalParameter_in_formalParameters6521);
                    	    formalParameter265=formalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter265.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: formalParameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1431:3: -> ^( LIST[\"LIST\"] ( formalParameter )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1431:6: ^( LIST[\"LIST\"] ( formalParameter )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_formalParameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameter.nextTree());

                        }
                        stream_formalParameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1433:3: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1433:3: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1433:6: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, formalParameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameters"


    public static class formalParameter_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameter"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1436:1: formalParameter : ( 'type' IDENT ( '=' t= typeName )? -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? ) | typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) );
    public final pollenParser.formalParameter_return formalParameter() throws RecognitionException {
        pollenParser.formalParameter_return retval = new pollenParser.formalParameter_return();
        retval.start = input.LT(1);

        int formalParameter_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal266=null;
        Atom IDENT267=null;
        Atom char_literal268=null;
        Atom IDENT270=null;
        Atom char_literal271=null;
        pollenParser.typeName_return t =null;

        pollenParser.typeName_return typeName269 =null;

        pollenParser.expr_return expr272 =null;


        BaseNode string_literal266_tree=null;
        BaseNode IDENT267_tree=null;
        BaseNode char_literal268_tree=null;
        BaseNode IDENT270_tree=null;
        BaseNode char_literal271_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

        	EnumSet<Flags> pFlags = EnumSet.noneOf(Flags.class);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1440:2: ( 'type' IDENT ( '=' t= typeName )? -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? ) | typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==184) ) {
                alt75=1;
            }
            else if ( (LA75_0==IDENT||LA75_0==142||LA75_0==144||(LA75_0 >= 165 && LA75_0 <= 167)||LA75_0==181||(LA75_0 >= 185 && LA75_0 <= 187)) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1440:6: 'type' IDENT ( '=' t= typeName )?
                    {
                    string_literal266=(Atom)match(input,184,FOLLOW_184_in_formalParameter6574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal266);


                    IDENT267=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter6576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT267);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1440:19: ( '=' t= typeName )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==ASSIGN) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1440:21: '=' t= typeName
                            {
                            char_literal268=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter6580); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal268);


                            pushFollow(FOLLOW_typeName_in_formalParameter6584);
                            t=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(t.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { pFlags.add(Flags.TYPE_META_ARG); }

                    // AST REWRITE
                    // elements: IDENT, typeName, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1442:4: -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1442:7: ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", pFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1443:5: ^( T_USR[\"T_USR\", pFlags] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", pFlags)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:11: ( ^( E_TYP[\"E_TYP\"] typeName ) )?
                        if ( stream_typeName.hasNext() ) {
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:11: ^( E_TYP[\"E_TYP\"] typeName )
                            {
                            BaseNode root_2 = (BaseNode)adaptor.nil();
                            root_2 = (BaseNode)adaptor.becomeRoot(
                            new ExprNode.Typ(E_TYP, "E_TYP")
                            , root_2);

                            adaptor.addChild(root_2, stream_typeName.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:7: typeName IDENT ( '=' expr )?
                    {
                    pushFollow(FOLLOW_typeName_in_formalParameter6652);
                    typeName269=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName269.getTree());

                    IDENT270=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter6654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT270);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:22: ( '=' expr )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==ASSIGN) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:24: '=' expr
                            {
                            char_literal271=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter6658); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal271);


                            pushFollow(FOLLOW_expr_in_formalParameter6660);
                            expr272=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr272.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: typeName, IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1446:4: -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1446:7: ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1446:62: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, formalParameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameter"


    public static class fcnArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArgumentList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1449:1: fcnArgumentList : '(' fcnArguments ')' -> fcnArguments ;
    public final pollenParser.fcnArgumentList_return fcnArgumentList() throws RecognitionException {
        pollenParser.fcnArgumentList_return retval = new pollenParser.fcnArgumentList_return();
        retval.start = input.LT(1);

        int fcnArgumentList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal273=null;
        Atom char_literal275=null;
        pollenParser.fcnArguments_return fcnArguments274 =null;


        BaseNode char_literal273_tree=null;
        BaseNode char_literal275_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnArguments=new RewriteRuleSubtreeStream(adaptor,"rule fcnArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1450:2: ( '(' fcnArguments ')' -> fcnArguments )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1450:4: '(' fcnArguments ')'
            {
            char_literal273=(Atom)match(input,127,FOLLOW_127_in_fcnArgumentList6697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal273);


            pushFollow(FOLLOW_fcnArguments_in_fcnArgumentList6699);
            fcnArguments274=fcnArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArguments.add(fcnArguments274.getTree());

            char_literal275=(Atom)match(input,128,FOLLOW_128_in_fcnArgumentList6701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal275);


            // AST REWRITE
            // elements: fcnArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1450:25: -> fcnArguments
            {
                adaptor.addChild(root_0, stream_fcnArguments.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, fcnArgumentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArgumentList"


    public static class fcnArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArguments"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1452:1: fcnArguments : exprList ;
    public final pollenParser.fcnArguments_return fcnArguments() throws RecognitionException {
        pollenParser.fcnArguments_return retval = new pollenParser.fcnArguments_return();
        retval.start = input.LT(1);

        int fcnArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprList_return exprList276 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1453:2: ( exprList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1453:4: exprList
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprList_in_fcnArguments6716);
            exprList276=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprList276.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, fcnArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArguments"


    public static class varOrFcnOrArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrFcnOrArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1455:1: varOrFcnOrArray : ( exprNew | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) );
    public final pollenParser.varOrFcnOrArray_return varOrFcnOrArray() throws RecognitionException {
        pollenParser.varOrFcnOrArray_return retval = new pollenParser.varOrFcnOrArray_return();
        retval.start = input.LT(1);

        int varOrFcnOrArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal278=null;
        Atom IDENT279=null;
        Atom char_literal282=null;
        Atom IDENT283=null;
        Atom char_literal285=null;
        pollenParser.exprNew_return exprNew277 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList280 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess281 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess284 =null;

        pollenParser.qualName_return qualName286 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList287 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess288 =null;

        pollenParser.qualName_return qualName289 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess290 =null;


        BaseNode char_literal278_tree=null;
        BaseNode IDENT279_tree=null;
        BaseNode char_literal282_tree=null;
        BaseNode IDENT283_tree=null;
        BaseNode char_literal285_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1456:2: ( exprNew | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) )
            int alt80=6;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt80=1;
                }
                break;
            case 137:
                {
                int LA80_2 = input.LA(2);

                if ( (synpred129_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred131_pollen()) ) {
                    alt80=3;
                }
                else if ( (synpred132_pollen()) ) {
                    alt80=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA80_6 = input.LA(2);

                if ( (synpred134_pollen()) ) {
                    alt80=5;
                }
                else if ( (true) ) {
                    alt80=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }

            switch (alt80) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1456:4: exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_varOrFcnOrArray6726);
                    exprNew277=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew277.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:4: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    char_literal278=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray6732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal278);


                    IDENT279=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray6734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT279);


                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray6736);
                    fcnArgumentList280=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList280.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:30: ( fieldOrArrayAccess )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==138) ) {
                        int LA76_1 = input.LA(2);

                        if ( (synpred128_pollen()) ) {
                            alt76=1;
                        }
                    }
                    else if ( (LA76_0==131) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:30: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6738);
                            fieldOrArrayAccess281=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess281.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, IDENT, fcnArgumentList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1458:3: -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:6: ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1459:4: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1459:38: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_3);

                        adaptor.addChild(root_3, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1459:98: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:4: '@' IDENT ( fieldOrArrayAccess )?
                    {
                    char_literal282=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray6790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal282);


                    IDENT283=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray6792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT283);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:14: ( fieldOrArrayAccess )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==138) ) {
                        int LA77_1 = input.LA(2);

                        if ( (synpred130_pollen()) ) {
                            alt77=1;
                        }
                    }
                    else if ( (LA77_0==131) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:14: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6794);
                            fieldOrArrayAccess284=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess284.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1461:3: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:6: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:40: ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:83: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1462:4: '@'
                    {
                    char_literal285=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray6833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal285);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1463:3: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1463:6: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1463:41: ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:4: qualName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray6868);
                    qualName286=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName286.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray6870);
                    fcnArgumentList287=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList287.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:29: ( fieldOrArrayAccess )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==138) ) {
                        int LA78_1 = input.LA(2);

                        if ( (synpred133_pollen()) ) {
                            alt78=1;
                        }
                    }
                    else if ( (LA78_0==131) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:29: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6872);
                            fieldOrArrayAccess288=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess288.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: qualName, fcnArgumentList, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1465:3: -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:6: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:40: ^( E_IDENT[\"E_IDENT\"] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:103: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:4: qualName ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray6910);
                    qualName289=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName289.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:13: ( fieldOrArrayAccess )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==138) ) {
                        int LA79_1 = input.LA(2);

                        if ( (synpred135_pollen()) ) {
                            alt79=1;
                        }
                    }
                    else if ( (LA79_0==131) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:13: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6912);
                            fieldOrArrayAccess290=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess290.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1466:33: -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:36: ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:82: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, varOrFcnOrArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varOrFcnOrArray"


    public static class fieldOrArrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldOrArrayAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1468:1: fieldOrArrayAccess : ( fieldAccess | arrayAccess ( fcnArgumentList )? )+ ;
    public final pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess() throws RecognitionException {
        pollenParser.fieldOrArrayAccess_return retval = new pollenParser.fieldOrArrayAccess_return();
        retval.start = input.LT(1);

        int fieldOrArrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fieldAccess_return fieldAccess291 =null;

        pollenParser.arrayAccess_return arrayAccess292 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList293 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:2: ( ( fieldAccess | arrayAccess ( fcnArgumentList )? )+ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:5: ( fieldAccess | arrayAccess ( fcnArgumentList )? )+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:5: ( fieldAccess | arrayAccess ( fcnArgumentList )? )+
            int cnt82=0;
            loop82:
            do {
                int alt82=3;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==131) ) {
                    alt82=1;
                }
                else if ( (LA82_0==138) ) {
                    int LA82_2 = input.LA(2);

                    if ( (synpred138_pollen()) ) {
                        alt82=2;
                    }


                }


                switch (alt82) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:6: fieldAccess
            	    {
            	    pushFollow(FOLLOW_fieldAccess_in_fieldOrArrayAccess6943);
            	    fieldAccess291=fieldAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldAccess291.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:20: arrayAccess ( fcnArgumentList )?
            	    {
            	    pushFollow(FOLLOW_arrayAccess_in_fieldOrArrayAccess6947);
            	    arrayAccess292=arrayAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess292.getTree());

            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:32: ( fcnArgumentList )?
            	    int alt81=2;
            	    int LA81_0 = input.LA(1);

            	    if ( (LA81_0==127) ) {
            	        int LA81_1 = input.LA(2);

            	        if ( (synpred137_pollen()) ) {
            	            alt81=1;
            	        }
            	    }
            	    switch (alt81) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:32: fcnArgumentList
            	            {
            	            pushFollow(FOLLOW_fcnArgumentList_in_fieldOrArrayAccess6949);
            	            fcnArgumentList293=fcnArgumentList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnArgumentList293.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, fieldOrArrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldOrArrayAccess"


    public static class fieldAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1472:1: fieldAccess : ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) );
    public final pollenParser.fieldAccess_return fieldAccess() throws RecognitionException {
        pollenParser.fieldAccess_return retval = new pollenParser.fieldAccess_return();
        retval.start = input.LT(1);

        int fieldAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal294=null;
        Atom IDENT295=null;
        Atom char_literal297=null;
        Atom IDENT298=null;
        pollenParser.fcnArgumentList_return fcnArgumentList296 =null;


        BaseNode char_literal294_tree=null;
        BaseNode IDENT295_tree=null;
        BaseNode char_literal297_tree=null;
        BaseNode IDENT298_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1473:2: ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==131) ) {
                int LA83_1 = input.LA(2);

                if ( (synpred139_pollen()) ) {
                    alt83=1;
                }
                else if ( (true) ) {
                    alt83=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }
            switch (alt83) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1473:4: '.' IDENT fcnArgumentList
                    {
                    char_literal294=(Atom)match(input,131,FOLLOW_131_in_fieldAccess6962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal294);


                    IDENT295=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess6964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT295);


                    pushFollow(FOLLOW_fcnArgumentList_in_fieldAccess6966);
                    fcnArgumentList296=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList296.getTree());

                    // AST REWRITE
                    // elements: fcnArgumentList, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1474:4: -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1474:7: ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL", true)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1475:5: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1476:4: '.' IDENT
                    {
                    char_literal297=(Atom)match(input,131,FOLLOW_131_in_fieldAccess7007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal297);


                    IDENT298=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess7009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT298);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1476:15: -> ^( E_IDENT[\"E_IDENT\", true] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1476:18: ^( E_IDENT[\"E_IDENT\", true] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, fieldAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldAccess"


    public static class arrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1478:1: arrayAccess : '[' ( exprList )? ']' -> ^( E_INDEX[\"E_INDEX\"] ( exprList )? ) ;
    public final pollenParser.arrayAccess_return arrayAccess() throws RecognitionException {
        pollenParser.arrayAccess_return retval = new pollenParser.arrayAccess_return();
        retval.start = input.LT(1);

        int arrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal299=null;
        Atom char_literal301=null;
        pollenParser.exprList_return exprList300 =null;


        BaseNode char_literal299_tree=null;
        BaseNode char_literal301_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:2: ( '[' ( exprList )? ']' -> ^( E_INDEX[\"E_INDEX\"] ( exprList )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:4: '[' ( exprList )? ']'
            {
            char_literal299=(Atom)match(input,138,FOLLOW_138_in_arrayAccess7034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(char_literal299);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:8: ( exprList )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==139) ) {
                int LA84_1 = input.LA(2);

                if ( (synpred140_pollen()) ) {
                    alt84=1;
                }
            }
            else if ( ((LA84_0 >= BIT_NOT && LA84_0 <= CHAR)||LA84_0==DEC||LA84_0==HEX_LIT||LA84_0==IDENT||(LA84_0 >= INC && LA84_0 <= INT_LIT)||LA84_0==LOG_NOT||LA84_0==MINUS||LA84_0==OCT_LIT||LA84_0==REAL_LIT||LA84_0==STRING||(LA84_0 >= 127 && LA84_0 <= 128)||(LA84_0 >= 137 && LA84_0 <= 138)||LA84_0==158||(LA84_0 >= 171 && LA84_0 <= 172)||LA84_0==183) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:9: exprList
                    {
                    pushFollow(FOLLOW_exprList_in_arrayAccess7037);
                    exprList300=exprList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprList.add(exprList300.getTree());

                    }
                    break;

            }


            char_literal301=(Atom)match(input,139,FOLLOW_139_in_arrayAccess7041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(char_literal301);


            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1479:25: -> ^( E_INDEX[\"E_INDEX\"] ( exprList )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:28: ^( E_INDEX[\"E_INDEX\"] ( exprList )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Index(E_INDEX, "E_INDEX")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:65: ( exprList )?
                if ( stream_exprList.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprList.nextTree());

                }
                stream_exprList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, arrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayAccess"


    public static class stmtBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBlock"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1483:1: stmtBlock : braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) ;
    public final pollenParser.stmtBlock_return stmtBlock() throws RecognitionException {
        pollenParser.stmtBlock_return retval = new pollenParser.stmtBlock_return();
        retval.start = input.LT(1);

        int stmtBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen302 =null;

        pollenParser.stmts_return stmts303 =null;

        pollenParser.braceClose_return braceClose304 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1484:2: ( braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1484:4: braceOpen stmts braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_stmtBlock7073);
            braceOpen302=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen302.getTree());

            pushFollow(FOLLOW_stmts_in_stmtBlock7075);
            stmts303=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts303.getTree());

            pushFollow(FOLLOW_braceClose_in_stmtBlock7077);
            braceClose304=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose304.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1484:32: -> ^( S_BLOCK[\"S_BLOCK\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1484:35: ^( S_BLOCK[\"S_BLOCK\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Block(S_BLOCK, "S_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, stmtBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBlock"


    public static class stmts_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmts"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1486:1: stmts : ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | ( ( NL )* ) -> LIST[\"LIST\"] );
    public final pollenParser.stmts_return stmts() throws RecognitionException {
        pollenParser.stmts_return retval = new pollenParser.stmts_return();
        retval.start = input.LT(1);

        int stmts_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL306=null;
        pollenParser.stmt_return stmt305 =null;


        BaseNode NL306_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:2: ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | ( ( NL )* ) -> LIST[\"LIST\"] )
            int alt87=2;
            switch ( input.LA(1) ) {
            case NL:
                {
                int LA87_1 = input.LA(2);

                if ( (synpred142_pollen()) ) {
                    alt87=1;
                }
                else if ( (true) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;

                }
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case IDENT:
            case INC:
            case INJECT:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 127:
            case 137:
            case 138:
            case 142:
            case 143:
            case 144:
            case 148:
            case 149:
            case 151:
            case 158:
            case 159:
            case 161:
            case 162:
            case 165:
            case 166:
            case 167:
            case 171:
            case 172:
            case 176:
            case 178:
            case 180:
            case 181:
            case 182:
            case 183:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
                {
                alt87=1;
                }
                break;
            case 145:
            case 150:
            case 193:
                {
                alt87=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }

            switch (alt87) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:4: ( stmt )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:4: ( stmt )+
                    int cnt85=0;
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==NL) ) {
                            int LA85_1 = input.LA(2);

                            if ( (synpred141_pollen()) ) {
                                alt85=1;
                            }


                        }
                        else if ( ((LA85_0 >= BIT_NOT && LA85_0 <= CHAR)||LA85_0==DEC||LA85_0==HEX_LIT||LA85_0==IDENT||(LA85_0 >= INC && LA85_0 <= INT_LIT)||LA85_0==LOG_NOT||LA85_0==MINUS||LA85_0==OCT_LIT||LA85_0==REAL_LIT||LA85_0==STRING||LA85_0==127||(LA85_0 >= 137 && LA85_0 <= 138)||(LA85_0 >= 142 && LA85_0 <= 144)||(LA85_0 >= 148 && LA85_0 <= 149)||LA85_0==151||(LA85_0 >= 158 && LA85_0 <= 159)||(LA85_0 >= 161 && LA85_0 <= 162)||(LA85_0 >= 165 && LA85_0 <= 167)||(LA85_0 >= 171 && LA85_0 <= 172)||LA85_0==176||LA85_0==178||(LA85_0 >= 180 && LA85_0 <= 183)||(LA85_0 >= 185 && LA85_0 <= 190)) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:5: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_stmts7103);
                    	    stmt305=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmt.add(stmt305.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt85 >= 1 ) break loop85;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(85, input);
                                throw eee;
                        }
                        cnt85++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1487:12: -> ^( LIST[\"LIST\"] ( stmt )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:15: ^( LIST[\"LIST\"] ( stmt )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmt.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt.nextTree());

                        }
                        stream_stmt.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:4: ( ( NL )* )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:4: ( ( NL )* )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:5: ( NL )*
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:5: ( NL )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==NL) ) {
                            int LA86_1 = input.LA(2);

                            if ( (synpred143_pollen()) ) {
                                alt86=1;
                            }


                        }


                        switch (alt86) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:5: NL
                    	    {
                    	    NL306=(Atom)match(input,NL,FOLLOW_NL_in_stmts7125); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL306);


                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1488:10: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, stmts_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmts"


    public static class stmt_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:1: stmt : ( stmtDecl | stmtAssign | stmtBind | stmtBlock | stmtPrint | stmtPeg | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) );
    public final pollenParser.stmt_return stmt() throws RecognitionException {
        pollenParser.stmt_return retval = new pollenParser.stmt_return();
        retval.start = input.LT(1);

        int stmt_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtDecl_return stmtDecl307 =null;

        pollenParser.stmtAssign_return stmtAssign308 =null;

        pollenParser.stmtBind_return stmtBind309 =null;

        pollenParser.stmtBlock_return stmtBlock310 =null;

        pollenParser.stmtPrint_return stmtPrint311 =null;

        pollenParser.stmtPeg_return stmtPeg312 =null;

        pollenParser.stmtReturn_return stmtReturn313 =null;

        pollenParser.stmtBreak_return stmtBreak314 =null;

        pollenParser.stmtContinue_return stmtContinue315 =null;

        pollenParser.stmtFor_return stmtFor316 =null;

        pollenParser.stmtSwitch_return stmtSwitch317 =null;

        pollenParser.stmtDoWhile_return stmtDoWhile318 =null;

        pollenParser.stmtIf_return stmtIf319 =null;

        pollenParser.stmtProvided_return stmtProvided320 =null;

        pollenParser.stmtWhile_return stmtWhile321 =null;

        pollenParser.stmtInjection_return stmtInjection322 =null;

        pollenParser.expr_return expr323 =null;

        pollenParser.delim_return delim324 =null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	typeMods = EnumSet.noneOf(Flags.class);
        	stmtFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1495:2: ( stmtDecl | stmtAssign | stmtBind | stmtBlock | stmtPrint | stmtPeg | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) )
            int alt88=17;
            switch ( input.LA(1) ) {
            case IDENT:
            case 171:
                {
                int LA88_1 = input.LA(2);

                if ( (synpred144_pollen()) ) {
                    alt88=1;
                }
                else if ( (synpred145_pollen()) ) {
                    alt88=2;
                }
                else if ( (synpred146_pollen()) ) {
                    alt88=3;
                }
                else if ( (synpred149_pollen()) ) {
                    alt88=6;
                }
                else if ( (true) ) {
                    alt88=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 1, input);

                    throw nvae;

                }
                }
                break;
            case 127:
                {
                int LA88_7 = input.LA(2);

                if ( (synpred144_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 7, input);

                    throw nvae;

                }
                }
                break;
            case 137:
                {
                int LA88_8 = input.LA(2);

                if ( (synpred145_pollen()) ) {
                    alt88=2;
                }
                else if ( (synpred146_pollen()) ) {
                    alt88=3;
                }
                else if ( (synpred149_pollen()) ) {
                    alt88=6;
                }
                else if ( (true) ) {
                    alt88=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 8, input);

                    throw nvae;

                }
                }
                break;
            case INJECT:
                {
                int LA88_9 = input.LA(2);

                if ( (synpred145_pollen()) ) {
                    alt88=2;
                }
                else if ( (synpred159_pollen()) ) {
                    alt88=16;
                }
                else if ( (true) ) {
                    alt88=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 9, input);

                    throw nvae;

                }
                }
                break;
            case NL:
            case 190:
                {
                alt88=4;
                }
                break;
            case 176:
                {
                alt88=5;
                }
                break;
            case 180:
                {
                alt88=7;
                }
                break;
            case 143:
                {
                alt88=8;
                }
                break;
            case 149:
                {
                alt88=9;
                }
                break;
            case 159:
                {
                alt88=10;
                }
                break;
            case 182:
                {
                alt88=11;
                }
                break;
            case 151:
                {
                alt88=12;
                }
                break;
            case 162:
                {
                alt88=13;
                }
                break;
            case 178:
                {
                alt88=14;
                }
                break;
            case 189:
                {
                alt88=15;
                }
                break;
            case 142:
            case 144:
            case 148:
            case 161:
            case 165:
            case 166:
            case 167:
            case 181:
            case 185:
            case 186:
            case 187:
            case 188:
                {
                alt88=1;
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case INC:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 138:
            case 158:
            case 172:
            case 183:
                {
                alt88=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }

            switch (alt88) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1495:6: stmtDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDecl_in_stmt7152);
                    stmtDecl307=stmtDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDecl307.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1496:6: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmt7159);
                    stmtAssign308=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign308.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1497:4: stmtBind
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBind_in_stmt7164);
                    stmtBind309=stmtBind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBind309.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1498:4: stmtBlock
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBlock_in_stmt7169);
                    stmtBlock310=stmtBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBlock310.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1499:4: stmtPrint
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPrint_in_stmt7174);
                    stmtPrint311=stmtPrint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPrint311.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1500:4: stmtPeg
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPeg_in_stmt7179);
                    stmtPeg312=stmtPeg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPeg312.getTree());

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1501:4: stmtReturn
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtReturn_in_stmt7184);
                    stmtReturn313=stmtReturn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtReturn313.getTree());

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:4: stmtBreak
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBreak_in_stmt7189);
                    stmtBreak314=stmtBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBreak314.getTree());

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1503:6: stmtContinue
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtContinue_in_stmt7196);
                    stmtContinue315=stmtContinue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtContinue315.getTree());

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1504:6: stmtFor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtFor_in_stmt7203);
                    stmtFor316=stmtFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtFor316.getTree());

                    }
                    break;
                case 11 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1505:4: stmtSwitch
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtSwitch_in_stmt7208);
                    stmtSwitch317=stmtSwitch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtSwitch317.getTree());

                    }
                    break;
                case 12 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1506:6: stmtDoWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDoWhile_in_stmt7215);
                    stmtDoWhile318=stmtDoWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDoWhile318.getTree());

                    }
                    break;
                case 13 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1507:4: stmtIf
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtIf_in_stmt7220);
                    stmtIf319=stmtIf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtIf319.getTree());

                    }
                    break;
                case 14 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1508:4: stmtProvided
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtProvided_in_stmt7225);
                    stmtProvided320=stmtProvided();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtProvided320.getTree());

                    }
                    break;
                case 15 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1509:4: stmtWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtWhile_in_stmt7230);
                    stmtWhile321=stmtWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtWhile321.getTree());

                    }
                    break;
                case 16 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1510:4: stmtInjection
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtInjection_in_stmt7236);
                    stmtInjection322=stmtInjection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjection322.getTree());

                    }
                    break;
                case 17 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1511:4: expr delim
                    {
                    pushFollow(FOLLOW_expr_in_stmt7241);
                    expr323=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr323.getTree());

                    pushFollow(FOLLOW_delim_in_stmt7243);
                    delim324=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim324.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1511:15: -> ^( S_EXPR[\"S_EXPR\"] expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1511:18: ^( S_EXPR[\"S_EXPR\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Expr(S_EXPR, "S_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, stmt_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class exprAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1514:1: exprAssign : ( ( exprUnary ASSIGN )=> exprChainedAssign | expr );
    public final pollenParser.exprAssign_return exprAssign() throws RecognitionException {
        pollenParser.exprAssign_return retval = new pollenParser.exprAssign_return();
        retval.start = input.LT(1);

        int exprAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprChainedAssign_return exprChainedAssign325 =null;

        pollenParser.expr_return expr326 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1515:2: ( ( exprUnary ASSIGN )=> exprChainedAssign | expr )
            int alt89=2;
            switch ( input.LA(1) ) {
            case 158:
            case 183:
                {
                int LA89_1 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;

                }
                }
                break;
            case INT_LIT:
                {
                int LA89_2 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);

                    throw nvae;

                }
                }
                break;
            case OCT_LIT:
                {
                int LA89_3 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 3, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LIT:
                {
                int LA89_4 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 4, input);

                    throw nvae;

                }
                }
                break;
            case HEX_LIT:
                {
                int LA89_5 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 5, input);

                    throw nvae;

                }
                }
                break;
            case 172:
                {
                int LA89_6 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA89_7 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 7, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA89_8 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 8, input);

                    throw nvae;

                }
                }
                break;
            case INJECT:
                {
                int LA89_9 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 9, input);

                    throw nvae;

                }
                }
                break;
            case 138:
                {
                int LA89_10 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 10, input);

                    throw nvae;

                }
                }
                break;
            case LOG_NOT:
                {
                int LA89_11 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 11, input);

                    throw nvae;

                }
                }
                break;
            case BIT_NOT:
                {
                int LA89_12 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 12, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA89_13 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 13, input);

                    throw nvae;

                }
                }
                break;
            case 127:
                {
                int LA89_14 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 14, input);

                    throw nvae;

                }
                }
                break;
            case 171:
                {
                int LA89_15 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 15, input);

                    throw nvae;

                }
                }
                break;
            case 137:
                {
                int LA89_16 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 16, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA89_17 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 17, input);

                    throw nvae;

                }
                }
                break;
            case DEC:
            case INC:
                {
                int LA89_18 = input.LA(2);

                if ( (synpred160_pollen()) ) {
                    alt89=1;
                }
                else if ( (true) ) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 18, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1516:2: ( exprUnary ASSIGN )=> exprChainedAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprChainedAssign_in_exprAssign7280);
                    exprChainedAssign325=exprChainedAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprChainedAssign325.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1518:4: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_exprAssign7286);
                    expr326=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr326.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, exprAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprAssign"


    public static class exprChainedAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprChainedAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1520:1: exprChainedAssign : ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) ) ;
    public final pollenParser.exprChainedAssign_return exprChainedAssign() throws RecognitionException {
        pollenParser.exprChainedAssign_return retval = new pollenParser.exprChainedAssign_return();
        retval.start = input.LT(1);

        int exprChainedAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom ASSIGN328=null;
        pollenParser.exprUnary_return exprUnary327 =null;

        pollenParser.exprAssign_return exprAssign329 =null;


        BaseNode ASSIGN328_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1521:2: ( ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1521:4: ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1521:4: ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1521:6: exprUnary ASSIGN exprAssign
            {
            pushFollow(FOLLOW_exprUnary_in_exprChainedAssign7298);
            exprUnary327=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary327.getTree());

            ASSIGN328=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_exprChainedAssign7300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN328);


            pushFollow(FOLLOW_exprAssign_in_exprChainedAssign7302);
            exprAssign329=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign329.getTree());

            // AST REWRITE
            // elements: exprAssign, ASSIGN, exprUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1522:3: -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1522:6: ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Binary(E_BINARY, "E_BINARY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ASSIGN.nextNode()
                );

                adaptor.addChild(root_1, stream_exprUnary.nextTree());

                adaptor.addChild(root_1, stream_exprAssign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, exprChainedAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprChainedAssign"


    public static class stmtAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1526:1: stmtAssign : ( varOrFcnOrArray ASSIGN exprAssign delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) );
    public final pollenParser.stmtAssign_return stmtAssign() throws RecognitionException {
        pollenParser.stmtAssign_return retval = new pollenParser.stmtAssign_return();
        retval.start = input.LT(1);

        int stmtAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom ASSIGN331=null;
        Atom ASSIGN335=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray330 =null;

        pollenParser.exprAssign_return exprAssign332 =null;

        pollenParser.delim_return delim333 =null;

        pollenParser.injectionCode_return injectionCode334 =null;

        pollenParser.expr_return expr336 =null;

        pollenParser.delim_return delim337 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray338 =null;

        pollenParser.assignOp_return assignOp339 =null;

        pollenParser.expr_return expr340 =null;

        pollenParser.delim_return delim341 =null;

        pollenParser.injectionCode_return injectionCode342 =null;

        pollenParser.assignOp_return assignOp343 =null;

        pollenParser.expr_return expr344 =null;

        pollenParser.delim_return delim345 =null;


        BaseNode ASSIGN331_tree=null;
        BaseNode ASSIGN335_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_injectionCode=new RewriteRuleSubtreeStream(adaptor,"rule injectionCode");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1527:2: ( varOrFcnOrArray ASSIGN exprAssign delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) )
            int alt90=4;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==IDENT||LA90_0==137||LA90_0==171) ) {
                int LA90_1 = input.LA(2);

                if ( (synpred161_pollen()) ) {
                    alt90=1;
                }
                else if ( (synpred163_pollen()) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA90_0==INJECT) ) {
                int LA90_4 = input.LA(2);

                if ( (synpred162_pollen()) ) {
                    alt90=2;
                }
                else if ( (true) ) {
                    alt90=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 4, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1527:4: varOrFcnOrArray ASSIGN exprAssign delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign7340);
                    varOrFcnOrArray330=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray330.getTree());

                    ASSIGN331=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign7342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN331);


                    pushFollow(FOLLOW_exprAssign_in_stmtAssign7344);
                    exprAssign332=exprAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign332.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign7346);
                    delim333=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim333.getTree());

                    // AST REWRITE
                    // elements: ASSIGN, varOrFcnOrArray, exprAssign
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1528:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1528:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1528:46: ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_exprAssign.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1529:4: injectionCode ASSIGN expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign7381);
                    injectionCode334=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode334.getTree());

                    ASSIGN335=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign7383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN335);


                    pushFollow(FOLLOW_expr_in_stmtAssign7385);
                    expr336=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr336.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign7387);
                    delim337=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim337.getTree());

                    // AST REWRITE
                    // elements: ASSIGN, injectionCode, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1530:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1530:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1530:46: ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1531:4: varOrFcnOrArray assignOp expr delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign7422);
                    varOrFcnOrArray338=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray338.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign7424);
                    assignOp339=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp339.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign7426);
                    expr340=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr340.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign7429);
                    delim341=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim341.getTree());

                    // AST REWRITE
                    // elements: assignOp, expr, varOrFcnOrArray
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1532:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1532:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1532:46: ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1533:4: injectionCode assignOp expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign7464);
                    injectionCode342=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode342.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign7466);
                    assignOp343=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp343.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign7468);
                    expr344=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr344.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign7470);
                    delim345=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim345.getTree());

                    // AST REWRITE
                    // elements: expr, injectionCode, assignOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1534:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1534:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1534:46: ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, stmtAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtAssign"


    public static class stmtBind_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBind"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1536:1: stmtBind : varOrFcnOrArray BIND userTypeName delim -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray userTypeName ) ;
    public final pollenParser.stmtBind_return stmtBind() throws RecognitionException {
        pollenParser.stmtBind_return retval = new pollenParser.stmtBind_return();
        retval.start = input.LT(1);

        int stmtBind_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIND347=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray346 =null;

        pollenParser.userTypeName_return userTypeName348 =null;

        pollenParser.delim_return delim349 =null;


        BaseNode BIND347_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_userTypeName=new RewriteRuleSubtreeStream(adaptor,"rule userTypeName");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1537:2: ( varOrFcnOrArray BIND userTypeName delim -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray userTypeName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1537:4: varOrFcnOrArray BIND userTypeName delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtBind7510);
            varOrFcnOrArray346=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray346.getTree());

            BIND347=(Atom)match(input,BIND,FOLLOW_BIND_in_stmtBind7512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND347);


            pushFollow(FOLLOW_userTypeName_in_stmtBind7515);
            userTypeName348=userTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_userTypeName.add(userTypeName348.getTree());

            pushFollow(FOLLOW_delim_in_stmtBind7518);
            delim349=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim349.getTree());

            // AST REWRITE
            // elements: varOrFcnOrArray, userTypeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1537:46: -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray userTypeName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1537:49: ^( S_BIND[\"S_BIND\"] varOrFcnOrArray userTypeName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Bind(S_BIND, "S_BIND")
                , root_1);

                adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_1, stream_userTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, stmtBind_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBind"


    public static class stmtPeg_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPeg"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1539:1: stmtPeg : varOrFcnOrArray PEG exprAssign delim -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray exprAssign ) ;
    public final pollenParser.stmtPeg_return stmtPeg() throws RecognitionException {
        pollenParser.stmtPeg_return retval = new pollenParser.stmtPeg_return();
        retval.start = input.LT(1);

        int stmtPeg_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom PEG351=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray350 =null;

        pollenParser.exprAssign_return exprAssign352 =null;

        pollenParser.delim_return delim353 =null;


        BaseNode PEG351_tree=null;
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1540:2: ( varOrFcnOrArray PEG exprAssign delim -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray exprAssign ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1540:4: varOrFcnOrArray PEG exprAssign delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtPeg7546);
            varOrFcnOrArray350=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray350.getTree());

            PEG351=(Atom)match(input,PEG,FOLLOW_PEG_in_stmtPeg7548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PEG.add(PEG351);


            pushFollow(FOLLOW_exprAssign_in_stmtPeg7551);
            exprAssign352=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign352.getTree());

            pushFollow(FOLLOW_delim_in_stmtPeg7554);
            delim353=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim353.getTree());

            // AST REWRITE
            // elements: exprAssign, varOrFcnOrArray
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1540:43: -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray exprAssign )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1540:46: ^( S_PEG[\"S_PEG\"] varOrFcnOrArray exprAssign )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Peg(S_PEG, "S_PEG")
                , root_1);

                adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_1, stream_exprAssign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, stmtPeg_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPeg"


    public static class printList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1542:1: printList : printItemList -> ^( LIST[\"LIST\"] printItemList ) ;
    public final pollenParser.printList_return printList() throws RecognitionException {
        pollenParser.printList_return retval = new pollenParser.printList_return();
        retval.start = input.LT(1);

        int printList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.printItemList_return printItemList354 =null;


        RewriteRuleSubtreeStream stream_printItemList=new RewriteRuleSubtreeStream(adaptor,"rule printItemList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:2: ( printItemList -> ^( LIST[\"LIST\"] printItemList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:5: printItemList
            {
            pushFollow(FOLLOW_printItemList_in_printList7584);
            printItemList354=printItemList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_printItemList.add(printItemList354.getTree());

            // AST REWRITE
            // elements: printItemList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1543:19: -> ^( LIST[\"LIST\"] printItemList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:22: ^( LIST[\"LIST\"] printItemList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_printItemList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, printList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "printList"


    public static class printItemList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printItemList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1545:1: printItemList : ( printItem ( '+' printItem )* -> ( printItem )+ | -> NIL );
    public final pollenParser.printItemList_return printItemList() throws RecognitionException {
        pollenParser.printItemList_return retval = new pollenParser.printItemList_return();
        retval.start = input.LT(1);

        int printItemList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal356=null;
        pollenParser.printItem_return printItem355 =null;

        pollenParser.printItem_return printItem357 =null;


        BaseNode char_literal356_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleSubtreeStream stream_printItem=new RewriteRuleSubtreeStream(adaptor,"rule printItem");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:2: ( printItem ( '+' printItem )* -> ( printItem )+ | -> NIL )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==CHAR||LA92_0==HEX_LIT||LA92_0==IDENT||LA92_0==INT_LIT||LA92_0==OCT_LIT||LA92_0==REAL_LIT||LA92_0==STRING||LA92_0==137||LA92_0==158||(LA92_0 >= 171 && LA92_0 <= 172)||LA92_0==183) ) {
                int LA92_1 = input.LA(2);

                if ( (synpred165_pollen()) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA92_0==BIT_NOT||LA92_0==DEC||(LA92_0 >= INC && LA92_0 <= INJECT)||LA92_0==LOG_NOT||LA92_0==MINUS||LA92_0==NL||LA92_0==SEMI||LA92_0==127||LA92_0==138||(LA92_0 >= 142 && LA92_0 <= 151)||LA92_0==154||LA92_0==156||(LA92_0 >= 159 && LA92_0 <= 162)||(LA92_0 >= 164 && LA92_0 <= 167)||(LA92_0 >= 169 && LA92_0 <= 170)||(LA92_0 >= 175 && LA92_0 <= 182)||(LA92_0 >= 185 && LA92_0 <= 190)||LA92_0==193) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:4: printItem ( '+' printItem )*
                    {
                    pushFollow(FOLLOW_printItem_in_printItemList7606);
                    printItem355=printItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printItem.add(printItem355.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:14: ( '+' printItem )*
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==PLUS) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:16: '+' printItem
                    	    {
                    	    char_literal356=(Atom)match(input,PLUS,FOLLOW_PLUS_in_printItemList7610); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PLUS.add(char_literal356);


                    	    pushFollow(FOLLOW_printItem_in_printItemList7613);
                    	    printItem357=printItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_printItem.add(printItem357.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: printItem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1546:34: -> ( printItem )+
                    {
                        if ( !(stream_printItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_printItem.hasNext() ) {
                            adaptor.addChild(root_0, stream_printItem.nextTree());

                        }
                        stream_printItem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1547:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1547:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, printItemList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "printItemList"


    public static class printItem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printItem"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:1: printItem : ( primitiveLit | varOrFcnOrArray );
    public final pollenParser.printItem_return printItem() throws RecognitionException {
        pollenParser.printItem_return retval = new pollenParser.printItem_return();
        retval.start = input.LT(1);

        int printItem_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit358 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray359 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1550:2: ( primitiveLit | varOrFcnOrArray )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==CHAR||LA93_0==HEX_LIT||LA93_0==INT_LIT||LA93_0==OCT_LIT||LA93_0==REAL_LIT||LA93_0==STRING||LA93_0==158||LA93_0==172||LA93_0==183) ) {
                alt93=1;
            }
            else if ( (LA93_0==IDENT||LA93_0==137||LA93_0==171) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1550:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_printItem7638);
                    primitiveLit358=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit358.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1552:4: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_printItem7646);
                    varOrFcnOrArray359=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray359.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, printItem_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "printItem"


    public static class stmtPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrint"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1554:1: stmtPrint : ( 'print' printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) | 'print' ( stmtPrintTarget[flags] ) printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) );
    public final pollenParser.stmtPrint_return stmtPrint() throws RecognitionException {
        pollenParser.stmtPrint_return retval = new pollenParser.stmtPrint_return();
        retval.start = input.LT(1);

        int stmtPrint_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal360=null;
        Atom string_literal363=null;
        pollenParser.printList_return printList361 =null;

        pollenParser.delim_return delim362 =null;

        pollenParser.stmtPrintTarget_return stmtPrintTarget364 =null;

        pollenParser.printList_return printList365 =null;

        pollenParser.delim_return delim366 =null;


        BaseNode string_literal360_tree=null;
        BaseNode string_literal363_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleSubtreeStream stream_stmtPrintTarget=new RewriteRuleSubtreeStream(adaptor,"rule stmtPrintTarget");
        RewriteRuleSubtreeStream stream_printList=new RewriteRuleSubtreeStream(adaptor,"rule printList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:2: ( 'print' printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) | 'print' ( stmtPrintTarget[flags] ) printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==176) ) {
                int LA94_1 = input.LA(2);

                if ( (synpred167_pollen()) ) {
                    alt94=1;
                }
                else if ( (true) ) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:4: 'print' printList delim
                    {
                    string_literal360=(Atom)match(input,176,FOLLOW_176_in_stmtPrint7661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(string_literal360);


                    pushFollow(FOLLOW_printList_in_stmtPrint7663);
                    printList361=printList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printList.add(printList361.getTree());

                    if ( state.backtracking==0 ) {flags.add(Flags.OUT); }

                    pushFollow(FOLLOW_delim_in_stmtPrint7667);
                    delim362=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim362.getTree());

                    // AST REWRITE
                    // elements: printList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1559:3: -> ^( S_PRINT[\"S_PRINT\", flags] printList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1559:6: ^( S_PRINT[\"S_PRINT\", flags] printList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                        , root_1);

                        adaptor.addChild(root_1, stream_printList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1560:4: 'print' ( stmtPrintTarget[flags] ) printList delim
                    {
                    string_literal363=(Atom)match(input,176,FOLLOW_176_in_stmtPrint7689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(string_literal363);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1560:12: ( stmtPrintTarget[flags] )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1560:13: stmtPrintTarget[flags]
                    {
                    pushFollow(FOLLOW_stmtPrintTarget_in_stmtPrint7692);
                    stmtPrintTarget364=stmtPrintTarget(flags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtPrintTarget.add(stmtPrintTarget364.getTree());

                    }


                    pushFollow(FOLLOW_printList_in_stmtPrint7696);
                    printList365=printList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printList.add(printList365.getTree());

                    pushFollow(FOLLOW_delim_in_stmtPrint7698);
                    delim366=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim366.getTree());

                    // AST REWRITE
                    // elements: printList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1561:3: -> ^( S_PRINT[\"S_PRINT\", flags] printList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1561:6: ^( S_PRINT[\"S_PRINT\", flags] printList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                        , root_1);

                        adaptor.addChild(root_1, stream_printList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, stmtPrint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrint"


    public static class stmtPrintTarget_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrintTarget"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1563:1: stmtPrintTarget[EnumSet<Flags> f] : ( 'log' | 'err' | 'out' ) ;
    public final pollenParser.stmtPrintTarget_return stmtPrintTarget(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.stmtPrintTarget_return retval = new pollenParser.stmtPrintTarget_return();
        retval.start = input.LT(1);

        int stmtPrintTarget_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal367=null;
        Atom string_literal368=null;
        Atom string_literal369=null;

        BaseNode string_literal367_tree=null;
        BaseNode string_literal368_tree=null;
        BaseNode string_literal369_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1564:2: ( ( 'log' | 'err' | 'out' ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:3: ( 'log' | 'err' | 'out' )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:3: ( 'log' | 'err' | 'out' )
            int alt95=3;
            switch ( input.LA(1) ) {
            case 168:
                {
                alt95=1;
                }
                break;
            case 155:
                {
                alt95=2;
                }
                break;
            case 173:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:7: 'log'
                    {
                    string_literal367=(Atom)match(input,168,FOLLOW_168_in_stmtPrintTarget7733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal367_tree = 
                    (BaseNode)adaptor.create(string_literal367)
                    ;
                    adaptor.addChild(root_0, string_literal367_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.LOG); }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1566:6: 'err'
                    {
                    string_literal368=(Atom)match(input,155,FOLLOW_155_in_stmtPrintTarget7743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal368_tree = 
                    (BaseNode)adaptor.create(string_literal368)
                    ;
                    adaptor.addChild(root_0, string_literal368_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.ERR); }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1567:6: 'out'
                    {
                    string_literal369=(Atom)match(input,173,FOLLOW_173_in_stmtPrintTarget7752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal369_tree = 
                    (BaseNode)adaptor.create(string_literal369)
                    ;
                    adaptor.addChild(root_0, string_literal369_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.OUT); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, stmtPrintTarget_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrintTarget"


    public static class stmtReturn_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtReturn"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1570:1: stmtReturn : ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) );
    public final pollenParser.stmtReturn_return stmtReturn() throws RecognitionException {
        pollenParser.stmtReturn_return retval = new pollenParser.stmtReturn_return();
        retval.start = input.LT(1);

        int stmtReturn_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal370=null;
        Atom char_literal371=null;
        Atom char_literal373=null;
        Atom char_literal375=null;
        Atom string_literal377=null;
        pollenParser.expr_return expr372 =null;

        pollenParser.expr_return expr374 =null;

        pollenParser.delim_return delim376 =null;

        pollenParser.expr_return expr378 =null;

        pollenParser.delim_return delim379 =null;


        BaseNode string_literal370_tree=null;
        BaseNode char_literal371_tree=null;
        BaseNode char_literal373_tree=null;
        BaseNode char_literal375_tree=null;
        BaseNode string_literal377_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:2: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==180) ) {
                int LA97_1 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:4: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
                    {
                    string_literal370=(Atom)match(input,180,FOLLOW_180_in_stmtReturn7772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal370);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:13: ( '(' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:14: '('
                    {
                    char_literal371=(Atom)match(input,127,FOLLOW_127_in_stmtReturn7775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal371);


                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:19: ( expr ( ',' expr )+ )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:20: expr ( ',' expr )+
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn7779);
                    expr372=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr372.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:25: ( ',' expr )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==130) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:26: ',' expr
                    	    {
                    	    char_literal373=(Atom)match(input,130,FOLLOW_130_in_stmtReturn7782); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal373);


                    	    pushFollow(FOLLOW_expr_in_stmtReturn7784);
                    	    expr374=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr374.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:38: ( ')' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:39: ')'
                    {
                    char_literal375=(Atom)match(input,128,FOLLOW_128_in_stmtReturn7790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal375);


                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn7793);
                    delim376=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim376.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1575:3: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1575:6: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1575:46: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1575:77: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_3, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1576:4: 'return' ( expr ) delim
                    {
                    string_literal377=(Atom)match(input,180,FOLLOW_180_in_stmtReturn7834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal377);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1576:14: ( expr )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1576:15: expr
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn7838);
                    expr378=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr378.getTree());

                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn7842);
                    delim379=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim379.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1577:3: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1577:6: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1577:46: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1577:77: ^( LIST[\"LIST\"] expr )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_expr.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, stmtReturn_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtReturn"


    public static class stmtBreak_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBreak"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:1: stmtBreak : 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) ;
    public final pollenParser.stmtBreak_return stmtBreak() throws RecognitionException {
        pollenParser.stmtBreak_return retval = new pollenParser.stmtBreak_return();
        retval.start = input.LT(1);

        int stmtBreak_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal380=null;
        pollenParser.delim_return delim381 =null;


        BaseNode string_literal380_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1580:2: ( 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1580:4: 'break' delim
            {
            string_literal380=(Atom)match(input,143,FOLLOW_143_in_stmtBreak7887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal380);


            pushFollow(FOLLOW_delim_in_stmtBreak7889);
            delim381=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim381.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1580:18: -> ^( S_BREAK[\"S_BREAK\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1580:21: ^( S_BREAK[\"S_BREAK\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Break(S_BREAK, "S_BREAK")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, stmtBreak_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBreak"


    public static class stmtContinue_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtContinue"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1582:1: stmtContinue : 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) ;
    public final pollenParser.stmtContinue_return stmtContinue() throws RecognitionException {
        pollenParser.stmtContinue_return retval = new pollenParser.stmtContinue_return();
        retval.start = input.LT(1);

        int stmtContinue_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal382=null;
        pollenParser.delim_return delim383 =null;


        BaseNode string_literal382_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1583:2: ( 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1583:4: 'continue' delim
            {
            string_literal382=(Atom)match(input,149,FOLLOW_149_in_stmtContinue7911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal382);


            pushFollow(FOLLOW_delim_in_stmtContinue7913);
            delim383=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim383.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1583:21: -> ^( S_CONTINUE[\"S_CONTINUE\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1583:24: ^( S_CONTINUE[\"S_CONTINUE\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Continue(S_CONTINUE, "S_CONTINUE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, stmtContinue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtContinue"


    public static class stmtFor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtFor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1585:1: stmtFor : 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar ) ;
    public final pollenParser.stmtFor_return stmtFor() throws RecognitionException {
        pollenParser.stmtFor_return retval = new pollenParser.stmtFor_return();
        retval.start = input.LT(1);

        int stmtFor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal384=null;
        Atom char_literal389=null;
        pollenParser.defaultLoopVar_return defaultLoopVar385 =null;

        pollenParser.stmtForInit_return stmtForInit386 =null;

        pollenParser.stmtForCond_return stmtForCond387 =null;

        pollenParser.stmtForNext_return stmtForNext388 =null;

        pollenParser.stmtBlock_return stmtBlock390 =null;


        BaseNode string_literal384_tree=null;
        BaseNode char_literal389_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleSubtreeStream stream_stmtForCond=new RewriteRuleSubtreeStream(adaptor,"rule stmtForCond");
        RewriteRuleSubtreeStream stream_stmtForInit=new RewriteRuleSubtreeStream(adaptor,"rule stmtForInit");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_defaultLoopVar=new RewriteRuleSubtreeStream(adaptor,"rule defaultLoopVar");
        RewriteRuleSubtreeStream stream_stmtForNext=new RewriteRuleSubtreeStream(adaptor,"rule stmtForNext");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1586:5: ( 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1586:9: 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' stmtBlock
            {
            string_literal384=(Atom)match(input,159,FOLLOW_159_in_stmtFor7940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal384);


            pushFollow(FOLLOW_defaultLoopVar_in_stmtFor7942);
            defaultLoopVar385=defaultLoopVar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defaultLoopVar.add(defaultLoopVar385.getTree());

            pushFollow(FOLLOW_stmtForInit_in_stmtFor7944);
            stmtForInit386=stmtForInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForInit.add(stmtForInit386.getTree());

            pushFollow(FOLLOW_stmtForCond_in_stmtFor7946);
            stmtForCond387=stmtForCond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForCond.add(stmtForCond387.getTree());

            pushFollow(FOLLOW_stmtForNext_in_stmtFor7948);
            stmtForNext388=stmtForNext();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForNext.add(stmtForNext388.getTree());

            char_literal389=(Atom)match(input,128,FOLLOW_128_in_stmtFor7950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal389);


            pushFollow(FOLLOW_stmtBlock_in_stmtFor7952);
            stmtBlock390=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock390.getTree());

            // AST REWRITE
            // elements: stmtBlock, defaultLoopVar, stmtForNext, stmtForCond, stmtForInit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1587:13: -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1587:16: ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.For(S_FOR, "S_FOR")
                , root_1);

                adaptor.addChild(root_1, stream_stmtForInit.nextTree());

                adaptor.addChild(root_1, stream_stmtForCond.nextTree());

                adaptor.addChild(root_1, stream_stmtForNext.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_1, stream_defaultLoopVar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, stmtFor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtFor"


    public static class stmtForCond_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForCond"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1589:1: stmtForCond : ( SEMI -> NIL | expr SEMI -> expr );
    public final pollenParser.stmtForCond_return stmtForCond() throws RecognitionException {
        pollenParser.stmtForCond_return retval = new pollenParser.stmtForCond_return();
        retval.start = input.LT(1);

        int stmtForCond_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI391=null;
        Atom SEMI393=null;
        pollenParser.expr_return expr392 =null;


        BaseNode SEMI391_tree=null;
        BaseNode SEMI393_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1590:5: ( SEMI -> NIL | expr SEMI -> expr )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==SEMI) ) {
                alt98=1;
            }
            else if ( ((LA98_0 >= BIT_NOT && LA98_0 <= CHAR)||LA98_0==DEC||LA98_0==HEX_LIT||LA98_0==IDENT||(LA98_0 >= INC && LA98_0 <= INT_LIT)||LA98_0==LOG_NOT||LA98_0==MINUS||LA98_0==OCT_LIT||LA98_0==REAL_LIT||LA98_0==STRING||LA98_0==127||(LA98_0 >= 137 && LA98_0 <= 138)||LA98_0==158||(LA98_0 >= 171 && LA98_0 <= 172)||LA98_0==183) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1590:9: SEMI
                    {
                    SEMI391=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond8005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI391);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1591:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1592:9: expr SEMI
                    {
                    pushFollow(FOLLOW_expr_in_stmtForCond8030);
                    expr392=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr392.getTree());

                    SEMI393=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond8032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI393);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1592:19: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, stmtForCond_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForCond"


    public static class defaultLoopVar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultLoopVar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1594:1: defaultLoopVar : lv= '(' -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) ) ;
    public final pollenParser.defaultLoopVar_return defaultLoopVar() throws RecognitionException {
        pollenParser.defaultLoopVar_return retval = new pollenParser.defaultLoopVar_return();
        retval.start = input.LT(1);

        int defaultLoopVar_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom lv=null;

        BaseNode lv_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1595:2: (lv= '(' -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1595:4: lv= '('
            {
            lv=(Atom)match(input,127,FOLLOW_127_in_defaultLoopVar8054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(lv);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1595:11: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1595:14: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1596:12: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1597:13: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, lv, "uint32")
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, ParseUnit.DEFAULT_LOOPVAR)
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, defaultLoopVar_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "defaultLoopVar"


    public static class stmtForInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1601:1: stmtForInit : ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | stmtAssign );
    public final pollenParser.stmtForInit_return stmtForInit() throws RecognitionException {
        pollenParser.stmtForInit_return retval = new pollenParser.stmtForInit_return();
        retval.start = input.LT(1);

        int stmtForInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI394=null;
        Atom IDENT396=null;
        Atom char_literal397=null;
        Atom SEMI399=null;
        pollenParser.typeName_return typeName395 =null;

        pollenParser.expr_return expr398 =null;

        pollenParser.stmtAssign_return stmtAssign400 =null;


        BaseNode SEMI394_tree=null;
        BaseNode IDENT396_tree=null;
        BaseNode char_literal397_tree=null;
        BaseNode SEMI399_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1602:5: ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | stmtAssign )
            int alt99=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt99=1;
                }
                break;
            case IDENT:
                {
                int LA99_2 = input.LA(2);

                if ( (synpred174_pollen()) ) {
                    alt99=2;
                }
                else if ( (true) ) {
                    alt99=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;

                }
                }
                break;
            case 142:
            case 144:
            case 165:
            case 166:
            case 167:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt99=2;
                }
                break;
            case INJECT:
            case 137:
            case 171:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }

            switch (alt99) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1602:9: SEMI
                    {
                    SEMI394=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit8148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI394);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1603:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1604:9: typeName IDENT '=' expr SEMI
                    {
                    pushFollow(FOLLOW_typeName_in_stmtForInit8174);
                    typeName395=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName395.getTree());

                    IDENT396=(Atom)match(input,IDENT,FOLLOW_IDENT_in_stmtForInit8176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT396);


                    char_literal397=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtForInit8178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal397);


                    pushFollow(FOLLOW_expr_in_stmtForInit8180);
                    expr398=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr398.getTree());

                    SEMI399=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit8182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI399);


                    // AST REWRITE
                    // elements: typeName, IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1605:13: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1605:16: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Decl(S_DECL, "S_DECL")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1606:12: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_typeName.nextTree());

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1607:9: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmtForInit8244);
                    stmtAssign400=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign400.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, stmtForInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForInit"


    public static class stmtForNext_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForNext"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1609:1: stmtForNext : ( -> NIL | expr );
    public final pollenParser.stmtForNext_return stmtForNext() throws RecognitionException {
        pollenParser.stmtForNext_return retval = new pollenParser.stmtForNext_return();
        retval.start = input.LT(1);

        int stmtForNext_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr401 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1610:5: ( -> NIL | expr )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==128) ) {
                alt100=1;
            }
            else if ( ((LA100_0 >= BIT_NOT && LA100_0 <= CHAR)||LA100_0==DEC||LA100_0==HEX_LIT||LA100_0==IDENT||(LA100_0 >= INC && LA100_0 <= INT_LIT)||LA100_0==LOG_NOT||LA100_0==MINUS||LA100_0==OCT_LIT||LA100_0==REAL_LIT||LA100_0==STRING||LA100_0==127||(LA100_0 >= 137 && LA100_0 <= 138)||LA100_0==158||(LA100_0 >= 171 && LA100_0 <= 172)||LA100_0==183) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1611:13: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1611:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1612:9: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_stmtForNext8287);
                    expr401=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr401.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, stmtForNext_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForNext"


    public static class stmtSwitch_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtSwitch"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1620:1: stmtSwitch : 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) ;
    public final pollenParser.stmtSwitch_return stmtSwitch() throws RecognitionException {
        pollenParser.stmtSwitch_return retval = new pollenParser.stmtSwitch_return();
        retval.start = input.LT(1);

        int stmtSwitch_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal402=null;
        Atom char_literal403=null;
        Atom char_literal405=null;
        pollenParser.expr_return expr404 =null;

        pollenParser.braceOpen_return braceOpen406 =null;

        pollenParser.stmtsCase_return stmtsCase407 =null;

        pollenParser.stmtDefault_return stmtDefault408 =null;

        pollenParser.braceClose_return braceClose409 =null;


        BaseNode string_literal402_tree=null;
        BaseNode char_literal403_tree=null;
        BaseNode char_literal405_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtsCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtsCase");
        RewriteRuleSubtreeStream stream_stmtDefault=new RewriteRuleSubtreeStream(adaptor,"rule stmtDefault");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1621:2: ( 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1621:4: 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose
            {
            string_literal402=(Atom)match(input,182,FOLLOW_182_in_stmtSwitch8306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal402);


            char_literal403=(Atom)match(input,127,FOLLOW_127_in_stmtSwitch8308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal403);


            pushFollow(FOLLOW_expr_in_stmtSwitch8310);
            expr404=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr404.getTree());

            char_literal405=(Atom)match(input,128,FOLLOW_128_in_stmtSwitch8312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal405);


            pushFollow(FOLLOW_braceOpen_in_stmtSwitch8314);
            braceOpen406=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen406.getTree());

            pushFollow(FOLLOW_stmtsCase_in_stmtSwitch8316);
            stmtsCase407=stmtsCase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsCase.add(stmtsCase407.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1621:46: ( stmtDefault )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==150) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1621:46: stmtDefault
                    {
                    pushFollow(FOLLOW_stmtDefault_in_stmtSwitch8318);
                    stmtDefault408=stmtDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtDefault.add(stmtDefault408.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_stmtSwitch8321);
            braceClose409=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose409.getTree());

            // AST REWRITE
            // elements: stmtDefault, expr, stmtsCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1621:70: -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1621:73: ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Switch(S_SWITCH, "S_SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtsCase.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1621:129: ( stmtDefault )?
                if ( stream_stmtDefault.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtDefault.nextTree());

                }
                stream_stmtDefault.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, stmtSwitch_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtSwitch"


    public static class stmtsCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsCase"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1623:1: stmtsCase : ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) ;
    public final pollenParser.stmtsCase_return stmtsCase() throws RecognitionException {
        pollenParser.stmtsCase_return retval = new pollenParser.stmtsCase_return();
        retval.start = input.LT(1);

        int stmtsCase_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtCase_return stmtCase410 =null;


        RewriteRuleSubtreeStream stream_stmtCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtCase");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:2: ( ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:4: ( stmtCase )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:4: ( stmtCase )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==145) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:4: stmtCase
            	    {
            	    pushFollow(FOLLOW_stmtCase_in_stmtsCase8351);
            	    stmtCase410=stmtCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtCase.add(stmtCase410.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1624:14: -> ^( LIST[\"LIST\"] ( stmtCase )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:17: ^( LIST[\"LIST\"] ( stmtCase )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:42: ( stmtCase )*
                while ( stream_stmtCase.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtCase.nextTree());

                }
                stream_stmtCase.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, stmtsCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsCase"


    public static class stmtDefault_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDefault"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1626:1: stmtDefault : 'default' ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts ) ;
    public final pollenParser.stmtDefault_return stmtDefault() throws RecognitionException {
        pollenParser.stmtDefault_return retval = new pollenParser.stmtDefault_return();
        retval.start = input.LT(1);

        int stmtDefault_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal411=null;
        Atom char_literal412=null;
        Atom NL413=null;
        pollenParser.stmts_return stmts414 =null;


        BaseNode string_literal411_tree=null;
        BaseNode char_literal412_tree=null;
        BaseNode NL413_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:2: ( 'default' ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:4: 'default' ':' ( NL )* stmts
            {
            string_literal411=(Atom)match(input,150,FOLLOW_150_in_stmtDefault8375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal411);


            char_literal412=(Atom)match(input,133,FOLLOW_133_in_stmtDefault8377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal412);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:18: ( NL )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==NL) ) {
                    int LA103_1 = input.LA(2);

                    if ( (synpred178_pollen()) ) {
                        alt103=1;
                    }


                }


                switch (alt103) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:18: NL
            	    {
            	    NL413=(Atom)match(input,NL,FOLLOW_NL_in_stmtDefault8379); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL413);


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            pushFollow(FOLLOW_stmts_in_stmtDefault8382);
            stmts414=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts414.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1627:28: -> ^( S_CASE[\"S_CASE\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:31: ^( S_CASE[\"S_CASE\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, stmtDefault_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDefault"


    public static class stmtCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtCase"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:1: stmtCase : 'case' ( INT_LIT ) ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT ) ;
    public final pollenParser.stmtCase_return stmtCase() throws RecognitionException {
        pollenParser.stmtCase_return retval = new pollenParser.stmtCase_return();
        retval.start = input.LT(1);

        int stmtCase_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal415=null;
        Atom INT_LIT416=null;
        Atom char_literal417=null;
        Atom NL418=null;
        pollenParser.stmts_return stmts419 =null;


        BaseNode string_literal415_tree=null;
        BaseNode INT_LIT416_tree=null;
        BaseNode char_literal417_tree=null;
        BaseNode NL418_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:2: ( 'case' ( INT_LIT ) ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:4: 'case' ( INT_LIT ) ':' ( NL )* stmts
            {
            string_literal415=(Atom)match(input,145,FOLLOW_145_in_stmtCase8406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal415);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:11: ( INT_LIT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:12: INT_LIT
            {
            INT_LIT416=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_stmtCase8409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT416);


            }


            char_literal417=(Atom)match(input,133,FOLLOW_133_in_stmtCase8412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal417);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:25: ( NL )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==NL) ) {
                    int LA104_1 = input.LA(2);

                    if ( (synpred179_pollen()) ) {
                        alt104=1;
                    }


                }


                switch (alt104) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:25: NL
            	    {
            	    NL418=(Atom)match(input,NL,FOLLOW_NL_in_stmtCase8414); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL418);


            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            pushFollow(FOLLOW_stmts_in_stmtCase8417);
            stmts419=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts419.getTree());

            // AST REWRITE
            // elements: INT_LIT, stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1630:35: -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:38: ^( S_CASE[\"S_CASE\"] stmts INT_LIT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_1, 
                stream_INT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, stmtCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtCase"


    public static class stmtDoWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDoWhile"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1632:1: stmtDoWhile : 'do' stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) ;
    public final pollenParser.stmtDoWhile_return stmtDoWhile() throws RecognitionException {
        pollenParser.stmtDoWhile_return retval = new pollenParser.stmtDoWhile_return();
        retval.start = input.LT(1);

        int stmtDoWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal420=null;
        Atom string_literal422=null;
        Atom char_literal423=null;
        Atom char_literal425=null;
        pollenParser.stmtBlock_return stmtBlock421 =null;

        pollenParser.expr_return expr424 =null;

        pollenParser.delim_return delim426 =null;


        BaseNode string_literal420_tree=null;
        BaseNode string_literal422_tree=null;
        BaseNode char_literal423_tree=null;
        BaseNode char_literal425_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1633:2: ( 'do' stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1633:4: 'do' stmtBlock 'while' '(' expr ')' delim
            {
            string_literal420=(Atom)match(input,151,FOLLOW_151_in_stmtDoWhile8443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal420);


            pushFollow(FOLLOW_stmtBlock_in_stmtDoWhile8445);
            stmtBlock421=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock421.getTree());

            string_literal422=(Atom)match(input,189,FOLLOW_189_in_stmtDoWhile8447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal422);


            char_literal423=(Atom)match(input,127,FOLLOW_127_in_stmtDoWhile8449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal423);


            pushFollow(FOLLOW_expr_in_stmtDoWhile8451);
            expr424=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr424.getTree());

            char_literal425=(Atom)match(input,128,FOLLOW_128_in_stmtDoWhile8453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal425);


            pushFollow(FOLLOW_delim_in_stmtDoWhile8455);
            delim426=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim426.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1633:47: -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1633:50: ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE", true)
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, stmtDoWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDoWhile"


    public static class stmtIf_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIf"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:1: stmtIf : 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) ;
    public final pollenParser.stmtIf_return stmtIf() throws RecognitionException {
        pollenParser.stmtIf_return retval = new pollenParser.stmtIf_return();
        retval.start = input.LT(1);

        int stmtIf_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal427=null;
        pollenParser.stmtIfBlock_return stmtIfBlock428 =null;

        pollenParser.stmtsElif_return stmtsElif429 =null;

        pollenParser.stmtElse_return stmtElse430 =null;


        BaseNode string_literal427_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_stmtsElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtsElif");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:2: ( 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:4: 'if' stmtIfBlock stmtsElif ( stmtElse )?
            {
            string_literal427=(Atom)match(input,162,FOLLOW_162_in_stmtIf8482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal427);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtIf8484);
            stmtIfBlock428=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock428.getTree());

            pushFollow(FOLLOW_stmtsElif_in_stmtIf8486);
            stmtsElif429=stmtsElif();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsElif.add(stmtsElif429.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:31: ( stmtElse )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==153) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:31: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtIf8488);
                    stmtElse430=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse430.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtElse, stmtsElif, stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1636:41: -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:44: ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.If(S_IF, "S_IF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_1, stream_stmtsElif.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:94: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, stmtIf_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIf"


    public static class stmtIfBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIfBlock"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1638:1: stmtIfBlock : '(' expr ')' stmtBlock -> expr stmtBlock ;
    public final pollenParser.stmtIfBlock_return stmtIfBlock() throws RecognitionException {
        pollenParser.stmtIfBlock_return retval = new pollenParser.stmtIfBlock_return();
        retval.start = input.LT(1);

        int stmtIfBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal431=null;
        Atom char_literal433=null;
        pollenParser.expr_return expr432 =null;

        pollenParser.stmtBlock_return stmtBlock434 =null;


        BaseNode char_literal431_tree=null;
        BaseNode char_literal433_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1639:2: ( '(' expr ')' stmtBlock -> expr stmtBlock )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1639:4: '(' expr ')' stmtBlock
            {
            char_literal431=(Atom)match(input,127,FOLLOW_127_in_stmtIfBlock8518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal431);


            pushFollow(FOLLOW_expr_in_stmtIfBlock8520);
            expr432=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr432.getTree());

            char_literal433=(Atom)match(input,128,FOLLOW_128_in_stmtIfBlock8522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal433);


            pushFollow(FOLLOW_stmtBlock_in_stmtIfBlock8524);
            stmtBlock434=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock434.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1639:27: -> expr stmtBlock
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, stmtIfBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIfBlock"


    public static class stmtsElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsElif"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1641:1: stmtsElif : ( stmtElif )* -> ^( LIST[\"LIST\"] ( stmtElif )* ) ;
    public final pollenParser.stmtsElif_return stmtsElif() throws RecognitionException {
        pollenParser.stmtsElif_return retval = new pollenParser.stmtsElif_return();
        retval.start = input.LT(1);

        int stmtsElif_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtElif_return stmtElif435 =null;


        RewriteRuleSubtreeStream stream_stmtElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtElif");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:2: ( ( stmtElif )* -> ^( LIST[\"LIST\"] ( stmtElif )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:4: ( stmtElif )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:4: ( stmtElif )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==152) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:4: stmtElif
            	    {
            	    pushFollow(FOLLOW_stmtElif_in_stmtsElif8540);
            	    stmtElif435=stmtElif();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtElif.add(stmtElif435.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtElif
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1642:14: -> ^( LIST[\"LIST\"] ( stmtElif )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:17: ^( LIST[\"LIST\"] ( stmtElif )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:42: ( stmtElif )*
                while ( stream_stmtElif.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElif.nextTree());

                }
                stream_stmtElif.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, stmtsElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsElif"


    public static class stmtElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElif"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1644:1: stmtElif : 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) ;
    public final pollenParser.stmtElif_return stmtElif() throws RecognitionException {
        pollenParser.stmtElif_return retval = new pollenParser.stmtElif_return();
        retval.start = input.LT(1);

        int stmtElif_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal436=null;
        pollenParser.stmtIfBlock_return stmtIfBlock437 =null;


        BaseNode string_literal436_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1645:2: ( 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1645:4: 'elif' stmtIfBlock
            {
            string_literal436=(Atom)match(input,152,FOLLOW_152_in_stmtElif8564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal436);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtElif8566);
            stmtIfBlock437=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock437.getTree());

            // AST REWRITE
            // elements: stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1645:23: -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1645:26: ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Elif(S_ELIF, "S_ELIF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, stmtElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElif"


    public static class stmtElse_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElse"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1647:1: stmtElse : 'else' stmtBlock -> stmtBlock ;
    public final pollenParser.stmtElse_return stmtElse() throws RecognitionException {
        pollenParser.stmtElse_return retval = new pollenParser.stmtElse_return();
        retval.start = input.LT(1);

        int stmtElse_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal438=null;
        pollenParser.stmtBlock_return stmtBlock439 =null;


        BaseNode string_literal438_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:2: ( 'else' stmtBlock -> stmtBlock )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:4: 'else' stmtBlock
            {
            string_literal438=(Atom)match(input,153,FOLLOW_153_in_stmtElse8590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal438);


            pushFollow(FOLLOW_stmtBlock_in_stmtElse8592);
            stmtBlock439=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock439.getTree());

            // AST REWRITE
            // elements: stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1648:21: -> stmtBlock
            {
                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, stmtElse_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElse"


    public static class stmtProvided_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtProvided"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1650:1: stmtProvided : 'provided' '(' expr ')' stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) ;
    public final pollenParser.stmtProvided_return stmtProvided() throws RecognitionException {
        pollenParser.stmtProvided_return retval = new pollenParser.stmtProvided_return();
        retval.start = input.LT(1);

        int stmtProvided_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal440=null;
        Atom char_literal441=null;
        Atom char_literal443=null;
        pollenParser.expr_return expr442 =null;

        pollenParser.stmtBlock_return stmtBlock444 =null;

        pollenParser.stmtElse_return stmtElse445 =null;


        BaseNode string_literal440_tree=null;
        BaseNode char_literal441_tree=null;
        BaseNode char_literal443_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:2: ( 'provided' '(' expr ')' stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:4: 'provided' '(' expr ')' stmtBlock ( stmtElse )?
            {
            string_literal440=(Atom)match(input,178,FOLLOW_178_in_stmtProvided8606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal440);


            char_literal441=(Atom)match(input,127,FOLLOW_127_in_stmtProvided8608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal441);


            pushFollow(FOLLOW_expr_in_stmtProvided8610);
            expr442=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr442.getTree());

            char_literal443=(Atom)match(input,128,FOLLOW_128_in_stmtProvided8612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal443);


            pushFollow(FOLLOW_stmtBlock_in_stmtProvided8614);
            stmtBlock444=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock444.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:38: ( stmtElse )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==153) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:39: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtProvided8617);
                    stmtElse445=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse445.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtElse, stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1652:3: -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1652:6: ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Provided(S_PROVIDED, "S_PROVIDED")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1652:67: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, stmtProvided_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtProvided"


    public static class stmtWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtWhile"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1654:1: stmtWhile : 'while' '(' expr ')' stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) ;
    public final pollenParser.stmtWhile_return stmtWhile() throws RecognitionException {
        pollenParser.stmtWhile_return retval = new pollenParser.stmtWhile_return();
        retval.start = input.LT(1);

        int stmtWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal446=null;
        Atom char_literal447=null;
        Atom char_literal449=null;
        pollenParser.expr_return expr448 =null;

        pollenParser.stmtBlock_return stmtBlock450 =null;


        BaseNode string_literal446_tree=null;
        BaseNode char_literal447_tree=null;
        BaseNode char_literal449_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1655:2: ( 'while' '(' expr ')' stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1655:4: 'while' '(' expr ')' stmtBlock
            {
            string_literal446=(Atom)match(input,189,FOLLOW_189_in_stmtWhile8650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal446);


            char_literal447=(Atom)match(input,127,FOLLOW_127_in_stmtWhile8652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal447);


            pushFollow(FOLLOW_expr_in_stmtWhile8654);
            expr448=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr448.getTree());

            char_literal449=(Atom)match(input,128,FOLLOW_128_in_stmtWhile8655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal449);


            pushFollow(FOLLOW_stmtBlock_in_stmtWhile8657);
            stmtBlock450=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock450.getTree());

            // AST REWRITE
            // elements: stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1655:34: -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1655:37: ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, stmtWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtWhile"


    public static class stmtDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1657:1: stmtDecl : stmtDeclAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) ;
    public final pollenParser.stmtDecl_return stmtDecl() throws RecognitionException {
        pollenParser.stmtDecl_return retval = new pollenParser.stmtDecl_return();
        retval.start = input.LT(1);

        int stmtDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtDeclAttr_return stmtDeclAttr451 =null;

        pollenParser.varDecl_return varDecl452 =null;

        pollenParser.delim_return delim453 =null;


        RewriteRuleSubtreeStream stream_stmtDeclAttr=new RewriteRuleSubtreeStream(adaptor,"rule stmtDeclAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:4: ( stmtDeclAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:7: stmtDeclAttr varDecl delim
            {
            pushFollow(FOLLOW_stmtDeclAttr_in_stmtDecl8686);
            stmtDeclAttr451=stmtDeclAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtDeclAttr.add(stmtDeclAttr451.getTree());

            pushFollow(FOLLOW_varDecl_in_stmtDecl8688);
            varDecl452=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl452.getTree());

            pushFollow(FOLLOW_delim_in_stmtDecl8690);
            delim453=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim453.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1658:34: -> ^( S_DECL[\"S_DECL\"] varDecl )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:37: ^( S_DECL[\"S_DECL\"] varDecl )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_varDecl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, stmtDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDecl"


    public static class stmtDeclAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDeclAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1660:1: stmtDeclAttr : ( 'const' | 'volatile' |t= 'host' )* ;
    public final pollenParser.stmtDeclAttr_return stmtDeclAttr() throws RecognitionException {
        pollenParser.stmtDeclAttr_return retval = new pollenParser.stmtDeclAttr_return();
        retval.start = input.LT(1);

        int stmtDeclAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom t=null;
        Atom string_literal454=null;
        Atom string_literal455=null;

        BaseNode t_tree=null;
        BaseNode string_literal454_tree=null;
        BaseNode string_literal455_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1661:2: ( ( 'const' | 'volatile' |t= 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1661:4: ( 'const' | 'volatile' |t= 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1661:4: ( 'const' | 'volatile' |t= 'host' )*
            loop108:
            do {
                int alt108=4;
                switch ( input.LA(1) ) {
                case 148:
                    {
                    alt108=1;
                    }
                    break;
                case 188:
                    {
                    alt108=2;
                    }
                    break;
                case 161:
                    {
                    alt108=3;
                    }
                    break;

                }

                switch (alt108) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1661:7: 'const'
            	    {
            	    string_literal454=(Atom)match(input,148,FOLLOW_148_in_stmtDeclAttr8719); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal454_tree = 
            	    (BaseNode)adaptor.create(string_literal454)
            	    ;
            	    adaptor.addChild(root_0, string_literal454_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1662:6: 'volatile'
            	    {
            	    string_literal455=(Atom)match(input,188,FOLLOW_188_in_stmtDeclAttr8728); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal455_tree = 
            	    (BaseNode)adaptor.create(string_literal455)
            	    ;
            	    adaptor.addChild(root_0, string_literal455_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1663:9: t= 'host'
            	    {
            	    t=(Atom)match(input,161,FOLLOW_161_in_stmtDeclAttr8742); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    t_tree = 
            	    (BaseNode)adaptor.create(t)
            	    ;
            	    adaptor.addChild(root_0, t_tree);
            	    }

            	    if ( state.backtracking==0 ) { ParseUnit.current().reportError(t, "invalid function local variable attribute"); }

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, stmtDeclAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDeclAttr"


    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1666:1: fieldDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        pollenParser.fieldDeclaration_return retval = new pollenParser.fieldDeclaration_return();
        retval.start = input.LT(1);

        int fieldDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr456 =null;

        pollenParser.varDecl_return varDecl457 =null;

        pollenParser.delim_return delim458 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	stmtFlags = EnumSet.noneOf(Flags.class);
        	typeMods = EnumSet.noneOf(Flags.class);
        	stmtFlags.add(Flags.FIELD);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1672:4: ( varAttr varDecl delim -> varDecl )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1672:7: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_fieldDeclaration8772);
            varAttr456=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr456.getTree());

            pushFollow(FOLLOW_varDecl_in_fieldDeclaration8774);
            varDecl457=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl457.getTree());

            pushFollow(FOLLOW_delim_in_fieldDeclaration8776);
            delim458=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim458.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1672:29: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, fieldDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"


    public static class varDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1674:1: varDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.varDeclaration_return varDeclaration() throws RecognitionException {
        pollenParser.varDeclaration_return retval = new pollenParser.varDeclaration_return();
        retval.start = input.LT(1);

        int varDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr459 =null;

        pollenParser.varDecl_return varDecl460 =null;

        pollenParser.delim_return delim461 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	typeMods = EnumSet.noneOf(Flags.class);
        	stmtFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1682:4: ( varAttr varDecl delim -> varDecl )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1682:7: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_varDeclaration8808);
            varAttr459=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr459.getTree());

            pushFollow(FOLLOW_varDecl_in_varDeclaration8810);
            varDecl460=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl460.getTree());

            pushFollow(FOLLOW_delim_in_varDeclaration8812);
            delim461=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim461.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1682:29: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	typeMods = EnumSet.noneOf(Flags.class);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, varDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclaration"


    public static class varAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1684:1: varAttr : ( 'const' | 'volatile' | 'host' )* ;
    public final pollenParser.varAttr_return varAttr() throws RecognitionException {
        pollenParser.varAttr_return retval = new pollenParser.varAttr_return();
        retval.start = input.LT(1);

        int varAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal462=null;
        Atom string_literal463=null;
        Atom string_literal464=null;

        BaseNode string_literal462_tree=null;
        BaseNode string_literal463_tree=null;
        BaseNode string_literal464_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:2: ( ( 'const' | 'volatile' | 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:4: ( 'const' | 'volatile' | 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:4: ( 'const' | 'volatile' | 'host' )*
            loop109:
            do {
                int alt109=4;
                switch ( input.LA(1) ) {
                case 148:
                    {
                    alt109=1;
                    }
                    break;
                case 188:
                    {
                    alt109=2;
                    }
                    break;
                case 161:
                    {
                    alt109=3;
                    }
                    break;

                }

                switch (alt109) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:7: 'const'
            	    {
            	    string_literal462=(Atom)match(input,148,FOLLOW_148_in_varAttr8831); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal462_tree = 
            	    (BaseNode)adaptor.create(string_literal462)
            	    ;
            	    adaptor.addChild(root_0, string_literal462_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1686:6: 'volatile'
            	    {
            	    string_literal463=(Atom)match(input,188,FOLLOW_188_in_varAttr8840); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal463_tree = 
            	    (BaseNode)adaptor.create(string_literal463)
            	    ;
            	    adaptor.addChild(root_0, string_literal463_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:8: 'host'
            	    {
            	    string_literal464=(Atom)match(input,161,FOLLOW_161_in_varAttr8851); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal464_tree = 
            	    (BaseNode)adaptor.create(string_literal464)
            	    ;
            	    adaptor.addChild(root_0, string_literal464_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.HOST); }

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, varAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varAttr"


    protected static class varDecl_scope {
        Object typ;
    }
    protected Stack varDecl_stack = new Stack();


    public static class varDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1690:1: varDecl : ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( ( '(' )? typeName '(' )=> varFcnRef | ( ( '(' ) typeName typeName '(' )=> varFcnRef2 | ( typeName varInit )=> varDeclList | 'new' qualName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) );
    public final pollenParser.varDecl_return varDecl() throws RecognitionException {
        varDecl_stack.push(new varDecl_scope());
        pollenParser.varDecl_return retval = new pollenParser.varDecl_return();
        retval.start = input.LT(1);

        int varDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal470=null;
        Atom IDENT472=null;
        pollenParser.varDeclList_return varDeclList465 =null;

        pollenParser.varArray_return varArray466 =null;

        pollenParser.varFcnRef_return varFcnRef467 =null;

        pollenParser.varFcnRef2_return varFcnRef2468 =null;

        pollenParser.varDeclList_return varDeclList469 =null;

        pollenParser.qualName_return qualName471 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList473 =null;


        BaseNode string_literal470_tree=null;
        BaseNode IDENT472_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");

        	((varDecl_scope)varDecl_stack.peek()).typ = null;
        	stmtFlags.addAll(typeMods);
        	String ctor = (typeMods.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:2: ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( ( '(' )? typeName '(' )=> varFcnRef | ( ( '(' ) typeName typeName '(' )=> varFcnRef2 | ( typeName varInit )=> varDeclList | 'new' qualName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) )
            int alt110=6;
            switch ( input.LA(1) ) {
            case 142:
                {
                int LA110_1 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }
                }
                break;
            case 144:
                {
                int LA110_2 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 2, input);

                    throw nvae;

                }
                }
                break;
            case 167:
                {
                int LA110_3 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 3, input);

                    throw nvae;

                }
                }
                break;
            case 165:
                {
                int LA110_4 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 4, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                int LA110_5 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 5, input);

                    throw nvae;

                }
                }
                break;
            case 181:
                {
                int LA110_6 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 6, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA110_7 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 7, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA110_8 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 8, input);

                    throw nvae;

                }
                }
                break;
            case 186:
                {
                int LA110_9 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 9, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA110_10 = input.LA(2);

                if ( (synpred190_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred191_pollen()) ) {
                    alt110=2;
                }
                else if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred195_pollen()) ) {
                    alt110=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 10, input);

                    throw nvae;

                }
                }
                break;
            case 127:
                {
                int LA110_11 = input.LA(2);

                if ( (synpred193_pollen()) ) {
                    alt110=3;
                }
                else if ( (synpred194_pollen()) ) {
                    alt110=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 11, input);

                    throw nvae;

                }
                }
                break;
            case 171:
                {
                alt110=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }

            switch (alt110) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:4: ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl8895);
                    varDeclList465=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList465.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:6: ( typeName IDENT '[' )=> varArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varArray_in_varDecl8913);
                    varArray466=varArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varArray466.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:6: ( ( '(' )? typeName '(' )=> varFcnRef
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef_in_varDecl8935);
                    varFcnRef467=varFcnRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef467.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1704:6: ( ( '(' ) typeName typeName '(' )=> varFcnRef2
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef2_in_varDecl8959);
                    varFcnRef2468=varFcnRef2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef2468.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1705:7: ( typeName varInit )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl8975);
                    varDeclList469=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList469.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1706:5: 'new' qualName IDENT fcnArgumentList
                    {
                    string_literal470=(Atom)match(input,171,FOLLOW_171_in_varDecl8981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(string_literal470);


                    pushFollow(FOLLOW_qualName_in_varDecl8983);
                    qualName471=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName471.getTree());

                    IDENT472=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varDecl8985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT472);


                    pushFollow(FOLLOW_fcnArgumentList_in_varDecl8987);
                    fcnArgumentList473=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList473.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.NEW); }

                    // AST REWRITE
                    // elements: qualName, IDENT, fcnArgumentList, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1708:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:6: ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:56: ^( T_USR[\"T_USR\", typeMods] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1709:14: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1710:11: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1711:8: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(IDENT, (qualName471!=null?input.toString(qualName471.start,qualName471.stop):null) + "." + ctor)
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_3, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, varDecl_StartIndex); }

            varDecl_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varDecl"


    public static class varFcnRef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1716:1: varFcnRef : ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT | typeName fcnRefTypeList IDENT ) -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ) ;
    public final pollenParser.varFcnRef_return varFcnRef() throws RecognitionException {
        pollenParser.varFcnRef_return retval = new pollenParser.varFcnRef_return();
        retval.start = input.LT(1);

        int varFcnRef_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal474=null;
        Atom char_literal477=null;
        Atom IDENT478=null;
        Atom IDENT481=null;
        pollenParser.typeName_return typeName475 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList476 =null;

        pollenParser.typeName_return typeName479 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList480 =null;


        BaseNode char_literal474_tree=null;
        BaseNode char_literal477_tree=null;
        BaseNode IDENT478_tree=null;
        BaseNode IDENT481_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:2: ( ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT | typeName fcnRefTypeList IDENT ) -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:5: ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT | typeName fcnRefTypeList IDENT )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:5: ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT | typeName fcnRefTypeList IDENT )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==127) ) {
                alt111=1;
            }
            else if ( (LA111_0==IDENT||LA111_0==142||LA111_0==144||(LA111_0 >= 165 && LA111_0 <= 167)||LA111_0==181||(LA111_0 >= 185 && LA111_0 <= 187)) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:7: ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:7: ( '(' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:8: '('
                    {
                    char_literal474=(Atom)match(input,127,FOLLOW_127_in_varFcnRef9131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal474);


                    }


                    pushFollow(FOLLOW_typeName_in_varFcnRef9134);
                    typeName475=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName475.getTree());

                    pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef9136);
                    fcnRefTypeList476=fcnRefTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList476.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:37: ( ')' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1717:38: ')'
                    {
                    char_literal477=(Atom)match(input,128,FOLLOW_128_in_varFcnRef9139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal477);


                    }


                    IDENT478=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef9142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT478);


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1718:7: typeName fcnRefTypeList IDENT
                    {
                    pushFollow(FOLLOW_typeName_in_varFcnRef9151);
                    typeName479=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName479.getTree());

                    pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef9153);
                    fcnRefTypeList480=fcnRefTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList480.getTree());

                    IDENT481=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef9156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT481);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fcnRefTypeList, IDENT, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1719:3: -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1719:6: ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, varFcnRef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varFcnRef"


    public static class varFcnRef2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1721:1: varFcnRef2 : '(' rtnType typeName fcnRefTypeList ')' IDENT -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ) ;
    public final pollenParser.varFcnRef2_return varFcnRef2() throws RecognitionException {
        pollenParser.varFcnRef2_return retval = new pollenParser.varFcnRef2_return();
        retval.start = input.LT(1);

        int varFcnRef2_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal482=null;
        Atom char_literal486=null;
        Atom IDENT487=null;
        pollenParser.rtnType_return rtnType483 =null;

        pollenParser.typeName_return typeName484 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList485 =null;


        BaseNode char_literal482_tree=null;
        BaseNode char_literal486_tree=null;
        BaseNode IDENT487_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        RewriteRuleSubtreeStream stream_rtnType=new RewriteRuleSubtreeStream(adaptor,"rule rtnType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1722:2: ( '(' rtnType typeName fcnRefTypeList ')' IDENT -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1722:5: '(' rtnType typeName fcnRefTypeList ')' IDENT
            {
            char_literal482=(Atom)match(input,127,FOLLOW_127_in_varFcnRef29190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal482);


            pushFollow(FOLLOW_rtnType_in_varFcnRef29192);
            rtnType483=rtnType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rtnType.add(rtnType483.getTree());

            pushFollow(FOLLOW_typeName_in_varFcnRef29194);
            typeName484=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName484.getTree());

            pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef29196);
            fcnRefTypeList485=fcnRefTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList485.getTree());

            char_literal486=(Atom)match(input,128,FOLLOW_128_in_varFcnRef29198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal486);


            IDENT487=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef29200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT487);


            // AST REWRITE
            // elements: IDENT, typeName, rtnType, fcnRefTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1723:3: -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1723:6: ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_rtnType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, varFcnRef2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varFcnRef2"


    public static class rtnType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rtnType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1725:1: rtnType : typeName ;
    public final pollenParser.rtnType_return rtnType() throws RecognitionException {
        pollenParser.rtnType_return retval = new pollenParser.rtnType_return();
        retval.start = input.LT(1);

        int rtnType_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeName_return typeName488 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1726:2: ( typeName )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1726:4: typeName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeName_in_rtnType9244);
            typeName488=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName488.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, rtnType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rtnType"


    public static class fcnRefTypeList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypeList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1729:1: fcnRefTypeList : '(' fcnRefTypes ')' -> fcnRefTypes ;
    public final pollenParser.fcnRefTypeList_return fcnRefTypeList() throws RecognitionException {
        pollenParser.fcnRefTypeList_return retval = new pollenParser.fcnRefTypeList_return();
        retval.start = input.LT(1);

        int fcnRefTypeList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal489=null;
        Atom char_literal491=null;
        pollenParser.fcnRefTypes_return fcnRefTypes490 =null;


        BaseNode char_literal489_tree=null;
        BaseNode char_literal491_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnRefTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1730:2: ( '(' fcnRefTypes ')' -> fcnRefTypes )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1730:5: '(' fcnRefTypes ')'
            {
            char_literal489=(Atom)match(input,127,FOLLOW_127_in_fcnRefTypeList9256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal489);


            pushFollow(FOLLOW_fcnRefTypes_in_fcnRefTypeList9258);
            fcnRefTypes490=fcnRefTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypes.add(fcnRefTypes490.getTree());

            char_literal491=(Atom)match(input,128,FOLLOW_128_in_fcnRefTypeList9260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal491);


            // AST REWRITE
            // elements: fcnRefTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1730:25: -> fcnRefTypes
            {
                adaptor.addChild(root_0, stream_fcnRefTypes.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, fcnRefTypeList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypeList"


    public static class fcnRefTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypes"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1732:1: fcnRefTypes : ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.fcnRefTypes_return fcnRefTypes() throws RecognitionException {
        pollenParser.fcnRefTypes_return retval = new pollenParser.fcnRefTypes_return();
        retval.start = input.LT(1);

        int fcnRefTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal493=null;
        pollenParser.typeName_return typeName492 =null;

        pollenParser.typeName_return typeName494 =null;


        BaseNode char_literal493_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:2: ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==IDENT||LA113_0==142||LA113_0==144||(LA113_0 >= 165 && LA113_0 <= 167)||LA113_0==181||(LA113_0 >= 185 && LA113_0 <= 187)) ) {
                alt113=1;
            }
            else if ( (LA113_0==128) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:4: typeName ( ',' typeName )*
                    {
                    pushFollow(FOLLOW_typeName_in_fcnRefTypes9274);
                    typeName492=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName492.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:13: ( ',' typeName )*
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==130) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:14: ',' typeName
                    	    {
                    	    char_literal493=(Atom)match(input,130,FOLLOW_130_in_fcnRefTypes9277); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal493);


                    	    pushFollow(FOLLOW_typeName_in_fcnRefTypes9279);
                    	    typeName494=typeName();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeName.add(typeName494.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1734:3: -> ^( LIST[\"LIST\"] ( typeName )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1734:6: ^( LIST[\"LIST\"] ( typeName )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_typeName.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_typeName.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeName.nextTree());

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1735:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1735:4: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1735:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, fcnRefTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypes"


    protected static class varArray_scope {
        Object varArrSpec;
        Object typArrSpec;
    }
    protected Stack varArray_stack = new Stack();


    public static class varArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1737:1: varArray : typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) ;
    public final pollenParser.varArray_return varArray() throws RecognitionException {
        varArray_stack.push(new varArray_scope());
        pollenParser.varArray_return retval = new pollenParser.varArray_return();
        retval.start = input.LT(1);

        int varArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT496=null;
        pollenParser.typeNameArray_return typeNameArray495 =null;

        pollenParser.varArraySpec_return varArraySpec497 =null;

        pollenParser.varArrayInit_return varArrayInit498 =null;


        BaseNode IDENT496_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_varArrayInit=new RewriteRuleSubtreeStream(adaptor,"rule varArrayInit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1745:2: ( typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1745:4: typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )?
            {
            pushFollow(FOLLOW_typeNameArray_in_varArray9328);
            typeNameArray495=typeNameArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray495.getTree());

            if ( state.backtracking==0 ) { ((varArray_scope)varArray_stack.peek()).typArrSpec = (typeNameArray495!=null?((BaseNode)typeNameArray495.tree):null); }

            IDENT496=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varArray9334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT496);


            pushFollow(FOLLOW_varArraySpec_in_varArray9339);
            varArraySpec497=varArraySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec497.getTree());

            if ( state.backtracking==0 ) { ((varArray_scope)varArray_stack.peek()).varArrSpec = (varArraySpec497!=null?((BaseNode)varArraySpec497.tree):null); }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1748:3: ( varArrayInit[stmtFlags] )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==ASSIGN||LA114_0==PEG) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1748:3: varArrayInit[stmtFlags]
                    {
                    pushFollow(FOLLOW_varArrayInit_in_varArray9346);
                    varArrayInit498=varArrayInit(stmtFlags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArrayInit.add(varArrayInit498.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: varArrayInit, typeNameArray, varArraySpec, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1749:4: -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1749:8: ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Arr(D_ARR, "D_ARR", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeNameArray.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_varArraySpec.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1751:24: ( varArrayInit )?
                if ( stream_varArrayInit.hasNext() ) {
                    adaptor.addChild(root_1, stream_varArrayInit.nextTree());

                }
                stream_varArrayInit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
             		((CommonTree) ((varArray_scope)varArray_stack.peek()).typArrSpec).addChild(((CommonTree) ((varArray_scope)varArray_stack.peek()).varArrSpec));				
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, varArray_StartIndex); }

            varArray_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varArray"


    public static class varArraySpec_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArraySpec"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1753:1: varArraySpec : ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) ;
    public final pollenParser.varArraySpec_return varArraySpec() throws RecognitionException {
        pollenParser.varArraySpec_return retval = new pollenParser.varArraySpec_return();
        retval.start = input.LT(1);

        int varArraySpec_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal499=null;
        Atom char_literal501=null;
        pollenParser.varDim_return varDim500 =null;


        BaseNode char_literal499_tree=null;
        BaseNode char_literal501_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_varDim=new RewriteRuleSubtreeStream(adaptor,"rule varDim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:2: ( ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:4: ( '[' varDim ']' )+
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:4: ( '[' varDim ']' )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==138) ) {
                    int LA115_1 = input.LA(2);

                    if ( (synpred200_pollen()) ) {
                        alt115=1;
                    }


                }


                switch (alt115) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:5: '[' varDim ']'
            	    {
            	    char_literal499=(Atom)match(input,138,FOLLOW_138_in_varArraySpec9395); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal499);


            	    pushFollow(FOLLOW_varDim_in_varArraySpec9397);
            	    varDim500=varDim();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_varDim.add(varDim500.getTree());

            	    char_literal501=(Atom)match(input,139,FOLLOW_139_in_varArraySpec9399); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_139.add(char_literal501);


            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            // AST REWRITE
            // elements: varDim
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1754:22: -> ^( LIST[\"LIST\"] ( varDim )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:27: ^( LIST[\"LIST\"] ( varDim )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_varDim.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varDim.hasNext() ) {
                    adaptor.addChild(root_1, stream_varDim.nextTree());

                }
                stream_varDim.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, varArraySpec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArraySpec"


    public static class varArrayInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArrayInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1756:1: varArrayInit[EnumSet<Flags> f] : ( ( '=' initializer ) -> initializer | ( PEG initializer ) -> initializer );
    public final pollenParser.varArrayInit_return varArrayInit(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.varArrayInit_return retval = new pollenParser.varArrayInit_return();
        retval.start = input.LT(1);

        int varArrayInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal502=null;
        Atom PEG504=null;
        pollenParser.initializer_return initializer503 =null;

        pollenParser.initializer_return initializer505 =null;


        BaseNode char_literal502_tree=null;
        BaseNode PEG504_tree=null;
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:2: ( ( '=' initializer ) -> initializer | ( PEG initializer ) -> initializer )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ASSIGN) ) {
                alt116=1;
            }
            else if ( (LA116_0==PEG) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:4: ( '=' initializer )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:4: ( '=' initializer )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:5: '=' initializer
                    {
                    char_literal502=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varArrayInit9428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal502);


                    pushFollow(FOLLOW_initializer_in_varArrayInit9430);
                    initializer503=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer503.getTree());

                    }


                    // AST REWRITE
                    // elements: initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1757:26: -> initializer
                    {
                        adaptor.addChild(root_0, stream_initializer.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1758:4: ( PEG initializer )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1758:4: ( PEG initializer )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1758:5: PEG initializer
                    {
                    PEG504=(Atom)match(input,PEG,FOLLOW_PEG_in_varArrayInit9445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PEG.add(PEG504);


                    pushFollow(FOLLOW_initializer_in_varArrayInit9447);
                    initializer505=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer505.getTree());

                    }


                    if ( state.backtracking==0 ) {f.add(Flags.PEG);}

                    // AST REWRITE
                    // elements: initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1758:43: -> initializer
                    {
                        adaptor.addChild(root_0, stream_initializer.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, varArrayInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArrayInit"


    public static class varDim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1760:1: varDim : ( expr | -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[\"-1\"] ) );
    public final pollenParser.varDim_return varDim() throws RecognitionException {
        pollenParser.varDim_return retval = new pollenParser.varDim_return();
        retval.start = input.LT(1);

        int varDim_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr506 =null;




          EnumSet<LitFlags> fl = EnumSet.noneOf(LitFlags.class);
          fl.add(LitFlags.NUM); fl.add(LitFlags.INT);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1765:2: ( expr | -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[\"-1\"] ) )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0 >= BIT_NOT && LA117_0 <= CHAR)||LA117_0==DEC||LA117_0==HEX_LIT||LA117_0==IDENT||(LA117_0 >= INC && LA117_0 <= INT_LIT)||LA117_0==LOG_NOT||LA117_0==MINUS||LA117_0==OCT_LIT||LA117_0==REAL_LIT||LA117_0==STRING||LA117_0==127||(LA117_0 >= 137 && LA117_0 <= 138)||LA117_0==158||(LA117_0 >= 171 && LA117_0 <= 172)||LA117_0==183) ) {
                alt117=1;
            }
            else if ( (LA117_0==139) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1765:6: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_varDim9472);
                    expr506=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr506.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1766:5: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1766:5: -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[\"-1\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1766:8: ^( E_CONST[\"E_CONST\", fl] INT_LIT[\"-1\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", fl)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(INT_LIT, "-1")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 139, varDim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDim"


    public static class initializer_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1768:1: initializer : ( expr | '{' initializer_list ( ',' )? '}' -> initializer_list );
    public final pollenParser.initializer_return initializer() throws RecognitionException {
        pollenParser.initializer_return retval = new pollenParser.initializer_return();
        retval.start = input.LT(1);

        int initializer_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal508=null;
        Atom char_literal510=null;
        Atom char_literal511=null;
        pollenParser.expr_return expr507 =null;

        pollenParser.initializer_list_return initializer_list509 =null;


        BaseNode char_literal508_tree=null;
        BaseNode char_literal510_tree=null;
        BaseNode char_literal511_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_initializer_list=new RewriteRuleSubtreeStream(adaptor,"rule initializer_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1769:2: ( expr | '{' initializer_list ( ',' )? '}' -> initializer_list )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0 >= BIT_NOT && LA119_0 <= CHAR)||LA119_0==DEC||LA119_0==HEX_LIT||LA119_0==IDENT||(LA119_0 >= INC && LA119_0 <= INT_LIT)||LA119_0==LOG_NOT||LA119_0==MINUS||LA119_0==OCT_LIT||LA119_0==REAL_LIT||LA119_0==STRING||LA119_0==127||(LA119_0 >= 137 && LA119_0 <= 138)||LA119_0==158||(LA119_0 >= 171 && LA119_0 <= 172)||LA119_0==183) ) {
                alt119=1;
            }
            else if ( (LA119_0==190) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }
            switch (alt119) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1769:4: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_initializer9504);
                    expr507=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr507.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1770:4: '{' initializer_list ( ',' )? '}'
                    {
                    char_literal508=(Atom)match(input,190,FOLLOW_190_in_initializer9510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal508);


                    pushFollow(FOLLOW_initializer_list_in_initializer9512);
                    initializer_list509=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer_list.add(initializer_list509.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1770:25: ( ',' )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==130) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1770:25: ','
                            {
                            char_literal510=(Atom)match(input,130,FOLLOW_130_in_initializer9514); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_130.add(char_literal510);


                            }
                            break;

                    }


                    char_literal511=(Atom)match(input,193,FOLLOW_193_in_initializer9517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal511);


                    // AST REWRITE
                    // elements: initializer_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1770:34: -> initializer_list
                    {
                        adaptor.addChild(root_0, stream_initializer_list.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 140, initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer"


    public static class initializer_list_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer_list"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1772:1: initializer_list : initializer ( ',' ( NL )* initializer )* -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) ) ;
    public final pollenParser.initializer_list_return initializer_list() throws RecognitionException {
        pollenParser.initializer_list_return retval = new pollenParser.initializer_list_return();
        retval.start = input.LT(1);

        int initializer_list_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal513=null;
        Atom NL514=null;
        pollenParser.initializer_return initializer512 =null;

        pollenParser.initializer_return initializer515 =null;


        BaseNode char_literal513_tree=null;
        BaseNode NL514_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:2: ( initializer ( ',' ( NL )* initializer )* -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:4: initializer ( ',' ( NL )* initializer )*
            {
            pushFollow(FOLLOW_initializer_in_initializer_list9531);
            initializer512=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_initializer.add(initializer512.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:16: ( ',' ( NL )* initializer )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==130) ) {
                    int LA121_1 = input.LA(2);

                    if ( (synpred206_pollen()) ) {
                        alt121=1;
                    }


                }


                switch (alt121) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:17: ',' ( NL )* initializer
            	    {
            	    char_literal513=(Atom)match(input,130,FOLLOW_130_in_initializer_list9534); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal513);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:21: ( NL )*
            	    loop120:
            	    do {
            	        int alt120=2;
            	        int LA120_0 = input.LA(1);

            	        if ( (LA120_0==NL) ) {
            	            alt120=1;
            	        }


            	        switch (alt120) {
            	    	case 1 :
            	    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:21: NL
            	    	    {
            	    	    NL514=(Atom)match(input,NL,FOLLOW_NL_in_initializer_list9536); if (state.failed) return retval; 
            	    	    if ( state.backtracking==0 ) stream_NL.add(NL514);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop120;
            	        }
            	    } while (true);


            	    pushFollow(FOLLOW_initializer_in_initializer_list9539);
            	    initializer515=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_initializer.add(initializer515.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            // AST REWRITE
            // elements: initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1773:39: -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:43: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Vec(E_VEC, "E_VEC")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:75: ^( LIST[\"LIST\"] ( initializer )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_initializer.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_2, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 141, initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer_list"


    public static class varDeclList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1775:1: varDeclList : ( varBuiltInType ! varListBuiltInType | userTypeName ! varListUserDefType );
    public final pollenParser.varDeclList_return varDeclList() throws RecognitionException {
        pollenParser.varDeclList_return retval = new pollenParser.varDeclList_return();
        retval.start = input.LT(1);

        int varDeclList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varBuiltInType_return varBuiltInType516 =null;

        pollenParser.varListBuiltInType_return varListBuiltInType517 =null;

        pollenParser.userTypeName_return userTypeName518 =null;

        pollenParser.varListUserDefType_return varListUserDefType519 =null;




        	assert ((varDecl_scope)varDecl_stack.peek()).typ != null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1779:2: ( varBuiltInType ! varListBuiltInType | userTypeName ! varListUserDefType )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==142||LA122_0==144||(LA122_0 >= 165 && LA122_0 <= 167)||LA122_0==181||(LA122_0 >= 185 && LA122_0 <= 187)) ) {
                alt122=1;
            }
            else if ( (LA122_0==IDENT) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1779:4: varBuiltInType ! varListBuiltInType
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varBuiltInType_in_varDeclList9585);
                    varBuiltInType516=varBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (varBuiltInType516!=null?((BaseNode)varBuiltInType516.tree):null); }

                    pushFollow(FOLLOW_varListBuiltInType_in_varDeclList9590);
                    varListBuiltInType517=varListBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varListBuiltInType517.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1780:4: userTypeName ! varListUserDefType
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_varDeclList9595);
                    userTypeName518=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (userTypeName518!=null?((BaseNode)userTypeName518.tree):null); }

                    pushFollow(FOLLOW_varListUserDefType_in_varDeclList9600);
                    varListUserDefType519=varListUserDefType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varListUserDefType519.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 142, varDeclList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclList"


    public static class varBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varBuiltInType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1782:1: varBuiltInType : builtinType -> ^( T_STD[\"T_STD\", stmtFlags] builtinType ) ;
    public final pollenParser.varBuiltInType_return varBuiltInType() throws RecognitionException {
        pollenParser.varBuiltInType_return retval = new pollenParser.varBuiltInType_return();
        retval.start = input.LT(1);

        int varBuiltInType_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType520 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1783:2: ( builtinType -> ^( T_STD[\"T_STD\", stmtFlags] builtinType ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1783:4: builtinType
            {
            pushFollow(FOLLOW_builtinType_in_varBuiltInType9611);
            builtinType520=builtinType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtinType.add(builtinType520.getTree());

            // AST REWRITE
            // elements: builtinType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1783:16: -> ^( T_STD[\"T_STD\", stmtFlags] builtinType )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1783:19: ^( T_STD[\"T_STD\", stmtFlags] builtinType )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_builtinType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 143, varBuiltInType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varBuiltInType"


    public static class varListBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varListBuiltInType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1785:1: varListBuiltInType : varInit2 ( ',' ! varInit2 )* ;
    public final pollenParser.varListBuiltInType_return varListBuiltInType() throws RecognitionException {
        pollenParser.varListBuiltInType_return retval = new pollenParser.varListBuiltInType_return();
        retval.start = input.LT(1);

        int varListBuiltInType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal522=null;
        pollenParser.varInit2_return varInit2521 =null;

        pollenParser.varInit2_return varInit2523 =null;


        BaseNode char_literal522_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:2: ( varInit2 ( ',' ! varInit2 )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:4: varInit2 ( ',' ! varInit2 )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_varInit2_in_varListBuiltInType9635);
            varInit2521=varInit2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2521.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:13: ( ',' ! varInit2 )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==130) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:14: ',' ! varInit2
            	    {
            	    char_literal522=(Atom)match(input,130,FOLLOW_130_in_varListBuiltInType9638); if (state.failed) return retval;

            	    pushFollow(FOLLOW_varInit2_in_varListBuiltInType9641);
            	    varInit2523=varInit2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2523.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 144, varListBuiltInType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varListBuiltInType"


    public static class varListUserDefType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varListUserDefType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1788:1: varListUserDefType : varInit ( ',' ! varInit )* ;
    public final pollenParser.varListUserDefType_return varListUserDefType() throws RecognitionException {
        pollenParser.varListUserDefType_return retval = new pollenParser.varListUserDefType_return();
        retval.start = input.LT(1);

        int varListUserDefType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal525=null;
        pollenParser.varInit_return varInit524 =null;

        pollenParser.varInit_return varInit526 =null;


        BaseNode char_literal525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:2: ( varInit ( ',' ! varInit )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:4: varInit ( ',' ! varInit )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_varInit_in_varListUserDefType9655);
            varInit524=varInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit524.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:12: ( ',' ! varInit )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==130) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:13: ',' ! varInit
            	    {
            	    char_literal525=(Atom)match(input,130,FOLLOW_130_in_varListUserDefType9658); if (state.failed) return retval;

            	    pushFollow(FOLLOW_varInit_in_varListUserDefType9661);
            	    varInit526=varInit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit526.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 145, varListUserDefType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varListUserDefType"


    public static class varInit2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1791:1: varInit2 : ( IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) );
    public final pollenParser.varInit2_return varInit2() throws RecognitionException {
        pollenParser.varInit2_return retval = new pollenParser.varInit2_return();
        retval.start = input.LT(1);

        int varInit2_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT527=null;
        Atom ASSIGN528=null;
        Atom IDENT530=null;
        pollenParser.expr_return expr529 =null;


        BaseNode IDENT527_tree=null;
        BaseNode ASSIGN528_tree=null;
        BaseNode IDENT530_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:2: ( IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IDENT) ) {
                int LA125_1 = input.LA(2);

                if ( (synpred210_pollen()) ) {
                    alt125=1;
                }
                else if ( (true) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }
            switch (alt125) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:4: IDENT ASSIGN expr
                    {
                    IDENT527=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit29677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT527);


                    ASSIGN528=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit29679); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN528);


                    pushFollow(FOLLOW_expr_in_varInit29681);
                    expr529=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr529.getTree());

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1793:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1793:6: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1795:5: IDENT
                    {
                    IDENT530=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit29711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT530);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1796:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1796:6: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 146, varInit2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit2"


    public static class varInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1798:1: varInit : ( IDENT BIND userTypeName -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? ) | IDENT PEG expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? ) | IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) );
    public final pollenParser.varInit_return varInit() throws RecognitionException {
        pollenParser.varInit_return retval = new pollenParser.varInit_return();
        retval.start = input.LT(1);

        int varInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT531=null;
        Atom BIND532=null;
        Atom IDENT534=null;
        Atom PEG535=null;
        Atom IDENT537=null;
        Atom ASSIGN538=null;
        Atom IDENT540=null;
        pollenParser.userTypeName_return userTypeName533 =null;

        pollenParser.expr_return expr536 =null;

        pollenParser.expr_return expr539 =null;


        BaseNode IDENT531_tree=null;
        BaseNode BIND532_tree=null;
        BaseNode IDENT534_tree=null;
        BaseNode PEG535_tree=null;
        BaseNode IDENT537_tree=null;
        BaseNode ASSIGN538_tree=null;
        BaseNode IDENT540_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_userTypeName=new RewriteRuleSubtreeStream(adaptor,"rule userTypeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1799:2: ( IDENT BIND userTypeName -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? ) | IDENT PEG expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? ) | IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) )
            int alt126=4;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==IDENT) ) {
                int LA126_1 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt126=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt126=2;
                }
                else if ( (synpred213_pollen()) ) {
                    alt126=3;
                }
                else if ( (true) ) {
                    alt126=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1799:5: IDENT BIND userTypeName
                    {
                    IDENT531=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit9742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT531);


                    BIND532=(Atom)match(input,BIND,FOLLOW_BIND_in_varInit9744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND532);


                    pushFollow(FOLLOW_userTypeName_in_varInit9746);
                    userTypeName533=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_userTypeName.add(userTypeName533.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.PROTOCOL_MEMBER);  stmtFlags.add(Flags.BIND); }

                    // AST REWRITE
                    // elements: IDENT, userTypeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1800:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1800:6: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1800:78: ( ^( E_TYP[\"E_TYP\"] userTypeName ) )?
                        if ( stream_userTypeName.hasNext() ) {
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1800:78: ^( E_TYP[\"E_TYP\"] userTypeName )
                            {
                            BaseNode root_2 = (BaseNode)adaptor.nil();
                            root_2 = (BaseNode)adaptor.becomeRoot(
                            new ExprNode.Typ(E_TYP, "E_TYP")
                            , root_2);

                            adaptor.addChild(root_2, stream_userTypeName.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_userTypeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1801:4: IDENT PEG expr
                    {
                    IDENT534=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit9787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT534);


                    PEG535=(Atom)match(input,PEG,FOLLOW_PEG_in_varInit9789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PEG.add(PEG535);


                    pushFollow(FOLLOW_expr_in_varInit9791);
                    expr536=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr536.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.PEG); }

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1802:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1802:6: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1802:78: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1803:4: IDENT ASSIGN expr
                    {
                    IDENT537=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit9820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT537);


                    ASSIGN538=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit9822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN538);


                    pushFollow(FOLLOW_expr_in_varInit9824);
                    expr539=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr539.getTree());

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1804:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1804:6: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1806:4: IDENT
                    {
                    IDENT540=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit9853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT540);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1807:3: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1807:6: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 147, varInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit"


    public static class builtinType_return extends ParserRuleReturnScope {
        public EnumSet<LitFlags> f;
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtinType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1810:1: builtinType returns [EnumSet<LitFlags> f] : ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'string' | 'uint8' | 'uint16' | 'uint32' );
    public final pollenParser.builtinType_return builtinType() throws RecognitionException {
        pollenParser.builtinType_return retval = new pollenParser.builtinType_return();
        retval.start = input.LT(1);

        int builtinType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal541=null;
        Atom string_literal542=null;
        Atom string_literal543=null;
        Atom string_literal544=null;
        Atom string_literal545=null;
        Atom string_literal546=null;
        Atom string_literal547=null;
        Atom string_literal548=null;
        Atom string_literal549=null;

        BaseNode string_literal541_tree=null;
        BaseNode string_literal542_tree=null;
        BaseNode string_literal543_tree=null;
        BaseNode string_literal544_tree=null;
        BaseNode string_literal545_tree=null;
        BaseNode string_literal546_tree=null;
        BaseNode string_literal547_tree=null;
        BaseNode string_literal548_tree=null;
        BaseNode string_literal549_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1811:5: ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'string' | 'uint8' | 'uint16' | 'uint32' )
            int alt127=9;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt127=1;
                }
                break;
            case 144:
                {
                alt127=2;
                }
                break;
            case 167:
                {
                alt127=3;
                }
                break;
            case 165:
                {
                alt127=4;
                }
                break;
            case 166:
                {
                alt127=5;
                }
                break;
            case 181:
                {
                alt127=6;
                }
                break;
            case 187:
                {
                alt127=7;
                }
                break;
            case 185:
                {
                alt127=8;
                }
                break;
            case 186:
                {
                alt127=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1811:9: 'bool'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal541=(Atom)match(input,142,FOLLOW_142_in_builtinType9893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal541_tree = 
                    (BaseNode)adaptor.create(string_literal541)
                    ;
                    adaptor.addChild(root_0, string_literal541_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.BOOL);}

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1812:9: 'byte'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal542=(Atom)match(input,144,FOLLOW_144_in_builtinType9906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal542_tree = 
                    (BaseNode)adaptor.create(string_literal542)
                    ;
                    adaptor.addChild(root_0, string_literal542_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.CHR);}

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1813:9: 'int8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal543=(Atom)match(input,167,FOLLOW_167_in_builtinType9919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal543_tree = 
                    (BaseNode)adaptor.create(string_literal543)
                    ;
                    adaptor.addChild(root_0, string_literal543_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:9: 'int16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal544=(Atom)match(input,165,FOLLOW_165_in_builtinType9932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal544_tree = 
                    (BaseNode)adaptor.create(string_literal544)
                    ;
                    adaptor.addChild(root_0, string_literal544_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1815:9: 'int32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal545=(Atom)match(input,166,FOLLOW_166_in_builtinType9945); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal545_tree = 
                    (BaseNode)adaptor.create(string_literal545)
                    ;
                    adaptor.addChild(root_0, string_literal545_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1816:9: 'string'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal546=(Atom)match(input,181,FOLLOW_181_in_builtinType9961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal546_tree = 
                    (BaseNode)adaptor.create(string_literal546)
                    ;
                    adaptor.addChild(root_0, string_literal546_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.STR);}

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1817:9: 'uint8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal547=(Atom)match(input,187,FOLLOW_187_in_builtinType9976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal547_tree = 
                    (BaseNode)adaptor.create(string_literal547)
                    ;
                    adaptor.addChild(root_0, string_literal547_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1818:9: 'uint16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal548=(Atom)match(input,185,FOLLOW_185_in_builtinType9989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal548_tree = 
                    (BaseNode)adaptor.create(string_literal548)
                    ;
                    adaptor.addChild(root_0, string_literal548_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1819:9: 'uint32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal549=(Atom)match(input,186,FOLLOW_186_in_builtinType10002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal549_tree = 
                    (BaseNode)adaptor.create(string_literal549)
                    ;
                    adaptor.addChild(root_0, string_literal549_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 148, builtinType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "builtinType"


    protected static class qualName_scope {
        Object qtree;
        String s;
    }
    protected Stack qualName_stack = new Stack();


    public static class qualName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1822:1: qualName : qualNameConcat ;
    public final pollenParser.qualName_return qualName() throws RecognitionException {
        qualName_stack.push(new qualName_scope());
        pollenParser.qualName_return retval = new pollenParser.qualName_return();
        retval.start = input.LT(1);

        int qualName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualNameConcat_return qualNameConcat550 =null;




        	((qualName_scope)qualName_stack.peek()).qtree = null;
        	((qualName_scope)qualName_stack.peek()).s = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1834:5: ( qualNameConcat )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1834:10: qualNameConcat
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualNameConcat_in_qualName10050);
            qualNameConcat550=qualNameConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualNameConcat550.getTree());

            if ( state.backtracking==0 ) { ((qualName_scope)qualName_stack.peek()).qtree = (qualNameConcat550!=null?((BaseNode)qualNameConcat550.tree):null); }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	handleIntrinsics((CommonTree) ((qualName_scope)qualName_stack.peek()).qtree);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 149, qualName_StartIndex); }

            qualName_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "qualName"


    public static class qualNameConcat_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameConcat"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1837:1: qualNameConcat : IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] ;
    public final pollenParser.qualNameConcat_return qualNameConcat() throws RecognitionException {
        pollenParser.qualNameConcat_return retval = new pollenParser.qualNameConcat_return();
        retval.start = input.LT(1);

        int qualNameConcat_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT551=null;
        pollenParser.qualNameList_return qualNameList552 =null;


        BaseNode IDENT551_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualNameList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:2: ( IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:4: IDENT ( ( qualNameList )? )
            {
            IDENT551=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameConcat10069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT551);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:10: ( ( qualNameList )? )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:11: ( qualNameList )?
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:11: ( qualNameList )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==131) ) {
                int LA128_1 = input.LA(2);

                if ( (synpred222_pollen()) ) {
                    alt128=1;
                }
            }
            switch (alt128) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:11: qualNameList
                    {
                    pushFollow(FOLLOW_qualNameList_in_qualNameConcat10072);
                    qualNameList552=qualNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualNameList.add(qualNameList552.getTree());

                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1838:27: -> IDENT[$IDENT.text + $qualName::s]
            {
                adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(IDENT, (IDENT551!=null?IDENT551.getText():null) + ((qualName_scope)qualName_stack.peek()).s)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 150, qualNameConcat_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualNameConcat"


    public static class qualNameList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1841:1: qualNameList : ( '.' ! IDENT !)+ ;
    public final pollenParser.qualNameList_return qualNameList() throws RecognitionException {
        pollenParser.qualNameList_return retval = new pollenParser.qualNameList_return();
        retval.start = input.LT(1);

        int qualNameList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal553=null;
        Atom IDENT554=null;

        BaseNode char_literal553_tree=null;
        BaseNode IDENT554_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1842:2: ( ( '.' ! IDENT !)+ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1843:2: ( '.' ! IDENT !)+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1843:2: ( '.' ! IDENT !)+
            int cnt129=0;
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==131) ) {
                    int LA129_1 = input.LA(2);

                    if ( (synpred223_pollen()) ) {
                        alt129=1;
                    }


                }


                switch (alt129) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1843:6: '.' ! IDENT !
            	    {
            	    char_literal553=(Atom)match(input,131,FOLLOW_131_in_qualNameList10101); if (state.failed) return retval;

            	    IDENT554=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameList10119); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {((qualName_scope)qualName_stack.peek()).s += "." + (IDENT554!=null?IDENT554.getText():null);}

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 151, qualNameList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualNameList"


    public static class arrayLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1848:1: arrayLit : '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) ;
    public final pollenParser.arrayLit_return arrayLit() throws RecognitionException {
        pollenParser.arrayLit_return retval = new pollenParser.arrayLit_return();
        retval.start = input.LT(1);

        int arrayLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal555=null;
        Atom char_literal557=null;
        pollenParser.arrayLitList_return arrayLitList556 =null;


        BaseNode char_literal555_tree=null;
        BaseNode char_literal557_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_arrayLitList=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1849:2: ( '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1849:4: '[' arrayLitList ']'
            {
            char_literal555=(Atom)match(input,138,FOLLOW_138_in_arrayLit10152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(char_literal555);


            pushFollow(FOLLOW_arrayLitList_in_arrayLit10154);
            arrayLitList556=arrayLitList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayLitList.add(arrayLitList556.getTree());

            char_literal557=(Atom)match(input,139,FOLLOW_139_in_arrayLit10156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(char_literal557);


            // AST REWRITE
            // elements: arrayLitList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1849:25: -> ^( LIST[\"LIST\"] arrayLitList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1849:28: ^( LIST[\"LIST\"] arrayLitList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_arrayLitList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 152, arrayLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLit"


    public static class arrayLitList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1851:1: arrayLitList : ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL );
    public final pollenParser.arrayLitList_return arrayLitList() throws RecognitionException {
        pollenParser.arrayLitList_return retval = new pollenParser.arrayLitList_return();
        retval.start = input.LT(1);

        int arrayLitList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal559=null;
        pollenParser.arrayLitElem_return arrayLitElem558 =null;

        pollenParser.arrayLitElem_return arrayLitElem560 =null;


        BaseNode char_literal559_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_arrayLitElem=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitElem");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1852:2: ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==CHAR||LA131_0==HEX_LIT||LA131_0==IDENT||LA131_0==INT_LIT||LA131_0==OCT_LIT||LA131_0==REAL_LIT||LA131_0==STRING||LA131_0==158||LA131_0==172||LA131_0==183) ) {
                alt131=1;
            }
            else if ( (LA131_0==139) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1852:4: arrayLitElem ( ',' arrayLitElem )*
                    {
                    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList10178);
                    arrayLitElem558=arrayLitElem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem558.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1852:17: ( ',' arrayLitElem )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==130) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1852:18: ',' arrayLitElem
                    	    {
                    	    char_literal559=(Atom)match(input,130,FOLLOW_130_in_arrayLitList10181); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal559);


                    	    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList10183);
                    	    arrayLitElem560=arrayLitElem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem560.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: arrayLitElem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1852:37: -> ( arrayLitElem )+
                    {
                        if ( !(stream_arrayLitElem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_arrayLitElem.hasNext() ) {
                            adaptor.addChild(root_0, stream_arrayLitElem.nextTree());

                        }
                        stream_arrayLitElem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1853:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1853:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 153, arrayLitList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitList"


    public static class arrayLitElem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitElem"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1855:1: arrayLitElem : ( primitiveLit | namedConstant );
    public final pollenParser.arrayLitElem_return arrayLitElem() throws RecognitionException {
        pollenParser.arrayLitElem_return retval = new pollenParser.arrayLitElem_return();
        retval.start = input.LT(1);

        int arrayLitElem_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit561 =null;

        pollenParser.namedConstant_return namedConstant562 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:2: ( primitiveLit | namedConstant )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==CHAR||LA132_0==HEX_LIT||LA132_0==INT_LIT||LA132_0==OCT_LIT||LA132_0==REAL_LIT||LA132_0==STRING||LA132_0==158||LA132_0==172||LA132_0==183) ) {
                alt132=1;
            }
            else if ( (LA132_0==IDENT) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }
            switch (alt132) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_arrayLitElem10207);
                    primitiveLit561=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit561.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:19: namedConstant
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_namedConstant_in_arrayLitElem10211);
                    namedConstant562=namedConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namedConstant562.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 154, arrayLitElem_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitElem"


    public static class namedConstant_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedConstant"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:1: namedConstant : qualName ;
    public final pollenParser.namedConstant_return namedConstant() throws RecognitionException {
        pollenParser.namedConstant_return retval = new pollenParser.namedConstant_return();
        retval.start = input.LT(1);

        int namedConstant_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName563 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1859:2: ( qualName )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1859:4: qualName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualName_in_namedConstant10221);
            qualName563=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualName563.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 155, namedConstant_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namedConstant"


    public static class boolLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1861:1: boolLit : ( 'true' | 'false' ) ;
    public final pollenParser.boolLit_return boolLit() throws RecognitionException {
        pollenParser.boolLit_return retval = new pollenParser.boolLit_return();
        retval.start = input.LT(1);

        int boolLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set564=null;

        BaseNode set564_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1862:2: ( ( 'true' | 'false' ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1862:4: ( 'true' | 'false' )
            {
            root_0 = (BaseNode)adaptor.nil();


            set564=(Atom)input.LT(1);

            if ( input.LA(1)==158||input.LA(1)==183 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set564)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.BOOL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 156, boolLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolLit"


    public static class nullLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1864:1: nullLit : 'null' ;
    public final pollenParser.nullLit_return nullLit() throws RecognitionException {
        pollenParser.nullLit_return retval = new pollenParser.nullLit_return();
        retval.start = input.LT(1);

        int nullLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal565=null;

        BaseNode string_literal565_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1865:2: ( 'null' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1865:4: 'null'
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal565=(Atom)match(input,172,FOLLOW_172_in_nullLit10251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal565_tree = 
            (BaseNode)adaptor.create(string_literal565)
            ;
            adaptor.addChild(root_0, string_literal565_tree);
            }

            if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NULL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 157, nullLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nullLit"


    public static class numLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1867:1: numLit : ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT );
    public final pollenParser.numLit_return numLit() throws RecognitionException {
        pollenParser.numLit_return retval = new pollenParser.numLit_return();
        retval.start = input.LT(1);

        int numLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom INT_LIT566=null;
        Atom OCT_LIT567=null;
        Atom REAL_LIT568=null;
        Atom HEX_LIT569=null;

        BaseNode INT_LIT566_tree=null;
        BaseNode OCT_LIT567_tree=null;
        BaseNode REAL_LIT568_tree=null;
        BaseNode HEX_LIT569_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1871:2: ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT )
            int alt133=4;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt133=1;
                }
                break;
            case OCT_LIT:
                {
                alt133=2;
                }
                break;
            case REAL_LIT:
                {
                alt133=3;
                }
                break;
            case HEX_LIT:
                {
                alt133=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }

            switch (alt133) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1871:4: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT566=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_numLit10268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT566_tree = 
                    (BaseNode)adaptor.create(INT_LIT566)
                    ;
                    adaptor.addChild(root_0, INT_LIT566_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.INT);}

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1872:5: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT567=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_numLit10277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT567_tree = 
                    (BaseNode)adaptor.create(OCT_LIT567)
                    ;
                    adaptor.addChild(root_0, OCT_LIT567_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.OCT);}

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:5: REAL_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    REAL_LIT568=(Atom)match(input,REAL_LIT,FOLLOW_REAL_LIT_in_numLit10286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REAL_LIT568_tree = 
                    (BaseNode)adaptor.create(REAL_LIT568)
                    ;
                    adaptor.addChild(root_0, REAL_LIT568_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.REAL);}

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1874:5: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT569=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_numLit10295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT569_tree = 
                    (BaseNode)adaptor.create(HEX_LIT569)
                    ;
                    adaptor.addChild(root_0, HEX_LIT569_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.HEX);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NUM);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 158, numLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numLit"


    protected static class primitiveLit_scope {
        EnumSet<LitFlags> litFlags;
    }
    protected Stack primitiveLit_stack = new Stack();


    public static class primitiveLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1877:1: primitiveLit : ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) );
    public final pollenParser.primitiveLit_return primitiveLit() throws RecognitionException {
        primitiveLit_stack.push(new primitiveLit_scope());
        pollenParser.primitiveLit_return retval = new pollenParser.primitiveLit_return();
        retval.start = input.LT(1);

        int primitiveLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom STRING573=null;
        Atom CHAR574=null;
        pollenParser.boolLit_return boolLit570 =null;

        pollenParser.numLit_return numLit571 =null;

        pollenParser.nullLit_return nullLit572 =null;


        BaseNode STRING573_tree=null;
        BaseNode CHAR574_tree=null;
        RewriteRuleTokenStream stream_CHAR=new RewriteRuleTokenStream(adaptor,"token CHAR");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleSubtreeStream stream_numLit=new RewriteRuleSubtreeStream(adaptor,"rule numLit");
        RewriteRuleSubtreeStream stream_nullLit=new RewriteRuleSubtreeStream(adaptor,"rule nullLit");
        RewriteRuleSubtreeStream stream_boolLit=new RewriteRuleSubtreeStream(adaptor,"rule boolLit");

        	((primitiveLit_scope)primitiveLit_stack.peek()).litFlags = EnumSet.noneOf(LitFlags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:2: ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) )
            int alt134=5;
            switch ( input.LA(1) ) {
            case 158:
            case 183:
                {
                alt134=1;
                }
                break;
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
                {
                alt134=2;
                }
                break;
            case 172:
                {
                alt134=3;
                }
                break;
            case STRING:
                {
                alt134=4;
                }
                break;
            case CHAR:
                {
                alt134=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }

            switch (alt134) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:4: boolLit
                    {
                    pushFollow(FOLLOW_boolLit_in_primitiveLit10320);
                    boolLit570=boolLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolLit.add(boolLit570.getTree());

                    // AST REWRITE
                    // elements: boolLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1884:12: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:15: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_boolLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:4: numLit
                    {
                    pushFollow(FOLLOW_numLit_in_primitiveLit10339);
                    numLit571=numLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numLit.add(numLit571.getTree());

                    // AST REWRITE
                    // elements: numLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1885:12: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:15: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_numLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1886:4: nullLit
                    {
                    pushFollow(FOLLOW_nullLit_in_primitiveLit10359);
                    nullLit572=nullLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullLit.add(nullLit572.getTree());

                    // AST REWRITE
                    // elements: nullLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1886:12: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1886:15: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_nullLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:4: STRING
                    {
                    STRING573=(Atom)match(input,STRING,FOLLOW_STRING_in_primitiveLit10378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(STRING573);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.STR);}

                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1888:5: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1888:8: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1889:4: CHAR
                    {
                    CHAR574=(Atom)match(input,CHAR,FOLLOW_CHAR_in_primitiveLit10406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR.add(CHAR574);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.CHR);}

                    // AST REWRITE
                    // elements: CHAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1890:6: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1890:9: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 159, primitiveLit_StartIndex); }

            primitiveLit_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "primitiveLit"


    public static class stmtInjection_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjection"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1892:1: stmtInjection : inject ( NL )+ -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) ;
    public final pollenParser.stmtInjection_return stmtInjection() throws RecognitionException {
        pollenParser.stmtInjection_return retval = new pollenParser.stmtInjection_return();
        retval.start = input.LT(1);

        int stmtInjection_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL576=null;
        pollenParser.inject_return inject575 =null;


        BaseNode NL576_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1893:2: ( inject ( NL )+ -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1893:4: inject ( NL )+
            {
            pushFollow(FOLLOW_inject_in_stmtInjection10439);
            inject575=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject575.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:2: ( NL )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==NL) ) {
                    int LA135_1 = input.LA(2);

                    if ( (synpred235_pollen()) ) {
                        alt135=1;
                    }


                }


                switch (alt135) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:2: NL
            	    {
            	    NL576=(Atom)match(input,NL,FOLLOW_NL_in_stmtInjection10442); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL576);


            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);


            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1895:2: -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1895:5: ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Inject(S_INJ, "S_INJ")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1895:40: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, stream_inject.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 160, stmtInjection_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjection"


    public static class inject_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inject"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1899:1: inject : c= INJECT -> ^( LIST[\"LIST\"] ) ;
    public final pollenParser.inject_return inject() throws RecognitionException {
        pollenParser.inject_return retval = new pollenParser.inject_return();
        retval.start = input.LT(1);

        int inject_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");


        	BaseNode r = (BaseNode)adaptor.nil();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1903:2: (c= INJECT -> ^( LIST[\"LIST\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1903:4: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_inject10489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        		c.setText(getInject(c.getText()));
                       			createInjectNodes(r, c.getText());           
                    		}

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1907:2: -> ^( LIST[\"LIST\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1907:5: ^( LIST[\"LIST\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, r);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 161, inject_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inject"


    public static class injectionCode_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionCode"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:1: injectionCode : inject -> ^( E_INJ[\"E_INJ\"] inject ) ;
    public final pollenParser.injectionCode_return injectionCode() throws RecognitionException {
        pollenParser.injectionCode_return retval = new pollenParser.injectionCode_return();
        retval.start = input.LT(1);

        int injectionCode_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.inject_return inject577 =null;


        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:2: ( inject -> ^( E_INJ[\"E_INJ\"] inject ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:4: inject
            {
            pushFollow(FOLLOW_inject_in_injectionCode10515);
            inject577=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject577.getTree());

            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1911:2: -> ^( E_INJ[\"E_INJ\"] inject )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1911:5: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_1);

                adaptor.addChild(root_1, stream_inject.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 162, injectionCode_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionCode"


    public static class injectionDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1913:1: injectionDecl : inject ( NL )+ -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) ;
    public final pollenParser.injectionDecl_return injectionDecl() throws RecognitionException {
        pollenParser.injectionDecl_return retval = new pollenParser.injectionDecl_return();
        retval.start = input.LT(1);

        int injectionDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL579=null;
        pollenParser.inject_return inject578 =null;


        BaseNode NL579_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1914:2: ( inject ( NL )+ -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1914:4: inject ( NL )+
            {
            pushFollow(FOLLOW_inject_in_injectionDecl10542);
            inject578=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject578.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1915:9: ( NL )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==NL) ) {
                    int LA136_1 = input.LA(2);

                    if ( (synpred236_pollen()) ) {
                        alt136=1;
                    }


                }


                switch (alt136) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1915:9: NL
            	    {
            	    NL579=(Atom)match(input,NL,FOLLOW_NL_in_injectionDecl10552); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL579);


            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1916:10: -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1916:13: ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Inject(D_INJ, "D_INJ")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1916:47: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, stream_inject.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 163, injectionDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionDecl"


    public static class delim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1943:1: delim : ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->);
    public final pollenParser.delim_return delim() throws RecognitionException {
        pollenParser.delim_return retval = new pollenParser.delim_return();
        retval.start = input.LT(1);

        int delim_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI580=null;
        Atom NL581=null;
        Atom NL582=null;
        Atom NL583=null;

        BaseNode SEMI580_tree=null;
        BaseNode NL581_tree=null;
        BaseNode NL582_tree=null;
        BaseNode NL583_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:2: ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->)
            int alt140=3;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:4: ( SEMI ) ( NL )*
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:4: ( SEMI )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:5: SEMI
                    {
                    SEMI580=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim10600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI580);


                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:11: ( NL )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==NL) ) {
                            int LA137_1 = input.LA(2);

                            if ( (synpred237_pollen()) ) {
                                alt137=1;
                            }


                        }


                        switch (alt137) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:12: NL
                    	    {
                    	    NL581=(Atom)match(input,NL,FOLLOW_NL_in_delim10604); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL581);


                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1944:17: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:4: ( NL )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:4: ( NL )+
                    int cnt138=0;
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==NL) ) {
                            int LA138_1 = input.LA(2);

                            if ( (synpred239_pollen()) ) {
                                alt138=1;
                            }


                        }


                        switch (alt138) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:5: NL
                    	    {
                    	    NL582=(Atom)match(input,NL,FOLLOW_NL_in_delim10615); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL582);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt138 >= 1 ) break loop138;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(138, input);
                                throw eee;
                        }
                        cnt138++;
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1945:10: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:4: ( ( NL )* '}' )=> ( NL )*
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:20: ( NL )*
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==NL) ) {
                            int LA139_1 = input.LA(2);

                            if ( (synpred243_pollen()) ) {
                                alt139=1;
                            }


                        }


                        switch (alt139) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:20: NL
                    	    {
                    	    NL583=(Atom)match(input,NL,FOLLOW_NL_in_delim10639); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL583);


                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1947:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 164, delim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delim"

    // $ANTLR start synpred5_pollen
    public final void synpred5_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:450:9: ( fcnDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:450:9: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred5_pollen1161);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_pollen

    // $ANTLR start synpred7_pollen
    public final void synpred7_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:452:9: ( fieldDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:452:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred7_pollen1182);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_pollen

    // $ANTLR start synpred9_pollen
    public final void synpred9_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:466:5: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:466:5: {...}?
        {
        if ( !((!hasHostConstructor )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_pollen", "!hasHostConstructor ");
        }

        }

    }
    // $ANTLR end synpred9_pollen

    // $ANTLR start synpred10_pollen
    public final void synpred10_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:488:4: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:488:4: {...}?
        {
        if ( !((!hasTargetConstructor)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred10_pollen", "!hasTargetConstructor");
        }

        }

    }
    // $ANTLR end synpred10_pollen

    // $ANTLR start synpred12_pollen
    public final void synpred12_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:4: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:4: {...}?
        {
        if ( !((ProcessUnits.doEmitPrintProxy())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred12_pollen", "ProcessUnits.doEmitPrintProxy()");
        }

        }

    }
    // $ANTLR end synpred12_pollen

    // $ANTLR start synpred13_pollen
    public final void synpred13_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:4: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:4: {...}?
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred13_pollen", "true");
        }

        }

    }
    // $ANTLR end synpred13_pollen

    // $ANTLR start synpred14_pollen
    public final void synpred14_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:583:8: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:583:8: {...}?
        {
        if ( !((!hasHostConstructor )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14_pollen", "!hasHostConstructor ");
        }

        }

    }
    // $ANTLR end synpred14_pollen

    // $ANTLR start synpred15_pollen
    public final void synpred15_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:7: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:7: {...}?
        {
        if ( !((!hasTargetConstructor)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15_pollen", "!hasTargetConstructor");
        }

        }

    }
    // $ANTLR end synpred15_pollen

    // $ANTLR start synpred16_pollen
    public final void synpred16_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:6: ( fcnDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:6: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred16_pollen2527);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_pollen

    // $ANTLR start synpred17_pollen
    public final void synpred17_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:9: ( varDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:9: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred17_pollen2537);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_pollen

    // $ANTLR start synpred20_pollen
    public final void synpred20_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:22: ( delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:22: delim
        {
        pushFollow(FOLLOW_delim_in_synpred20_pollen2648);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_pollen

    // $ANTLR start synpred22_pollen
    public final void synpred22_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:673:4: ( IDENT ASSIGN INT_LIT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:673:4: IDENT ASSIGN INT_LIT
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred22_pollen2683); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred22_pollen2685); if (state.failed) return ;

        match(input,INT_LIT,FOLLOW_INT_LIT_in_synpred22_pollen2687); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_pollen

    // $ANTLR start synpred28_pollen
    public final void synpred28_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:757:8: ( fcnDefinitionHost )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:757:8: fcnDefinitionHost
        {
        pushFollow(FOLLOW_fcnDefinitionHost_in_synpred28_pollen3012);
        fcnDefinitionHost();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_pollen

    // $ANTLR start synpred30_pollen
    public final void synpred30_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:8: ( varDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:8: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred30_pollen3030);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_pollen

    // $ANTLR start synpred32_pollen
    public final void synpred32_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:11: ( metaArguments )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:11: metaArguments
        {
        pushFollow(FOLLOW_metaArguments_in_synpred32_pollen3107);
        metaArguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_pollen

    // $ANTLR start synpred33_pollen
    public final void synpred33_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:11: ( metaArguments )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:11: metaArguments
        {
        pushFollow(FOLLOW_metaArguments_in_synpred33_pollen3269);
        metaArguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_pollen

    // $ANTLR start synpred37_pollen
    public final void synpred37_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:4: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:4: {...}?
        {
        if ( !((ProcessUnits.doImportPrint())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred37_pollen", "ProcessUnits.doImportPrint()");
        }

        }

    }
    // $ANTLR end synpred37_pollen

    // $ANTLR start synpred38_pollen
    public final void synpred38_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:4: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:4: {...}?
        {
        if ( !((ProcessUnits.doImportPrint())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred38_pollen", "ProcessUnits.doImportPrint()");
        }

        }

    }
    // $ANTLR end synpred38_pollen

    // $ANTLR start synpred40_pollen
    public final void synpred40_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:55: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:55: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred40_pollen3697); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred40_pollen

    // $ANTLR start synpred47_pollen
    public final void synpred47_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred47_pollen3922); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred47_pollen

    // $ANTLR start synpred50_pollen
    public final void synpred50_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:7: ( '{' metaArgument ( NL )* ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )* '}' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:7: '{' metaArgument ( NL )* ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )* '}'
        {
        match(input,190,FOLLOW_190_in_synpred50_pollen3909); if (state.failed) return ;

        pushFollow(FOLLOW_metaArgument_in_synpred50_pollen3911);
        metaArgument();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:24: ( NL )*
        loop147:
        do {
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==NL) ) {
                alt147=1;
            }


            switch (alt147) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:25: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred50_pollen3914); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop147;
            }
        } while (true);


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:30: ( ',' ( ( NL )* ) metaArgument ( ( NL )* ) )*
        loop150:
        do {
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==130) ) {
                alt150=1;
            }


            switch (alt150) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:31: ',' ( ( NL )* ) metaArgument ( ( NL )* )
        	    {
        	    match(input,130,FOLLOW_130_in_synpred50_pollen3919); if (state.failed) return ;

        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:35: ( ( NL )* )
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: ( NL )*
        	    {
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: ( NL )*
        	    loop148:
        	    do {
        	        int alt148=2;
        	        int LA148_0 = input.LA(1);

        	        if ( (LA148_0==NL) ) {
        	            int LA148_1 = input.LA(2);

        	            if ( (synpred47_pollen()) ) {
        	                alt148=1;
        	            }


        	        }


        	        switch (alt148) {
        	    	case 1 :
        	    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:36: NL
        	    	    {
        	    	    match(input,NL,FOLLOW_NL_in_synpred50_pollen3922); if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    break loop148;
        	        }
        	    } while (true);


        	    }


        	    pushFollow(FOLLOW_metaArgument_in_synpred50_pollen3926);
        	    metaArgument();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:54: ( ( NL )* )
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:55: ( NL )*
        	    {
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:55: ( NL )*
        	    loop149:
        	    do {
        	        int alt149=2;
        	        int LA149_0 = input.LA(1);

        	        if ( (LA149_0==NL) ) {
        	            alt149=1;
        	        }


        	        switch (alt149) {
        	    	case 1 :
        	    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:55: NL
        	    	    {
        	    	    match(input,NL,FOLLOW_NL_in_synpred50_pollen3929); if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    break loop149;
        	        }
        	    } while (true);


        	    }


        	    }
        	    break;

        	default :
        	    break loop150;
            }
        } while (true);


        match(input,193,FOLLOW_193_in_synpred50_pollen3936); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_pollen

    // $ANTLR start synpred55_pollen
    public final void synpred55_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1123:17: ( 'module' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1123:18: 'module'
        {
        match(input,170,FOLLOW_170_in_synpred55_pollen4198); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred55_pollen

    // $ANTLR start synpred56_pollen
    public final void synpred56_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1124:8: ( 'class' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1124:9: 'class'
        {
        match(input,146,FOLLOW_146_in_synpred56_pollen4218); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred56_pollen

    // $ANTLR start synpred57_pollen
    public final void synpred57_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1125:11: ( 'protocol' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1125:12: 'protocol'
        {
        match(input,177,FOLLOW_177_in_synpred57_pollen4237); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred57_pollen

    // $ANTLR start synpred58_pollen
    public final void synpred58_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:11: ( 'composition' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:12: 'composition'
        {
        match(input,147,FOLLOW_147_in_synpred58_pollen4256); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred58_pollen

    // $ANTLR start synpred59_pollen
    public final void synpred59_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:11: ( 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:12: 'enum'
        {
        match(input,154,FOLLOW_154_in_synpred59_pollen4275); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred59_pollen

    // $ANTLR start synpred63_pollen
    public final void synpred63_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:23: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1150:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred63_pollen4410); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred63_pollen

    // $ANTLR start synpred67_pollen
    public final void synpred67_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:23: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1159:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred67_pollen4477); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred67_pollen

    // $ANTLR start synpred88_pollen
    public final void synpred88_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1194:4: ( exprLogicalOr '?' expr ':' expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1194:4: exprLogicalOr '?' expr ':' expr
        {
        pushFollow(FOLLOW_exprLogicalOr_in_synpred88_pollen4721);
        exprLogicalOr();

        state._fsp--;
        if (state.failed) return ;

        match(input,136,FOLLOW_136_in_synpred88_pollen4723); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred88_pollen4725);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,133,FOLLOW_133_in_synpred88_pollen4727); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred88_pollen4729);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred88_pollen

    // $ANTLR start synpred89_pollen
    public final void synpred89_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1200:4: ( '||' exprLogicalAnd )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1200:4: '||' exprLogicalAnd
        {
        match(input,192,FOLLOW_192_in_synpred89_pollen4784); if (state.failed) return ;

        pushFollow(FOLLOW_exprLogicalAnd_in_synpred89_pollen4786);
        exprLogicalAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred89_pollen

    // $ANTLR start synpred90_pollen
    public final void synpred90_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1207:3: ( '&&' exprBitwiseOr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1207:3: '&&' exprBitwiseOr
        {
        match(input,125,FOLLOW_125_in_synpred90_pollen4837); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseOr_in_synpred90_pollen4839);
        exprBitwiseOr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred90_pollen

    // $ANTLR start synpred91_pollen
    public final void synpred91_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:3: ( '|' exprBitwiseXor )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:3: '|' exprBitwiseXor
        {
        match(input,191,FOLLOW_191_in_synpred91_pollen4888); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseXor_in_synpred91_pollen4890);
        exprBitwiseXor();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred91_pollen

    // $ANTLR start synpred92_pollen
    public final void synpred92_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1221:3: ( '^' exprBitwiseAnd )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1221:3: '^' exprBitwiseAnd
        {
        match(input,140,FOLLOW_140_in_synpred92_pollen4938); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseAnd_in_synpred92_pollen4940);
        exprBitwiseAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred92_pollen

    // $ANTLR start synpred93_pollen
    public final void synpred93_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1228:3: ( '&' exprEquality )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1228:3: '&' exprEquality
        {
        match(input,126,FOLLOW_126_in_synpred93_pollen4988); if (state.failed) return ;

        pushFollow(FOLLOW_exprEquality_in_synpred93_pollen4990);
        exprEquality();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred93_pollen

    // $ANTLR start synpred94_pollen
    public final void synpred94_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1235:3: ( equalityOp exprRelational )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1235:3: equalityOp exprRelational
        {
        pushFollow(FOLLOW_equalityOp_in_synpred94_pollen5039);
        equalityOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprRelational_in_synpred94_pollen5041);
        exprRelational();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred94_pollen

    // $ANTLR start synpred95_pollen
    public final void synpred95_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1242:3: ( relationalOp exprShift )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1242:3: relationalOp exprShift
        {
        pushFollow(FOLLOW_relationalOp_in_synpred95_pollen5090);
        relationalOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprShift_in_synpred95_pollen5092);
        exprShift();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred95_pollen

    // $ANTLR start synpred96_pollen
    public final void synpred96_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:3: ( shiftOp exprAddSub )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:3: shiftOp exprAddSub
        {
        pushFollow(FOLLOW_shiftOp_in_synpred96_pollen5142);
        shiftOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprAddSub_in_synpred96_pollen5145);
        exprAddSub();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred96_pollen

    // $ANTLR start synpred97_pollen
    public final void synpred97_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1256:3: ( addSubOp exprMultDiv )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1256:3: addSubOp exprMultDiv
        {
        pushFollow(FOLLOW_addSubOp_in_synpred97_pollen5194);
        addSubOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprMultDiv_in_synpred97_pollen5196);
        exprMultDiv();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred97_pollen

    // $ANTLR start synpred98_pollen
    public final void synpred98_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1263:3: ( multDivModOp exprUnary )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1263:3: multDivModOp exprUnary
        {
        pushFollow(FOLLOW_multDivModOp_in_synpred98_pollen5251);
        multDivModOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprUnary_in_synpred98_pollen5253);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred98_pollen

    // $ANTLR start synpred99_pollen
    public final void synpred99_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1274:35: ( fieldOrArrayAccess )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1274:35: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred99_pollen5301);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred99_pollen

    // $ANTLR start synpred107_pollen
    public final void synpred107_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1287:4: ( varOrFcnOrArray incDecOp )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1287:4: varOrFcnOrArray incDecOp
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred107_pollen5503);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_incDecOp_in_synpred107_pollen5505);
        incDecOp();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred107_pollen

    // $ANTLR start synpred108_pollen
    public final void synpred108_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:4: ( varOrFcnOrArray )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:4: varOrFcnOrArray
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred108_pollen5528);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred108_pollen

    // $ANTLR start synpred113_pollen
    public final void synpred113_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1356:4: ( typeNameArray varArraySpec qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1356:4: typeNameArray varArraySpec qualName
        {
        pushFollow(FOLLOW_typeNameArray_in_synpred113_pollen5947);
        typeNameArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varArraySpec_in_synpred113_pollen5949);
        varArraySpec();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred113_pollen5951);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred113_pollen

    // $ANTLR start synpred114_pollen
    public final void synpred114_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1361:4: ( typeName qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1361:4: typeName qualName
        {
        pushFollow(FOLLOW_typeName_in_synpred114_pollen6010);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred114_pollen6012);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred114_pollen

    // $ANTLR start synpred115_pollen
    public final void synpred115_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1366:4: ({...}? typeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1366:4: {...}? typeName
        {
        if ( !(((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred115_pollen", "(featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(ti.getTypeName()) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred115_pollen6081);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred115_pollen

    // $ANTLR start synpred116_pollen
    public final void synpred116_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1385:4: ({...}? typeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1385:4: {...}? typeName
        {
        if ( !((input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred116_pollen", "input.LT(1).getText().equals(ti.getTypeName()) && !(ti.getUnitFlags().contains(Flags.CLASS)) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred116_pollen6170);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred116_pollen

    // $ANTLR start synpred117_pollen
    public final void synpred117_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1397:4: ({...}? typeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1397:4: {...}? typeName
        {
        if ( !((input.LT(1).getText().equals(ti.getTypeName()) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred117_pollen", "input.LT(1).getText().equals(ti.getTypeName()) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred117_pollen6259);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred117_pollen

    // $ANTLR start synpred118_pollen
    public final void synpred118_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1407:4: ( qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1407:4: qualName
        {
        pushFollow(FOLLOW_qualName_in_synpred118_pollen6316);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred118_pollen

    // $ANTLR start synpred120_pollen
    public final void synpred120_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:4: ( '(' typeName ( ',' typeName )* ')' qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:5: '(' typeName ( ',' typeName )* ')' qualName
        {
        match(input,127,FOLLOW_127_in_synpred120_pollen6386); if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred120_pollen6388);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:18: ( ',' typeName )*
        loop152:
        do {
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==130) ) {
                alt152=1;
            }


            switch (alt152) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:19: ',' typeName
        	    {
        	    match(input,130,FOLLOW_130_in_synpred120_pollen6391); if (state.failed) return ;

        	    pushFollow(FOLLOW_typeName_in_synpred120_pollen6393);
        	    typeName();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop152;
            }
        } while (true);


        match(input,128,FOLLOW_128_in_synpred120_pollen6397); if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred120_pollen6399);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred120_pollen

    // $ANTLR start synpred128_pollen
    public final void synpred128_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:30: ( fieldOrArrayAccess )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:30: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred128_pollen6738);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred128_pollen

    // $ANTLR start synpred129_pollen
    public final void synpred129_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:4: ( '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:4: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
        {
        match(input,137,FOLLOW_137_in_synpred129_pollen6732); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred129_pollen6734); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred129_pollen6736);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:30: ( fieldOrArrayAccess )?
        int alt155=2;
        int LA155_0 = input.LA(1);

        if ( (LA155_0==131||LA155_0==138) ) {
            alt155=1;
        }
        switch (alt155) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:30: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred129_pollen6738);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred129_pollen

    // $ANTLR start synpred130_pollen
    public final void synpred130_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:14: ( fieldOrArrayAccess )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:14: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred130_pollen6794);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred130_pollen

    // $ANTLR start synpred131_pollen
    public final void synpred131_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:4: ( '@' IDENT ( fieldOrArrayAccess )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:4: '@' IDENT ( fieldOrArrayAccess )?
        {
        match(input,137,FOLLOW_137_in_synpred131_pollen6790); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred131_pollen6792); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:14: ( fieldOrArrayAccess )?
        int alt156=2;
        int LA156_0 = input.LA(1);

        if ( (LA156_0==131||LA156_0==138) ) {
            alt156=1;
        }
        switch (alt156) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:14: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred131_pollen6794);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred131_pollen

    // $ANTLR start synpred132_pollen
    public final void synpred132_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1462:4: ( '@' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1462:4: '@'
        {
        match(input,137,FOLLOW_137_in_synpred132_pollen6833); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred132_pollen

    // $ANTLR start synpred133_pollen
    public final void synpred133_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:29: ( fieldOrArrayAccess )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:29: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred133_pollen6872);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred133_pollen

    // $ANTLR start synpred134_pollen
    public final void synpred134_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:4: ( qualName fcnArgumentList ( fieldOrArrayAccess )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:4: qualName fcnArgumentList ( fieldOrArrayAccess )?
        {
        pushFollow(FOLLOW_qualName_in_synpred134_pollen6868);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred134_pollen6870);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:29: ( fieldOrArrayAccess )?
        int alt157=2;
        int LA157_0 = input.LA(1);

        if ( (LA157_0==131||LA157_0==138) ) {
            alt157=1;
        }
        switch (alt157) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:29: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred134_pollen6872);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred134_pollen

    // $ANTLR start synpred135_pollen
    public final void synpred135_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:13: ( fieldOrArrayAccess )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:13: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred135_pollen6912);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred135_pollen

    // $ANTLR start synpred137_pollen
    public final void synpred137_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:32: ( fcnArgumentList )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:32: fcnArgumentList
        {
        pushFollow(FOLLOW_fcnArgumentList_in_synpred137_pollen6949);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred137_pollen

    // $ANTLR start synpred138_pollen
    public final void synpred138_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:20: ( arrayAccess ( fcnArgumentList )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:20: arrayAccess ( fcnArgumentList )?
        {
        pushFollow(FOLLOW_arrayAccess_in_synpred138_pollen6947);
        arrayAccess();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:32: ( fcnArgumentList )?
        int alt158=2;
        int LA158_0 = input.LA(1);

        if ( (LA158_0==127) ) {
            alt158=1;
        }
        switch (alt158) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:32: fcnArgumentList
                {
                pushFollow(FOLLOW_fcnArgumentList_in_synpred138_pollen6949);
                fcnArgumentList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred138_pollen

    // $ANTLR start synpred139_pollen
    public final void synpred139_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1473:4: ( '.' IDENT fcnArgumentList )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1473:4: '.' IDENT fcnArgumentList
        {
        match(input,131,FOLLOW_131_in_synpred139_pollen6962); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred139_pollen6964); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred139_pollen6966);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred139_pollen

    // $ANTLR start synpred140_pollen
    public final void synpred140_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:9: ( exprList )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:9: exprList
        {
        pushFollow(FOLLOW_exprList_in_synpred140_pollen7037);
        exprList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred140_pollen

    // $ANTLR start synpred141_pollen
    public final void synpred141_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:5: ( stmt )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:5: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred141_pollen7103);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred141_pollen

    // $ANTLR start synpred142_pollen
    public final void synpred142_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:4: ( ( stmt )+ )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:4: ( stmt )+
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:4: ( stmt )+
        int cnt159=0;
        loop159:
        do {
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( ((LA159_0 >= BIT_NOT && LA159_0 <= CHAR)||LA159_0==DEC||LA159_0==HEX_LIT||LA159_0==IDENT||(LA159_0 >= INC && LA159_0 <= INT_LIT)||LA159_0==LOG_NOT||LA159_0==MINUS||LA159_0==NL||LA159_0==OCT_LIT||LA159_0==REAL_LIT||LA159_0==STRING||LA159_0==127||(LA159_0 >= 137 && LA159_0 <= 138)||(LA159_0 >= 142 && LA159_0 <= 144)||(LA159_0 >= 148 && LA159_0 <= 149)||LA159_0==151||(LA159_0 >= 158 && LA159_0 <= 159)||(LA159_0 >= 161 && LA159_0 <= 162)||(LA159_0 >= 165 && LA159_0 <= 167)||(LA159_0 >= 171 && LA159_0 <= 172)||LA159_0==176||LA159_0==178||(LA159_0 >= 180 && LA159_0 <= 183)||(LA159_0 >= 185 && LA159_0 <= 190)) ) {
                alt159=1;
            }


            switch (alt159) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:5: stmt
        	    {
        	    pushFollow(FOLLOW_stmt_in_synpred142_pollen7103);
        	    stmt();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt159 >= 1 ) break loop159;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(159, input);
                    throw eee;
            }
            cnt159++;
        } while (true);


        }

    }
    // $ANTLR end synpred142_pollen

    // $ANTLR start synpred143_pollen
    public final void synpred143_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:5: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1488:5: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred143_pollen7125); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred143_pollen

    // $ANTLR start synpred144_pollen
    public final void synpred144_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1495:6: ( stmtDecl )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1495:6: stmtDecl
        {
        pushFollow(FOLLOW_stmtDecl_in_synpred144_pollen7152);
        stmtDecl();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred144_pollen

    // $ANTLR start synpred145_pollen
    public final void synpred145_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1496:6: ( stmtAssign )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1496:6: stmtAssign
        {
        pushFollow(FOLLOW_stmtAssign_in_synpred145_pollen7159);
        stmtAssign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred145_pollen

    // $ANTLR start synpred146_pollen
    public final void synpred146_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1497:4: ( stmtBind )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1497:4: stmtBind
        {
        pushFollow(FOLLOW_stmtBind_in_synpred146_pollen7164);
        stmtBind();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred146_pollen

    // $ANTLR start synpred149_pollen
    public final void synpred149_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1500:4: ( stmtPeg )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1500:4: stmtPeg
        {
        pushFollow(FOLLOW_stmtPeg_in_synpred149_pollen7179);
        stmtPeg();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred149_pollen

    // $ANTLR start synpred159_pollen
    public final void synpred159_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1510:4: ( stmtInjection )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1510:4: stmtInjection
        {
        pushFollow(FOLLOW_stmtInjection_in_synpred159_pollen7236);
        stmtInjection();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred159_pollen

    // $ANTLR start synpred160_pollen
    public final void synpred160_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1516:2: ( exprUnary ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1516:3: exprUnary ASSIGN
        {
        pushFollow(FOLLOW_exprUnary_in_synpred160_pollen7272);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred160_pollen7274); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred160_pollen

    // $ANTLR start synpred161_pollen
    public final void synpred161_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1527:4: ( varOrFcnOrArray ASSIGN exprAssign delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1527:4: varOrFcnOrArray ASSIGN exprAssign delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred161_pollen7340);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred161_pollen7342); if (state.failed) return ;

        pushFollow(FOLLOW_exprAssign_in_synpred161_pollen7344);
        exprAssign();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred161_pollen7346);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred161_pollen

    // $ANTLR start synpred162_pollen
    public final void synpred162_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1529:4: ( injectionCode ASSIGN expr delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1529:4: injectionCode ASSIGN expr delim
        {
        pushFollow(FOLLOW_injectionCode_in_synpred162_pollen7381);
        injectionCode();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred162_pollen7383); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred162_pollen7385);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred162_pollen7387);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred162_pollen

    // $ANTLR start synpred163_pollen
    public final void synpred163_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1531:4: ( varOrFcnOrArray assignOp expr delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1531:4: varOrFcnOrArray assignOp expr delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred163_pollen7422);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_assignOp_in_synpred163_pollen7424);
        assignOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred163_pollen7426);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred163_pollen7429);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred163_pollen

    // $ANTLR start synpred165_pollen
    public final void synpred165_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:4: ( printItem ( '+' printItem )* )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:4: printItem ( '+' printItem )*
        {
        pushFollow(FOLLOW_printItem_in_synpred165_pollen7606);
        printItem();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:14: ( '+' printItem )*
        loop160:
        do {
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==PLUS) ) {
                alt160=1;
            }


            switch (alt160) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1546:16: '+' printItem
        	    {
        	    match(input,PLUS,FOLLOW_PLUS_in_synpred165_pollen7610); if (state.failed) return ;

        	    pushFollow(FOLLOW_printItem_in_synpred165_pollen7613);
        	    printItem();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop160;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred165_pollen

    // $ANTLR start synpred167_pollen
    public final void synpred167_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:4: ( 'print' printList delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:4: 'print' printList delim
        {
        match(input,176,FOLLOW_176_in_synpred167_pollen7661); if (state.failed) return ;

        pushFollow(FOLLOW_printList_in_synpred167_pollen7663);
        printList();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred167_pollen7667);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred167_pollen

    // $ANTLR start synpred171_pollen
    public final void synpred171_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:4: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:4: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
        {
        match(input,180,FOLLOW_180_in_synpred171_pollen7772); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:13: ( '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:14: '('
        {
        match(input,127,FOLLOW_127_in_synpred171_pollen7775); if (state.failed) return ;

        }


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:19: ( expr ( ',' expr )+ )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:20: expr ( ',' expr )+
        {
        pushFollow(FOLLOW_expr_in_synpred171_pollen7779);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:25: ( ',' expr )+
        int cnt161=0;
        loop161:
        do {
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==130) ) {
                alt161=1;
            }


            switch (alt161) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:26: ',' expr
        	    {
        	    match(input,130,FOLLOW_130_in_synpred171_pollen7782); if (state.failed) return ;

        	    pushFollow(FOLLOW_expr_in_synpred171_pollen7784);
        	    expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt161 >= 1 ) break loop161;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(161, input);
                    throw eee;
            }
            cnt161++;
        } while (true);


        }


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:38: ( ')' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:39: ')'
        {
        match(input,128,FOLLOW_128_in_synpred171_pollen7790); if (state.failed) return ;

        }


        pushFollow(FOLLOW_delim_in_synpred171_pollen7793);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred171_pollen

    // $ANTLR start synpred174_pollen
    public final void synpred174_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1604:9: ( typeName IDENT '=' expr SEMI )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1604:9: typeName IDENT '=' expr SEMI
        {
        pushFollow(FOLLOW_typeName_in_synpred174_pollen8174);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred174_pollen8176); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred174_pollen8178); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred174_pollen8180);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,SEMI,FOLLOW_SEMI_in_synpred174_pollen8182); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred174_pollen

    // $ANTLR start synpred178_pollen
    public final void synpred178_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:18: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:18: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred178_pollen8379); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred178_pollen

    // $ANTLR start synpred179_pollen
    public final void synpred179_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:25: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:25: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred179_pollen8414); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred179_pollen

    // $ANTLR start synpred190_pollen
    public final void synpred190_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:4: ( typeName IDENT ( ASSIGN expr )? ',' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:5: typeName IDENT ( ASSIGN expr )? ','
        {
        pushFollow(FOLLOW_typeName_in_synpred190_pollen8879);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred190_pollen8881); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:20: ( ASSIGN expr )?
        int alt162=2;
        int LA162_0 = input.LA(1);

        if ( (LA162_0==ASSIGN) ) {
            alt162=1;
        }
        switch (alt162) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:21: ASSIGN expr
                {
                match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred190_pollen8884); if (state.failed) return ;

                pushFollow(FOLLOW_expr_in_synpred190_pollen8886);
                expr();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,130,FOLLOW_130_in_synpred190_pollen8890); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred190_pollen

    // $ANTLR start synpred191_pollen
    public final void synpred191_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:6: ( typeName IDENT '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:7: typeName IDENT '['
        {
        pushFollow(FOLLOW_typeName_in_synpred191_pollen8904);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred191_pollen8906); if (state.failed) return ;

        match(input,138,FOLLOW_138_in_synpred191_pollen8908); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred191_pollen

    // $ANTLR start synpred193_pollen
    public final void synpred193_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:6: ( ( '(' )? typeName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:7: ( '(' )? typeName '('
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:7: ( '(' )?
        int alt163=2;
        int LA163_0 = input.LA(1);

        if ( (LA163_0==127) ) {
            alt163=1;
        }
        switch (alt163) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:8: '('
                {
                match(input,127,FOLLOW_127_in_synpred193_pollen8923); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_typeName_in_synpred193_pollen8927);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,127,FOLLOW_127_in_synpred193_pollen8929); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred193_pollen

    // $ANTLR start synpred194_pollen
    public final void synpred194_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1704:6: ( ( '(' ) typeName typeName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1704:8: ( '(' ) typeName typeName '('
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1704:8: ( '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1704:9: '('
        {
        match(input,127,FOLLOW_127_in_synpred194_pollen8946); if (state.failed) return ;

        }


        pushFollow(FOLLOW_typeName_in_synpred194_pollen8949);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred194_pollen8951);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,127,FOLLOW_127_in_synpred194_pollen8953); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred194_pollen

    // $ANTLR start synpred195_pollen
    public final void synpred195_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1705:7: ( typeName varInit )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1705:8: typeName varInit
        {
        pushFollow(FOLLOW_typeName_in_synpred195_pollen8968);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred195_pollen8970);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred195_pollen

    // $ANTLR start synpred200_pollen
    public final void synpred200_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:5: ( '[' varDim ']' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:5: '[' varDim ']'
        {
        match(input,138,FOLLOW_138_in_synpred200_pollen9395); if (state.failed) return ;

        pushFollow(FOLLOW_varDim_in_synpred200_pollen9397);
        varDim();

        state._fsp--;
        if (state.failed) return ;

        match(input,139,FOLLOW_139_in_synpred200_pollen9399); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred200_pollen

    // $ANTLR start synpred206_pollen
    public final void synpred206_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:17: ( ',' ( NL )* initializer )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:17: ',' ( NL )* initializer
        {
        match(input,130,FOLLOW_130_in_synpred206_pollen9534); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:21: ( NL )*
        loop165:
        do {
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==NL) ) {
                alt165=1;
            }


            switch (alt165) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1773:21: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred206_pollen9536); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop165;
            }
        } while (true);


        pushFollow(FOLLOW_initializer_in_synpred206_pollen9539);
        initializer();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred206_pollen

    // $ANTLR start synpred210_pollen
    public final void synpred210_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:4: ( IDENT ASSIGN expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:4: IDENT ASSIGN expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred210_pollen9677); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred210_pollen9679); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred210_pollen9681);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred210_pollen

    // $ANTLR start synpred211_pollen
    public final void synpred211_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1799:5: ( IDENT BIND userTypeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1799:5: IDENT BIND userTypeName
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred211_pollen9742); if (state.failed) return ;

        match(input,BIND,FOLLOW_BIND_in_synpred211_pollen9744); if (state.failed) return ;

        pushFollow(FOLLOW_userTypeName_in_synpred211_pollen9746);
        userTypeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred211_pollen

    // $ANTLR start synpred212_pollen
    public final void synpred212_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1801:4: ( IDENT PEG expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1801:4: IDENT PEG expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred212_pollen9787); if (state.failed) return ;

        match(input,PEG,FOLLOW_PEG_in_synpred212_pollen9789); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred212_pollen9791);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred212_pollen

    // $ANTLR start synpred213_pollen
    public final void synpred213_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1803:4: ( IDENT ASSIGN expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1803:4: IDENT ASSIGN expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred213_pollen9820); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred213_pollen9822); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred213_pollen9824);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred213_pollen

    // $ANTLR start synpred222_pollen
    public final void synpred222_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:11: ( qualNameList )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:11: qualNameList
        {
        pushFollow(FOLLOW_qualNameList_in_synpred222_pollen10072);
        qualNameList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred222_pollen

    // $ANTLR start synpred223_pollen
    public final void synpred223_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1843:6: ( '.' IDENT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1843:6: '.' IDENT
        {
        match(input,131,FOLLOW_131_in_synpred223_pollen10101); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred223_pollen10119); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred223_pollen

    // $ANTLR start synpred235_pollen
    public final void synpred235_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:2: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:2: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred235_pollen10442); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred235_pollen

    // $ANTLR start synpred236_pollen
    public final void synpred236_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1915:9: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1915:9: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred236_pollen10552); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred236_pollen

    // $ANTLR start synpred237_pollen
    public final void synpred237_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:12: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:12: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred237_pollen10604); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred237_pollen

    // $ANTLR start synpred238_pollen
    public final void synpred238_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:4: ( ( SEMI ) ( NL )* )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:4: ( SEMI ) ( NL )*
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:4: ( SEMI )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:5: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred238_pollen10600); if (state.failed) return ;

        }


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:11: ( NL )*
        loop167:
        do {
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==NL) ) {
                alt167=1;
            }


            switch (alt167) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:12: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred238_pollen10604); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop167;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred238_pollen

    // $ANTLR start synpred239_pollen
    public final void synpred239_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:5: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:5: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred239_pollen10615); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred239_pollen

    // $ANTLR start synpred240_pollen
    public final void synpred240_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:4: ( ( NL )+ )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:4: ( NL )+
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:4: ( NL )+
        int cnt168=0;
        loop168:
        do {
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NL) ) {
                alt168=1;
            }


            switch (alt168) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:5: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred240_pollen10615); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt168 >= 1 ) break loop168;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(168, input);
                    throw eee;
            }
            cnt168++;
        } while (true);


        }

    }
    // $ANTLR end synpred240_pollen

    // $ANTLR start synpred242_pollen
    public final void synpred242_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:4: ( ( NL )* '}' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:5: ( NL )* '}'
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:5: ( NL )*
        loop169:
        do {
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==NL) ) {
                alt169=1;
            }


            switch (alt169) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:6: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred242_pollen10629); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop169;
            }
        } while (true);


        match(input,193,FOLLOW_193_in_synpred242_pollen10633); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred242_pollen

    // $ANTLR start synpred243_pollen
    public final void synpred243_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:20: ( NL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1947:20: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred243_pollen10639); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred243_pollen

    // Delegated rules

    public final boolean synpred16_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA140 dfa140 = new DFA140(this);
    static final String DFA140_eotS =
        "\75\uffff";
    static final String DFA140_eofS =
        "\1\37\74\uffff";
    static final String DFA140_minS =
        "\1\12\2\0\72\uffff";
    static final String DFA140_maxS =
        "\1\u00c1\2\0\72\uffff";
    static final String DFA140_acceptS =
        "\3\uffff\70\3\1\1\1\2";
    static final String DFA140_specialS =
        "\1\0\1\1\1\2\72\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\70\1\65\1\uffff\1\72\56\uffff\1\62\2\uffff\1\32\4\uffff\1"+
            "\72\1\5\1\57\1\uffff\1\67\4\uffff\1\71\5\uffff\1\2\2\uffff\1"+
            "\60\3\uffff\1\61\1\uffff\1\1\1\uffff\1\64\40\uffff\1\33\11\uffff"+
            "\1\42\1\66\3\uffff\1\21\1\46\1\22\1\41\1\10\1\12\1\34\1\47\1"+
            "\40\1\52\2\uffff\1\13\1\uffff\1\15\1\uffff\1\56\1\50\1\3\1\17"+
            "\1\53\1\uffff\1\4\1\24\1\25\1\23\1\uffff\1\6\1\7\1\36\1\63\2"+
            "\uffff\1\20\1\44\1\11\1\54\1\16\1\45\1\26\1\51\1\56\1\uffff"+
            "\1\30\1\31\1\27\1\35\1\55\1\43\2\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "1943:1: delim : ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_0 = input.LA(1);

                         
                        int index140_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA140_0==SEMI) ) {s = 1;}

                        else if ( (LA140_0==NL) ) {s = 2;}

                        else if ( (LA140_0==160) && (synpred242_pollen())) {s = 3;}

                        else if ( (LA140_0==164) && (synpred242_pollen())) {s = 4;}

                        else if ( (LA140_0==INJECT) && (synpred242_pollen())) {s = 5;}

                        else if ( (LA140_0==169) && (synpred242_pollen())) {s = 6;}

                        else if ( (LA140_0==170) && (synpred242_pollen())) {s = 7;}

                        else if ( (LA140_0==146) && (synpred242_pollen())) {s = 8;}

                        else if ( (LA140_0==177) && (synpred242_pollen())) {s = 9;}

                        else if ( (LA140_0==147) && (synpred242_pollen())) {s = 10;}

                        else if ( (LA140_0==154) && (synpred242_pollen())) {s = 11;}

                        else if ( (LA140_0==193) && (synpred242_pollen())) {s = 12;}

                        else if ( (LA140_0==156) && (synpred242_pollen())) {s = 13;}

                        else if ( (LA140_0==179) && (synpred242_pollen())) {s = 14;}

                        else if ( (LA140_0==161) && (synpred242_pollen())) {s = 15;}

                        else if ( (LA140_0==175) && (synpred242_pollen())) {s = 16;}

                        else if ( (LA140_0==142) && (synpred242_pollen())) {s = 17;}

                        else if ( (LA140_0==144) && (synpred242_pollen())) {s = 18;}

                        else if ( (LA140_0==167) && (synpred242_pollen())) {s = 19;}

                        else if ( (LA140_0==165) && (synpred242_pollen())) {s = 20;}

                        else if ( (LA140_0==166) && (synpred242_pollen())) {s = 21;}

                        else if ( (LA140_0==181) && (synpred242_pollen())) {s = 22;}

                        else if ( (LA140_0==187) && (synpred242_pollen())) {s = 23;}

                        else if ( (LA140_0==185) && (synpred242_pollen())) {s = 24;}

                        else if ( (LA140_0==186) && (synpred242_pollen())) {s = 25;}

                        else if ( (LA140_0==IDENT) && (synpred242_pollen())) {s = 26;}

                        else if ( (LA140_0==127) && (synpred242_pollen())) {s = 27;}

                        else if ( (LA140_0==148) && (synpred242_pollen())) {s = 28;}

                        else if ( (LA140_0==188) && (synpred242_pollen())) {s = 29;}

                        else if ( (LA140_0==171) && (synpred242_pollen())) {s = 30;}

                        else if ( (LA140_0==EOF) && (synpred242_pollen())) {s = 31;}

                        else if ( (LA140_0==150) && (synpred242_pollen())) {s = 32;}

                        else if ( (LA140_0==145) && (synpred242_pollen())) {s = 33;}

                        else if ( (LA140_0==137) && (synpred242_pollen())) {s = 34;}

                        else if ( (LA140_0==190) && (synpred242_pollen())) {s = 35;}

                        else if ( (LA140_0==176) && (synpred242_pollen())) {s = 36;}

                        else if ( (LA140_0==180) && (synpred242_pollen())) {s = 37;}

                        else if ( (LA140_0==143) && (synpred242_pollen())) {s = 38;}

                        else if ( (LA140_0==149) && (synpred242_pollen())) {s = 39;}

                        else if ( (LA140_0==159) && (synpred242_pollen())) {s = 40;}

                        else if ( (LA140_0==182) && (synpred242_pollen())) {s = 41;}

                        else if ( (LA140_0==151) && (synpred242_pollen())) {s = 42;}

                        else if ( (LA140_0==162) && (synpred242_pollen())) {s = 43;}

                        else if ( (LA140_0==178) && (synpred242_pollen())) {s = 44;}

                        else if ( (LA140_0==189) && (synpred242_pollen())) {s = 45;}

                        else if ( (LA140_0==158||LA140_0==183) && (synpred242_pollen())) {s = 46;}

                        else if ( (LA140_0==INT_LIT) && (synpred242_pollen())) {s = 47;}

                        else if ( (LA140_0==OCT_LIT) && (synpred242_pollen())) {s = 48;}

                        else if ( (LA140_0==REAL_LIT) && (synpred242_pollen())) {s = 49;}

                        else if ( (LA140_0==HEX_LIT) && (synpred242_pollen())) {s = 50;}

                        else if ( (LA140_0==172) && (synpred242_pollen())) {s = 51;}

                        else if ( (LA140_0==STRING) && (synpred242_pollen())) {s = 52;}

                        else if ( (LA140_0==CHAR) && (synpred242_pollen())) {s = 53;}

                        else if ( (LA140_0==138) && (synpred242_pollen())) {s = 54;}

                        else if ( (LA140_0==LOG_NOT) && (synpred242_pollen())) {s = 55;}

                        else if ( (LA140_0==BIT_NOT) && (synpred242_pollen())) {s = 56;}

                        else if ( (LA140_0==MINUS) && (synpred242_pollen())) {s = 57;}

                        else if ( (LA140_0==DEC||LA140_0==INC) && (synpred242_pollen())) {s = 58;}

                         
                        input.seek(index140_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA140_1 = input.LA(1);

                         
                        int index140_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred238_pollen()) ) {s = 59;}

                        else if ( (synpred242_pollen()) ) {s = 58;}

                         
                        input.seek(index140_1);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred240_pollen()) ) {s = 60;}

                        else if ( (synpred242_pollen()) ) {s = 58;}

                         
                        input.seek(index140_2);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_NL_in_unit686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000401100000000L});
    public static final BitSet FOLLOW_unitPackage_in_unit690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPackage_in_unitPackage730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_importList_in_unitPackage742 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importIntrinsicPrint_in_unitPackage766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x00020600040C0000L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00020600040C0000L});
    public static final BitSet FOLLOW_unitTypeDefinition_in_unitPackage797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage812 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_pollenEOF_in_unitPackage827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_pollenEOF864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmtInjectionList882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_174_in_stmtPackage912 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_stmtPackage914 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtPackage916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_stmtExport951 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_stmtExport953 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtExport955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_classDefinition990 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_classDefinition992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000820000000L});
    public static final BitSet FOLLOW_extendsClause_in_classDefinition1004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000800000000L});
    public static final BitSet FOLLOW_implementsClause_in_classDefinition1008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_classDefinition1012 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000020L,0x1E2888E204154000L});
    public static final BitSet FOLLOW_classFeatureList_in_classDefinition1014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_classDefinition1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFeature_in_classFeatureList1062 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000020L,0x1E2888E204154000L});
    public static final BitSet FOLLOW_classHostCtor_in_classFeatureList1065 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_classTargCtor_in_classFeatureList1068 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicUnitName_in_classFeatureList1072 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_classFeatureList1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_classFeature1161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_classFeature1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classFeature1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_classFeature1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_classFeature1202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_moduleDefinition1622 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_moduleDefinition1624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000820000000L});
    public static final BitSet FOLLOW_extendsClause_in_moduleDefinition1642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000800000000L});
    public static final BitSet FOLLOW_implementsClause_in_moduleDefinition1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_moduleDefinition1656 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000020L,0x1E2888E204154000L});
    public static final BitSet FOLLOW_moduleFeatureList_in_moduleDefinition1658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_moduleDefinition1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeature_in_moduleFeatureList1707 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000020L,0x1E2888E204154000L});
    public static final BitSet FOLLOW_moduleHostCtor_in_moduleFeatureList1710 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_moduleTargCtor_in_moduleFeatureList1713 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicUnitName_in_moduleFeatureList1716 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_moduleFeatureList1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_moduleFeature2527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_moduleFeature2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_moduleFeature2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_moduleFeature2551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_moduleFeature2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_enumDefinition2591 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumDefinition2593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_enumDefinition2602 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_enumList_in_enumDefinition2604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_enumDefinition2606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList2642 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_enumList2645 = new BitSet(new long[]{0x8000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_enumList2648 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_enumElement_in_enumList2652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_enumElement2683 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_enumElement2685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INT_LIT_in_enumElement2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_protocolDefinition2762 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_protocolDefinition2764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000820000000L});
    public static final BitSet FOLLOW_extendsClause_in_protocolDefinition2772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000800000000L});
    public static final BitSet FOLLOW_implementsClause_in_protocolDefinition2776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_protocolDefinition2780 = new BitSet(new long[]{0x8000000000000000L,0x8000000000080020L,0x0E2880E204014000L,0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeatureList_in_protocolDefinition2782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_protocolDefinition2784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeature_in_protocolFeatureList2824 = new BitSet(new long[]{0x8000000000000002L,0x8000000000000020L,0x0E2880E204014000L});
    public static final BitSet FOLLOW_enumDefinition_in_protocolFeature2858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclaration_in_protocolFeature2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_protocolFeature2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_compositionDefinition2900 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_compositionDefinition2902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000820000000L});
    public static final BitSet FOLLOW_extendsClause_in_compositionDefinition2910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000800000000L});
    public static final BitSet FOLLOW_implementsClause_in_compositionDefinition2916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_compositionDefinition2920 = new BitSet(new long[]{0x8000000000000000L,0x8000000000080020L,0x1E2888E214114000L,0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeatureList_in_compositionDefinition2922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_compositionDefinition2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeature_in_compositionFeatureList2970 = new BitSet(new long[]{0x8000000000000002L,0x8000000000000020L,0x1E2888E214114000L});
    public static final BitSet FOLLOW_stmtExport_in_compositionFeature3001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_compositionFeature3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_compositionFeature3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_compositionFeature3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_compositionFeature3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_stmtImport3064 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_importFrom_in_stmtImport3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_stmtImport3082 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_stmtImport3084 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L,0x4000000000002000L});
    public static final BitSet FOLLOW_metaArguments_in_stmtImport3107 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L,0x0000000000002000L});
    public static final BitSet FOLLOW_importAs_in_stmtImport3120 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtImport3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importFrom3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_importFrom3235 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_importFrom3246 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L,0x4000000000002000L});
    public static final BitSet FOLLOW_metaArguments_in_importFrom3269 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L,0x0000000000002000L});
    public static final BitSet FOLLOW_importAs_in_importFrom3282 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_importFrom3284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_importAs3342 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_importAs3346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImports_in_importList3381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImport_in_stmtImports3392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_importPrintImpl_in_importIntrinsicPrint3452 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importPrintProtocol_in_importIntrinsicPrint3463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_meta3599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_meta3617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0F2000E000014000L});
    public static final BitSet FOLLOW_metaParmsGen_in_meta3624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_meta3630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaParmGen_in_metaParmsGen3693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_metaParmsGen3697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_metaParmsGen3704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0F2000E000014000L});
    public static final BitSet FOLLOW_NL_in_metaParmsGen3706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0F2000E000014000L});
    public static final BitSet FOLLOW_metaParmGen_in_metaParmsGen3714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_184_in_metaParmGen3761 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_metaParmGen3763 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaParmGen3767 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_metaParmGen3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_metaParmGen3813 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_metaParmGen3817 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaParmGen3820 = new BitSet(new long[]{0x1000000000000800L,0x0000000044400040L,0x0080100040000000L});
    public static final BitSet FOLLOW_primitiveLit_in_metaParmGen3822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_metaArguments3909 = new BitSet(new long[]{0x9000000000000800L,0x0000000044480040L,0x0EA010E040014004L,0x0000000000000002L});
    public static final BitSet FOLLOW_metaArgument_in_metaArguments3911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_metaArguments3914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_metaArguments3919 = new BitSet(new long[]{0x9000000000000800L,0x0000000044480040L,0x0EA010E040014004L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_metaArguments3922 = new BitSet(new long[]{0x9000000000000800L,0x0000000044480040L,0x0EA010E040014004L,0x0000000000000002L});
    public static final BitSet FOLLOW_metaArgument_in_metaArguments3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_metaArguments3929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_metaArguments3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_metaArguments3956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_metaArguments3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_metaArgument3987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_metaArgument3993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_typeName4011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameScalar4024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_typeNameScalar4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeName4053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameArray4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeNameArr_in_typeNameArray4108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeNameArr4118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_meta_in_unitTypeDefinition4166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00020400040C0000L});
    public static final BitSet FOLLOW_moduleDefinition_in_unitTypeDefinition4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_unitTypeDefinition4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolDefinition_in_unitTypeDefinition4242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionDefinition_in_unitTypeDefinition4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_unitTypeDefinition4280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_extendsClause4305 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_extendsClause4307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_implementsClause4352 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_implementsClause4354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_braceClose4401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_braceClose4406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_braceClose4410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_braceCloseAtEOF4434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_braceCloseAtEOF4439 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_braceCloseAtEOF4443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_braceOpen4468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_braceOpen4473 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_braceOpen4477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_LOG_NOT_in_logicalNotOp4655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_NOT_in_bitwiseNotOp4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprList4677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_exprList4680 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_exprList4682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr4721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expr4723 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_expr4725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expr4727 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_expr4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr4770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_exprLogicalOr4784 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr4786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd4825 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_exprLogicalAnd4837 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd4839 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr4876 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_exprBitwiseOr4888 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr4890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor4926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_exprBitwiseXor4938 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor4940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd4976 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_exprBitwiseAnd4988 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd4990 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality5026 = new BitSet(new long[]{0x0000002000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_equalityOp_in_exprEquality5039 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality5041 = new BitSet(new long[]{0x0000002000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational5077 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000C00L});
    public static final BitSet FOLLOW_relationalOp_in_exprRelational5090 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational5092 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000C00L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift5129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_shiftOp_in_exprShift5142 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift5145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub5182 = new BitSet(new long[]{0x0000000000000002L,0x0000000001002000L});
    public static final BitSet FOLLOW_addSubOp_in_exprAddSub5194 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub5196 = new BitSet(new long[]{0x0000000000000002L,0x0000000001002000L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv5239 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_multDivModOp_in_exprMultDiv5251 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv5253 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_171_in_exprNew5295 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_exprNew5297 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_exprNew5299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_exprNew5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_exprUnary5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_exprUnary5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLit_in_exprUnary5372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNotOp_in_exprUnary5394 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary5396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseNotOp_in_exprUnary5421 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary5423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_exprUnary5449 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_exprUnary5476 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary5478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_exprUnary5480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary5503 = new BitSet(new long[]{0x0000000000002000L,0x0000000000000010L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary5505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary5533 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0000080000000200L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_exprUnary5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDefinition5568 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinition5572 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinition5574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinition5576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDefinitionHost5658 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinitionHost5665 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinitionHost5668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinitionHost5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnAttr5769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008800200000000L});
    public static final BitSet FOLLOW_161_in_fcnAttr5778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008800200000000L});
    public static final BitSet FOLLOW_175_in_fcnAttr5787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008800200000000L});
    public static final BitSet FOLLOW_braceOpen_in_fcnBody5807 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x7EF518E6C0B1C600L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmts_in_fcnBody5810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_fcnBody5814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDeclaration5843 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDeclaration5847 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDeclaration5850 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_fcnDeclaration5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_fcnType_fcnName5947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varArraySpec_in_fcnType_fcnName5949 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName6010 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName6012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName6081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName6170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName6316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_fcnTypes_fcnName6415 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_fcnTypes_in_fcnTypes_fcnName6417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnTypes_fcnName6419 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_fcnTypes_fcnName6421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes6448 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_fcnTypes6451 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes6453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_127_in_formalParameterList6488 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0F2000E000014001L});
    public static final BitSet FOLLOW_formalParameters_in_formalParameterList6490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_formalParameterList6492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters6516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_formalParameters6519 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0F2000E000014000L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters6521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_184_in_formalParameter6574 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter6576 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter6580 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_formalParameter6584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_formalParameter6652 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter6654 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter6658 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_formalParameter6660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_fcnArgumentList6697 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_fcnArguments_in_fcnArgumentList6699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnArgumentList6701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_fcnArguments6716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_varOrFcnOrArray6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray6732 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray6734 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray6736 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray6790 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray6792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray6833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray6868 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray6870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray6910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldAccess_in_fieldOrArrayAccess6943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_arrayAccess_in_fieldOrArrayAccess6947 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldOrArrayAccess6949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_131_in_fieldAccess6962 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess6964 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldAccess6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_fieldAccess7007 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_arrayAccess7034 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000E00L});
    public static final BitSet FOLLOW_exprList_in_arrayAccess7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_arrayAccess7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpen_in_stmtBlock7073 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x7EF518E6C0B1C600L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmts_in_stmtBlock7075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_stmtBlock7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_stmts7103 = new BitSet(new long[]{0x9000000000002C02L,0x8000000044482170L,0x7EF518E6C0B1C600L});
    public static final BitSet FOLLOW_NL_in_stmts7125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_stmtDecl_in_stmt7152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmt7159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_stmt7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt7169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPrint_in_stmt7174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPeg_in_stmt7179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtReturn_in_stmt7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBreak_in_stmt7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtContinue_in_stmt7196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtFor_in_stmt7203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtSwitch_in_stmt7208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDoWhile_in_stmt7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtIf_in_stmt7220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtProvided_in_stmt7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtWhile_in_stmt7230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmt7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmt7241 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmt7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprChainedAssign_in_exprAssign7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprAssign7286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_exprChainedAssign7298 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_exprChainedAssign7300 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprAssign_in_exprChainedAssign7302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign7340 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign7342 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprAssign_in_stmtAssign7344 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign7346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign7381 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign7383 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign7385 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign7387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign7422 = new BitSet(new long[]{0x0000000000008390L,0x0000000088030200L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign7424 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign7426 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign7429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign7464 = new BitSet(new long[]{0x0000000000008390L,0x0000000088030200L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign7466 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign7468 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign7470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtBind7510 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_stmtBind7512 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_userTypeName_in_stmtBind7515 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtBind7518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtPeg7546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_PEG_in_stmtPeg7548 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprAssign_in_stmtPeg7551 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtPeg7554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItemList_in_printList7584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItem_in_printItemList7606 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PLUS_in_printItemList7610 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080180040000200L});
    public static final BitSet FOLLOW_printItem_in_printItemList7613 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_primitiveLit_in_printItem7638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_printItem7646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_stmtPrint7661 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080180040000200L});
    public static final BitSet FOLLOW_printList_in_stmtPrint7663 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtPrint7667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_stmtPrint7689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000210008000000L});
    public static final BitSet FOLLOW_stmtPrintTarget_in_stmtPrint7692 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080180040000200L});
    public static final BitSet FOLLOW_printList_in_stmtPrint7696 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtPrint7698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_stmtPrintTarget7733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_stmtPrintTarget7743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_stmtPrintTarget7752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_stmtReturn7772 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtReturn7775 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn7779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_stmtReturn7782 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn7784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_128_in_stmtReturn7790 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn7793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_stmtReturn7834 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn7838 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn7842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_stmtBreak7887 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtBreak7889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_stmtContinue7911 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtContinue7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_stmtFor7940 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_defaultLoopVar_in_stmtFor7942 = new BitSet(new long[]{0x8000000000000000L,0x0000000010000020L,0x0E2008E000014200L});
    public static final BitSet FOLLOW_stmtForInit_in_stmtFor7944 = new BitSet(new long[]{0x9000000000002C00L,0x8000000054402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_stmtForCond_in_stmtFor7946 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000601L});
    public static final BitSet FOLLOW_stmtForNext_in_stmtFor7948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtFor7950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtFor7952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond8005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForCond8030 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond8032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_defaultLoopVar8054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit8148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_stmtForInit8174 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_stmtForInit8176 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtForInit8178 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtForInit8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmtForInit8244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForNext8287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_stmtSwitch8306 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtSwitch8308 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtSwitch8310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtSwitch8312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_stmtSwitch8314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000420000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmtsCase_in_stmtSwitch8316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000400000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDefault_in_stmtSwitch8318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_stmtSwitch8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtCase_in_stmtsCase8351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_150_in_stmtDefault8375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_stmtDefault8377 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x7EF518E6C0B1C600L});
    public static final BitSet FOLLOW_NL_in_stmtDefault8379 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x7EF518E6C0B1C600L});
    public static final BitSet FOLLOW_stmts_in_stmtDefault8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_stmtCase8406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INT_LIT_in_stmtCase8409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_stmtCase8412 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x7EF518E6C0B1C600L});
    public static final BitSet FOLLOW_NL_in_stmtCase8414 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x7EF518E6C0B1C600L});
    public static final BitSet FOLLOW_stmts_in_stmtCase8417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_stmtDoWhile8443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtDoWhile8445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_stmtDoWhile8447 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtDoWhile8449 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtDoWhile8451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtDoWhile8453 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtDoWhile8455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_stmtIf8482 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtIf8484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_stmtsElif_in_stmtIf8486 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtIf8488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_stmtIfBlock8518 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtIfBlock8520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtIfBlock8522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtIfBlock8524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtElif_in_stmtsElif8540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_152_in_stmtElif8564 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtElif8566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_stmtElse8590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtElse8592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_stmtProvided8606 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtProvided8608 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtProvided8610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtProvided8612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtProvided8614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtProvided8617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtWhile8650 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtWhile8652 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_stmtWhile8654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtWhile8655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtWhile8657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDeclAttr_in_stmtDecl8686 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000000L,0x0E2008E000014000L});
    public static final BitSet FOLLOW_varDecl_in_stmtDecl8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_stmtDecl8690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_stmtDeclAttr8719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000200100000L});
    public static final BitSet FOLLOW_188_in_stmtDeclAttr8728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000200100000L});
    public static final BitSet FOLLOW_161_in_stmtDeclAttr8742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000200100000L});
    public static final BitSet FOLLOW_varAttr_in_fieldDeclaration8772 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000000L,0x0E2008E000014000L});
    public static final BitSet FOLLOW_varDecl_in_fieldDeclaration8774 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_fieldDeclaration8776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_varDeclaration8808 = new BitSet(new long[]{0x8000000000000000L,0x8000000000000000L,0x0E2008E000014000L});
    public static final BitSet FOLLOW_varDecl_in_varDeclaration8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_varDeclaration8812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_varAttr8831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000200100000L});
    public static final BitSet FOLLOW_188_in_varAttr8840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000200100000L});
    public static final BitSet FOLLOW_161_in_varAttr8851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000200100000L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl8895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varArray_in_varDecl8913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef_in_varDecl8935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef2_in_varDecl8959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl8975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_varDecl8981 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_varDecl8983 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varDecl8985 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varDecl8987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_varFcnRef9131 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef9134 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef9136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_varFcnRef9139 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef9142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef9151 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef9153 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef9156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_varFcnRef29190 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_rtnType_in_varFcnRef29192 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef29194 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef29196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_varFcnRef29198 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef29200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_rtnType9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_fcnRefTypeList9256 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014001L});
    public static final BitSet FOLLOW_fcnRefTypes_in_fcnRefTypeList9258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnRefTypeList9260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes9274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_fcnRefTypes9277 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes9279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeNameArray_in_varArray9328 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varArray9334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varArraySpec_in_varArray9339 = new BitSet(new long[]{0x0000000000000022L,0x0000000000800000L});
    public static final BitSet FOLLOW_varArrayInit_in_varArray9346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_varArraySpec9395 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000E00L});
    public static final BitSet FOLLOW_varDim_in_varArraySpec9397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_varArraySpec9399 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ASSIGN_in_varArrayInit9428 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x4080180040000600L});
    public static final BitSet FOLLOW_initializer_in_varArrayInit9430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PEG_in_varArrayInit9445 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x4080180040000600L});
    public static final BitSet FOLLOW_initializer_in_varArrayInit9447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_varDim9472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_initializer9504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_initializer9510 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x4080180040000600L});
    public static final BitSet FOLLOW_initializer_list_in_initializer9512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_initializer9514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_initializer9517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list9531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_initializer_list9534 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x4080180040000600L});
    public static final BitSet FOLLOW_NL_in_initializer_list9536 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x4080180040000600L});
    public static final BitSet FOLLOW_initializer_in_initializer_list9539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_varBuiltInType_in_varDeclList9585 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varListBuiltInType_in_varDeclList9590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_varDeclList9595 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varListUserDefType_in_varDeclList9600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_varBuiltInType9611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varInit2_in_varListBuiltInType9635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_varListBuiltInType9638 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit2_in_varListBuiltInType9641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_varInit_in_varListUserDefType9655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_varListUserDefType9658 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit_in_varListUserDefType9661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_varInit29677 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit29679 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_varInit29681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit29711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit9742 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_varInit9744 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_userTypeName_in_varInit9746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit9787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_PEG_in_varInit9789 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_varInit9791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit9820 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit9822 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_varInit9824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit9853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_builtinType9893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_builtinType9906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_builtinType9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_builtinType9932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_builtinType9945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_builtinType9961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_builtinType9976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_builtinType9989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_builtinType10002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameConcat_in_qualName10050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualNameConcat10069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_qualNameList_in_qualNameConcat10072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_qualNameList10101 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualNameList10119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_138_in_arrayLit10152 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080100040000800L});
    public static final BitSet FOLLOW_arrayLitList_in_arrayLit10154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_arrayLit10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList10178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_arrayLitList10181 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080100040000000L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList10183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_primitiveLit_in_arrayLitElem10207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedConstant_in_arrayLitElem10211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_namedConstant10221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_boolLit10233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_nullLit10251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_numLit10268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_numLit10277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LIT_in_numLit10286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_numLit10295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolLit_in_primitiveLit10320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numLit_in_primitiveLit10339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullLit_in_primitiveLit10359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_primitiveLit10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_primitiveLit10406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_stmtInjection10439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_stmtInjection10442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_INJECT_in_inject10489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_injectionCode10515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_injectionDecl10542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_injectionDecl10552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_SEMI_in_delim10600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_delim10604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_delim10615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_delim10639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred5_pollen1161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred7_pollen1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred16_pollen2527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred17_pollen2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delim_in_synpred20_pollen2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred22_pollen2683 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred22_pollen2685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INT_LIT_in_synpred22_pollen2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_synpred28_pollen3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred30_pollen3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaArguments_in_synpred32_pollen3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaArguments_in_synpred33_pollen3269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred40_pollen3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred47_pollen3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred50_pollen3909 = new BitSet(new long[]{0x9000000000000800L,0x0000000044480040L,0x0EA010E040014004L,0x0000000000000002L});
    public static final BitSet FOLLOW_metaArgument_in_synpred50_pollen3911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred50_pollen3914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred50_pollen3919 = new BitSet(new long[]{0x9000000000000800L,0x0000000044480040L,0x0EA010E040014004L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred50_pollen3922 = new BitSet(new long[]{0x9000000000000800L,0x0000000044480040L,0x0EA010E040014004L,0x0000000000000002L});
    public static final BitSet FOLLOW_metaArgument_in_synpred50_pollen3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred50_pollen3929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred50_pollen3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_synpred55_pollen4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_synpred56_pollen4218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred57_pollen4237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_synpred58_pollen4256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_synpred59_pollen4275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred63_pollen4410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred67_pollen4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalOr_in_synpred88_pollen4721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred88_pollen4723 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred88_pollen4725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred88_pollen4727 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred88_pollen4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_synpred89_pollen4784 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_synpred89_pollen4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred90_pollen4837 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_synpred90_pollen4839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_synpred91_pollen4888 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_synpred91_pollen4890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_synpred92_pollen4938 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_synpred92_pollen4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred93_pollen4988 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprEquality_in_synpred93_pollen4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityOp_in_synpred94_pollen5039 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprRelational_in_synpred94_pollen5041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred95_pollen5090 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprShift_in_synpred95_pollen5092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred96_pollen5142 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprAddSub_in_synpred96_pollen5145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addSubOp_in_synpred97_pollen5194 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprMultDiv_in_synpred97_pollen5196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multDivModOp_in_synpred98_pollen5251 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprUnary_in_synpred98_pollen5253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred99_pollen5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred107_pollen5503 = new BitSet(new long[]{0x0000000000002000L,0x0000000000000010L});
    public static final BitSet FOLLOW_incDecOp_in_synpred107_pollen5505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred108_pollen5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_synpred113_pollen5947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varArraySpec_in_synpred113_pollen5949 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_synpred113_pollen5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred114_pollen6010 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_synpred114_pollen6012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred115_pollen6081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred116_pollen6170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred117_pollen6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred118_pollen6316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred120_pollen6386 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_synpred120_pollen6388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_130_in_synpred120_pollen6391 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_synpred120_pollen6393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_128_in_synpred120_pollen6397 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_synpred120_pollen6399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred128_pollen6738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred129_pollen6732 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred129_pollen6734 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred129_pollen6736 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred129_pollen6738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred130_pollen6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred131_pollen6790 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred131_pollen6792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred131_pollen6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred132_pollen6833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred133_pollen6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred134_pollen6868 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred134_pollen6870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred134_pollen6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred135_pollen6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred137_pollen6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_synpred138_pollen6947 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred138_pollen6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred139_pollen6962 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred139_pollen6964 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred139_pollen6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_synpred140_pollen7037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred141_pollen7103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred142_pollen7103 = new BitSet(new long[]{0x9000000000002C02L,0x8000000044482170L,0x7EF518E6C0B1C600L});
    public static final BitSet FOLLOW_NL_in_synpred143_pollen7125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDecl_in_synpred144_pollen7152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_synpred145_pollen7159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_synpred146_pollen7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPeg_in_synpred149_pollen7179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_synpred159_pollen7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_synpred160_pollen7272 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred160_pollen7274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred161_pollen7340 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred161_pollen7342 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_exprAssign_in_synpred161_pollen7344 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_synpred161_pollen7346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_synpred162_pollen7381 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred162_pollen7383 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred162_pollen7385 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_synpred162_pollen7387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred163_pollen7422 = new BitSet(new long[]{0x0000000000008390L,0x0000000088030200L});
    public static final BitSet FOLLOW_assignOp_in_synpred163_pollen7424 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred163_pollen7426 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_synpred163_pollen7429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItem_in_synpred165_pollen7606 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PLUS_in_synpred165_pollen7610 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080180040000200L});
    public static final BitSet FOLLOW_printItem_in_synpred165_pollen7613 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_176_in_synpred167_pollen7661 = new BitSet(new long[]{0x9000000000000800L,0x0000000044400040L,0x0080180040000200L});
    public static final BitSet FOLLOW_printList_in_synpred167_pollen7663 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_synpred167_pollen7667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred171_pollen7772 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred171_pollen7775 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred171_pollen7779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred171_pollen7782 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred171_pollen7784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_128_in_synpred171_pollen7790 = new BitSet(new long[]{0x0000000000000000L,0x0000000010080000L});
    public static final BitSet FOLLOW_delim_in_synpred171_pollen7793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred174_pollen8174 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred174_pollen8176 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred174_pollen8178 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred174_pollen8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred174_pollen8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred178_pollen8379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred179_pollen8414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred190_pollen8879 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred190_pollen8881 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred190_pollen8884 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred190_pollen8886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred190_pollen8890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred191_pollen8904 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred191_pollen8906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred191_pollen8908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred193_pollen8923 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_synpred193_pollen8927 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred193_pollen8929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred194_pollen8946 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_synpred194_pollen8949 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2000E000014000L});
    public static final BitSet FOLLOW_typeName_in_synpred194_pollen8951 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred194_pollen8953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred195_pollen8968 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit_in_synpred195_pollen8970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_synpred200_pollen9395 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000E00L});
    public static final BitSet FOLLOW_varDim_in_synpred200_pollen9397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred200_pollen9399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred206_pollen9534 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x4080180040000600L});
    public static final BitSet FOLLOW_NL_in_synpred206_pollen9536 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044482170L,0x4080180040000600L});
    public static final BitSet FOLLOW_initializer_in_synpred206_pollen9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred210_pollen9677 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred210_pollen9679 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred210_pollen9681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred211_pollen9742 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_synpred211_pollen9744 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_userTypeName_in_synpred211_pollen9746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred212_pollen9787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_PEG_in_synpred212_pollen9789 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred212_pollen9791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred213_pollen9820 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred213_pollen9822 = new BitSet(new long[]{0x9000000000002C00L,0x8000000044402170L,0x0080180040000600L});
    public static final BitSet FOLLOW_expr_in_synpred213_pollen9824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameList_in_synpred222_pollen10072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred223_pollen10101 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred223_pollen10119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred235_pollen10442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred236_pollen10552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred237_pollen10604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred238_pollen10600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_synpred238_pollen10604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_synpred239_pollen10615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred240_pollen10615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_NL_in_synpred242_pollen10629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred242_pollen10633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred243_pollen10639 = new BitSet(new long[]{0x0000000000000002L});

}