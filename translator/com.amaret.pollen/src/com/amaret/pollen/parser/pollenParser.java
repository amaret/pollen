// $ANTLR 3.4 /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g 2012-09-07 15:36:29

    package com.amaret.pollen.parser;
    import java.util.EnumSet;
    import java.util.ArrayList;
    import java.lang.*;
    import java.io.*;
    import com.amaret.pollen.parser.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class pollenParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_EQ", "ASSIGN", "BIND", "BITAND_EQ", "BITOR_EQ", "BITXOR_EQ", "BIT_NOT", "CHAR", "D", "DEC", "DELIM", "DIV_EQ", "D_ARG", "D_ARR", "D_ARR_DIM", "D_CLASS", "D_COMPOSITION", "D_CONST", "D_ENUM", "D_ENUMVAL", "D_FCN_CTOR", "D_FCN_DCL", "D_FCN_DEF", "D_FCN_REF", "D_FCN_TYP_NM", "D_FIELD", "D_FORMAL", "D_INJ", "D_INSTANCE", "D_META", "D_MODULE", "D_PROTOCOL", "D_VAR", "E", "EQ", "EXPORT", "E_ADDR", "E_BINARY", "E_CALL", "E_CONST", "E_DEREF", "E_EXPR", "E_HASH", "E_IDENT", "E_INDEX", "E_INJ", "E_NEW", "E_NUMLIT", "E_PAREN", "E_QUEST", "E_SELF", "E_UNARY", "E_VEC", "FCNBODY", "GT_EQ", "H", "HEX_LIT", "HOST", "I", "IDENT", "IJ_BEG", "IJ_END", "ILLEGAL_CHARACTER", "IMPORT", "INC", "INJECT", "INT_LIT", "LIST", "LOG_NOT", "LSHFT_EQ", "LT_EQ", "LU", "MINUS", "ML_COMMENT", "MODULE", "MOD_EQ", "MUL_EQ", "NIL", "NL", "NOT_EQ", "O", "OCT_LIT", "PLUS", "QNAME", "REAL_LIT", "RSHFT_EQ", "SEMI", "SL_COMMENT", "STRING", "SUB_EQ", "S_ASSERT", "S_ASSIGN", "S_BIND", "S_BLOCK", "S_BREAK", "S_CASE", "S_CONTINUE", "S_DECL", "S_ELIF", "S_EXPR", "S_FOR", "S_FOREACH", "S_IF", "S_INJ", "S_PACKAGE", "S_PRINT", "S_PROVIDED", "S_RETURN", "S_SWITCH", "S_WHILE", "T_ARR", "T_FCN", "T_LST", "T_STD", "T_USR", "UNIT", "VOID", "WS", "'%'", "'&&'", "'&'", "'('", "')'", "'*'", "','", "'.'", "'/'", "':'", "'<'", "'<<'", "'>'", "'>>'", "'?'", "'@'", "'['", "']'", "'^'", "'as'", "'assert'", "'bool'", "'break'", "'byte'", "'case'", "'class'", "'composition'", "'const'", "'continue'", "'default'", "'do'", "'elif'", "'else'", "'enum'", "'err'", "'export'", "'extends'", "'false'", "'for'", "'from'", "'host'", "'if'", "'implements'", "'import'", "'int16'", "'int32'", "'int8'", "'log'", "'meta'", "'module'", "'new'", "'null'", "'out'", "'package'", "'print'", "'protocol'", "'provided'", "'public'", "'return'", "'string'", "'switch'", "'true'", "'type'", "'uint16'", "'uint32'", "'uint8'", "'volatile'", "'while'", "'{'", "'|'", "'||'", "'}'"
    };

    public static final int EOF=-1;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int ADD_EQ=4;
    public static final int ASSIGN=5;
    public static final int BIND=6;
    public static final int BITAND_EQ=7;
    public static final int BITOR_EQ=8;
    public static final int BITXOR_EQ=9;
    public static final int BIT_NOT=10;
    public static final int CHAR=11;
    public static final int D=12;
    public static final int DEC=13;
    public static final int DELIM=14;
    public static final int DIV_EQ=15;
    public static final int D_ARG=16;
    public static final int D_ARR=17;
    public static final int D_ARR_DIM=18;
    public static final int D_CLASS=19;
    public static final int D_COMPOSITION=20;
    public static final int D_CONST=21;
    public static final int D_ENUM=22;
    public static final int D_ENUMVAL=23;
    public static final int D_FCN_CTOR=24;
    public static final int D_FCN_DCL=25;
    public static final int D_FCN_DEF=26;
    public static final int D_FCN_REF=27;
    public static final int D_FCN_TYP_NM=28;
    public static final int D_FIELD=29;
    public static final int D_FORMAL=30;
    public static final int D_INJ=31;
    public static final int D_INSTANCE=32;
    public static final int D_META=33;
    public static final int D_MODULE=34;
    public static final int D_PROTOCOL=35;
    public static final int D_VAR=36;
    public static final int E=37;
    public static final int EQ=38;
    public static final int EXPORT=39;
    public static final int E_ADDR=40;
    public static final int E_BINARY=41;
    public static final int E_CALL=42;
    public static final int E_CONST=43;
    public static final int E_DEREF=44;
    public static final int E_EXPR=45;
    public static final int E_HASH=46;
    public static final int E_IDENT=47;
    public static final int E_INDEX=48;
    public static final int E_INJ=49;
    public static final int E_NEW=50;
    public static final int E_NUMLIT=51;
    public static final int E_PAREN=52;
    public static final int E_QUEST=53;
    public static final int E_SELF=54;
    public static final int E_UNARY=55;
    public static final int E_VEC=56;
    public static final int FCNBODY=57;
    public static final int GT_EQ=58;
    public static final int H=59;
    public static final int HEX_LIT=60;
    public static final int HOST=61;
    public static final int I=62;
    public static final int IDENT=63;
    public static final int IJ_BEG=64;
    public static final int IJ_END=65;
    public static final int ILLEGAL_CHARACTER=66;
    public static final int IMPORT=67;
    public static final int INC=68;
    public static final int INJECT=69;
    public static final int INT_LIT=70;
    public static final int LIST=71;
    public static final int LOG_NOT=72;
    public static final int LSHFT_EQ=73;
    public static final int LT_EQ=74;
    public static final int LU=75;
    public static final int MINUS=76;
    public static final int ML_COMMENT=77;
    public static final int MODULE=78;
    public static final int MOD_EQ=79;
    public static final int MUL_EQ=80;
    public static final int NIL=81;
    public static final int NL=82;
    public static final int NOT_EQ=83;
    public static final int O=84;
    public static final int OCT_LIT=85;
    public static final int PLUS=86;
    public static final int QNAME=87;
    public static final int REAL_LIT=88;
    public static final int RSHFT_EQ=89;
    public static final int SEMI=90;
    public static final int SL_COMMENT=91;
    public static final int STRING=92;
    public static final int SUB_EQ=93;
    public static final int S_ASSERT=94;
    public static final int S_ASSIGN=95;
    public static final int S_BIND=96;
    public static final int S_BLOCK=97;
    public static final int S_BREAK=98;
    public static final int S_CASE=99;
    public static final int S_CONTINUE=100;
    public static final int S_DECL=101;
    public static final int S_ELIF=102;
    public static final int S_EXPR=103;
    public static final int S_FOR=104;
    public static final int S_FOREACH=105;
    public static final int S_IF=106;
    public static final int S_INJ=107;
    public static final int S_PACKAGE=108;
    public static final int S_PRINT=109;
    public static final int S_PROVIDED=110;
    public static final int S_RETURN=111;
    public static final int S_SWITCH=112;
    public static final int S_WHILE=113;
    public static final int T_ARR=114;
    public static final int T_FCN=115;
    public static final int T_LST=116;
    public static final int T_STD=117;
    public static final int T_USR=118;
    public static final int UNIT=119;
    public static final int VOID=120;
    public static final int WS=121;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public pollenParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public pollenParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[356+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return pollenParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g"; }



        EnumSet<LitFlags> litFlags = EnumSet.noneOf(LitFlags.class);
        
        EnumSet<Flags> atFlags = EnumSet.noneOf(Flags.class);
        
       private class TypeInfo {
        	public EnumSet<Flags> getUnitFlags() {
    			return uf;
    		}
    		public void setUnitFlags(EnumSet<Flags> unitFlags) {
    			uf.addAll(unitFlags);
    		}
    		public String getTypeName() {
    			return tn;
    		}
    		public void setTypeName(String typeName) {
    			this.tn = typeName;
    		}
    		EnumSet<Flags> uf = EnumSet.noneOf(Flags.class);
        	String tn = "";  
        }
        ArrayList<TypeInfo> tl = new ArrayList<TypeInfo>();
        TypeInfo ti;
        
        String getInject(String text) {
            	return text.substring(text.indexOf("{"+1),text.lastIndexOf("}"));
        }
        
        void DBG(String dbg) {
        	System.out.println(dbg);
        }
        String pkgName;
        void DBG_LT() {
          System.out.print("LT: "); 
        	if (input.LT(0) != null) System.out.print(input.LT(0).getText() + ", "); 
        	if (input.LT(1) != null) System.out.print(input.LT(1).getText() + ", "); 
        	if (input.LT(2) != null) System.out.print(input.LT(2).getText() + ", "); 
        	System.out.println();
        }
        /** A mismatched char or Token or tree node */
    	public class PollenException extends RecognitionException {
    		
    		String msg;

    		public PollenException(String m, IntStream input) {
    			super(input);
    			msg = m;
    		}
    		public String toString() {
    			return "PollenException(" + msg + ")";
    		}
    	}


    public static class unit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:197:1: unit : ( NL )* unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) ;
    public final pollenParser.unit_return unit() throws RecognitionException {
        pollenParser.unit_return retval = new pollenParser.unit_return();
        retval.start = input.LT(1);

        int unit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL1=null;
        pollenParser.unitPackage_return unitPackage2 =null;


        BaseNode NL1_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_unitPackage=new RewriteRuleSubtreeStream(adaptor,"rule unitPackage");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:198:5: ( ( NL )* unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:198:9: ( NL )* unitPackage
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:198:9: ( NL )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==NL) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:198:10: NL
            	    {
            	    NL1=(Atom)match(input,NL,FOLLOW_NL_in_unit675); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL1);


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            pushFollow(FOLLOW_unitPackage_in_unit679);
            unitPackage2=unitPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitPackage.add(unitPackage2.getTree());

            // AST REWRITE
            // elements: unitPackage
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 198:29: -> ^( UNIT[\"UNIT\"] unitPackage )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:198:32: ^( UNIT[\"UNIT\"] unitPackage )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new UnitNode(UNIT, "UNIT")
                , root_1);

                adaptor.addChild(root_1, stream_unitPackage.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, unit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unit"


    public static class unitPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitPackage"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:200:1: unitPackage : stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF ;
    public final pollenParser.unitPackage_return unitPackage() throws RecognitionException {
        pollenParser.unitPackage_return retval = new pollenParser.unitPackage_return();
        retval.start = input.LT(1);

        int unitPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtPackage_return stmtPackage3 =null;

        pollenParser.importList_return importList4 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList5 =null;

        pollenParser.unitTypeDefinition_return unitTypeDefinition6 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList7 =null;

        pollenParser.pollenEOF_return pollenEOF8 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:201:2: ( stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:201:5: stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_stmtPackage_in_unitPackage709);
            stmtPackage3=stmtPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPackage3.getTree());

            pushFollow(FOLLOW_importList_in_unitPackage715);
            importList4=importList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, importList4.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage723);
            stmtInjectionList5=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjectionList5.getTree());

            pushFollow(FOLLOW_unitTypeDefinition_in_unitPackage731);
            unitTypeDefinition6=unitTypeDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unitTypeDefinition6.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage739);
            stmtInjectionList7=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjectionList7.getTree());

            pushFollow(FOLLOW_pollenEOF_in_unitPackage747);
            pollenEOF8=pollenEOF();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pollenEOF8.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, unitPackage_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unitPackage"


    public static class pollenEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pollenEOF"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:208:1: pollenEOF : EOF !;
    public final pollenParser.pollenEOF_return pollenEOF() throws RecognitionException {
        pollenParser.pollenEOF_return retval = new pollenParser.pollenEOF_return();
        retval.start = input.LT(1);

        int pollenEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom EOF9=null;

        BaseNode EOF9_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:209:2: ( EOF !)
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:209:4: EOF !
            {
            root_0 = (BaseNode)adaptor.nil();


            EOF9=(Atom)match(input,EOF,FOLLOW_EOF_in_pollenEOF757); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (java.lang.ClassCastException e) {

                //ignore: antlr bug

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, pollenEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pollenEOF"


    public static class stmtInjectionList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjectionList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:214:1: stmtInjectionList : ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) ;
    public final pollenParser.stmtInjectionList_return stmtInjectionList() throws RecognitionException {
        pollenParser.stmtInjectionList_return retval = new pollenParser.stmtInjectionList_return();
        retval.start = input.LT(1);

        int stmtInjectionList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtInjection_return stmtInjection10 =null;


        RewriteRuleSubtreeStream stream_stmtInjection=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjection");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:215:2: ( ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:215:3: ( stmtInjection )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:215:3: ( stmtInjection )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==INJECT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:215:4: stmtInjection
            	    {
            	    pushFollow(FOLLOW_stmtInjection_in_stmtInjectionList775);
            	    stmtInjection10=stmtInjection();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtInjection.add(stmtInjection10.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtInjection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 215:20: -> ^( LIST[\"LIST\"] ( stmtInjection )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:215:23: ^( LIST[\"LIST\"] ( stmtInjection )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:215:48: ( stmtInjection )*
                while ( stream_stmtInjection.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtInjection.nextTree());

                }
                stream_stmtInjection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, stmtInjectionList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjectionList"


    public static class stmtPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPackage"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:217:1: stmtPackage : ( 'package' qualName delim -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) );
    public final pollenParser.stmtPackage_return stmtPackage() throws RecognitionException {
        pollenParser.stmtPackage_return retval = new pollenParser.stmtPackage_return();
        retval.start = input.LT(1);

        int stmtPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal11=null;
        pollenParser.qualName_return qualName12 =null;

        pollenParser.delim_return delim13 =null;


        BaseNode string_literal11_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

           String pkg = ParseUnit.mkPackageName(ParseUnit.current().getCurrPath());

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:221:2: ( 'package' qualName delim -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==175) ) {
                alt3=1;
            }
            else if ( (LA3_0==EOF||LA3_0==INJECT||(LA3_0 >= 147 && LA3_0 <= 148)||LA3_0==155||LA3_0==161||LA3_0==165||(LA3_0 >= 170 && LA3_0 <= 171)||LA3_0==177) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:221:4: 'package' qualName delim
                    {
                    string_literal11=(Atom)match(input,175,FOLLOW_175_in_stmtPackage805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(string_literal11);


                    pushFollow(FOLLOW_qualName_in_stmtPackage807);
                    qualName12=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName12.getTree());

                    pushFollow(FOLLOW_delim_in_stmtPackage809);
                    delim13=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim13.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 221:29: -> ^( S_PACKAGE[pkg] qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:221:32: ^( S_PACKAGE[pkg] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:222:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 222:4: -> ^( S_PACKAGE[pkg] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:222:7: ^( S_PACKAGE[pkg] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, stmtPackage_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPackage"


    public static class stmtExport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtExport"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:224:1: stmtExport : 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) ;
    public final pollenParser.stmtExport_return stmtExport() throws RecognitionException {
        pollenParser.stmtExport_return retval = new pollenParser.stmtExport_return();
        retval.start = input.LT(1);

        int stmtExport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal14=null;
        pollenParser.qualName_return qualName15 =null;

        pollenParser.delim_return delim16 =null;


        BaseNode string_literal14_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:225:5: ( 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:225:9: 'export' qualName delim
            {
            string_literal14=(Atom)match(input,157,FOLLOW_157_in_stmtExport844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal14);


            pushFollow(FOLLOW_qualName_in_stmtExport846);
            qualName15=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName15.getTree());

            pushFollow(FOLLOW_delim_in_stmtExport848);
            delim16=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim16.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 225:33: -> ^( EXPORT[\"EXPORT\"] qualName )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:225:36: ^( EXPORT[\"EXPORT\"] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExportNode(EXPORT, "EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, stmtExport_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtExport"


    public static class exportList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exportList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:227:1: exportList : ( stmtExport )+ -> ^( LIST[\"LIST\"] ( stmtExport )+ ) ;
    public final pollenParser.exportList_return exportList() throws RecognitionException {
        pollenParser.exportList_return retval = new pollenParser.exportList_return();
        retval.start = input.LT(1);

        int exportList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtExport_return stmtExport17 =null;


        RewriteRuleSubtreeStream stream_stmtExport=new RewriteRuleSubtreeStream(adaptor,"rule stmtExport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:228:5: ( ( stmtExport )+ -> ^( LIST[\"LIST\"] ( stmtExport )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:228:9: ( stmtExport )+
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:228:9: ( stmtExport )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==157) ) {
                    int LA4_1 = input.LA(2);

                    if ( (synpred4_pollen()) ) {
                        alt4=1;
                    }


                }


                switch (alt4) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:228:9: stmtExport
            	    {
            	    pushFollow(FOLLOW_stmtExport_in_exportList878);
            	    stmtExport17=stmtExport();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtExport.add(stmtExport17.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);


            // AST REWRITE
            // elements: stmtExport
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 229:6: -> ^( LIST[\"LIST\"] ( stmtExport )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:229:9: ^( LIST[\"LIST\"] ( stmtExport )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_stmtExport.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmtExport.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtExport.nextTree());

                }
                stream_stmtExport.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, exportList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exportList"


    public static class classDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:231:1: classDefinition : 'class' classDef -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] classDef ) ;
    public final pollenParser.classDefinition_return classDefinition() throws RecognitionException {
        pollenParser.classDefinition_return retval = new pollenParser.classDefinition_return();
        retval.start = input.LT(1);

        int classDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal18=null;
        pollenParser.classDef_return classDef19 =null;


        BaseNode string_literal18_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_classDef=new RewriteRuleSubtreeStream(adaptor,"rule classDef");

        	if (tl.size() > 1) { // nested class
        	  ti = new TypeInfo();
        	  tl.add(ti);		
        	}	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:244:2: ( 'class' classDef -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] classDef ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:244:5: 'class' classDef
            {
            string_literal18=(Atom)match(input,147,FOLLOW_147_in_classDefinition924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal18);


            pushFollow(FOLLOW_classDef_in_classDefinition926);
            classDef19=classDef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classDef.add(classDef19.getTree());

            // AST REWRITE
            // elements: classDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 244:22: -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] classDef )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:244:25: ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] classDef )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_CLASS, "D_CLASS", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, stream_classDef.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	if (tl.size() > 1) {
               	tl.remove(tl.size()-1);
               	ti = tl.get(tl.size()-1);
               }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, classDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classDefinition"


    public static class classDef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDef"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:246:1: classDef : IDENT ( implementsClause )? braceOpen classFeatureList braceClose -> IDENT classFeatureList ( implementsClause )? ;
    public final pollenParser.classDef_return classDef() throws RecognitionException {
        pollenParser.classDef_return retval = new pollenParser.classDef_return();
        retval.start = input.LT(1);

        int classDef_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT20=null;
        pollenParser.implementsClause_return implementsClause21 =null;

        pollenParser.braceOpen_return braceOpen22 =null;

        pollenParser.classFeatureList_return classFeatureList23 =null;

        pollenParser.braceClose_return braceClose24 =null;


        BaseNode IDENT20_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_classFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule classFeatureList");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:247:2: ( IDENT ( implementsClause )? braceOpen classFeatureList braceClose -> IDENT classFeatureList ( implementsClause )? )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:247:4: IDENT ( implementsClause )? braceOpen classFeatureList braceClose
            {
            IDENT20=(Atom)match(input,IDENT,FOLLOW_IDENT_in_classDef951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT20);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT20!=null?IDENT20.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.CLASS));}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:249:3: ( implementsClause )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==164) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:249:4: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classDef960);
                    implementsClause21=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause21.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_classDef967);
            braceOpen22=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen22.getTree());

            pushFollow(FOLLOW_classFeatureList_in_classDef969);
            classFeatureList23=classFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFeatureList.add(classFeatureList23.getTree());

            pushFollow(FOLLOW_braceClose_in_classDef971);
            braceClose24=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose24.getTree());

            // AST REWRITE
            // elements: classFeatureList, implementsClause, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 251:3: -> IDENT classFeatureList ( implementsClause )?
            {
                adaptor.addChild(root_0, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_0, stream_classFeatureList.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:251:29: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_0, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, classDef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classDef"


    public static class classFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:253:1: classFeatureList : ( classFeature )* -> ^( LIST[\"LIST\"] ( classFeature )* ) ;
    public final pollenParser.classFeatureList_return classFeatureList() throws RecognitionException {
        pollenParser.classFeatureList_return retval = new pollenParser.classFeatureList_return();
        retval.start = input.LT(1);

        int classFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.classFeature_return classFeature25 =null;


        RewriteRuleSubtreeStream stream_classFeature=new RewriteRuleSubtreeStream(adaptor,"rule classFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:254:2: ( ( classFeature )* -> ^( LIST[\"LIST\"] ( classFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:254:4: ( classFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:254:4: ( classFeature )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==IDENT||LA6_0==INJECT||LA6_0==125||LA6_0==143||LA6_0==145||LA6_0==147||LA6_0==149||LA6_0==155||LA6_0==162||(LA6_0 >= 166 && LA6_0 <= 168)||LA6_0==172||LA6_0==179||LA6_0==181||(LA6_0 >= 185 && LA6_0 <= 188)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:254:4: classFeature
            	    {
            	    pushFollow(FOLLOW_classFeature_in_classFeatureList993);
            	    classFeature25=classFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFeature.add(classFeature25.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            // AST REWRITE
            // elements: classFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 254:18: -> ^( LIST[\"LIST\"] ( classFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:254:21: ^( LIST[\"LIST\"] ( classFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:254:46: ( classFeature )*
                while ( stream_classFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFeature.nextTree());

                }
                stream_classFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, classFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeatureList"


    public static class classFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:256:1: classFeature : ( fcnDefinition | enumDefinition | varDeclaration | classDefinition | injectionDecl );
    public final pollenParser.classFeature_return classFeature() throws RecognitionException {
        pollenParser.classFeature_return retval = new pollenParser.classFeature_return();
        retval.start = input.LT(1);

        int classFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition26 =null;

        pollenParser.enumDefinition_return enumDefinition27 =null;

        pollenParser.varDeclaration_return varDeclaration28 =null;

        pollenParser.classDefinition_return classDefinition29 =null;

        pollenParser.injectionDecl_return injectionDecl30 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:257:5: ( fcnDefinition | enumDefinition | varDeclaration | classDefinition | injectionDecl )
            int alt7=5;
            switch ( input.LA(1) ) {
            case 125:
            case 179:
                {
                alt7=1;
                }
                break;
            case 162:
                {
                int LA7_2 = input.LA(2);

                if ( (synpred7_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred9_pollen()) ) {
                    alt7=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 2, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA7_3 = input.LA(2);

                if ( (synpred7_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred9_pollen()) ) {
                    alt7=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 3, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA7_4 = input.LA(2);

                if ( (synpred7_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred9_pollen()) ) {
                    alt7=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 4, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                alt7=2;
                }
                break;
            case 149:
            case 172:
            case 188:
                {
                alt7=3;
                }
                break;
            case 147:
                {
                alt7=4;
                }
                break;
            case INJECT:
                {
                alt7=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:257:9: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_classFeature1022);
                    fcnDefinition26=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition26.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:258:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_classFeature1033);
                    enumDefinition27=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition27.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:259:9: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_classFeature1043);
                    varDeclaration28=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration28.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:260:9: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_classFeature1053);
                    classDefinition29=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition29.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:261:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_classFeature1063);
                    injectionDecl30=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl30.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, classFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeature"


    public static class moduleDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:1: moduleDefinition : 'module' IDENT ( implementsClause )? braceOpen moduleFeatureList braceClose -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList ( implementsClause )? ) ;
    public final pollenParser.moduleDefinition_return moduleDefinition() throws RecognitionException {
        pollenParser.moduleDefinition_return retval = new pollenParser.moduleDefinition_return();
        retval.start = input.LT(1);

        int moduleDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal31=null;
        Atom IDENT32=null;
        pollenParser.implementsClause_return implementsClause33 =null;

        pollenParser.braceOpen_return braceOpen34 =null;

        pollenParser.moduleFeatureList_return moduleFeatureList35 =null;

        pollenParser.braceClose_return braceClose36 =null;


        BaseNode string_literal31_tree=null;
        BaseNode IDENT32_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_moduleFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:264:2: ( 'module' IDENT ( implementsClause )? braceOpen moduleFeatureList braceClose -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList ( implementsClause )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:264:7: 'module' IDENT ( implementsClause )? braceOpen moduleFeatureList braceClose
            {
            string_literal31=(Atom)match(input,171,FOLLOW_171_in_moduleDefinition1080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal31);


            IDENT32=(Atom)match(input,IDENT,FOLLOW_IDENT_in_moduleDefinition1082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT32);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT32!=null?IDENT32.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.MODULE));}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:266:4: ( implementsClause )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==164) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:266:5: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_moduleDefinition1097);
                    implementsClause33=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause33.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_moduleDefinition1106);
            braceOpen34=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen34.getTree());

            pushFollow(FOLLOW_moduleFeatureList_in_moduleDefinition1108);
            moduleFeatureList35=moduleFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleFeatureList.add(moduleFeatureList35.getTree());

            pushFollow(FOLLOW_braceClose_in_moduleDefinition1110);
            braceClose36=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose36.getTree());

            // AST REWRITE
            // elements: moduleFeatureList, IDENT, implementsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 268:4: -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList ( implementsClause )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:268:7: ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList ( implementsClause )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_MODULE, "D_MODULE", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_moduleFeatureList.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:268:87: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, moduleDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleDefinition"


    public static class moduleFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:270:1: moduleFeatureList : ( moduleFeature )* -> ^( LIST[\"LIST\"] ( moduleFeature )* ) ;
    public final pollenParser.moduleFeatureList_return moduleFeatureList() throws RecognitionException {
        pollenParser.moduleFeatureList_return retval = new pollenParser.moduleFeatureList_return();
        retval.start = input.LT(1);

        int moduleFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.moduleFeature_return moduleFeature37 =null;


        RewriteRuleSubtreeStream stream_moduleFeature=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:271:2: ( ( moduleFeature )* -> ^( LIST[\"LIST\"] ( moduleFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:271:4: ( moduleFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:271:4: ( moduleFeature )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==IDENT||LA9_0==INJECT||LA9_0==125||LA9_0==143||LA9_0==145||LA9_0==147||LA9_0==149||LA9_0==155||LA9_0==162||(LA9_0 >= 166 && LA9_0 <= 168)||LA9_0==172||LA9_0==179||LA9_0==181||(LA9_0 >= 185 && LA9_0 <= 188)) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:271:4: moduleFeature
            	    {
            	    pushFollow(FOLLOW_moduleFeature_in_moduleFeatureList1143);
            	    moduleFeature37=moduleFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_moduleFeature.add(moduleFeature37.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            // AST REWRITE
            // elements: moduleFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 271:19: -> ^( LIST[\"LIST\"] ( moduleFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:271:22: ^( LIST[\"LIST\"] ( moduleFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:271:47: ( moduleFeature )*
                while ( stream_moduleFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_moduleFeature.nextTree());

                }
                stream_moduleFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, moduleFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeatureList"


    public static class moduleFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:273:1: moduleFeature : ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl );
    public final pollenParser.moduleFeature_return moduleFeature() throws RecognitionException {
        pollenParser.moduleFeature_return retval = new pollenParser.moduleFeature_return();
        retval.start = input.LT(1);

        int moduleFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition38 =null;

        pollenParser.varDeclaration_return varDeclaration39 =null;

        pollenParser.enumDefinition_return enumDefinition40 =null;

        pollenParser.classDefinition_return classDefinition41 =null;

        pollenParser.injectionDecl_return injectionDecl42 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:274:2: ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl )
            int alt10=5;
            switch ( input.LA(1) ) {
            case 125:
            case 179:
                {
                alt10=1;
                }
                break;
            case 162:
                {
                int LA10_2 = input.LA(2);

                if ( (synpred13_pollen()) ) {
                    alt10=1;
                }
                else if ( (synpred14_pollen()) ) {
                    alt10=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 10, 2, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA10_3 = input.LA(2);

                if ( (synpred13_pollen()) ) {
                    alt10=1;
                }
                else if ( (synpred14_pollen()) ) {
                    alt10=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 10, 3, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA10_4 = input.LA(2);

                if ( (synpred13_pollen()) ) {
                    alt10=1;
                }
                else if ( (synpred14_pollen()) ) {
                    alt10=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 10, 4, input);

                    throw nvae;

                }
                }
                break;
            case 149:
            case 172:
            case 188:
                {
                alt10=2;
                }
                break;
            case 155:
                {
                alt10=3;
                }
                break;
            case 147:
                {
                alt10=4;
                }
                break;
            case INJECT:
                {
                alt10=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }

            switch (alt10) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:274:6: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_moduleFeature1169);
                    fcnDefinition38=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition38.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:275:8: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_moduleFeature1178);
                    varDeclaration39=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration39.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:276:6: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_moduleFeature1185);
                    enumDefinition40=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition40.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:277:6: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_moduleFeature1192);
                    classDefinition41=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition41.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:278:5: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_moduleFeature1198);
                    injectionDecl42=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl42.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, moduleFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeature"


    public static class enumDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:280:1: enumDefinition : 'enum' enumDef -> enumDef ;
    public final pollenParser.enumDefinition_return enumDefinition() throws RecognitionException {
        pollenParser.enumDefinition_return retval = new pollenParser.enumDefinition_return();
        retval.start = input.LT(1);

        int enumDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal43=null;
        pollenParser.enumDef_return enumDef44 =null;


        BaseNode string_literal43_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleSubtreeStream stream_enumDef=new RewriteRuleSubtreeStream(adaptor,"rule enumDef");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:281:2: ( 'enum' enumDef -> enumDef )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:281:4: 'enum' enumDef
            {
            string_literal43=(Atom)match(input,155,FOLLOW_155_in_enumDefinition1211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal43);


            pushFollow(FOLLOW_enumDef_in_enumDefinition1213);
            enumDef44=enumDef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumDef.add(enumDef44.getTree());

            // AST REWRITE
            // elements: enumDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 281:19: -> enumDef
            {
                adaptor.addChild(root_0, stream_enumDef.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, enumDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumDefinition"


    public static class enumDef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDef"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:283:1: enumDef : ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList ) ;
    public final pollenParser.enumDef_return enumDef() throws RecognitionException {
        pollenParser.enumDef_return retval = new pollenParser.enumDef_return();
        retval.start = input.LT(1);

        int enumDef_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT45=null;
        pollenParser.braceOpen_return braceOpen46 =null;

        pollenParser.enumList_return enumList47 =null;

        pollenParser.braceClose_return braceClose48 =null;


        BaseNode IDENT45_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_enumList=new RewriteRuleSubtreeStream(adaptor,"rule enumList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        	if (tl.size() > 1) { // nested 
        	  ti = new TypeInfo();
        	  tl.add(ti);		
        	}	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:296:2: ( ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:296:5: ( IDENT braceOpen enumList braceClose )
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:296:5: ( IDENT braceOpen enumList braceClose )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:296:6: IDENT braceOpen enumList braceClose
            {
            IDENT45=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumDef1239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT45);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT45!=null?IDENT45.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.ENUM));}

            pushFollow(FOLLOW_braceOpen_in_enumDef1248);
            braceOpen46=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen46.getTree());

            pushFollow(FOLLOW_enumList_in_enumDef1250);
            enumList47=enumList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumList.add(enumList47.getTree());

            pushFollow(FOLLOW_braceClose_in_enumDef1252);
            braceClose48=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose48.getTree());

            }


            // AST REWRITE
            // elements: enumList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 299:3: -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:299:6: ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_ENUM, "D_ENUM", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_enumList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	if (tl.size() > 1) {
               	tl.remove(tl.size()-1);
               	ti = tl.get(tl.size()-1);
               }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, enumDef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumDef"


    public static class enumList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:301:1: enumList : enumElement ( ',' enumElement )* -> ^( LIST[\"LIST\"] ( enumElement )+ ) ;
    public final pollenParser.enumList_return enumList() throws RecognitionException {
        pollenParser.enumList_return retval = new pollenParser.enumList_return();
        retval.start = input.LT(1);

        int enumList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal50=null;
        pollenParser.enumElement_return enumElement49 =null;

        pollenParser.enumElement_return enumElement51 =null;


        BaseNode char_literal50_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_enumElement=new RewriteRuleSubtreeStream(adaptor,"rule enumElement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:302:2: ( enumElement ( ',' enumElement )* -> ^( LIST[\"LIST\"] ( enumElement )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:302:4: enumElement ( ',' enumElement )*
            {
            pushFollow(FOLLOW_enumElement_in_enumList1281);
            enumElement49=enumElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumElement.add(enumElement49.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:302:16: ( ',' enumElement )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==128) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:302:17: ',' enumElement
            	    {
            	    char_literal50=(Atom)match(input,128,FOLLOW_128_in_enumList1284); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_128.add(char_literal50);


            	    pushFollow(FOLLOW_enumElement_in_enumList1286);
            	    enumElement51=enumElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumElement.add(enumElement51.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            // AST REWRITE
            // elements: enumElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 302:35: -> ^( LIST[\"LIST\"] ( enumElement )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:302:38: ^( LIST[\"LIST\"] ( enumElement )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_enumElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, enumList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumList"


    public static class enumElement_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumElement"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:304:1: enumElement : ( IDENT ASSIGN INT_LIT ( delim )? -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) ) | IDENT ( delim )? -> ^( D_ENUMVAL IDENT ) );
    public final pollenParser.enumElement_return enumElement() throws RecognitionException {
        pollenParser.enumElement_return retval = new pollenParser.enumElement_return();
        retval.start = input.LT(1);

        int enumElement_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT52=null;
        Atom ASSIGN53=null;
        Atom INT_LIT54=null;
        Atom IDENT56=null;
        pollenParser.delim_return delim55 =null;

        pollenParser.delim_return delim57 =null;


        BaseNode IDENT52_tree=null;
        BaseNode ASSIGN53_tree=null;
        BaseNode INT_LIT54_tree=null;
        BaseNode IDENT56_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:2: ( IDENT ASSIGN INT_LIT ( delim )? -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) ) | IDENT ( delim )? -> ^( D_ENUMVAL IDENT ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==IDENT) ) {
                int LA14_1 = input.LA(2);

                if ( (synpred19_pollen()) ) {
                    alt14=1;
                }
                else if ( (true) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:4: IDENT ASSIGN INT_LIT ( delim )?
                    {
                    IDENT52=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement1311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT52);


                    ASSIGN53=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_enumElement1313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN53);


                    INT_LIT54=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_enumElement1315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT54);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:25: ( delim )?
                    int alt12=2;
                    switch ( input.LA(1) ) {
                        case SEMI:
                            {
                            alt12=1;
                            }
                            break;
                        case NL:
                            {
                            int LA12_2 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case 128:
                            {
                            int LA12_3 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case 193:
                            {
                            int LA12_4 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt12=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            int LA12_5 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt12=1;
                            }
                            }
                            break;
                    }

                    switch (alt12) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:26: delim
                            {
                            pushFollow(FOLLOW_delim_in_enumElement1318);
                            delim55=delim();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_delim.add(delim55.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: INT_LIT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 305:34: -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:37: ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", ti.getUnitFlags())
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:99: ^( IDENT INT_LIT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        stream_IDENT.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_INT_LIT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:306:4: IDENT ( delim )?
                    {
                    IDENT56=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement1343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT56);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:306:10: ( delim )?
                    int alt13=2;
                    switch ( input.LA(1) ) {
                        case SEMI:
                            {
                            alt13=1;
                            }
                            break;
                        case NL:
                            {
                            int LA13_2 = input.LA(2);

                            if ( (synpred20_pollen()) ) {
                                alt13=1;
                            }
                            }
                            break;
                        case 128:
                            {
                            int LA13_3 = input.LA(2);

                            if ( (synpred20_pollen()) ) {
                                alt13=1;
                            }
                            }
                            break;
                        case 193:
                            {
                            int LA13_4 = input.LA(2);

                            if ( (synpred20_pollen()) ) {
                                alt13=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            int LA13_5 = input.LA(2);

                            if ( (synpred20_pollen()) ) {
                                alt13=1;
                            }
                            }
                            break;
                    }

                    switch (alt13) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:306:11: delim
                            {
                            pushFollow(FOLLOW_delim_in_enumElement1346);
                            delim57=delim();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_delim.add(delim57.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 306:19: -> ^( D_ENUMVAL IDENT )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:306:22: ^( D_ENUMVAL IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_ENUMVAL, "D_ENUMVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, enumElement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumElement"


    public static class protocolDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:308:1: protocolDefinition : 'protocol' IDENT ( extendsClause )? braceOpen protocolFeatureList braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList ( extendsClause )? ) ;
    public final pollenParser.protocolDefinition_return protocolDefinition() throws RecognitionException {
        pollenParser.protocolDefinition_return retval = new pollenParser.protocolDefinition_return();
        retval.start = input.LT(1);

        int protocolDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal58=null;
        Atom IDENT59=null;
        pollenParser.extendsClause_return extendsClause60 =null;

        pollenParser.braceOpen_return braceOpen61 =null;

        pollenParser.protocolFeatureList_return protocolFeatureList62 =null;

        pollenParser.braceClose_return braceClose63 =null;


        BaseNode string_literal58_tree=null;
        BaseNode IDENT59_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_protocolFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:309:2: ( 'protocol' IDENT ( extendsClause )? braceOpen protocolFeatureList braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList ( extendsClause )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:309:4: 'protocol' IDENT ( extendsClause )? braceOpen protocolFeatureList braceClose
            {
            string_literal58=(Atom)match(input,177,FOLLOW_177_in_protocolDefinition1366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal58);


            IDENT59=(Atom)match(input,IDENT,FOLLOW_IDENT_in_protocolDefinition1368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT59);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT59!=null?IDENT59.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.PROTOCOL));}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:311:3: ( extendsClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==158) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:311:3: extendsClause
                    {
                    pushFollow(FOLLOW_extendsClause_in_protocolDefinition1376);
                    extendsClause60=extendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause60.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_protocolDefinition1382);
            braceOpen61=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen61.getTree());

            pushFollow(FOLLOW_protocolFeatureList_in_protocolDefinition1384);
            protocolFeatureList62=protocolFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocolFeatureList.add(protocolFeatureList62.getTree());

            pushFollow(FOLLOW_braceClose_in_protocolDefinition1386);
            braceClose63=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose63.getTree());

            // AST REWRITE
            // elements: extendsClause, protocolFeatureList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 313:3: -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList ( extendsClause )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:313:6: ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList ( extendsClause )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_PROTOCOL, "D_PROTOCOL", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_protocolFeatureList.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:313:92: ( extendsClause )?
                if ( stream_extendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_extendsClause.nextTree());

                }
                stream_extendsClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, protocolDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolDefinition"


    public static class protocolFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:315:1: protocolFeatureList : ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) ;
    public final pollenParser.protocolFeatureList_return protocolFeatureList() throws RecognitionException {
        pollenParser.protocolFeatureList_return retval = new pollenParser.protocolFeatureList_return();
        retval.start = input.LT(1);

        int protocolFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.protocolFeature_return protocolFeature64 =null;


        RewriteRuleSubtreeStream stream_protocolFeature=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:316:2: ( ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:316:4: ( protocolFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:316:4: ( protocolFeature )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==IDENT||LA16_0==INJECT||LA16_0==125||LA16_0==143||LA16_0==145||LA16_0==155||LA16_0==162||(LA16_0 >= 166 && LA16_0 <= 168)||LA16_0==179||LA16_0==181||(LA16_0 >= 185 && LA16_0 <= 187)) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:316:4: protocolFeature
            	    {
            	    pushFollow(FOLLOW_protocolFeature_in_protocolFeatureList1419);
            	    protocolFeature64=protocolFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protocolFeature.add(protocolFeature64.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            // AST REWRITE
            // elements: protocolFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 316:21: -> ^( LIST[\"LIST\"] ( protocolFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:316:24: ^( LIST[\"LIST\"] ( protocolFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:316:49: ( protocolFeature )*
                while ( stream_protocolFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_protocolFeature.nextTree());

                }
                stream_protocolFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, protocolFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeatureList"


    public static class protocolFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:318:1: protocolFeature : ( enumDefinition | fcnDeclaration | injectionDecl );
    public final pollenParser.protocolFeature_return protocolFeature() throws RecognitionException {
        pollenParser.protocolFeature_return retval = new pollenParser.protocolFeature_return();
        retval.start = input.LT(1);

        int protocolFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.enumDefinition_return enumDefinition65 =null;

        pollenParser.fcnDeclaration_return fcnDeclaration66 =null;

        pollenParser.injectionDecl_return injectionDecl67 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:319:5: ( enumDefinition | fcnDeclaration | injectionDecl )
            int alt17=3;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt17=1;
                }
                break;
            case IDENT:
            case 125:
            case 143:
            case 145:
            case 162:
            case 166:
            case 167:
            case 168:
            case 179:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt17=2;
                }
                break;
            case INJECT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }

            switch (alt17) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:319:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_protocolFeature1448);
                    enumDefinition65=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition65.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:320:9: fcnDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDeclaration_in_protocolFeature1458);
                    fcnDeclaration66=fcnDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDeclaration66.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:321:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_protocolFeature1469);
                    injectionDecl67=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl67.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, protocolFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeature"


    public static class compositionDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:323:1: compositionDefinition : 'composition' IDENT ( extendsClause )? braceOpen compositionFeatureList braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList ( extendsClause )? ) ;
    public final pollenParser.compositionDefinition_return compositionDefinition() throws RecognitionException {
        pollenParser.compositionDefinition_return retval = new pollenParser.compositionDefinition_return();
        retval.start = input.LT(1);

        int compositionDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal68=null;
        Atom IDENT69=null;
        pollenParser.extendsClause_return extendsClause70 =null;

        pollenParser.braceOpen_return braceOpen71 =null;

        pollenParser.compositionFeatureList_return compositionFeatureList72 =null;

        pollenParser.braceClose_return braceClose73 =null;


        BaseNode string_literal68_tree=null;
        BaseNode IDENT69_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_compositionFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:324:2: ( 'composition' IDENT ( extendsClause )? braceOpen compositionFeatureList braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList ( extendsClause )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:324:4: 'composition' IDENT ( extendsClause )? braceOpen compositionFeatureList braceClose
            {
            string_literal68=(Atom)match(input,148,FOLLOW_148_in_compositionDefinition1482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal68);


            IDENT69=(Atom)match(input,IDENT,FOLLOW_IDENT_in_compositionDefinition1484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT69);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT69!=null?IDENT69.getText():null)); 
            		  //DBG("IDENT69 " + (IDENT69!=null?IDENT69.getText():null)); 
            		  ti.setUnitFlags(EnumSet.of(Flags.COMPOSITION));
            		  //DBG(ti.getTypeName() + ", " + ti.getUnitFlags().toString());
            		}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:330:3: ( extendsClause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==158) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:330:3: extendsClause
                    {
                    pushFollow(FOLLOW_extendsClause_in_compositionDefinition1492);
                    extendsClause70=extendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause70.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_compositionDefinition1499);
            braceOpen71=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen71.getTree());

            pushFollow(FOLLOW_compositionFeatureList_in_compositionDefinition1501);
            compositionFeatureList72=compositionFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compositionFeatureList.add(compositionFeatureList72.getTree());

            pushFollow(FOLLOW_braceClose_in_compositionDefinition1503);
            braceClose73=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose73.getTree());

            // AST REWRITE
            // elements: compositionFeatureList, extendsClause, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 332:4: -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList ( extendsClause )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:332:7: ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList ( extendsClause )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_COMPOSITION, "D_COMPOSITION", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_compositionFeatureList.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:333:38: ( extendsClause )?
                if ( stream_extendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_extendsClause.nextTree());

                }
                stream_extendsClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, compositionDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionDefinition"


    public static class compositionFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:335:1: compositionFeatureList : ( compositionFeature )* -> ^( LIST[\"LIST\"] ( compositionFeature )* ) ;
    public final pollenParser.compositionFeatureList_return compositionFeatureList() throws RecognitionException {
        pollenParser.compositionFeatureList_return retval = new pollenParser.compositionFeatureList_return();
        retval.start = input.LT(1);

        int compositionFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.compositionFeature_return compositionFeature74 =null;


        RewriteRuleSubtreeStream stream_compositionFeature=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:2: ( ( compositionFeature )* -> ^( LIST[\"LIST\"] ( compositionFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:4: ( compositionFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:4: ( compositionFeature )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==IDENT||LA19_0==INJECT||LA19_0==125||LA19_0==143||LA19_0==145||LA19_0==149||LA19_0==155||LA19_0==157||LA19_0==162||(LA19_0 >= 166 && LA19_0 <= 168)||LA19_0==172||LA19_0==179||LA19_0==181||(LA19_0 >= 185 && LA19_0 <= 188)) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:4: compositionFeature
            	    {
            	    pushFollow(FOLLOW_compositionFeature_in_compositionFeatureList1545);
            	    compositionFeature74=compositionFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compositionFeature.add(compositionFeature74.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // AST REWRITE
            // elements: compositionFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 336:24: -> ^( LIST[\"LIST\"] ( compositionFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:27: ^( LIST[\"LIST\"] ( compositionFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:52: ( compositionFeature )*
                while ( stream_compositionFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_compositionFeature.nextTree());

                }
                stream_compositionFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, compositionFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeatureList"


    public static class compositionFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:1: compositionFeature : ( exportList | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl );
    public final pollenParser.compositionFeature_return compositionFeature() throws RecognitionException {
        pollenParser.compositionFeature_return retval = new pollenParser.compositionFeature_return();
        retval.start = input.LT(1);

        int compositionFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exportList_return exportList75 =null;

        pollenParser.fcnDefinitionHost_return fcnDefinitionHost76 =null;

        pollenParser.enumDefinition_return enumDefinition77 =null;

        pollenParser.varDeclaration_return varDeclaration78 =null;

        pollenParser.injectionDecl_return injectionDecl79 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:339:3: ( exportList | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl )
            int alt20=5;
            switch ( input.LA(1) ) {
            case 157:
                {
                alt20=1;
                }
                break;
            case 125:
            case 179:
                {
                alt20=2;
                }
                break;
            case 162:
                {
                int LA20_3 = input.LA(2);

                if ( (synpred28_pollen()) ) {
                    alt20=2;
                }
                else if ( (synpred30_pollen()) ) {
                    alt20=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 3, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA20_4 = input.LA(2);

                if ( (synpred28_pollen()) ) {
                    alt20=2;
                }
                else if ( (synpred30_pollen()) ) {
                    alt20=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 4, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA20_5 = input.LA(2);

                if ( (synpred28_pollen()) ) {
                    alt20=2;
                }
                else if ( (synpred30_pollen()) ) {
                    alt20=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                alt20=3;
                }
                break;
            case 149:
            case 172:
            case 188:
                {
                alt20=4;
                }
                break;
            case INJECT:
                {
                alt20=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:339:6: exportList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exportList_in_compositionFeature1571);
                    exportList75=exportList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exportList75.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:340:7: fcnDefinitionHost
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionHost_in_compositionFeature1579);
                    fcnDefinitionHost76=fcnDefinitionHost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionHost76.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:341:7: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_compositionFeature1587);
                    enumDefinition77=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition77.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:342:7: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_compositionFeature1595);
                    varDeclaration78=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration78.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:343:6: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_compositionFeature1602);
                    injectionDecl79=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl79.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, compositionFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeature"


    public static class stmtImport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImport"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:345:1: stmtImport : ( importFrom 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? ) ;
    public final pollenParser.stmtImport_return stmtImport() throws RecognitionException {
        pollenParser.stmtImport_return retval = new pollenParser.stmtImport_return();
        retval.start = input.LT(1);

        int stmtImport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal81=null;
        pollenParser.importFrom_return importFrom80 =null;

        pollenParser.qualName_return qualName82 =null;

        pollenParser.metaArguments_return metaArguments83 =null;

        pollenParser.importAs_return importAs84 =null;

        pollenParser.delim_return delim85 =null;


        BaseNode string_literal81_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleSubtreeStream stream_importFrom=new RewriteRuleSubtreeStream(adaptor,"rule importFrom");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:346:5: ( ( importFrom 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:346:9: ( importFrom 'import' qualName ( metaArguments )? importAs delim )
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:346:9: ( importFrom 'import' qualName ( metaArguments )? importAs delim )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:346:10: importFrom 'import' qualName ( metaArguments )? importAs delim
            {
            pushFollow(FOLLOW_importFrom_in_stmtImport1619);
            importFrom80=importFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importFrom.add(importFrom80.getTree());

            string_literal81=(Atom)match(input,165,FOLLOW_165_in_stmtImport1629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal81);


            pushFollow(FOLLOW_qualName_in_stmtImport1631);
            qualName82=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName82.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:347:27: ( metaArguments )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==190) ) {
                int LA21_1 = input.LA(2);

                if ( (synpred31_pollen()) ) {
                    alt21=1;
                }
            }
            switch (alt21) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:347:28: metaArguments
                    {
                    pushFollow(FOLLOW_metaArguments_in_stmtImport1634);
                    metaArguments83=metaArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments83.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_importAs_in_stmtImport1647);
            importAs84=importAs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importAs.add(importAs84.getTree());

            pushFollow(FOLLOW_delim_in_stmtImport1649);
            delim85=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim85.getTree());

            }


            // AST REWRITE
            // elements: metaArguments, importFrom, importAs, qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 348:26: -> ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:348:29: ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ImportNode(IMPORT, "IMPORT")
                , root_1);

                adaptor.addChild(root_1, stream_importFrom.nextTree());

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_1, stream_importAs.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:348:89: ( metaArguments )?
                if ( stream_metaArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaArguments.nextTree());

                }
                stream_metaArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, stmtImport_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtImport"


    public static class importFrom_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importFrom"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:350:1: importFrom : ( 'from' qualName -> qualName | -> IDENT[defaultPkg] );
    public final pollenParser.importFrom_return importFrom() throws RecognitionException {
        pollenParser.importFrom_return retval = new pollenParser.importFrom_return();
        retval.start = input.LT(1);

        int importFrom_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal86=null;
        pollenParser.qualName_return qualName87 =null;


        BaseNode string_literal86_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");

        	String defaultPkg = "";
        	String path = this.getTokenStream().getSourceName();
           int k = path.lastIndexOf(File.separator);
           int j = path.lastIndexOf(File.separator, k-1);
            j = j == -1 ? 0 : j+1;
            // the default package is the containing directory
            defaultPkg = path.substring(j, k);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:360:5: ( 'from' qualName -> qualName | -> IDENT[defaultPkg] )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==161) ) {
                alt22=1;
            }
            else if ( (LA22_0==165) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:360:9: 'from' qualName
                    {
                    string_literal86=(Atom)match(input,161,FOLLOW_161_in_importFrom1691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal86);


                    pushFollow(FOLLOW_qualName_in_importFrom1693);
                    qualName87=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName87.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 360:25: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:361:8: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 361:8: -> IDENT[defaultPkg]
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(IDENT, defaultPkg)
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, importFrom_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importFrom"


    public static class importAs_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importAs"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:363:1: importAs : ( 'as' qualName -> qualName | -> NIL );
    public final pollenParser.importAs_return importAs() throws RecognitionException {
        pollenParser.importAs_return retval = new pollenParser.importAs_return();
        retval.start = input.LT(1);

        int importAs_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal88=null;
        pollenParser.qualName_return qualName89 =null;


        BaseNode string_literal88_tree=null;
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:364:2: ( 'as' qualName -> qualName | -> NIL )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==141) ) {
                alt23=1;
            }
            else if ( (LA23_0==EOF||(LA23_0 >= BIT_NOT && LA23_0 <= CHAR)||LA23_0==DEC||LA23_0==HEX_LIT||LA23_0==IDENT||(LA23_0 >= INC && LA23_0 <= INT_LIT)||LA23_0==LOG_NOT||LA23_0==MINUS||LA23_0==NL||LA23_0==OCT_LIT||LA23_0==REAL_LIT||LA23_0==SEMI||LA23_0==STRING||LA23_0==125||LA23_0==128||(LA23_0 >= 137 && LA23_0 <= 138)||(LA23_0 >= 142 && LA23_0 <= 152)||LA23_0==155||LA23_0==157||(LA23_0 >= 159 && LA23_0 <= 163)||(LA23_0 >= 165 && LA23_0 <= 168)||(LA23_0 >= 170 && LA23_0 <= 173)||(LA23_0 >= 176 && LA23_0 <= 183)||(LA23_0 >= 185 && LA23_0 <= 190)||LA23_0==193) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:364:4: 'as' qualName
                    {
                    string_literal88=(Atom)match(input,141,FOLLOW_141_in_importAs1722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(string_literal88);


                    pushFollow(FOLLOW_qualName_in_importAs1724);
                    qualName89=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName89.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 364:18: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:365:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 365:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, importAs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importAs"


    public static class importList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:367:1: importList : ( stmtImport )* -> ^( LIST[\"LIST\"] ( stmtImport )* ) ;
    public final pollenParser.importList_return importList() throws RecognitionException {
        pollenParser.importList_return retval = new pollenParser.importList_return();
        retval.start = input.LT(1);

        int importList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtImport_return stmtImport90 =null;


        RewriteRuleSubtreeStream stream_stmtImport=new RewriteRuleSubtreeStream(adaptor,"rule stmtImport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:5: ( ( stmtImport )* -> ^( LIST[\"LIST\"] ( stmtImport )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:9: ( stmtImport )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:9: ( stmtImport )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==161||LA24_0==165) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:9: stmtImport
            	    {
            	    pushFollow(FOLLOW_stmtImport_in_importList1750);
            	    stmtImport90=stmtImport();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtImport.add(stmtImport90.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtImport
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 369:6: -> ^( LIST[\"LIST\"] ( stmtImport )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:369:9: ^( LIST[\"LIST\"] ( stmtImport )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:369:34: ( stmtImport )*
                while ( stream_stmtImport.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtImport.nextTree());

                }
                stream_stmtImport.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, importList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importList"


    public static class meta_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "meta"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:371:1: meta : 'meta' ( braceOpen metaFormalParameters braceClose ) -> ^( D_META metaFormalParameters ) ;
    public final pollenParser.meta_return meta() throws RecognitionException {
        pollenParser.meta_return retval = new pollenParser.meta_return();
        retval.start = input.LT(1);

        int meta_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal91=null;
        pollenParser.braceOpen_return braceOpen92 =null;

        pollenParser.metaFormalParameters_return metaFormalParameters93 =null;

        pollenParser.braceClose_return braceClose94 =null;


        BaseNode string_literal91_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_metaFormalParameters=new RewriteRuleSubtreeStream(adaptor,"rule metaFormalParameters");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:2: ( 'meta' ( braceOpen metaFormalParameters braceClose ) -> ^( D_META metaFormalParameters ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:4: 'meta' ( braceOpen metaFormalParameters braceClose )
            {
            string_literal91=(Atom)match(input,170,FOLLOW_170_in_meta1784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal91);


            if ( state.backtracking==0 ) { ti.setUnitFlags(EnumSet.of(Flags.META));}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:374:3: ( braceOpen metaFormalParameters braceClose )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:374:4: braceOpen metaFormalParameters braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_meta1793);
            braceOpen92=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen92.getTree());

            pushFollow(FOLLOW_metaFormalParameters_in_meta1795);
            metaFormalParameters93=metaFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaFormalParameters.add(metaFormalParameters93.getTree());

            pushFollow(FOLLOW_braceClose_in_meta1797);
            braceClose94=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose94.getTree());

            }


            // AST REWRITE
            // elements: metaFormalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 375:3: -> ^( D_META metaFormalParameters )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:375:6: ^( D_META metaFormalParameters )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(D_META, "D_META")
                , root_1);

                adaptor.addChild(root_1, stream_metaFormalParameters.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, meta_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "meta"


    public static class metaFormalParameters_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaFormalParameters"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:377:1: metaFormalParameters : metaFormalParameter ( ',' metaFormalParameter )* -> ( metaFormalParameter )+ ;
    public final pollenParser.metaFormalParameters_return metaFormalParameters() throws RecognitionException {
        pollenParser.metaFormalParameters_return retval = new pollenParser.metaFormalParameters_return();
        retval.start = input.LT(1);

        int metaFormalParameters_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal96=null;
        pollenParser.metaFormalParameter_return metaFormalParameter95 =null;

        pollenParser.metaFormalParameter_return metaFormalParameter97 =null;


        BaseNode char_literal96_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_metaFormalParameter=new RewriteRuleSubtreeStream(adaptor,"rule metaFormalParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:4: ( metaFormalParameter ( ',' metaFormalParameter )* -> ( metaFormalParameter )+ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:8: metaFormalParameter ( ',' metaFormalParameter )*
            {
            pushFollow(FOLLOW_metaFormalParameter_in_metaFormalParameters1822);
            metaFormalParameter95=metaFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaFormalParameter.add(metaFormalParameter95.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:29: ( ',' metaFormalParameter )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==128) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:30: ',' metaFormalParameter
            	    {
            	    char_literal96=(Atom)match(input,128,FOLLOW_128_in_metaFormalParameters1826); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_128.add(char_literal96);


            	    pushFollow(FOLLOW_metaFormalParameter_in_metaFormalParameters1828);
            	    metaFormalParameter97=metaFormalParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_metaFormalParameter.add(metaFormalParameter97.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            // AST REWRITE
            // elements: metaFormalParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 378:56: -> ( metaFormalParameter )+
            {
                if ( !(stream_metaFormalParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_metaFormalParameter.hasNext() ) {
                    adaptor.addChild(root_0, stream_metaFormalParameter.nextTree());

                }
                stream_metaFormalParameter.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, metaFormalParameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaFormalParameters"


    public static class metaFormalParameter_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaFormalParameter"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:381:1: metaFormalParameter : metaFormalParameterType IDENT ( ASSIGN metaArgument )? -> ^( metaFormalParameterType ^( IDENT ( metaArgument )? ) ) ;
    public final pollenParser.metaFormalParameter_return metaFormalParameter() throws RecognitionException {
        pollenParser.metaFormalParameter_return retval = new pollenParser.metaFormalParameter_return();
        retval.start = input.LT(1);

        int metaFormalParameter_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT99=null;
        Atom ASSIGN100=null;
        pollenParser.metaFormalParameterType_return metaFormalParameterType98 =null;

        pollenParser.metaArgument_return metaArgument101 =null;


        BaseNode IDENT99_tree=null;
        BaseNode ASSIGN100_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_metaArgument=new RewriteRuleSubtreeStream(adaptor,"rule metaArgument");
        RewriteRuleSubtreeStream stream_metaFormalParameterType=new RewriteRuleSubtreeStream(adaptor,"rule metaFormalParameterType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:4: ( metaFormalParameterType IDENT ( ASSIGN metaArgument )? -> ^( metaFormalParameterType ^( IDENT ( metaArgument )? ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:4: metaFormalParameterType IDENT ( ASSIGN metaArgument )?
            {
            pushFollow(FOLLOW_metaFormalParameterType_in_metaFormalParameter1851);
            metaFormalParameterType98=metaFormalParameterType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaFormalParameterType.add(metaFormalParameterType98.getTree());

            IDENT99=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaFormalParameter1853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT99);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:34: ( ASSIGN metaArgument )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ASSIGN) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:35: ASSIGN metaArgument
                    {
                    ASSIGN100=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaFormalParameter1856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN100);


                    pushFollow(FOLLOW_metaArgument_in_metaFormalParameter1858);
                    metaArgument101=metaArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument101.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: IDENT, metaFormalParameterType, metaArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 383:2: -> ^( metaFormalParameterType ^( IDENT ( metaArgument )? ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:383:5: ^( metaFormalParameterType ^( IDENT ( metaArgument )? ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(stream_metaFormalParameterType.nextNode(), root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:383:31: ^( IDENT ( metaArgument )? )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                stream_IDENT.nextNode()
                , root_2);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:383:39: ( metaArgument )?
                if ( stream_metaArgument.hasNext() ) {
                    adaptor.addChild(root_2, stream_metaArgument.nextTree());

                }
                stream_metaArgument.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, metaFormalParameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaFormalParameter"


    public static class metaFormalParameterType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaFormalParameterType"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:386:1: metaFormalParameterType : ( 'type' | builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) );
    public final pollenParser.metaFormalParameterType_return metaFormalParameterType() throws RecognitionException {
        pollenParser.metaFormalParameterType_return retval = new pollenParser.metaFormalParameterType_return();
        retval.start = input.LT(1);

        int metaFormalParameterType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal102=null;
        pollenParser.builtinType_return builtinType103 =null;


        BaseNode string_literal102_tree=null;
        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:387:3: ( 'type' | builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==184) ) {
                alt27=1;
            }
            else if ( (LA27_0==143||LA27_0==145||(LA27_0 >= 166 && LA27_0 <= 168)||LA27_0==181||(LA27_0 >= 185 && LA27_0 <= 187)) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:387:5: 'type'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal102=(Atom)match(input,184,FOLLOW_184_in_metaFormalParameterType1887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal102_tree = 
                    (BaseNode)adaptor.create(string_literal102)
                    ;
                    adaptor.addChild(root_0, string_literal102_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:5: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_metaFormalParameterType1894);
                    builtinType103=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType103.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 388:17: -> ^( T_STD[\"T_STD\", atFlags] builtinType )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:388:20: ^( T_STD[\"T_STD\", atFlags] builtinType )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_builtinType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, metaFormalParameterType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaFormalParameterType"


    public static class metaArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArguments"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:390:1: metaArguments : ( '{' metaArgument ( ',' metaArgument )* '}' -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | '{' '}' -> LIST[\"LIST\"] );
    public final pollenParser.metaArguments_return metaArguments() throws RecognitionException {
        pollenParser.metaArguments_return retval = new pollenParser.metaArguments_return();
        retval.start = input.LT(1);

        int metaArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal104=null;
        Atom char_literal106=null;
        Atom char_literal108=null;
        Atom char_literal109=null;
        Atom char_literal110=null;
        pollenParser.metaArgument_return metaArgument105 =null;

        pollenParser.metaArgument_return metaArgument107 =null;


        BaseNode char_literal104_tree=null;
        BaseNode char_literal106_tree=null;
        BaseNode char_literal108_tree=null;
        BaseNode char_literal109_tree=null;
        BaseNode char_literal110_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_metaArgument=new RewriteRuleSubtreeStream(adaptor,"rule metaArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:4: ( '{' metaArgument ( ',' metaArgument )* '}' -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | '{' '}' -> LIST[\"LIST\"] )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==190) ) {
                int LA29_1 = input.LA(2);

                if ( (synpred39_pollen()) ) {
                    alt29=1;
                }
                else if ( (true) ) {
                    alt29=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:7: '{' metaArgument ( ',' metaArgument )* '}'
                    {
                    char_literal104=(Atom)match(input,190,FOLLOW_190_in_metaArguments1921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal104);


                    pushFollow(FOLLOW_metaArgument_in_metaArguments1923);
                    metaArgument105=metaArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument105.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:25: ( ',' metaArgument )*
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);

                        if ( (LA28_0==128) ) {
                            alt28=1;
                        }


                        switch (alt28) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:26: ',' metaArgument
                    	    {
                    	    char_literal106=(Atom)match(input,128,FOLLOW_128_in_metaArguments1927); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal106);


                    	    pushFollow(FOLLOW_metaArgument_in_metaArguments1929);
                    	    metaArgument107=metaArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument107.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);


                    char_literal108=(Atom)match(input,193,FOLLOW_193_in_metaArguments1933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal108);


                    // AST REWRITE
                    // elements: metaArgument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 391:49: -> ^( LIST[\"LIST\"] ( metaArgument )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:52: ^( LIST[\"LIST\"] ( metaArgument )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_metaArgument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_metaArgument.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArgument.nextTree());

                        }
                        stream_metaArgument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:392:6: '{' '}'
                    {
                    char_literal109=(Atom)match(input,190,FOLLOW_190_in_metaArguments1953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal109);


                    char_literal110=(Atom)match(input,193,FOLLOW_193_in_metaArguments1955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal110);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 392:19: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, metaArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArguments"


    public static class metaArgument_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgument"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:395:1: metaArgument : ( primitiveLit | typeNameScalar );
    public final pollenParser.metaArgument_return metaArgument() throws RecognitionException {
        pollenParser.metaArgument_return retval = new pollenParser.metaArgument_return();
        retval.start = input.LT(1);

        int metaArgument_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit111 =null;

        pollenParser.typeNameScalar_return typeNameScalar112 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:396:2: ( primitiveLit | typeNameScalar )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==CHAR||LA30_0==HEX_LIT||LA30_0==INT_LIT||LA30_0==OCT_LIT||LA30_0==REAL_LIT||LA30_0==STRING||LA30_0==159||LA30_0==173||LA30_0==183) ) {
                alt30=1;
            }
            else if ( (LA30_0==IDENT||LA30_0==143||LA30_0==145||(LA30_0 >= 166 && LA30_0 <= 168)||LA30_0==181||(LA30_0 >= 185 && LA30_0 <= 187)) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:396:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_metaArgument1984);
                    primitiveLit111=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit111.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:397:4: typeNameScalar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_typeNameScalar_in_metaArgument1990);
                    typeNameScalar112=typeNameScalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar112.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, metaArgument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArgument"


    public static class typeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:399:1: typeName : typeNameScalar ;
    public final pollenParser.typeName_return typeName() throws RecognitionException {
        pollenParser.typeName_return retval = new pollenParser.typeName_return();
        retval.start = input.LT(1);

        int typeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeNameScalar_return typeNameScalar113 =null;




        	//System.out.print("typeName: "); DBG_LT(); <DeclNode.Fcn>["D_FCN_DCL", atFlags]

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:403:2: ( typeNameScalar )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:403:4: typeNameScalar
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeNameScalar_in_typeName2004);
            typeNameScalar113=typeNameScalar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar113.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, typeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeName"


    public static class typeNameScalar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameScalar"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:405:1: typeNameScalar : ( builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) | userTypeName );
    public final pollenParser.typeNameScalar_return typeNameScalar() throws RecognitionException {
        pollenParser.typeNameScalar_return retval = new pollenParser.typeNameScalar_return();
        retval.start = input.LT(1);

        int typeNameScalar_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType114 =null;

        pollenParser.userTypeName_return userTypeName115 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:406:2: ( builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) | userTypeName )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==143||LA31_0==145||(LA31_0 >= 166 && LA31_0 <= 168)||LA31_0==181||(LA31_0 >= 185 && LA31_0 <= 187)) ) {
                alt31=1;
            }
            else if ( (LA31_0==IDENT) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:406:4: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameScalar2017);
                    builtinType114=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType114.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 406:16: -> ^( T_STD[\"T_STD\", atFlags] builtinType )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:406:19: ^( T_STD[\"T_STD\", atFlags] builtinType )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_builtinType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:407:4: userTypeName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_typeNameScalar2036);
                    userTypeName115=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeName115.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, typeNameScalar_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeNameScalar"


    public static class userTypeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:409:1: userTypeName : ( qualName metaArguments -> ^( T_USR[\"T_USR\", atFlags] qualName metaArguments ) | qualName -> ^( T_USR[\"T_USR\", atFlags] qualName ) );
    public final pollenParser.userTypeName_return userTypeName() throws RecognitionException {
        pollenParser.userTypeName_return retval = new pollenParser.userTypeName_return();
        retval.start = input.LT(1);

        int userTypeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName116 =null;

        pollenParser.metaArguments_return metaArguments117 =null;

        pollenParser.qualName_return qualName118 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:2: ( qualName metaArguments -> ^( T_USR[\"T_USR\", atFlags] qualName metaArguments ) | qualName -> ^( T_USR[\"T_USR\", atFlags] qualName ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==IDENT) ) {
                int LA32_1 = input.LA(2);

                if ( (synpred42_pollen()) ) {
                    alt32=1;
                }
                else if ( (true) ) {
                    alt32=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 32, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:4: qualName metaArguments
                    {
                    pushFollow(FOLLOW_qualName_in_userTypeName2046);
                    qualName116=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName116.getTree());

                    pushFollow(FOLLOW_metaArguments_in_userTypeName2048);
                    metaArguments117=metaArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments117.getTree());

                    // AST REWRITE
                    // elements: metaArguments, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 410:27: -> ^( T_USR[\"T_USR\", atFlags] qualName metaArguments )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:30: ^( T_USR[\"T_USR\", atFlags] qualName metaArguments )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_1, stream_metaArguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:411:4: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_userTypeName2069);
                    qualName118=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName118.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 411:14: -> ^( T_USR[\"T_USR\", atFlags] qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:411:17: ^( T_USR[\"T_USR\", atFlags] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, userTypeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "userTypeName"


    public static class unitTypeDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitTypeDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:414:1: unitTypeDefinition : ( meta )? ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition ) ;
    public final pollenParser.unitTypeDefinition_return unitTypeDefinition() throws RecognitionException {
        pollenParser.unitTypeDefinition_return retval = new pollenParser.unitTypeDefinition_return();
        retval.start = input.LT(1);

        int unitTypeDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.meta_return meta119 =null;

        pollenParser.moduleDefinition_return moduleDefinition120 =null;

        pollenParser.classDefinition_return classDefinition121 =null;

        pollenParser.protocolDefinition_return protocolDefinition122 =null;

        pollenParser.compositionDefinition_return compositionDefinition123 =null;

        pollenParser.enumDefinition_return enumDefinition124 =null;




        		ti = new TypeInfo();
        		tl.add(ti);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:423:4: ( ( meta )? ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:423:8: ( meta )? ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:423:8: ( meta )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==170) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:423:9: meta
                    {
                    pushFollow(FOLLOW_meta_in_unitTypeDefinition2108);
                    meta119=meta();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, meta119.getTree());

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:423:17: ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition )
            int alt34=5;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==171) && (synpred44_pollen())) {
                alt34=1;
            }
            else if ( (LA34_0==147) && (synpred45_pollen())) {
                alt34=2;
            }
            else if ( (LA34_0==177) && (synpred46_pollen())) {
                alt34=3;
            }
            else if ( (LA34_0==148) && (synpred47_pollen())) {
                alt34=4;
            }
            else if ( (LA34_0==155) && (synpred48_pollen())) {
                alt34=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:424:10: ( 'module' )=> moduleDefinition
                    {
                    pushFollow(FOLLOW_moduleDefinition_in_unitTypeDefinition2130);
                    moduleDefinition120=moduleDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleDefinition120.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:425:8: ( 'class' )=> classDefinition
                    {
                    pushFollow(FOLLOW_classDefinition_in_unitTypeDefinition2151);
                    classDefinition121=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition121.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:426:10: ( 'protocol' )=> protocolDefinition
                    {
                    pushFollow(FOLLOW_protocolDefinition_in_unitTypeDefinition2168);
                    protocolDefinition122=protocolDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocolDefinition122.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:427:10: ( 'composition' )=> compositionDefinition
                    {
                    pushFollow(FOLLOW_compositionDefinition_in_unitTypeDefinition2186);
                    compositionDefinition123=compositionDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compositionDefinition123.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:428:10: ( 'enum' )=> enumDefinition
                    {
                    pushFollow(FOLLOW_enumDefinition_in_unitTypeDefinition2204);
                    enumDefinition124=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition124.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               // debug
            	System.out.println(ti.getTypeName() + ", " + ti.getUnitFlags().toString());
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, unitTypeDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unitTypeDefinition"


    public static class extendsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extendsClause"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:431:1: extendsClause : 'extends' qualName -> qualName ;
    public final pollenParser.extendsClause_return extendsClause() throws RecognitionException {
        pollenParser.extendsClause_return retval = new pollenParser.extendsClause_return();
        retval.start = input.LT(1);

        int extendsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal125=null;
        pollenParser.qualName_return qualName126 =null;


        BaseNode string_literal125_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:432:5: ( 'extends' qualName -> qualName )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:432:9: 'extends' qualName
            {
            string_literal125=(Atom)match(input,158,FOLLOW_158_in_extendsClause2229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal125);


            pushFollow(FOLLOW_qualName_in_extendsClause2231);
            qualName126=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName126.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 432:28: -> qualName
            {
                adaptor.addChild(root_0, stream_qualName.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, extendsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extendsClause"


    public static class implementsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementsClause"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:435:1: implementsClause : 'implements' qualName -> qualName ;
    public final pollenParser.implementsClause_return implementsClause() throws RecognitionException {
        pollenParser.implementsClause_return retval = new pollenParser.implementsClause_return();
        retval.start = input.LT(1);

        int implementsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal127=null;
        pollenParser.qualName_return qualName128 =null;


        BaseNode string_literal127_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:436:5: ( 'implements' qualName -> qualName )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:436:9: 'implements' qualName
            {
            string_literal127=(Atom)match(input,164,FOLLOW_164_in_implementsClause2254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal127);


            pushFollow(FOLLOW_qualName_in_implementsClause2256);
            qualName128=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName128.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 436:31: -> qualName
            {
                adaptor.addChild(root_0, stream_qualName.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, implementsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implementsClause"


    public static class braceClose_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceClose"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:438:1: braceClose : ( NL !)* '}' ! ( NL !)* ;
    public final pollenParser.braceClose_return braceClose() throws RecognitionException {
        pollenParser.braceClose_return retval = new pollenParser.braceClose_return();
        retval.start = input.LT(1);

        int braceClose_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL129=null;
        Atom char_literal130=null;
        Atom NL131=null;

        BaseNode NL129_tree=null;
        BaseNode char_literal130_tree=null;
        BaseNode NL131_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:5: ( ( NL !)* '}' ! ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:10: ( NL !)* '}' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:10: ( NL !)*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==NL) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:11: NL !
            	    {
            	    NL129=(Atom)match(input,NL,FOLLOW_NL_in_braceClose2280); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            char_literal130=(Atom)match(input,193,FOLLOW_193_in_braceClose2285); if (state.failed) return retval;

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:22: ( NL !)*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==NL) ) {
                    int LA36_1 = input.LA(2);

                    if ( (synpred50_pollen()) ) {
                        alt36=1;
                    }


                }


                switch (alt36) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:23: NL !
            	    {
            	    NL131=(Atom)match(input,NL,FOLLOW_NL_in_braceClose2289); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, braceClose_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceClose"


    public static class braceCloseAtEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceCloseAtEOF"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:441:1: braceCloseAtEOF : ( ( NL !)* ) '}' ! ( NL !)* ;
    public final pollenParser.braceCloseAtEOF_return braceCloseAtEOF() throws RecognitionException {
        pollenParser.braceCloseAtEOF_return retval = new pollenParser.braceCloseAtEOF_return();
        retval.start = input.LT(1);

        int braceCloseAtEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL132=null;
        Atom char_literal133=null;
        Atom NL134=null;

        BaseNode NL132_tree=null;
        BaseNode char_literal133_tree=null;
        BaseNode NL134_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:5: ( ( ( NL !)* ) '}' ! ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:9: ( ( NL !)* ) '}' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:9: ( ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:10: ( NL !)*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:12: ( NL !)*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==NL) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:12: NL !
            	    {
            	    NL132=(Atom)match(input,NL,FOLLOW_NL_in_braceCloseAtEOF2313); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }


            char_literal133=(Atom)match(input,193,FOLLOW_193_in_braceCloseAtEOF2318); if (state.failed) return retval;

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:21: ( NL !)*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==NL) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:444:22: NL !
            	    {
            	    NL134=(Atom)match(input,NL,FOLLOW_NL_in_braceCloseAtEOF2322); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, braceCloseAtEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceCloseAtEOF"


    public static class braceOpen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceOpen"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:447:1: braceOpen : ( NL !)* '{' ! ( NL !)* ;
    public final pollenParser.braceOpen_return braceOpen() throws RecognitionException {
        pollenParser.braceOpen_return retval = new pollenParser.braceOpen_return();
        retval.start = input.LT(1);

        int braceOpen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL135=null;
        Atom char_literal136=null;
        Atom NL137=null;

        BaseNode NL135_tree=null;
        BaseNode char_literal136_tree=null;
        BaseNode NL137_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:5: ( ( NL !)* '{' ! ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:10: ( NL !)* '{' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:10: ( NL !)*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==NL) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:11: NL !
            	    {
            	    NL135=(Atom)match(input,NL,FOLLOW_NL_in_braceOpen2347); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            char_literal136=(Atom)match(input,190,FOLLOW_190_in_braceOpen2352); if (state.failed) return retval;

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:22: ( NL !)*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==NL) ) {
                    int LA40_1 = input.LA(2);

                    if ( (synpred54_pollen()) ) {
                        alt40=1;
                    }


                }


                switch (alt40) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:23: NL !
            	    {
            	    NL137=(Atom)match(input,NL,FOLLOW_NL_in_braceOpen2356); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, braceOpen_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceOpen"


    public static class equalityOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:450:1: equalityOp : ( EQ | NOT_EQ );
    public final pollenParser.equalityOp_return equalityOp() throws RecognitionException {
        pollenParser.equalityOp_return retval = new pollenParser.equalityOp_return();
        retval.start = input.LT(1);

        int equalityOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set138=null;

        BaseNode set138_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:451:2: ( EQ | NOT_EQ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set138=(Atom)input.LT(1);

            if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set138)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, equalityOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equalityOp"


    public static class relationalOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:453:1: relationalOp : ( '<' | '>' | LT_EQ | GT_EQ );
    public final pollenParser.relationalOp_return relationalOp() throws RecognitionException {
        pollenParser.relationalOp_return retval = new pollenParser.relationalOp_return();
        retval.start = input.LT(1);

        int relationalOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set139=null;

        BaseNode set139_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:454:2: ( '<' | '>' | LT_EQ | GT_EQ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set139=(Atom)input.LT(1);

            if ( input.LA(1)==GT_EQ||input.LA(1)==LT_EQ||input.LA(1)==132||input.LA(1)==134 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set139)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, relationalOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relationalOp"


    public static class shiftOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:456:1: shiftOp : ( '<<' | '>>' );
    public final pollenParser.shiftOp_return shiftOp() throws RecognitionException {
        pollenParser.shiftOp_return retval = new pollenParser.shiftOp_return();
        retval.start = input.LT(1);

        int shiftOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set140=null;

        BaseNode set140_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:457:2: ( '<<' | '>>' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set140=(Atom)input.LT(1);

            if ( input.LA(1)==133||input.LA(1)==135 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set140)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, shiftOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shiftOp"


    public static class incDecOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incDecOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:459:1: incDecOp : ( INC | DEC );
    public final pollenParser.incDecOp_return incDecOp() throws RecognitionException {
        pollenParser.incDecOp_return retval = new pollenParser.incDecOp_return();
        retval.start = input.LT(1);

        int incDecOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set141=null;

        BaseNode set141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:460:2: ( INC | DEC )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set141=(Atom)input.LT(1);

            if ( input.LA(1)==DEC||input.LA(1)==INC ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set141)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, incDecOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "incDecOp"


    public static class addSubOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addSubOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:462:1: addSubOp : ( PLUS | MINUS );
    public final pollenParser.addSubOp_return addSubOp() throws RecognitionException {
        pollenParser.addSubOp_return retval = new pollenParser.addSubOp_return();
        retval.start = input.LT(1);

        int addSubOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set142=null;

        BaseNode set142_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:463:2: ( PLUS | MINUS )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set142=(Atom)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set142)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, addSubOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "addSubOp"


    public static class assignOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:465:1: assignOp : ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ );
    public final pollenParser.assignOp_return assignOp() throws RecognitionException {
        pollenParser.assignOp_return retval = new pollenParser.assignOp_return();
        retval.start = input.LT(1);

        int assignOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set143=null;

        BaseNode set143_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:466:2: ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set143=(Atom)input.LT(1);

            if ( input.LA(1)==ADD_EQ||(input.LA(1) >= BITAND_EQ && input.LA(1) <= BITXOR_EQ)||input.LA(1)==DIV_EQ||input.LA(1)==LSHFT_EQ||(input.LA(1) >= MOD_EQ && input.LA(1) <= MUL_EQ)||input.LA(1)==RSHFT_EQ||input.LA(1)==SUB_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set143)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, assignOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignOp"


    public static class multDivModOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multDivModOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:468:1: multDivModOp : ( '*' | '/' | '%' );
    public final pollenParser.multDivModOp_return multDivModOp() throws RecognitionException {
        pollenParser.multDivModOp_return retval = new pollenParser.multDivModOp_return();
        retval.start = input.LT(1);

        int multDivModOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set144=null;

        BaseNode set144_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:469:2: ( '*' | '/' | '%' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set144=(Atom)input.LT(1);

            if ( input.LA(1)==122||input.LA(1)==127||input.LA(1)==130 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set144)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, multDivModOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multDivModOp"


    public static class logicalNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalNotOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:471:1: logicalNotOp : LOG_NOT ;
    public final pollenParser.logicalNotOp_return logicalNotOp() throws RecognitionException {
        pollenParser.logicalNotOp_return retval = new pollenParser.logicalNotOp_return();
        retval.start = input.LT(1);

        int logicalNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom LOG_NOT145=null;

        BaseNode LOG_NOT145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:472:2: ( LOG_NOT )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:472:4: LOG_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            LOG_NOT145=(Atom)match(input,LOG_NOT,FOLLOW_LOG_NOT_in_logicalNotOp2533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOG_NOT145_tree = 
            (BaseNode)adaptor.create(LOG_NOT145)
            ;
            adaptor.addChild(root_0, LOG_NOT145_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, logicalNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalNotOp"


    public static class bitwiseNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitwiseNotOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:1: bitwiseNotOp : BIT_NOT ;
    public final pollenParser.bitwiseNotOp_return bitwiseNotOp() throws RecognitionException {
        pollenParser.bitwiseNotOp_return retval = new pollenParser.bitwiseNotOp_return();
        retval.start = input.LT(1);

        int bitwiseNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIT_NOT146=null;

        BaseNode BIT_NOT146_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:475:2: ( BIT_NOT )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:475:4: BIT_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            BIT_NOT146=(Atom)match(input,BIT_NOT,FOLLOW_BIT_NOT_in_bitwiseNotOp2544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIT_NOT146_tree = 
            (BaseNode)adaptor.create(BIT_NOT146)
            ;
            adaptor.addChild(root_0, BIT_NOT146_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, bitwiseNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitwiseNotOp"


    public static class exprList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:477:1: exprList : ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.exprList_return exprList() throws RecognitionException {
        pollenParser.exprList_return retval = new pollenParser.exprList_return();
        retval.start = input.LT(1);

        int exprList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal148=null;
        pollenParser.expr_return expr147 =null;

        pollenParser.expr_return expr149 =null;


        BaseNode char_literal148_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:2: ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ((LA42_0 >= BIT_NOT && LA42_0 <= CHAR)||LA42_0==DEC||LA42_0==HEX_LIT||LA42_0==IDENT||(LA42_0 >= INC && LA42_0 <= INT_LIT)||LA42_0==LOG_NOT||LA42_0==MINUS||LA42_0==OCT_LIT||LA42_0==REAL_LIT||LA42_0==STRING||LA42_0==125||(LA42_0 >= 137 && LA42_0 <= 138)||LA42_0==159||(LA42_0 >= 172 && LA42_0 <= 173)||LA42_0==183) ) {
                int LA42_1 = input.LA(2);

                if ( (synpred74_pollen()) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA42_0==NL||LA42_0==SEMI||LA42_0==126||LA42_0==128||LA42_0==139||(LA42_0 >= 142 && LA42_0 <= 152)||LA42_0==155||LA42_0==157||(LA42_0 >= 160 && LA42_0 <= 163)||(LA42_0 >= 165 && LA42_0 <= 168)||(LA42_0 >= 170 && LA42_0 <= 171)||(LA42_0 >= 176 && LA42_0 <= 182)||(LA42_0 >= 185 && LA42_0 <= 190)||LA42_0==193) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:4: expr ( ',' expr )*
                    {
                    pushFollow(FOLLOW_expr_in_exprList2555);
                    expr147=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr147.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:9: ( ',' expr )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==128) ) {
                            int LA41_1 = input.LA(2);

                            if ( (synpred73_pollen()) ) {
                                alt41=1;
                            }


                        }


                        switch (alt41) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:10: ',' expr
                    	    {
                    	    char_literal148=(Atom)match(input,128,FOLLOW_128_in_exprList2558); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal148);


                    	    pushFollow(FOLLOW_expr_in_exprList2560);
                    	    expr149=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr149.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 479:3: -> ^( LIST[\"LIST\"] ( expr )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:479:6: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:480:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 480:4: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, exprList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprList"


    public static class expr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:482:1: expr : ( exprLogicalOr '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr ) | exprLogicalOr );
    public final pollenParser.expr_return expr() throws RecognitionException {
        pollenParser.expr_return retval = new pollenParser.expr_return();
        retval.start = input.LT(1);

        int expr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal151=null;
        Atom char_literal153=null;
        pollenParser.exprLogicalOr_return exprLogicalOr150 =null;

        pollenParser.expr_return expr152 =null;

        pollenParser.expr_return expr154 =null;

        pollenParser.exprLogicalOr_return exprLogicalOr155 =null;


        BaseNode char_literal151_tree=null;
        BaseNode char_literal153_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_exprLogicalOr=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalOr");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:483:2: ( exprLogicalOr '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr ) | exprLogicalOr )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( ((LA43_0 >= BIT_NOT && LA43_0 <= CHAR)||LA43_0==DEC||LA43_0==HEX_LIT||LA43_0==IDENT||(LA43_0 >= INC && LA43_0 <= INT_LIT)||LA43_0==LOG_NOT||LA43_0==MINUS||LA43_0==OCT_LIT||LA43_0==REAL_LIT||LA43_0==STRING||LA43_0==125||(LA43_0 >= 137 && LA43_0 <= 138)||LA43_0==159||(LA43_0 >= 172 && LA43_0 <= 173)||LA43_0==183) ) {
                int LA43_1 = input.LA(2);

                if ( (synpred75_pollen()) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:483:4: exprLogicalOr '?' expr ':' expr
                    {
                    pushFollow(FOLLOW_exprLogicalOr_in_expr2599);
                    exprLogicalOr150=exprLogicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprLogicalOr.add(exprLogicalOr150.getTree());

                    char_literal151=(Atom)match(input,136,FOLLOW_136_in_expr2601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal151);


                    pushFollow(FOLLOW_expr_in_expr2603);
                    expr152=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr152.getTree());

                    char_literal153=(Atom)match(input,131,FOLLOW_131_in_expr2605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal153);


                    pushFollow(FOLLOW_expr_in_expr2607);
                    expr154=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr154.getTree());

                    // AST REWRITE
                    // elements: exprLogicalOr, expr, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 483:36: -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:483:39: ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Quest(E_QUEST, "E_QUEST")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprLogicalOr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:484:4: exprLogicalOr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprLogicalOr_in_expr2630);
                    exprLogicalOr155=exprLogicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprLogicalOr155.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class exprLogicalOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalOr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:486:1: exprLogicalOr : ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* ;
    public final pollenParser.exprLogicalOr_return exprLogicalOr() throws RecognitionException {
        pollenParser.exprLogicalOr_return retval = new pollenParser.exprLogicalOr_return();
        retval.start = input.LT(1);

        int exprLogicalOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal157=null;
        pollenParser.exprLogicalAnd_return exprLogicalAnd156 =null;

        pollenParser.exprLogicalAnd_return exprLogicalAnd158 =null;


        BaseNode string_literal157_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_exprLogicalAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:487:2: ( ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:487:4: ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:487:4: ( exprLogicalAnd -> exprLogicalAnd )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:487:5: exprLogicalAnd
            {
            pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr2648);
            exprLogicalAnd156=exprLogicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd156.getTree());

            // AST REWRITE
            // elements: exprLogicalAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 487:20: -> exprLogicalAnd
            {
                adaptor.addChild(root_0, stream_exprLogicalAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:488:3: ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==192) ) {
                    int LA44_1 = input.LA(2);

                    if ( (synpred76_pollen()) ) {
                        alt44=1;
                    }


                }


                switch (alt44) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:489:4: '||' exprLogicalAnd
            	    {
            	    string_literal157=(Atom)match(input,192,FOLLOW_192_in_exprLogicalOr2662); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_192.add(string_literal157);


            	    pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr2664);
            	    exprLogicalAnd158=exprLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd158.getTree());

            	    // AST REWRITE
            	    // elements: exprLogicalOr, exprLogicalAnd, 192
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 490:5: -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:490:8: ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_192.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprLogicalAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, exprLogicalOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalOr"


    public static class exprLogicalAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalAnd"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:493:1: exprLogicalAnd : ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* ;
    public final pollenParser.exprLogicalAnd_return exprLogicalAnd() throws RecognitionException {
        pollenParser.exprLogicalAnd_return retval = new pollenParser.exprLogicalAnd_return();
        retval.start = input.LT(1);

        int exprLogicalAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal160=null;
        pollenParser.exprBitwiseOr_return exprBitwiseOr159 =null;

        pollenParser.exprBitwiseOr_return exprBitwiseOr161 =null;


        BaseNode string_literal160_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_exprBitwiseOr=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseOr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:494:2: ( ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:494:4: ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:494:4: ( exprBitwiseOr -> exprBitwiseOr )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:494:5: exprBitwiseOr
            {
            pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd2703);
            exprBitwiseOr159=exprBitwiseOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr159.getTree());

            // AST REWRITE
            // elements: exprBitwiseOr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 494:19: -> exprBitwiseOr
            {
                adaptor.addChild(root_0, stream_exprBitwiseOr.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:495:2: ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==123) ) {
                    int LA45_1 = input.LA(2);

                    if ( (synpred77_pollen()) ) {
                        alt45=1;
                    }


                }


                switch (alt45) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:496:3: '&&' exprBitwiseOr
            	    {
            	    string_literal160=(Atom)match(input,123,FOLLOW_123_in_exprLogicalAnd2715); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(string_literal160);


            	    pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd2717);
            	    exprBitwiseOr161=exprBitwiseOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr161.getTree());

            	    // AST REWRITE
            	    // elements: 123, exprBitwiseOr, exprLogicalAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 497:4: -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:7: ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_123.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseOr.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, exprLogicalAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalAnd"


    public static class exprBitwiseOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseOr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:500:1: exprBitwiseOr : ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* ;
    public final pollenParser.exprBitwiseOr_return exprBitwiseOr() throws RecognitionException {
        pollenParser.exprBitwiseOr_return retval = new pollenParser.exprBitwiseOr_return();
        retval.start = input.LT(1);

        int exprBitwiseOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal163=null;
        pollenParser.exprBitwiseXor_return exprBitwiseXor162 =null;

        pollenParser.exprBitwiseXor_return exprBitwiseXor164 =null;


        BaseNode char_literal163_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_exprBitwiseXor=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseXor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:501:2: ( ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:501:4: ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:501:4: ( exprBitwiseXor -> exprBitwiseXor )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:501:5: exprBitwiseXor
            {
            pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr2754);
            exprBitwiseXor162=exprBitwiseXor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor162.getTree());

            // AST REWRITE
            // elements: exprBitwiseXor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 501:20: -> exprBitwiseXor
            {
                adaptor.addChild(root_0, stream_exprBitwiseXor.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:502:2: ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==191) ) {
                    int LA46_1 = input.LA(2);

                    if ( (synpred78_pollen()) ) {
                        alt46=1;
                    }


                }


                switch (alt46) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:3: '|' exprBitwiseXor
            	    {
            	    char_literal163=(Atom)match(input,191,FOLLOW_191_in_exprBitwiseOr2766); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_191.add(char_literal163);


            	    pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr2768);
            	    exprBitwiseXor164=exprBitwiseXor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor164.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseXor, exprBitwiseOr, 191
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 504:3: -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:504:6: ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_191.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseXor.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, exprBitwiseOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseOr"


    public static class exprBitwiseXor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseXor"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:507:1: exprBitwiseXor : ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* ;
    public final pollenParser.exprBitwiseXor_return exprBitwiseXor() throws RecognitionException {
        pollenParser.exprBitwiseXor_return retval = new pollenParser.exprBitwiseXor_return();
        retval.start = input.LT(1);

        int exprBitwiseXor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal166=null;
        pollenParser.exprBitwiseAnd_return exprBitwiseAnd165 =null;

        pollenParser.exprBitwiseAnd_return exprBitwiseAnd167 =null;


        BaseNode char_literal166_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_exprBitwiseAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:2: ( ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:4: ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:4: ( exprBitwiseAnd -> exprBitwiseAnd )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:5: exprBitwiseAnd
            {
            pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2804);
            exprBitwiseAnd165=exprBitwiseAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd165.getTree());

            // AST REWRITE
            // elements: exprBitwiseAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 508:20: -> exprBitwiseAnd
            {
                adaptor.addChild(root_0, stream_exprBitwiseAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:509:2: ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==140) ) {
                    int LA47_1 = input.LA(2);

                    if ( (synpred79_pollen()) ) {
                        alt47=1;
                    }


                }


                switch (alt47) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:510:3: '^' exprBitwiseAnd
            	    {
            	    char_literal166=(Atom)match(input,140,FOLLOW_140_in_exprBitwiseXor2816); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_140.add(char_literal166);


            	    pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2818);
            	    exprBitwiseAnd167=exprBitwiseAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd167.getTree());

            	    // AST REWRITE
            	    // elements: 140, exprBitwiseAnd, exprBitwiseXor
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 511:3: -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:511:6: ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_140.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, exprBitwiseXor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseXor"


    public static class exprBitwiseAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseAnd"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:514:1: exprBitwiseAnd : ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* ;
    public final pollenParser.exprBitwiseAnd_return exprBitwiseAnd() throws RecognitionException {
        pollenParser.exprBitwiseAnd_return retval = new pollenParser.exprBitwiseAnd_return();
        retval.start = input.LT(1);

        int exprBitwiseAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal169=null;
        pollenParser.exprEquality_return exprEquality168 =null;

        pollenParser.exprEquality_return exprEquality170 =null;


        BaseNode char_literal169_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_exprEquality=new RewriteRuleSubtreeStream(adaptor,"rule exprEquality");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:515:2: ( ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:515:4: ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:515:4: ( exprEquality -> exprEquality )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:515:5: exprEquality
            {
            pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd2854);
            exprEquality168=exprEquality();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality168.getTree());

            // AST REWRITE
            // elements: exprEquality
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 515:18: -> exprEquality
            {
                adaptor.addChild(root_0, stream_exprEquality.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:516:2: ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==124) ) {
                    int LA48_1 = input.LA(2);

                    if ( (synpred80_pollen()) ) {
                        alt48=1;
                    }


                }


                switch (alt48) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:517:3: '&' exprEquality
            	    {
            	    char_literal169=(Atom)match(input,124,FOLLOW_124_in_exprBitwiseAnd2866); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_124.add(char_literal169);


            	    pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd2868);
            	    exprEquality170=exprEquality();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality170.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseAnd, exprEquality, 124
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 518:3: -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:518:6: ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_124.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprEquality.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, exprBitwiseAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseAnd"


    public static class exprEquality_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprEquality"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:521:1: exprEquality : ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* ;
    public final pollenParser.exprEquality_return exprEquality() throws RecognitionException {
        pollenParser.exprEquality_return retval = new pollenParser.exprEquality_return();
        retval.start = input.LT(1);

        int exprEquality_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprRelational_return exprRelational171 =null;

        pollenParser.equalityOp_return equalityOp172 =null;

        pollenParser.exprRelational_return exprRelational173 =null;


        RewriteRuleSubtreeStream stream_equalityOp=new RewriteRuleSubtreeStream(adaptor,"rule equalityOp");
        RewriteRuleSubtreeStream stream_exprRelational=new RewriteRuleSubtreeStream(adaptor,"rule exprRelational");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:522:2: ( ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:522:4: ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:522:4: ( exprRelational -> exprRelational )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:522:5: exprRelational
            {
            pushFollow(FOLLOW_exprRelational_in_exprEquality2904);
            exprRelational171=exprRelational();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational171.getTree());

            // AST REWRITE
            // elements: exprRelational
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 522:20: -> exprRelational
            {
                adaptor.addChild(root_0, stream_exprRelational.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:2: ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==EQ||LA49_0==NOT_EQ) ) {
                    int LA49_1 = input.LA(2);

                    if ( (synpred81_pollen()) ) {
                        alt49=1;
                    }


                }


                switch (alt49) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:524:3: equalityOp exprRelational
            	    {
            	    pushFollow(FOLLOW_equalityOp_in_exprEquality2917);
            	    equalityOp172=equalityOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityOp.add(equalityOp172.getTree());

            	    pushFollow(FOLLOW_exprRelational_in_exprEquality2919);
            	    exprRelational173=exprRelational();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational173.getTree());

            	    // AST REWRITE
            	    // elements: exprEquality, exprRelational, equalityOp
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 525:3: -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:525:6: ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_equalityOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprRelational.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, exprEquality_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprEquality"


    public static class exprRelational_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprRelational"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:528:1: exprRelational : ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* ;
    public final pollenParser.exprRelational_return exprRelational() throws RecognitionException {
        pollenParser.exprRelational_return retval = new pollenParser.exprRelational_return();
        retval.start = input.LT(1);

        int exprRelational_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprShift_return exprShift174 =null;

        pollenParser.relationalOp_return relationalOp175 =null;

        pollenParser.exprShift_return exprShift176 =null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_exprShift=new RewriteRuleSubtreeStream(adaptor,"rule exprShift");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:2: ( ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:4: ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:4: ( exprShift -> exprShift )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:5: exprShift
            {
            pushFollow(FOLLOW_exprShift_in_exprRelational2955);
            exprShift174=exprShift();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprShift.add(exprShift174.getTree());

            // AST REWRITE
            // elements: exprShift
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 529:15: -> exprShift
            {
                adaptor.addChild(root_0, stream_exprShift.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:530:2: ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==GT_EQ||LA50_0==LT_EQ||LA50_0==132||LA50_0==134) ) {
                    int LA50_1 = input.LA(2);

                    if ( (synpred82_pollen()) ) {
                        alt50=1;
                    }


                }


                switch (alt50) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:531:3: relationalOp exprShift
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_exprRelational2968);
            	    relationalOp175=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relationalOp.add(relationalOp175.getTree());

            	    pushFollow(FOLLOW_exprShift_in_exprRelational2970);
            	    exprShift176=exprShift();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprShift.add(exprShift176.getTree());

            	    // AST REWRITE
            	    // elements: exprRelational, exprShift, relationalOp
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 532:3: -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:532:6: ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_relationalOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprShift.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, exprRelational_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprRelational"


    public static class exprShift_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprShift"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:535:1: exprShift : ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* ;
    public final pollenParser.exprShift_return exprShift() throws RecognitionException {
        pollenParser.exprShift_return retval = new pollenParser.exprShift_return();
        retval.start = input.LT(1);

        int exprShift_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprAddSub_return exprAddSub177 =null;

        pollenParser.shiftOp_return shiftOp178 =null;

        pollenParser.exprAddSub_return exprAddSub179 =null;


        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        RewriteRuleSubtreeStream stream_exprAddSub=new RewriteRuleSubtreeStream(adaptor,"rule exprAddSub");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:536:2: ( ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:536:4: ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:536:4: ( exprAddSub -> exprAddSub )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:536:5: exprAddSub
            {
            pushFollow(FOLLOW_exprAddSub_in_exprShift3007);
            exprAddSub177=exprAddSub();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub177.getTree());

            // AST REWRITE
            // elements: exprAddSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 536:16: -> exprAddSub
            {
                adaptor.addChild(root_0, stream_exprAddSub.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:537:2: ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==133||LA51_0==135) ) {
                    int LA51_1 = input.LA(2);

                    if ( (synpred83_pollen()) ) {
                        alt51=1;
                    }


                }


                switch (alt51) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:538:3: shiftOp exprAddSub
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_exprShift3020);
            	    shiftOp178=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftOp.add(shiftOp178.getTree());

            	    pushFollow(FOLLOW_exprAddSub_in_exprShift3023);
            	    exprAddSub179=exprAddSub();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub179.getTree());

            	    // AST REWRITE
            	    // elements: shiftOp, exprShift, exprAddSub
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 539:3: -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:539:6: ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_shiftOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprAddSub.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, exprShift_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprShift"


    public static class exprAddSub_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAddSub"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:542:1: exprAddSub : ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* ;
    public final pollenParser.exprAddSub_return exprAddSub() throws RecognitionException {
        pollenParser.exprAddSub_return retval = new pollenParser.exprAddSub_return();
        retval.start = input.LT(1);

        int exprAddSub_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprMultDiv_return exprMultDiv180 =null;

        pollenParser.addSubOp_return addSubOp181 =null;

        pollenParser.exprMultDiv_return exprMultDiv182 =null;


        RewriteRuleSubtreeStream stream_addSubOp=new RewriteRuleSubtreeStream(adaptor,"rule addSubOp");
        RewriteRuleSubtreeStream stream_exprMultDiv=new RewriteRuleSubtreeStream(adaptor,"rule exprMultDiv");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:543:2: ( ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:543:4: ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:543:4: ( exprMultDiv -> exprMultDiv )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:543:5: exprMultDiv
            {
            pushFollow(FOLLOW_exprMultDiv_in_exprAddSub3060);
            exprMultDiv180=exprMultDiv();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv180.getTree());

            // AST REWRITE
            // elements: exprMultDiv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 543:17: -> exprMultDiv
            {
                adaptor.addChild(root_0, stream_exprMultDiv.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:544:2: ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==MINUS||LA52_0==PLUS) ) {
                    int LA52_1 = input.LA(2);

                    if ( (synpred84_pollen()) ) {
                        alt52=1;
                    }


                }


                switch (alt52) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:545:3: addSubOp exprMultDiv
            	    {
            	    pushFollow(FOLLOW_addSubOp_in_exprAddSub3072);
            	    addSubOp181=addSubOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_addSubOp.add(addSubOp181.getTree());

            	    pushFollow(FOLLOW_exprMultDiv_in_exprAddSub3074);
            	    exprMultDiv182=exprMultDiv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv182.getTree());

            	    // AST REWRITE
            	    // elements: addSubOp, exprMultDiv, exprAddSub
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 546:3: -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:546:6: ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_addSubOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprMultDiv.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, exprAddSub_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprAddSub"


    public static class exprMultDiv_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprMultDiv"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:549:1: exprMultDiv : ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* ;
    public final pollenParser.exprMultDiv_return exprMultDiv() throws RecognitionException {
        pollenParser.exprMultDiv_return retval = new pollenParser.exprMultDiv_return();
        retval.start = input.LT(1);

        int exprMultDiv_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprUnary_return exprUnary183 =null;

        pollenParser.multDivModOp_return multDivModOp184 =null;

        pollenParser.exprUnary_return exprUnary185 =null;


        RewriteRuleSubtreeStream stream_multDivModOp=new RewriteRuleSubtreeStream(adaptor,"rule multDivModOp");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:2: ( ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:4: ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:4: ( exprUnary -> exprUnary )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:550:5: exprUnary
            {
            pushFollow(FOLLOW_exprUnary_in_exprMultDiv3117);
            exprUnary183=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary183.getTree());

            // AST REWRITE
            // elements: exprUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 550:15: -> exprUnary
            {
                adaptor.addChild(root_0, stream_exprUnary.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:551:2: ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==122||LA53_0==127||LA53_0==130) ) {
                    int LA53_1 = input.LA(2);

                    if ( (synpred85_pollen()) ) {
                        alt53=1;
                    }


                }


                switch (alt53) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:3: multDivModOp exprUnary
            	    {
            	    pushFollow(FOLLOW_multDivModOp_in_exprMultDiv3129);
            	    multDivModOp184=multDivModOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multDivModOp.add(multDivModOp184.getTree());

            	    pushFollow(FOLLOW_exprUnary_in_exprMultDiv3131);
            	    exprUnary185=exprUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary185.getTree());

            	    // AST REWRITE
            	    // elements: exprUnary, multDivModOp, exprMultDiv
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 553:3: -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:553:6: ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_multDivModOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprUnary.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, exprMultDiv_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprMultDiv"


    public static class exprNew_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprNew"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:556:1: exprNew : 'new' typeName fcnArgumentList -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ;
    public final pollenParser.exprNew_return exprNew() throws RecognitionException {
        pollenParser.exprNew_return retval = new pollenParser.exprNew_return();
        retval.start = input.LT(1);

        int exprNew_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal186=null;
        pollenParser.typeName_return typeName187 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList188 =null;


        BaseNode string_literal186_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:557:2: ( 'new' typeName fcnArgumentList -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:557:4: 'new' typeName fcnArgumentList
            {
            string_literal186=(Atom)match(input,172,FOLLOW_172_in_exprNew3166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal186);


            pushFollow(FOLLOW_typeName_in_exprNew3168);
            typeName187=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName187.getTree());

            pushFollow(FOLLOW_fcnArgumentList_in_exprNew3170);
            fcnArgumentList188=fcnArgumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList188.getTree());

            // AST REWRITE
            // elements: fcnArgumentList, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 557:35: -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:557:38: ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.New(E_NEW, "E_NEW")
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, exprNew_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprNew"


    public static class exprUnary_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprUnary"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:559:1: exprUnary : ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr ) | '(' expr ')' -> ^( E_PAREN expr ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] MINUS expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew );
    public final pollenParser.exprUnary_return exprUnary() throws RecognitionException {
        pollenParser.exprUnary_return retval = new pollenParser.exprUnary_return();
        retval.start = input.LT(1);

        int exprUnary_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal196=null;
        Atom char_literal198=null;
        Atom MINUS199=null;
        pollenParser.primitiveLit_return primitiveLit189 =null;

        pollenParser.injectionCode_return injectionCode190 =null;

        pollenParser.arrayLit_return arrayLit191 =null;

        pollenParser.logicalNotOp_return logicalNotOp192 =null;

        pollenParser.expr_return expr193 =null;

        pollenParser.bitwiseNotOp_return bitwiseNotOp194 =null;

        pollenParser.expr_return expr195 =null;

        pollenParser.expr_return expr197 =null;

        pollenParser.expr_return expr200 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray201 =null;

        pollenParser.incDecOp_return incDecOp202 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray203 =null;

        pollenParser.incDecOp_return incDecOp204 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray205 =null;

        pollenParser.exprNew_return exprNew206 =null;


        BaseNode char_literal196_tree=null;
        BaseNode char_literal198_tree=null;
        BaseNode MINUS199_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arrayLit=new RewriteRuleSubtreeStream(adaptor,"rule arrayLit");
        RewriteRuleSubtreeStream stream_incDecOp=new RewriteRuleSubtreeStream(adaptor,"rule incDecOp");
        RewriteRuleSubtreeStream stream_logicalNotOp=new RewriteRuleSubtreeStream(adaptor,"rule logicalNotOp");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_bitwiseNotOp=new RewriteRuleSubtreeStream(adaptor,"rule bitwiseNotOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:560:2: ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr ) | '(' expr ')' -> ^( E_PAREN expr ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] MINUS expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew )
            int alt54=11;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 159:
            case 173:
            case 183:
                {
                alt54=1;
                }
                break;
            case INJECT:
                {
                alt54=2;
                }
                break;
            case 138:
                {
                alt54=3;
                }
                break;
            case LOG_NOT:
                {
                alt54=4;
                }
                break;
            case BIT_NOT:
                {
                alt54=5;
                }
                break;
            case 125:
                {
                alt54=6;
                }
                break;
            case MINUS:
                {
                alt54=7;
                }
                break;
            case 172:
                {
                int LA54_8 = input.LA(2);

                if ( (synpred93_pollen()) ) {
                    alt54=8;
                }
                else if ( (synpred94_pollen()) ) {
                    alt54=9;
                }
                else if ( (true) ) {
                    alt54=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 8, input);

                    throw nvae;

                }
                }
                break;
            case DEC:
            case INC:
                {
                alt54=10;
                }
                break;
            case IDENT:
            case 137:
                {
                int LA54_13 = input.LA(2);

                if ( (synpred93_pollen()) ) {
                    alt54=8;
                }
                else if ( (synpred94_pollen()) ) {
                    alt54=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }

            switch (alt54) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:560:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_exprUnary3196);
                    primitiveLit189=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit189.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:561:4: injectionCode
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionCode_in_exprUnary3201);
                    injectionCode190=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionCode190.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:4: arrayLit
                    {
                    pushFollow(FOLLOW_arrayLit_in_exprUnary3206);
                    arrayLit191=arrayLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLit.add(arrayLit191.getTree());

                    // AST REWRITE
                    // elements: arrayLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 562:18: -> ^( E_VEC[\"E_VEC\"] arrayLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:21: ^( E_VEC[\"E_VEC\"] arrayLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_arrayLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:563:4: logicalNotOp expr
                    {
                    pushFollow(FOLLOW_logicalNotOp_in_exprUnary3230);
                    logicalNotOp192=logicalNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicalNotOp.add(logicalNotOp192.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary3232);
                    expr193=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr193.getTree());

                    // AST REWRITE
                    // elements: logicalNotOp, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 563:25: -> ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:563:28: ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_logicalNotOp.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:564:4: bitwiseNotOp expr
                    {
                    pushFollow(FOLLOW_bitwiseNotOp_in_exprUnary3256);
                    bitwiseNotOp194=bitwiseNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bitwiseNotOp.add(bitwiseNotOp194.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary3258);
                    expr195=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr195.getTree());

                    // AST REWRITE
                    // elements: expr, bitwiseNotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 564:25: -> ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:564:28: ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_bitwiseNotOp.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:565:4: '(' expr ')'
                    {
                    char_literal196=(Atom)match(input,125,FOLLOW_125_in_exprUnary3282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(char_literal196);


                    pushFollow(FOLLOW_expr_in_exprUnary3284);
                    expr197=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr197.getTree());

                    char_literal198=(Atom)match(input,126,FOLLOW_126_in_exprUnary3286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal198);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 565:20: -> ^( E_PAREN expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:565:23: ^( E_PAREN expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(E_PAREN, "E_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:566:4: MINUS expr
                    {
                    MINUS199=(Atom)match(input,MINUS,FOLLOW_MINUS_in_exprUnary3302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS199);


                    pushFollow(FOLLOW_expr_in_exprUnary3304);
                    expr200=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr200.getTree());

                    // AST REWRITE
                    // elements: MINUS, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 566:19: -> ^( E_UNARY[\"E_UNARY\"] MINUS expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:566:22: ^( E_UNARY[\"E_UNARY\"] MINUS expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_MINUS.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:567:4: varOrFcnOrArray incDecOp
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary3329);
                    varOrFcnOrArray201=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray201.getTree());

                    pushFollow(FOLLOW_incDecOp_in_exprUnary3331);
                    incDecOp202=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp202.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 567:29: -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:567:32: ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY", true)
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:4: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary3352);
                    varOrFcnOrArray203=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray203.getTree());

                    }
                    break;
                case 10 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:569:4: incDecOp varOrFcnOrArray
                    {
                    pushFollow(FOLLOW_incDecOp_in_exprUnary3357);
                    incDecOp204=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp204.getTree());

                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary3359);
                    varOrFcnOrArray205=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray205.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 569:29: -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:569:32: ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:570:4: exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_exprUnary3380);
                    exprNew206=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew206.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, exprUnary_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprUnary"


    public static class fcnDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:572:1: fcnDefinition : ( 'public' )? ( 'host' )? fcnType_fcnName fcnFormalParameterList fcnBody[$fcnFormalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody ) ;
    public final pollenParser.fcnDefinition_return fcnDefinition() throws RecognitionException {
        pollenParser.fcnDefinition_return retval = new pollenParser.fcnDefinition_return();
        retval.start = input.LT(1);

        int fcnDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal207=null;
        Atom string_literal208=null;
        pollenParser.fcnType_fcnName_return fcnType_fcnName209 =null;

        pollenParser.fcnFormalParameterList_return fcnFormalParameterList210 =null;

        pollenParser.fcnBody_return fcnBody211 =null;


        BaseNode string_literal207_tree=null;
        BaseNode string_literal208_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_fcnFormalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule fcnFormalParameterList");
        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");

        	atFlags.clear();			

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:2: ( ( 'public' )? ( 'host' )? fcnType_fcnName fcnFormalParameterList fcnBody[$fcnFormalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:4: ( 'public' )? ( 'host' )? fcnType_fcnName fcnFormalParameterList fcnBody[$fcnFormalParameterList.tree]
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:4: ( 'public' )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==179) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:5: 'public'
                    {
                    string_literal207=(Atom)match(input,179,FOLLOW_179_in_fcnDefinition3400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal207);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.PUBLIC); }

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:580:3: ( 'host' )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==162) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:580:4: 'host'
                    {
                    string_literal208=(Atom)match(input,162,FOLLOW_162_in_fcnDefinition3411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal208);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinition3421);
            fcnType_fcnName209=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName209.getTree());

            pushFollow(FOLLOW_fcnFormalParameterList_in_fcnDefinition3423);
            fcnFormalParameterList210=fcnFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnFormalParameterList.add(fcnFormalParameterList210.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinition3425);
            fcnBody211=fcnBody((fcnFormalParameterList210!=null?((BaseNode)fcnFormalParameterList210.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody211.getTree());

            // AST REWRITE
            // elements: fcnBody, fcnFormalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 582:3: -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:582:6: ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_fcnFormalParameterList.nextTree());

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              atFlags.clear();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, fcnDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinition"


    public static class fcnDefinitionHost_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinitionHost"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:1: fcnDefinitionHost : ( 'public' )? ( 'host' )? fcnType_fcnName fcnFormalParameterList fcnBody[$fcnFormalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody ) ;
    public final pollenParser.fcnDefinitionHost_return fcnDefinitionHost() throws RecognitionException {
        pollenParser.fcnDefinitionHost_return retval = new pollenParser.fcnDefinitionHost_return();
        retval.start = input.LT(1);

        int fcnDefinitionHost_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal212=null;
        Atom string_literal213=null;
        pollenParser.fcnType_fcnName_return fcnType_fcnName214 =null;

        pollenParser.fcnFormalParameterList_return fcnFormalParameterList215 =null;

        pollenParser.fcnBody_return fcnBody216 =null;


        BaseNode string_literal212_tree=null;
        BaseNode string_literal213_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_fcnFormalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule fcnFormalParameterList");
        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");

        	atFlags.clear();			

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:2: ( ( 'public' )? ( 'host' )? fcnType_fcnName fcnFormalParameterList fcnBody[$fcnFormalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:4: ( 'public' )? ( 'host' )? fcnType_fcnName fcnFormalParameterList fcnBody[$fcnFormalParameterList.tree]
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:4: ( 'public' )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==179) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:5: 'public'
                    {
                    string_literal212=(Atom)match(input,179,FOLLOW_179_in_fcnDefinitionHost3467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal212);


                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:16: ( 'host' )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==162) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:17: 'host'
                    {
                    string_literal213=(Atom)match(input,162,FOLLOW_162_in_fcnDefinitionHost3472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal213);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinitionHost3483);
            fcnType_fcnName214=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName214.getTree());

            pushFollow(FOLLOW_fcnFormalParameterList_in_fcnDefinitionHost3486);
            fcnFormalParameterList215=fcnFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnFormalParameterList.add(fcnFormalParameterList215.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinitionHost3488);
            fcnBody216=fcnBody((fcnFormalParameterList215!=null?((BaseNode)fcnFormalParameterList215.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody216.getTree());

            if ( state.backtracking==0 ) { 	atFlags.add(Flags.PUBLIC); /* enforce */ 	
            			if (!atFlags.contains(Flags.HOST))
                   		throw new PollenException("Composition features must be one of host functions, export statements, or enum definitions.", input);
            		}

            // AST REWRITE
            // elements: fcnBody, fcnFormalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 598:3: -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:598:6: ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName fcnFormalParameterList fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_fcnFormalParameterList.nextTree());

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              atFlags.clear();
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, fcnDefinitionHost_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinitionHost"


    public static class fcnAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnAttr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:605:1: fcnAttr : ( 'public' )? ( 'host' )? ;
    public final pollenParser.fcnAttr_return fcnAttr() throws RecognitionException {
        pollenParser.fcnAttr_return retval = new pollenParser.fcnAttr_return();
        retval.start = input.LT(1);

        int fcnAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal217=null;
        Atom string_literal218=null;

        BaseNode string_literal217_tree=null;
        BaseNode string_literal218_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:606:2: ( ( 'public' )? ( 'host' )? )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:606:4: ( 'public' )? ( 'host' )?
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:606:4: ( 'public' )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==179) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:606:5: 'public'
                    {
                    string_literal217=(Atom)match(input,179,FOLLOW_179_in_fcnAttr3532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal217_tree = 
                    (BaseNode)adaptor.create(string_literal217)
                    ;
                    adaptor.addChild(root_0, string_literal217_tree);
                    }

                    if ( state.backtracking==0 ) { atFlags.add(Flags.PUBLIC); }

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:607:3: ( 'host' )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==162) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:607:4: 'host'
                    {
                    string_literal218=(Atom)match(input,162,FOLLOW_162_in_fcnAttr3543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal218_tree = 
                    (BaseNode)adaptor.create(string_literal218)
                    ;
                    adaptor.addChild(root_0, string_literal218_tree);
                    }

                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, fcnAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnAttr"


    public static class fcnBody_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnBody"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:609:1: fcnBody[CommonTree formals] : braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) ;
    public final pollenParser.fcnBody_return fcnBody(CommonTree formals) throws RecognitionException {
        pollenParser.fcnBody_return retval = new pollenParser.fcnBody_return();
        retval.start = input.LT(1);

        int fcnBody_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen219 =null;

        pollenParser.stmts_return stmts220 =null;

        pollenParser.braceClose_return braceClose221 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:3: ( braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:5: braceOpen ( stmts ) braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_fcnBody3560);
            braceOpen219=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen219.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:15: ( stmts )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:16: stmts
            {
            pushFollow(FOLLOW_stmts_in_fcnBody3563);
            stmts220=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts220.getTree());

            }


            pushFollow(FOLLOW_braceClose_in_fcnBody3567);
            braceClose221=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose221.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 610:36: -> ^( FCNBODY[\"FCNBODY\"] stmts )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:610:39: ^( FCNBODY[\"FCNBODY\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new BodyNode(FCNBODY, "FCNBODY")
                , root_1);

                adaptor.addChild(root_1, formals);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, fcnBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnBody"


    public static class fcnDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDeclaration"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:612:1: fcnDeclaration : ( 'public' )? ( 'host' )? fcnType_fcnName ( fcnFormalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName fcnFormalParameterList ) ;
    public final pollenParser.fcnDeclaration_return fcnDeclaration() throws RecognitionException {
        pollenParser.fcnDeclaration_return retval = new pollenParser.fcnDeclaration_return();
        retval.start = input.LT(1);

        int fcnDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal222=null;
        Atom string_literal223=null;
        pollenParser.fcnType_fcnName_return fcnType_fcnName224 =null;

        pollenParser.fcnFormalParameterList_return fcnFormalParameterList225 =null;

        pollenParser.delim_return delim226 =null;


        BaseNode string_literal222_tree=null;
        BaseNode string_literal223_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_fcnFormalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule fcnFormalParameterList");
        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	atFlags.clear();			

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:4: ( ( 'public' )? ( 'host' )? fcnType_fcnName ( fcnFormalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName fcnFormalParameterList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:6: ( 'public' )? ( 'host' )? fcnType_fcnName ( fcnFormalParameterList ) delim
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:6: ( 'public' )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==179) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:7: 'public'
                    {
                    string_literal222=(Atom)match(input,179,FOLLOW_179_in_fcnDeclaration3606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal222);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.PUBLIC); }

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:620:3: ( 'host' )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==162) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:620:4: 'host'
                    {
                    string_literal223=(Atom)match(input,162,FOLLOW_162_in_fcnDeclaration3617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal223);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDeclaration3627);
            fcnType_fcnName224=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName224.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:621:19: ( fcnFormalParameterList )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:621:20: fcnFormalParameterList
            {
            pushFollow(FOLLOW_fcnFormalParameterList_in_fcnDeclaration3630);
            fcnFormalParameterList225=fcnFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnFormalParameterList.add(fcnFormalParameterList225.getTree());

            }


            pushFollow(FOLLOW_delim_in_fcnDeclaration3633);
            delim226=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim226.getTree());

            // AST REWRITE
            // elements: fcnType_fcnName, fcnFormalParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 622:4: -> ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName fcnFormalParameterList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:622:7: ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName fcnFormalParameterList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DCL, "D_FCN_DCL", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_fcnFormalParameterList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              atFlags.clear();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, fcnDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDeclaration"


    public static class fcnType_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnType_fcnName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:624:1: fcnType_fcnName : ( typeName qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName ) | qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName );
    public final pollenParser.fcnType_fcnName_return fcnType_fcnName() throws RecognitionException {
        pollenParser.fcnType_fcnName_return retval = new pollenParser.fcnType_fcnName_return();
        retval.start = input.LT(1);

        int fcnType_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeName_return typeName227 =null;

        pollenParser.qualName_return qualName228 =null;

        pollenParser.typeName_return typeName229 =null;

        pollenParser.qualName_return qualName230 =null;

        pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName231 =null;


        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:2: ( typeName qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName ) | qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName )
            int alt63=4;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==143||LA63_0==145||(LA63_0 >= 166 && LA63_0 <= 168)||LA63_0==181||(LA63_0 >= 185 && LA63_0 <= 187)) ) {
                int LA63_1 = input.LA(2);

                if ( (synpred104_pollen()) ) {
                    alt63=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred105_pollen())) ) {
                    alt63=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA63_0==IDENT) ) {
                int LA63_2 = input.LA(2);

                if ( (synpred104_pollen()) ) {
                    alt63=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred105_pollen())) ) {
                    alt63=2;
                }
                else if ( (synpred106_pollen()) ) {
                    alt63=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA63_0==125) && (synpred108_pollen())) {
                alt63=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:4: typeName qualName
                    {
                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName3666);
                    typeName227=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName227.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName3668);
                    qualName228=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName228.getTree());

                    // AST REWRITE
                    // elements: qualName, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 628:3: -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:628:6: ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:628:22: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", atFlags)
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:628:62: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:4: {...}? typeName
                    {
                    if ( !((input.LT(1).getText().equals(ti.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "input.LT(1).getText().equals(ti.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName3714);
                    typeName229=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName229.getTree());

                    // AST REWRITE
                    // elements: typeName, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 630:3: -> ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:630:6: ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:630:19: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", atFlags)
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:630:59: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:631:4: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName3759);
                    qualName230=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName230.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 632:3: -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:632:6: ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:632:21: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", atFlags)
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:633:5: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:633:30: ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", atFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:4: ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName3846);
                    fcnTypes_fcnName231=fcnTypes_fcnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnTypes_fcnName231.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, fcnType_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnType_fcnName"


    public static class fcnTypes_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes_fcnName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:1: fcnTypes_fcnName : '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM fcnTypes qualName ) ;
    public final pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName() throws RecognitionException {
        pollenParser.fcnTypes_fcnName_return retval = new pollenParser.fcnTypes_fcnName_return();
        retval.start = input.LT(1);

        int fcnTypes_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal232=null;
        Atom char_literal234=null;
        pollenParser.fcnTypes_return fcnTypes233 =null;

        pollenParser.qualName_return qualName235 =null;


        BaseNode char_literal232_tree=null;
        BaseNode char_literal234_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_fcnTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnTypes");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:637:2: ( '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM fcnTypes qualName ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:637:4: '(' fcnTypes ')' qualName
            {
            char_literal232=(Atom)match(input,125,FOLLOW_125_in_fcnTypes_fcnName3857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal232);


            pushFollow(FOLLOW_fcnTypes_in_fcnTypes_fcnName3859);
            fcnTypes233=fcnTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnTypes.add(fcnTypes233.getTree());

            char_literal234=(Atom)match(input,126,FOLLOW_126_in_fcnTypes_fcnName3861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal234);


            pushFollow(FOLLOW_qualName_in_fcnTypes_fcnName3863);
            qualName235=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName235.getTree());

            // AST REWRITE
            // elements: qualName, fcnTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 637:30: -> ^( D_FCN_TYP_NM fcnTypes qualName )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:637:33: ^( D_FCN_TYP_NM fcnTypes qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                , root_1);

                adaptor.addChild(root_1, stream_fcnTypes.nextTree());

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, fcnTypes_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes_fcnName"


    public static class fcnTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:639:1: fcnTypes : typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) ;
    public final pollenParser.fcnTypes_return fcnTypes() throws RecognitionException {
        pollenParser.fcnTypes_return retval = new pollenParser.fcnTypes_return();
        retval.start = input.LT(1);

        int fcnTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal237=null;
        pollenParser.typeName_return typeName236 =null;

        pollenParser.typeName_return typeName238 =null;


        BaseNode char_literal237_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:2: ( typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:4: typeName ( ',' typeName )*
            {
            pushFollow(FOLLOW_typeName_in_fcnTypes3884);
            typeName236=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName236.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:13: ( ',' typeName )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==128) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:14: ',' typeName
            	    {
            	    char_literal237=(Atom)match(input,128,FOLLOW_128_in_fcnTypes3887); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_128.add(char_literal237);


            	    pushFollow(FOLLOW_typeName_in_fcnTypes3889);
            	    typeName238=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeName.add(typeName238.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            // AST REWRITE
            // elements: typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 640:29: -> ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:32: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Lst(T_LST, "T_LST", atFlags)
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:72: ^( LIST[\"LIST\"] ( typeName )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_typeName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_typeName.nextTree());

                }
                stream_typeName.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, fcnTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes"


    public static class fcnFormalParameterList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnFormalParameterList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:642:1: fcnFormalParameterList : '(' fcnFormalParameters ')' -> fcnFormalParameters ;
    public final pollenParser.fcnFormalParameterList_return fcnFormalParameterList() throws RecognitionException {
        pollenParser.fcnFormalParameterList_return retval = new pollenParser.fcnFormalParameterList_return();
        retval.start = input.LT(1);

        int fcnFormalParameterList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal239=null;
        Atom char_literal241=null;
        pollenParser.fcnFormalParameters_return fcnFormalParameters240 =null;


        BaseNode char_literal239_tree=null;
        BaseNode char_literal241_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_fcnFormalParameters=new RewriteRuleSubtreeStream(adaptor,"rule fcnFormalParameters");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:643:2: ( '(' fcnFormalParameters ')' -> fcnFormalParameters )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:643:4: '(' fcnFormalParameters ')'
            {
            char_literal239=(Atom)match(input,125,FOLLOW_125_in_fcnFormalParameterList3924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal239);


            pushFollow(FOLLOW_fcnFormalParameters_in_fcnFormalParameterList3926);
            fcnFormalParameters240=fcnFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnFormalParameters.add(fcnFormalParameters240.getTree());

            char_literal241=(Atom)match(input,126,FOLLOW_126_in_fcnFormalParameterList3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal241);


            // AST REWRITE
            // elements: fcnFormalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 643:32: -> fcnFormalParameters
            {
                adaptor.addChild(root_0, stream_fcnFormalParameters.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, fcnFormalParameterList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnFormalParameterList"


    public static class fcnFormalParameters_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnFormalParameters"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:645:1: fcnFormalParameters : ( fcnFormalParameter ( ',' fcnFormalParameter )* -> ^( LIST[\"LIST\"] ( fcnFormalParameter )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.fcnFormalParameters_return fcnFormalParameters() throws RecognitionException {
        pollenParser.fcnFormalParameters_return retval = new pollenParser.fcnFormalParameters_return();
        retval.start = input.LT(1);

        int fcnFormalParameters_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal243=null;
        pollenParser.fcnFormalParameter_return fcnFormalParameter242 =null;

        pollenParser.fcnFormalParameter_return fcnFormalParameter244 =null;


        BaseNode char_literal243_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnFormalParameter=new RewriteRuleSubtreeStream(adaptor,"rule fcnFormalParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:646:2: ( fcnFormalParameter ( ',' fcnFormalParameter )* -> ^( LIST[\"LIST\"] ( fcnFormalParameter )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IDENT||LA66_0==143||LA66_0==145||(LA66_0 >= 166 && LA66_0 <= 168)||LA66_0==181||(LA66_0 >= 185 && LA66_0 <= 187)) ) {
                alt66=1;
            }
            else if ( (LA66_0==126) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:646:4: fcnFormalParameter ( ',' fcnFormalParameter )*
                    {
                    pushFollow(FOLLOW_fcnFormalParameter_in_fcnFormalParameters3942);
                    fcnFormalParameter242=fcnFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnFormalParameter.add(fcnFormalParameter242.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:646:23: ( ',' fcnFormalParameter )*
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( (LA65_0==128) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:646:24: ',' fcnFormalParameter
                    	    {
                    	    char_literal243=(Atom)match(input,128,FOLLOW_128_in_fcnFormalParameters3945); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal243);


                    	    pushFollow(FOLLOW_fcnFormalParameter_in_fcnFormalParameters3947);
                    	    fcnFormalParameter244=fcnFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fcnFormalParameter.add(fcnFormalParameter244.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: fcnFormalParameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 647:3: -> ^( LIST[\"LIST\"] ( fcnFormalParameter )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:647:6: ^( LIST[\"LIST\"] ( fcnFormalParameter )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_fcnFormalParameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_fcnFormalParameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_fcnFormalParameter.nextTree());

                        }
                        stream_fcnFormalParameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:648:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 648:4: -> ^( LIST[\"LIST\"] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:648:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, fcnFormalParameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnFormalParameters"


    public static class fcnFormalParameter_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnFormalParameter"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:1: fcnFormalParameter : typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName ^( IDENT ( expr )? ) ) ;
    public final pollenParser.fcnFormalParameter_return fcnFormalParameter() throws RecognitionException {
        pollenParser.fcnFormalParameter_return retval = new pollenParser.fcnFormalParameter_return();
        retval.start = input.LT(1);

        int fcnFormalParameter_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT246=null;
        Atom char_literal247=null;
        pollenParser.typeName_return typeName245 =null;

        pollenParser.expr_return expr248 =null;


        BaseNode IDENT246_tree=null;
        BaseNode char_literal247_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:651:2: ( typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName ^( IDENT ( expr )? ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:651:6: typeName IDENT ( '=' expr )?
            {
            pushFollow(FOLLOW_typeName_in_fcnFormalParameter3990);
            typeName245=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName245.getTree());

            IDENT246=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fcnFormalParameter3992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT246);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:651:21: ( '=' expr )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==ASSIGN) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:651:23: '=' expr
                    {
                    char_literal247=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_fcnFormalParameter3996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal247);


                    pushFollow(FOLLOW_expr_in_fcnFormalParameter3998);
                    expr248=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr248.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expr, IDENT, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 652:3: -> ^( D_FORMAL[\"D_FORMAL\"] typeName ^( IDENT ( expr )? ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:652:6: ^( D_FORMAL[\"D_FORMAL\"] typeName ^( IDENT ( expr )? ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:652:55: ^( IDENT ( expr )? )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                stream_IDENT.nextNode()
                , root_2);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:652:63: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_2, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, fcnFormalParameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnFormalParameter"


    public static class fcnArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArgumentList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:654:1: fcnArgumentList : '(' fcnArguments ')' -> fcnArguments ;
    public final pollenParser.fcnArgumentList_return fcnArgumentList() throws RecognitionException {
        pollenParser.fcnArgumentList_return retval = new pollenParser.fcnArgumentList_return();
        retval.start = input.LT(1);

        int fcnArgumentList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal249=null;
        Atom char_literal251=null;
        pollenParser.fcnArguments_return fcnArguments250 =null;


        BaseNode char_literal249_tree=null;
        BaseNode char_literal251_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_fcnArguments=new RewriteRuleSubtreeStream(adaptor,"rule fcnArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:655:2: ( '(' fcnArguments ')' -> fcnArguments )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:655:4: '(' fcnArguments ')'
            {
            char_literal249=(Atom)match(input,125,FOLLOW_125_in_fcnArgumentList4035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal249);


            pushFollow(FOLLOW_fcnArguments_in_fcnArgumentList4037);
            fcnArguments250=fcnArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArguments.add(fcnArguments250.getTree());

            char_literal251=(Atom)match(input,126,FOLLOW_126_in_fcnArgumentList4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal251);


            // AST REWRITE
            // elements: fcnArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 655:25: -> fcnArguments
            {
                adaptor.addChild(root_0, stream_fcnArguments.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, fcnArgumentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArgumentList"


    public static class fcnArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArguments"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:657:1: fcnArguments : exprList ;
    public final pollenParser.fcnArguments_return fcnArguments() throws RecognitionException {
        pollenParser.fcnArguments_return retval = new pollenParser.fcnArguments_return();
        retval.start = input.LT(1);

        int fcnArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprList_return exprList252 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:658:2: ( exprList )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:658:4: exprList
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprList_in_fcnArguments4054);
            exprList252=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprList252.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, fcnArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArguments"


    public static class varOrFcnOrArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrFcnOrArray"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:660:1: varOrFcnOrArray : ( 'new' typeName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? ) | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) );
    public final pollenParser.varOrFcnOrArray_return varOrFcnOrArray() throws RecognitionException {
        pollenParser.varOrFcnOrArray_return retval = new pollenParser.varOrFcnOrArray_return();
        retval.start = input.LT(1);

        int varOrFcnOrArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal253=null;
        Atom char_literal257=null;
        Atom IDENT258=null;
        Atom char_literal261=null;
        Atom IDENT262=null;
        Atom char_literal264=null;
        pollenParser.typeName_return typeName254 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList255 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess256 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList259 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess260 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess263 =null;

        pollenParser.qualName_return qualName265 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList266 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess267 =null;

        pollenParser.qualName_return qualName268 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess269 =null;


        BaseNode string_literal253_tree=null;
        BaseNode char_literal257_tree=null;
        BaseNode IDENT258_tree=null;
        BaseNode char_literal261_tree=null;
        BaseNode IDENT262_tree=null;
        BaseNode char_literal264_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:2: ( 'new' typeName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? ) | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) )
            int alt73=6;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt73=1;
                }
                break;
            case 137:
                {
                int LA73_2 = input.LA(2);

                if ( (synpred116_pollen()) ) {
                    alt73=2;
                }
                else if ( (synpred118_pollen()) ) {
                    alt73=3;
                }
                else if ( (synpred119_pollen()) ) {
                    alt73=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA73_6 = input.LA(2);

                if ( (synpred121_pollen()) ) {
                    alt73=5;
                }
                else if ( (true) ) {
                    alt73=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:4: 'new' typeName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    string_literal253=(Atom)match(input,172,FOLLOW_172_in_varOrFcnOrArray4064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal253);


                    pushFollow(FOLLOW_typeName_in_varOrFcnOrArray4066);
                    typeName254=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName254.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray4068);
                    fcnArgumentList255=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList255.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:35: ( fieldOrArrayAccess )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==138) ) {
                        int LA68_1 = input.LA(2);

                        if ( (synpred113_pollen()) ) {
                            alt68=1;
                        }
                    }
                    else if ( (LA68_0==129) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:35: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4070);
                            fieldOrArrayAccess256=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess256.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: typeName, fcnArgumentList, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 662:3: -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:6: ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:62: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:4: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    char_literal257=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray4097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal257);


                    IDENT258=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray4099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT258);


                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray4101);
                    fcnArgumentList259=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList259.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:30: ( fieldOrArrayAccess )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==138) ) {
                        int LA69_1 = input.LA(2);

                        if ( (synpred115_pollen()) ) {
                            alt69=1;
                        }
                    }
                    else if ( (LA69_0==129) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:30: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4103);
                            fieldOrArrayAccess260=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess260.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, IDENT, fcnArgumentList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 664:3: -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:664:6: ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:665:4: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:665:38: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_3);

                        adaptor.addChild(root_3, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:665:98: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:4: '@' IDENT ( fieldOrArrayAccess )?
                    {
                    char_literal261=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray4155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal261);


                    IDENT262=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray4157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT262);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:14: ( fieldOrArrayAccess )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==138) ) {
                        int LA70_1 = input.LA(2);

                        if ( (synpred117_pollen()) ) {
                            alt70=1;
                        }
                    }
                    else if ( (LA70_0==129) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:14: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4159);
                            fieldOrArrayAccess263=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess263.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 667:3: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:6: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:40: ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:83: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:668:4: '@'
                    {
                    char_literal264=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray4198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal264);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 669:3: -> ^( E_SELF[\"E_SELF\"] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:6: ^( E_SELF[\"E_SELF\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:4: qualName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray4218);
                    qualName265=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName265.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray4220);
                    fcnArgumentList266=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList266.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:29: ( fieldOrArrayAccess )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==138) ) {
                        int LA71_1 = input.LA(2);

                        if ( (synpred120_pollen()) ) {
                            alt71=1;
                        }
                    }
                    else if ( (LA71_0==129) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:29: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4222);
                            fieldOrArrayAccess267=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess267.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: qualName, fieldOrArrayAccess, fcnArgumentList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 671:3: -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:6: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:40: ^( E_IDENT[\"E_IDENT\"] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:103: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:4: qualName ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray4260);
                    qualName268=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName268.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:13: ( fieldOrArrayAccess )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==138) ) {
                        int LA72_1 = input.LA(2);

                        if ( (synpred122_pollen()) ) {
                            alt72=1;
                        }
                    }
                    else if ( (LA72_0==129) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:13: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4262);
                            fieldOrArrayAccess269=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess269.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 672:33: -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:36: ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:82: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, varOrFcnOrArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varOrFcnOrArray"


    public static class fieldOrArrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldOrArrayAccess"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:674:1: fieldOrArrayAccess : ( fieldAccess | arrayAccess )+ ;
    public final pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess() throws RecognitionException {
        pollenParser.fieldOrArrayAccess_return retval = new pollenParser.fieldOrArrayAccess_return();
        retval.start = input.LT(1);

        int fieldOrArrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fieldAccess_return fieldAccess270 =null;

        pollenParser.arrayAccess_return arrayAccess271 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:2: ( ( fieldAccess | arrayAccess )+ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:5: ( fieldAccess | arrayAccess )+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:5: ( fieldAccess | arrayAccess )+
            int cnt74=0;
            loop74:
            do {
                int alt74=3;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==129) ) {
                    alt74=1;
                }
                else if ( (LA74_0==138) ) {
                    int LA74_2 = input.LA(2);

                    if ( (synpred124_pollen()) ) {
                        alt74=2;
                    }


                }


                switch (alt74) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:6: fieldAccess
            	    {
            	    pushFollow(FOLLOW_fieldAccess_in_fieldOrArrayAccess4292);
            	    fieldAccess270=fieldAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldAccess270.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:20: arrayAccess
            	    {
            	    pushFollow(FOLLOW_arrayAccess_in_fieldOrArrayAccess4296);
            	    arrayAccess271=arrayAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess271.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, fieldOrArrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldOrArrayAccess"


    public static class fieldAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldAccess"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:677:1: fieldAccess : ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) );
    public final pollenParser.fieldAccess_return fieldAccess() throws RecognitionException {
        pollenParser.fieldAccess_return retval = new pollenParser.fieldAccess_return();
        retval.start = input.LT(1);

        int fieldAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal272=null;
        Atom IDENT273=null;
        Atom char_literal275=null;
        Atom IDENT276=null;
        pollenParser.fcnArgumentList_return fcnArgumentList274 =null;


        BaseNode char_literal272_tree=null;
        BaseNode IDENT273_tree=null;
        BaseNode char_literal275_tree=null;
        BaseNode IDENT276_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:2: ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==129) ) {
                int LA75_1 = input.LA(2);

                if ( (synpred125_pollen()) ) {
                    alt75=1;
                }
                else if ( (true) ) {
                    alt75=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:4: '.' IDENT fcnArgumentList
                    {
                    char_literal272=(Atom)match(input,129,FOLLOW_129_in_fieldAccess4310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal272);


                    IDENT273=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess4312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT273);


                    pushFollow(FOLLOW_fcnArgumentList_in_fieldAccess4314);
                    fcnArgumentList274=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList274.getTree());

                    // AST REWRITE
                    // elements: fcnArgumentList, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 680:30: -> ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:33: ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:681:4: '.' IDENT
                    {
                    char_literal275=(Atom)match(input,129,FOLLOW_129_in_fieldAccess4336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal275);


                    IDENT276=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess4338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT276);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 681:15: -> ^( E_IDENT[\"E_IDENT\", true] IDENT )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:681:18: ^( E_IDENT[\"E_IDENT\", true] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, fieldAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldAccess"


    public static class arrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayAccess"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:683:1: arrayAccess : '[' ( exprList )? ']' -> ^( E_INDEX ( exprList )? ) ;
    public final pollenParser.arrayAccess_return arrayAccess() throws RecognitionException {
        pollenParser.arrayAccess_return retval = new pollenParser.arrayAccess_return();
        retval.start = input.LT(1);

        int arrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal277=null;
        Atom char_literal279=null;
        pollenParser.exprList_return exprList278 =null;


        BaseNode char_literal277_tree=null;
        BaseNode char_literal279_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:2: ( '[' ( exprList )? ']' -> ^( E_INDEX ( exprList )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:4: '[' ( exprList )? ']'
            {
            char_literal277=(Atom)match(input,138,FOLLOW_138_in_arrayAccess4363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(char_literal277);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:8: ( exprList )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==139) ) {
                int LA76_1 = input.LA(2);

                if ( (synpred126_pollen()) ) {
                    alt76=1;
                }
            }
            else if ( ((LA76_0 >= BIT_NOT && LA76_0 <= CHAR)||LA76_0==DEC||LA76_0==HEX_LIT||LA76_0==IDENT||(LA76_0 >= INC && LA76_0 <= INT_LIT)||LA76_0==LOG_NOT||LA76_0==MINUS||LA76_0==NL||LA76_0==OCT_LIT||LA76_0==REAL_LIT||LA76_0==SEMI||LA76_0==STRING||(LA76_0 >= 125 && LA76_0 <= 126)||LA76_0==128||(LA76_0 >= 137 && LA76_0 <= 138)||(LA76_0 >= 142 && LA76_0 <= 152)||LA76_0==155||LA76_0==157||(LA76_0 >= 159 && LA76_0 <= 163)||(LA76_0 >= 165 && LA76_0 <= 168)||(LA76_0 >= 170 && LA76_0 <= 173)||(LA76_0 >= 176 && LA76_0 <= 183)||(LA76_0 >= 185 && LA76_0 <= 190)||LA76_0==193) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:9: exprList
                    {
                    pushFollow(FOLLOW_exprList_in_arrayAccess4366);
                    exprList278=exprList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprList.add(exprList278.getTree());

                    }
                    break;

            }


            char_literal279=(Atom)match(input,139,FOLLOW_139_in_arrayAccess4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(char_literal279);


            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 684:24: -> ^( E_INDEX ( exprList )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:27: ^( E_INDEX ( exprList )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(E_INDEX, "E_INDEX")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:37: ( exprList )?
                if ( stream_exprList.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprList.nextTree());

                }
                stream_exprList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, arrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayAccess"


    public static class stmtBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBlock"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:688:1: stmtBlock : braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) ;
    public final pollenParser.stmtBlock_return stmtBlock() throws RecognitionException {
        pollenParser.stmtBlock_return retval = new pollenParser.stmtBlock_return();
        retval.start = input.LT(1);

        int stmtBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen280 =null;

        pollenParser.stmts_return stmts281 =null;

        pollenParser.braceClose_return braceClose282 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:689:2: ( braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:689:4: braceOpen stmts braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_stmtBlock4393);
            braceOpen280=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen280.getTree());

            pushFollow(FOLLOW_stmts_in_stmtBlock4395);
            stmts281=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts281.getTree());

            pushFollow(FOLLOW_braceClose_in_stmtBlock4397);
            braceClose282=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose282.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 689:32: -> ^( S_BLOCK[\"S_BLOCK\"] stmts )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:689:35: ^( S_BLOCK[\"S_BLOCK\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Block(S_BLOCK, "S_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, stmtBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBlock"


    public static class stmts_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmts"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:691:1: stmts : ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | ( ( NL )* ) -> LIST[\"LIST\"] );
    public final pollenParser.stmts_return stmts() throws RecognitionException {
        pollenParser.stmts_return retval = new pollenParser.stmts_return();
        retval.start = input.LT(1);

        int stmts_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL284=null;
        pollenParser.stmt_return stmt283 =null;


        BaseNode NL284_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:2: ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | ( ( NL )* ) -> LIST[\"LIST\"] )
            int alt79=2;
            switch ( input.LA(1) ) {
            case NL:
                {
                int LA79_1 = input.LA(2);

                if ( (synpred128_pollen()) ) {
                    alt79=1;
                }
                else if ( (true) ) {
                    alt79=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 1, input);

                    throw nvae;

                }
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case IDENT:
            case INC:
            case INJECT:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 125:
            case 137:
            case 138:
            case 142:
            case 143:
            case 144:
            case 145:
            case 149:
            case 150:
            case 152:
            case 159:
            case 160:
            case 162:
            case 163:
            case 166:
            case 167:
            case 168:
            case 172:
            case 173:
            case 176:
            case 178:
            case 180:
            case 181:
            case 182:
            case 183:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
                {
                alt79=1;
                }
                break;
            case 146:
            case 151:
            case 193:
                {
                alt79=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:4: ( stmt )+
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:4: ( stmt )+
                    int cnt77=0;
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==NL) ) {
                            int LA77_1 = input.LA(2);

                            if ( (synpred127_pollen()) ) {
                                alt77=1;
                            }


                        }
                        else if ( ((LA77_0 >= BIT_NOT && LA77_0 <= CHAR)||LA77_0==DEC||LA77_0==HEX_LIT||LA77_0==IDENT||(LA77_0 >= INC && LA77_0 <= INT_LIT)||LA77_0==LOG_NOT||LA77_0==MINUS||LA77_0==OCT_LIT||LA77_0==REAL_LIT||LA77_0==STRING||LA77_0==125||(LA77_0 >= 137 && LA77_0 <= 138)||(LA77_0 >= 142 && LA77_0 <= 145)||(LA77_0 >= 149 && LA77_0 <= 150)||LA77_0==152||(LA77_0 >= 159 && LA77_0 <= 160)||(LA77_0 >= 162 && LA77_0 <= 163)||(LA77_0 >= 166 && LA77_0 <= 168)||(LA77_0 >= 172 && LA77_0 <= 173)||LA77_0==176||LA77_0==178||(LA77_0 >= 180 && LA77_0 <= 183)||(LA77_0 >= 185 && LA77_0 <= 190)) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:5: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_stmts4423);
                    	    stmt283=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmt.add(stmt283.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt77 >= 1 ) break loop77;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(77, input);
                                throw eee;
                        }
                        cnt77++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 692:12: -> ^( LIST[\"LIST\"] ( stmt )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:15: ^( LIST[\"LIST\"] ( stmt )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmt.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt.nextTree());

                        }
                        stream_stmt.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:4: ( ( NL )* )
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:4: ( ( NL )* )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:5: ( NL )*
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:5: ( NL )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==NL) ) {
                            int LA78_1 = input.LA(2);

                            if ( (synpred129_pollen()) ) {
                                alt78=1;
                            }


                        }


                        switch (alt78) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:5: NL
                    	    {
                    	    NL284=(Atom)match(input,NL,FOLLOW_NL_in_stmts4445); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL284);


                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 693:10: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, stmts_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmts"


    public static class stmt_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:695:1: stmt : ( stmtDecl | stmtAssign | stmtAssert | stmtBind | stmtBlock | stmtPrint | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) );
    public final pollenParser.stmt_return stmt() throws RecognitionException {
        pollenParser.stmt_return retval = new pollenParser.stmt_return();
        retval.start = input.LT(1);

        int stmt_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtDecl_return stmtDecl285 =null;

        pollenParser.stmtAssign_return stmtAssign286 =null;

        pollenParser.stmtAssert_return stmtAssert287 =null;

        pollenParser.stmtBind_return stmtBind288 =null;

        pollenParser.stmtBlock_return stmtBlock289 =null;

        pollenParser.stmtPrint_return stmtPrint290 =null;

        pollenParser.stmtReturn_return stmtReturn291 =null;

        pollenParser.stmtBreak_return stmtBreak292 =null;

        pollenParser.stmtContinue_return stmtContinue293 =null;

        pollenParser.stmtFor_return stmtFor294 =null;

        pollenParser.stmtSwitch_return stmtSwitch295 =null;

        pollenParser.stmtDoWhile_return stmtDoWhile296 =null;

        pollenParser.stmtIf_return stmtIf297 =null;

        pollenParser.stmtProvided_return stmtProvided298 =null;

        pollenParser.stmtWhile_return stmtWhile299 =null;

        pollenParser.stmtInjection_return stmtInjection300 =null;

        pollenParser.expr_return expr301 =null;

        pollenParser.delim_return delim302 =null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:2: ( stmtDecl | stmtAssign | stmtAssert | stmtBind | stmtBlock | stmtPrint | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) )
            int alt80=17;
            switch ( input.LA(1) ) {
            case IDENT:
            case 172:
                {
                int LA80_1 = input.LA(2);

                if ( (synpred130_pollen()) ) {
                    alt80=1;
                }
                else if ( (synpred131_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred133_pollen()) ) {
                    alt80=4;
                }
                else if ( (true) ) {
                    alt80=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 149:
            case 162:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
            case 188:
                {
                alt80=1;
                }
                break;
            case 137:
                {
                int LA80_7 = input.LA(2);

                if ( (synpred131_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred133_pollen()) ) {
                    alt80=4;
                }
                else if ( (true) ) {
                    alt80=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 7, input);

                    throw nvae;

                }
                }
                break;
            case 142:
                {
                alt80=3;
                }
                break;
            case INJECT:
                {
                int LA80_9 = input.LA(2);

                if ( (synpred131_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred145_pollen()) ) {
                    alt80=16;
                }
                else if ( (true) ) {
                    alt80=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 9, input);

                    throw nvae;

                }
                }
                break;
            case NL:
            case 190:
                {
                alt80=5;
                }
                break;
            case 176:
                {
                alt80=6;
                }
                break;
            case 180:
                {
                alt80=7;
                }
                break;
            case 144:
                {
                alt80=8;
                }
                break;
            case 150:
                {
                alt80=9;
                }
                break;
            case 160:
                {
                alt80=10;
                }
                break;
            case 182:
                {
                alt80=11;
                }
                break;
            case 152:
                {
                alt80=12;
                }
                break;
            case 163:
                {
                alt80=13;
                }
                break;
            case 178:
                {
                alt80=14;
                }
                break;
            case 189:
                {
                alt80=15;
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case INC:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 125:
            case 138:
            case 159:
            case 173:
            case 183:
                {
                alt80=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }

            switch (alt80) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:5: stmtDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDecl_in_stmt4466);
                    stmtDecl285=stmtDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDecl285.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:5: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmt4472);
                    stmtAssign286=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign286.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:698:4: stmtAssert
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssert_in_stmt4477);
                    stmtAssert287=stmtAssert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssert287.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:699:4: stmtBind
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBind_in_stmt4482);
                    stmtBind288=stmtBind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBind288.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:700:4: stmtBlock
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBlock_in_stmt4487);
                    stmtBlock289=stmtBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBlock289.getTree());

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:701:4: stmtPrint
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPrint_in_stmt4492);
                    stmtPrint290=stmtPrint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPrint290.getTree());

                    }
                    break;
                case 7 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:702:4: stmtReturn
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtReturn_in_stmt4497);
                    stmtReturn291=stmtReturn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtReturn291.getTree());

                    }
                    break;
                case 8 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:703:4: stmtBreak
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBreak_in_stmt4502);
                    stmtBreak292=stmtBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBreak292.getTree());

                    }
                    break;
                case 9 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:704:5: stmtContinue
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtContinue_in_stmt4508);
                    stmtContinue293=stmtContinue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtContinue293.getTree());

                    }
                    break;
                case 10 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:705:5: stmtFor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtFor_in_stmt4514);
                    stmtFor294=stmtFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtFor294.getTree());

                    }
                    break;
                case 11 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:706:4: stmtSwitch
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtSwitch_in_stmt4519);
                    stmtSwitch295=stmtSwitch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtSwitch295.getTree());

                    }
                    break;
                case 12 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:5: stmtDoWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDoWhile_in_stmt4525);
                    stmtDoWhile296=stmtDoWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDoWhile296.getTree());

                    }
                    break;
                case 13 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:708:4: stmtIf
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtIf_in_stmt4530);
                    stmtIf297=stmtIf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtIf297.getTree());

                    }
                    break;
                case 14 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:709:4: stmtProvided
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtProvided_in_stmt4535);
                    stmtProvided298=stmtProvided();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtProvided298.getTree());

                    }
                    break;
                case 15 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:710:4: stmtWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtWhile_in_stmt4540);
                    stmtWhile299=stmtWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtWhile299.getTree());

                    }
                    break;
                case 16 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:4: stmtInjection
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtInjection_in_stmt4546);
                    stmtInjection300=stmtInjection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjection300.getTree());

                    }
                    break;
                case 17 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:712:4: expr delim
                    {
                    pushFollow(FOLLOW_expr_in_stmt4551);
                    expr301=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr301.getTree());

                    pushFollow(FOLLOW_delim_in_stmt4553);
                    delim302=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim302.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 712:15: -> ^( S_EXPR[\"S_EXPR\"] expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:712:18: ^( S_EXPR[\"S_EXPR\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Expr(S_EXPR, "S_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, stmt_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class stmtAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssign"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:714:1: stmtAssign : ( varOrFcnOrArray ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) );
    public final pollenParser.stmtAssign_return stmtAssign() throws RecognitionException {
        pollenParser.stmtAssign_return retval = new pollenParser.stmtAssign_return();
        retval.start = input.LT(1);

        int stmtAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom ASSIGN304=null;
        Atom ASSIGN308=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray303 =null;

        pollenParser.expr_return expr305 =null;

        pollenParser.delim_return delim306 =null;

        pollenParser.injectionCode_return injectionCode307 =null;

        pollenParser.expr_return expr309 =null;

        pollenParser.delim_return delim310 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray311 =null;

        pollenParser.assignOp_return assignOp312 =null;

        pollenParser.expr_return expr313 =null;

        pollenParser.delim_return delim314 =null;

        pollenParser.injectionCode_return injectionCode315 =null;

        pollenParser.assignOp_return assignOp316 =null;

        pollenParser.expr_return expr317 =null;

        pollenParser.delim_return delim318 =null;


        BaseNode ASSIGN304_tree=null;
        BaseNode ASSIGN308_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_injectionCode=new RewriteRuleSubtreeStream(adaptor,"rule injectionCode");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:715:2: ( varOrFcnOrArray ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) )
            int alt81=4;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==IDENT||LA81_0==137||LA81_0==172) ) {
                int LA81_1 = input.LA(2);

                if ( (synpred146_pollen()) ) {
                    alt81=1;
                }
                else if ( (synpred148_pollen()) ) {
                    alt81=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA81_0==INJECT) ) {
                int LA81_4 = input.LA(2);

                if ( (synpred147_pollen()) ) {
                    alt81=2;
                }
                else if ( (true) ) {
                    alt81=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 4, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:715:4: varOrFcnOrArray ASSIGN expr delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign4577);
                    varOrFcnOrArray303=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray303.getTree());

                    ASSIGN304=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign4579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN304);


                    pushFollow(FOLLOW_expr_in_stmtAssign4581);
                    expr305=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr305.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4583);
                    delim306=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim306.getTree());

                    // AST REWRITE
                    // elements: ASSIGN, expr, varOrFcnOrArray
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 716:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:46: ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:4: injectionCode ASSIGN expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign4618);
                    injectionCode307=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode307.getTree());

                    ASSIGN308=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign4620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN308);


                    pushFollow(FOLLOW_expr_in_stmtAssign4622);
                    expr309=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr309.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4625);
                    delim310=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim310.getTree());

                    // AST REWRITE
                    // elements: expr, ASSIGN, injectionCode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 718:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:718:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:718:46: ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:719:4: varOrFcnOrArray assignOp expr delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign4660);
                    varOrFcnOrArray311=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray311.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign4662);
                    assignOp312=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp312.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign4664);
                    expr313=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr313.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4667);
                    delim314=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim314.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, expr, assignOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 720:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:720:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:720:46: ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:721:4: injectionCode assignOp expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign4702);
                    injectionCode315=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode315.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign4704);
                    assignOp316=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp316.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign4706);
                    expr317=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr317.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4708);
                    delim318=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim318.getTree());

                    // AST REWRITE
                    // elements: injectionCode, assignOp, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 722:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:722:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:722:46: ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, stmtAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtAssign"


    public static class stmtAssert_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssert"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:1: stmtAssert : 'assert' exprList delim -> ^( S_ASSERT exprList ) ;
    public final pollenParser.stmtAssert_return stmtAssert() throws RecognitionException {
        pollenParser.stmtAssert_return retval = new pollenParser.stmtAssert_return();
        retval.start = input.LT(1);

        int stmtAssert_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal319=null;
        pollenParser.exprList_return exprList320 =null;

        pollenParser.delim_return delim321 =null;


        BaseNode string_literal319_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:725:2: ( 'assert' exprList delim -> ^( S_ASSERT exprList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:725:4: 'assert' exprList delim
            {
            string_literal319=(Atom)match(input,142,FOLLOW_142_in_stmtAssert4748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal319);


            pushFollow(FOLLOW_exprList_in_stmtAssert4750);
            exprList320=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprList.add(exprList320.getTree());

            pushFollow(FOLLOW_delim_in_stmtAssert4752);
            delim321=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim321.getTree());

            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 725:28: -> ^( S_ASSERT exprList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:725:31: ^( S_ASSERT exprList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(S_ASSERT, "S_ASSERT")
                , root_1);

                adaptor.addChild(root_1, stream_exprList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, stmtAssert_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtAssert"


    public static class stmtBind_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBind"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:727:1: stmtBind : varOrFcnOrArray BIND expr delim -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr ) ;
    public final pollenParser.stmtBind_return stmtBind() throws RecognitionException {
        pollenParser.stmtBind_return retval = new pollenParser.stmtBind_return();
        retval.start = input.LT(1);

        int stmtBind_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIND323=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray322 =null;

        pollenParser.expr_return expr324 =null;

        pollenParser.delim_return delim325 =null;


        BaseNode BIND323_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:728:2: ( varOrFcnOrArray BIND expr delim -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:728:4: varOrFcnOrArray BIND expr delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtBind4770);
            varOrFcnOrArray322=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray322.getTree());

            BIND323=(Atom)match(input,BIND,FOLLOW_BIND_in_stmtBind4772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND323);


            pushFollow(FOLLOW_expr_in_stmtBind4775);
            expr324=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr324.getTree());

            pushFollow(FOLLOW_delim_in_stmtBind4778);
            delim325=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim325.getTree());

            // AST REWRITE
            // elements: varOrFcnOrArray, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 728:38: -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:728:41: ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Bind(S_BIND, "S_BIND")
                , root_1);

                adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, stmtBind_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBind"


    public static class stmtPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrint"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:730:1: stmtPrint : 'print' ( stmtPrintTarget[flags] )? exprList -> ^( S_PRINT[\"S_PRINT\", flags] exprList ) ;
    public final pollenParser.stmtPrint_return stmtPrint() throws RecognitionException {
        pollenParser.stmtPrint_return retval = new pollenParser.stmtPrint_return();
        retval.start = input.LT(1);

        int stmtPrint_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal326=null;
        pollenParser.stmtPrintTarget_return stmtPrintTarget327 =null;

        pollenParser.exprList_return exprList328 =null;


        BaseNode string_literal326_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleSubtreeStream stream_stmtPrintTarget=new RewriteRuleSubtreeStream(adaptor,"rule stmtPrintTarget");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");

        	EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:2: ( 'print' ( stmtPrintTarget[flags] )? exprList -> ^( S_PRINT[\"S_PRINT\", flags] exprList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:4: 'print' ( stmtPrintTarget[flags] )? exprList
            {
            string_literal326=(Atom)match(input,176,FOLLOW_176_in_stmtPrint4811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal326);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:12: ( stmtPrintTarget[flags] )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==156||LA82_0==169||LA82_0==174) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:13: stmtPrintTarget[flags]
                    {
                    pushFollow(FOLLOW_stmtPrintTarget_in_stmtPrint4814);
                    stmtPrintTarget327=stmtPrintTarget(flags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtPrintTarget.add(stmtPrintTarget327.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_exprList_in_stmtPrint4819);
            exprList328=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprList.add(exprList328.getTree());

            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 735:3: -> ^( S_PRINT[\"S_PRINT\", flags] exprList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:735:6: ^( S_PRINT[\"S_PRINT\", flags] exprList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                , root_1);

                adaptor.addChild(root_1, stream_exprList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, stmtPrint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrint"


    public static class stmtPrintTarget_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrintTarget"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:737:1: stmtPrintTarget[EnumSet<Flags> f] : ( 'log' | 'err' | 'out' ) ;
    public final pollenParser.stmtPrintTarget_return stmtPrintTarget(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.stmtPrintTarget_return retval = new pollenParser.stmtPrintTarget_return();
        retval.start = input.LT(1);

        int stmtPrintTarget_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal329=null;
        Atom string_literal330=null;
        Atom string_literal331=null;

        BaseNode string_literal329_tree=null;
        BaseNode string_literal330_tree=null;
        BaseNode string_literal331_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:738:2: ( ( 'log' | 'err' | 'out' ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:739:3: ( 'log' | 'err' | 'out' )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:739:3: ( 'log' | 'err' | 'out' )
            int alt83=3;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt83=1;
                }
                break;
            case 156:
                {
                alt83=2;
                }
                break;
            case 174:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }

            switch (alt83) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:739:7: 'log'
                    {
                    string_literal329=(Atom)match(input,169,FOLLOW_169_in_stmtPrintTarget4854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal329_tree = 
                    (BaseNode)adaptor.create(string_literal329)
                    ;
                    adaptor.addChild(root_0, string_literal329_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.LOG); }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:740:6: 'err'
                    {
                    string_literal330=(Atom)match(input,156,FOLLOW_156_in_stmtPrintTarget4864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal330_tree = 
                    (BaseNode)adaptor.create(string_literal330)
                    ;
                    adaptor.addChild(root_0, string_literal330_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.ERR); }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:741:6: 'out'
                    {
                    string_literal331=(Atom)match(input,174,FOLLOW_174_in_stmtPrintTarget4873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal331_tree = 
                    (BaseNode)adaptor.create(string_literal331)
                    ;
                    adaptor.addChild(root_0, string_literal331_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.OUT); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, stmtPrintTarget_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrintTarget"


    public static class stmtReturn_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtReturn"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:744:1: stmtReturn : ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] ( expr )+ ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] expr ) ) );
    public final pollenParser.stmtReturn_return stmtReturn() throws RecognitionException {
        pollenParser.stmtReturn_return retval = new pollenParser.stmtReturn_return();
        retval.start = input.LT(1);

        int stmtReturn_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal332=null;
        Atom char_literal333=null;
        Atom char_literal335=null;
        Atom char_literal337=null;
        Atom string_literal339=null;
        pollenParser.expr_return expr334 =null;

        pollenParser.expr_return expr336 =null;

        pollenParser.delim_return delim338 =null;

        pollenParser.expr_return expr340 =null;

        pollenParser.delim_return delim341 =null;


        BaseNode string_literal332_tree=null;
        BaseNode char_literal333_tree=null;
        BaseNode char_literal335_tree=null;
        BaseNode char_literal337_tree=null;
        BaseNode string_literal339_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:2: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] ( expr )+ ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] expr ) ) )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==180) ) {
                int LA85_1 = input.LA(2);

                if ( (synpred153_pollen()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:4: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
                    {
                    string_literal332=(Atom)match(input,180,FOLLOW_180_in_stmtReturn4892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal332);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:13: ( '(' )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:14: '('
                    {
                    char_literal333=(Atom)match(input,125,FOLLOW_125_in_stmtReturn4895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(char_literal333);


                    }


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:19: ( expr ( ',' expr )+ )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:20: expr ( ',' expr )+
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn4899);
                    expr334=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr334.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:25: ( ',' expr )+
                    int cnt84=0;
                    loop84:
                    do {
                        int alt84=2;
                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==128) ) {
                            alt84=1;
                        }


                        switch (alt84) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:26: ',' expr
                    	    {
                    	    char_literal335=(Atom)match(input,128,FOLLOW_128_in_stmtReturn4902); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal335);


                    	    pushFollow(FOLLOW_expr_in_stmtReturn4904);
                    	    expr336=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr336.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt84 >= 1 ) break loop84;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(84, input);
                                throw eee;
                        }
                        cnt84++;
                    } while (true);


                    }


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:38: ( ')' )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:39: ')'
                    {
                    char_literal337=(Atom)match(input,126,FOLLOW_126_in_stmtReturn4910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal337);


                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn4913);
                    delim338=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim338.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 747:50: -> ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] ( expr )+ ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:53: ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] ( expr )+ ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(S_RETURN, "S_RETURN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:90: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_2, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:4: 'return' ( expr ) delim
                    {
                    string_literal339=(Atom)match(input,180,FOLLOW_180_in_stmtReturn4941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal339);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:14: ( expr )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:15: expr
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn4945);
                    expr340=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr340.getTree());

                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn4949);
                    delim341=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim341.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 748:28: -> ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:31: ^( S_RETURN[\"S_RETURN\"] ^( LIST[\"LIST\"] expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(S_RETURN, "S_RETURN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:68: ^( LIST[\"LIST\"] expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, stmtReturn_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtReturn"


    public static class stmtBreak_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBreak"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:1: stmtBreak : 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) ;
    public final pollenParser.stmtBreak_return stmtBreak() throws RecognitionException {
        pollenParser.stmtBreak_return retval = new pollenParser.stmtBreak_return();
        retval.start = input.LT(1);

        int stmtBreak_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal342=null;
        pollenParser.delim_return delim343 =null;


        BaseNode string_literal342_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:751:2: ( 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:751:4: 'break' delim
            {
            string_literal342=(Atom)match(input,144,FOLLOW_144_in_stmtBreak4981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal342);


            pushFollow(FOLLOW_delim_in_stmtBreak4983);
            delim343=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim343.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 751:18: -> ^( S_BREAK[\"S_BREAK\"] )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:751:21: ^( S_BREAK[\"S_BREAK\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Break(S_BREAK, "S_BREAK")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, stmtBreak_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBreak"


    public static class stmtContinue_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtContinue"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:753:1: stmtContinue : 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) ;
    public final pollenParser.stmtContinue_return stmtContinue() throws RecognitionException {
        pollenParser.stmtContinue_return retval = new pollenParser.stmtContinue_return();
        retval.start = input.LT(1);

        int stmtContinue_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal344=null;
        pollenParser.delim_return delim345 =null;


        BaseNode string_literal344_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:754:2: ( 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:754:4: 'continue' delim
            {
            string_literal344=(Atom)match(input,150,FOLLOW_150_in_stmtContinue5005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal344);


            pushFollow(FOLLOW_delim_in_stmtContinue5007);
            delim345=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim345.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 754:21: -> ^( S_CONTINUE[\"S_CONTINUE\"] )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:754:24: ^( S_CONTINUE[\"S_CONTINUE\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Continue(S_CONTINUE, "S_CONTINUE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, stmtContinue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtContinue"


    public static class stmtFor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtFor"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:756:1: stmtFor : 'for' '(' stmtForInit stmtForCond stmtForNext ')' stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock ) ;
    public final pollenParser.stmtFor_return stmtFor() throws RecognitionException {
        pollenParser.stmtFor_return retval = new pollenParser.stmtFor_return();
        retval.start = input.LT(1);

        int stmtFor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal346=null;
        Atom char_literal347=null;
        Atom char_literal351=null;
        pollenParser.stmtForInit_return stmtForInit348 =null;

        pollenParser.stmtForCond_return stmtForCond349 =null;

        pollenParser.stmtForNext_return stmtForNext350 =null;

        pollenParser.stmtBlock_return stmtBlock352 =null;


        BaseNode string_literal346_tree=null;
        BaseNode char_literal347_tree=null;
        BaseNode char_literal351_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_stmtForCond=new RewriteRuleSubtreeStream(adaptor,"rule stmtForCond");
        RewriteRuleSubtreeStream stream_stmtForInit=new RewriteRuleSubtreeStream(adaptor,"rule stmtForInit");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_stmtForNext=new RewriteRuleSubtreeStream(adaptor,"rule stmtForNext");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:757:5: ( 'for' '(' stmtForInit stmtForCond stmtForNext ')' stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:757:9: 'for' '(' stmtForInit stmtForCond stmtForNext ')' stmtBlock
            {
            string_literal346=(Atom)match(input,160,FOLLOW_160_in_stmtFor5034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal346);


            char_literal347=(Atom)match(input,125,FOLLOW_125_in_stmtFor5036); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal347);


            pushFollow(FOLLOW_stmtForInit_in_stmtFor5038);
            stmtForInit348=stmtForInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForInit.add(stmtForInit348.getTree());

            pushFollow(FOLLOW_stmtForCond_in_stmtFor5040);
            stmtForCond349=stmtForCond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForCond.add(stmtForCond349.getTree());

            pushFollow(FOLLOW_stmtForNext_in_stmtFor5042);
            stmtForNext350=stmtForNext();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForNext.add(stmtForNext350.getTree());

            char_literal351=(Atom)match(input,126,FOLLOW_126_in_stmtFor5044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal351);


            pushFollow(FOLLOW_stmtBlock_in_stmtFor5046);
            stmtBlock352=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock352.getTree());

            // AST REWRITE
            // elements: stmtBlock, stmtForCond, stmtForInit, stmtForNext
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 758:13: -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:758:16: ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.For(S_FOR, "S_FOR")
                , root_1);

                adaptor.addChild(root_1, stream_stmtForInit.nextTree());

                adaptor.addChild(root_1, stream_stmtForCond.nextTree());

                adaptor.addChild(root_1, stream_stmtForNext.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, stmtFor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtFor"


    public static class stmtForCond_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForCond"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:760:1: stmtForCond : ( SEMI -> NIL | expr SEMI -> expr );
    public final pollenParser.stmtForCond_return stmtForCond() throws RecognitionException {
        pollenParser.stmtForCond_return retval = new pollenParser.stmtForCond_return();
        retval.start = input.LT(1);

        int stmtForCond_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI353=null;
        Atom SEMI355=null;
        pollenParser.expr_return expr354 =null;


        BaseNode SEMI353_tree=null;
        BaseNode SEMI355_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:761:5: ( SEMI -> NIL | expr SEMI -> expr )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==SEMI) ) {
                alt86=1;
            }
            else if ( ((LA86_0 >= BIT_NOT && LA86_0 <= CHAR)||LA86_0==DEC||LA86_0==HEX_LIT||LA86_0==IDENT||(LA86_0 >= INC && LA86_0 <= INT_LIT)||LA86_0==LOG_NOT||LA86_0==MINUS||LA86_0==OCT_LIT||LA86_0==REAL_LIT||LA86_0==STRING||LA86_0==125||(LA86_0 >= 137 && LA86_0 <= 138)||LA86_0==159||(LA86_0 >= 172 && LA86_0 <= 173)||LA86_0==183) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:761:9: SEMI
                    {
                    SEMI353=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond5096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI353);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 762:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:763:9: expr SEMI
                    {
                    pushFollow(FOLLOW_expr_in_stmtForCond5121);
                    expr354=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr354.getTree());

                    SEMI355=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond5123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI355);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 763:19: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, stmtForCond_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForCond"


    public static class stmtForInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForInit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:766:1: stmtForInit : ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName ^( IDENT expr ) ) ) | stmtAssign );
    public final pollenParser.stmtForInit_return stmtForInit() throws RecognitionException {
        pollenParser.stmtForInit_return retval = new pollenParser.stmtForInit_return();
        retval.start = input.LT(1);

        int stmtForInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI356=null;
        Atom IDENT358=null;
        Atom char_literal359=null;
        Atom SEMI361=null;
        pollenParser.typeName_return typeName357 =null;

        pollenParser.expr_return expr360 =null;

        pollenParser.stmtAssign_return stmtAssign362 =null;


        BaseNode SEMI356_tree=null;
        BaseNode IDENT358_tree=null;
        BaseNode char_literal359_tree=null;
        BaseNode SEMI361_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:767:5: ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName ^( IDENT expr ) ) ) | stmtAssign )
            int alt87=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt87=1;
                }
                break;
            case IDENT:
                {
                int LA87_2 = input.LA(2);

                if ( (synpred156_pollen()) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt87=2;
                }
                break;
            case INJECT:
            case 137:
            case 172:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }

            switch (alt87) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:767:9: SEMI
                    {
                    SEMI356=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit5146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI356);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 768:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:769:9: typeName IDENT '=' expr SEMI
                    {
                    pushFollow(FOLLOW_typeName_in_stmtForInit5172);
                    typeName357=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName357.getTree());

                    IDENT358=(Atom)match(input,IDENT,FOLLOW_IDENT_in_stmtForInit5174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT358);


                    char_literal359=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtForInit5176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal359);


                    pushFollow(FOLLOW_expr_in_stmtForInit5178);
                    expr360=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr360.getTree());

                    SEMI361=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit5180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI361);


                    // AST REWRITE
                    // elements: IDENT, typeName, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 770:13: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName ^( IDENT expr ) ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:770:16: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName ^( IDENT expr ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Decl(S_DECL, "S_DECL")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:770:50: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName ^( IDENT expr ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_typeName.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:770:119: ^( IDENT expr )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        stream_IDENT.nextNode()
                        , root_3);

                        adaptor.addChild(root_3, stream_expr.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:9: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmtForInit5233);
                    stmtAssign362=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign362.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, stmtForInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForInit"


    public static class stmtForNext_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForNext"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:773:1: stmtForNext : ( -> NIL | expr );
    public final pollenParser.stmtForNext_return stmtForNext() throws RecognitionException {
        pollenParser.stmtForNext_return retval = new pollenParser.stmtForNext_return();
        retval.start = input.LT(1);

        int stmtForNext_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr363 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:774:5: ( -> NIL | expr )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==126) ) {
                alt88=1;
            }
            else if ( ((LA88_0 >= BIT_NOT && LA88_0 <= CHAR)||LA88_0==DEC||LA88_0==HEX_LIT||LA88_0==IDENT||(LA88_0 >= INC && LA88_0 <= INT_LIT)||LA88_0==LOG_NOT||LA88_0==MINUS||LA88_0==OCT_LIT||LA88_0==REAL_LIT||LA88_0==STRING||LA88_0==125||(LA88_0 >= 137 && LA88_0 <= 138)||LA88_0==159||(LA88_0 >= 172 && LA88_0 <= 173)||LA88_0==183) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:775:13: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 775:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:776:9: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_stmtForNext5276);
                    expr363=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr363.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, stmtForNext_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForNext"


    public static class stmtSwitch_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtSwitch"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:784:1: stmtSwitch : 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) ;
    public final pollenParser.stmtSwitch_return stmtSwitch() throws RecognitionException {
        pollenParser.stmtSwitch_return retval = new pollenParser.stmtSwitch_return();
        retval.start = input.LT(1);

        int stmtSwitch_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal364=null;
        Atom char_literal365=null;
        Atom char_literal367=null;
        pollenParser.expr_return expr366 =null;

        pollenParser.braceOpen_return braceOpen368 =null;

        pollenParser.stmtsCase_return stmtsCase369 =null;

        pollenParser.stmtDefault_return stmtDefault370 =null;

        pollenParser.braceClose_return braceClose371 =null;


        BaseNode string_literal364_tree=null;
        BaseNode char_literal365_tree=null;
        BaseNode char_literal367_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtsCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtsCase");
        RewriteRuleSubtreeStream stream_stmtDefault=new RewriteRuleSubtreeStream(adaptor,"rule stmtDefault");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:2: ( 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:4: 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose
            {
            string_literal364=(Atom)match(input,182,FOLLOW_182_in_stmtSwitch5295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal364);


            char_literal365=(Atom)match(input,125,FOLLOW_125_in_stmtSwitch5297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal365);


            pushFollow(FOLLOW_expr_in_stmtSwitch5299);
            expr366=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr366.getTree());

            char_literal367=(Atom)match(input,126,FOLLOW_126_in_stmtSwitch5301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal367);


            pushFollow(FOLLOW_braceOpen_in_stmtSwitch5303);
            braceOpen368=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen368.getTree());

            pushFollow(FOLLOW_stmtsCase_in_stmtSwitch5305);
            stmtsCase369=stmtsCase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsCase.add(stmtsCase369.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:46: ( stmtDefault )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==151) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:46: stmtDefault
                    {
                    pushFollow(FOLLOW_stmtDefault_in_stmtSwitch5307);
                    stmtDefault370=stmtDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtDefault.add(stmtDefault370.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_stmtSwitch5310);
            braceClose371=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose371.getTree());

            // AST REWRITE
            // elements: expr, stmtDefault, stmtsCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 785:70: -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:73: ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Switch(S_SWITCH, "S_SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtsCase.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:129: ( stmtDefault )?
                if ( stream_stmtDefault.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtDefault.nextTree());

                }
                stream_stmtDefault.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, stmtSwitch_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtSwitch"


    public static class stmtsCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsCase"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:787:1: stmtsCase : ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) ;
    public final pollenParser.stmtsCase_return stmtsCase() throws RecognitionException {
        pollenParser.stmtsCase_return retval = new pollenParser.stmtsCase_return();
        retval.start = input.LT(1);

        int stmtsCase_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtCase_return stmtCase372 =null;


        RewriteRuleSubtreeStream stream_stmtCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtCase");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:2: ( ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:4: ( stmtCase )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:4: ( stmtCase )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==146) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:4: stmtCase
            	    {
            	    pushFollow(FOLLOW_stmtCase_in_stmtsCase5340);
            	    stmtCase372=stmtCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtCase.add(stmtCase372.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 788:14: -> ^( LIST[\"LIST\"] ( stmtCase )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:17: ^( LIST[\"LIST\"] ( stmtCase )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:42: ( stmtCase )*
                while ( stream_stmtCase.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtCase.nextTree());

                }
                stream_stmtCase.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, stmtsCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsCase"


    public static class stmtDefault_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDefault"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:790:1: stmtDefault : 'default' ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts ) ;
    public final pollenParser.stmtDefault_return stmtDefault() throws RecognitionException {
        pollenParser.stmtDefault_return retval = new pollenParser.stmtDefault_return();
        retval.start = input.LT(1);

        int stmtDefault_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal373=null;
        Atom char_literal374=null;
        Atom NL375=null;
        pollenParser.stmts_return stmts376 =null;


        BaseNode string_literal373_tree=null;
        BaseNode char_literal374_tree=null;
        BaseNode NL375_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:2: ( 'default' ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:4: 'default' ':' ( NL )* stmts
            {
            string_literal373=(Atom)match(input,151,FOLLOW_151_in_stmtDefault5364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal373);


            char_literal374=(Atom)match(input,131,FOLLOW_131_in_stmtDefault5366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal374);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:18: ( NL )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==NL) ) {
                    int LA91_1 = input.LA(2);

                    if ( (synpred160_pollen()) ) {
                        alt91=1;
                    }


                }


                switch (alt91) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:18: NL
            	    {
            	    NL375=(Atom)match(input,NL,FOLLOW_NL_in_stmtDefault5368); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL375);


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            pushFollow(FOLLOW_stmts_in_stmtDefault5371);
            stmts376=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts376.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 791:28: -> ^( S_CASE[\"S_CASE\"] stmts )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:31: ^( S_CASE[\"S_CASE\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, stmtDefault_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDefault"


    public static class stmtCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtCase"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:793:1: stmtCase : 'case' ( INT_LIT ) ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT ) ;
    public final pollenParser.stmtCase_return stmtCase() throws RecognitionException {
        pollenParser.stmtCase_return retval = new pollenParser.stmtCase_return();
        retval.start = input.LT(1);

        int stmtCase_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal377=null;
        Atom INT_LIT378=null;
        Atom char_literal379=null;
        Atom NL380=null;
        pollenParser.stmts_return stmts381 =null;


        BaseNode string_literal377_tree=null;
        BaseNode INT_LIT378_tree=null;
        BaseNode char_literal379_tree=null;
        BaseNode NL380_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:2: ( 'case' ( INT_LIT ) ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:4: 'case' ( INT_LIT ) ':' ( NL )* stmts
            {
            string_literal377=(Atom)match(input,146,FOLLOW_146_in_stmtCase5395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal377);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:11: ( INT_LIT )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:12: INT_LIT
            {
            INT_LIT378=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_stmtCase5398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT378);


            }


            char_literal379=(Atom)match(input,131,FOLLOW_131_in_stmtCase5401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal379);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:25: ( NL )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==NL) ) {
                    int LA92_1 = input.LA(2);

                    if ( (synpred161_pollen()) ) {
                        alt92=1;
                    }


                }


                switch (alt92) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:25: NL
            	    {
            	    NL380=(Atom)match(input,NL,FOLLOW_NL_in_stmtCase5403); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL380);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            pushFollow(FOLLOW_stmts_in_stmtCase5406);
            stmts381=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts381.getTree());

            // AST REWRITE
            // elements: stmts, INT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 794:35: -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:38: ^( S_CASE[\"S_CASE\"] stmts INT_LIT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_1, 
                stream_INT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, stmtCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtCase"


    public static class stmtDoWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDoWhile"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:796:1: stmtDoWhile : 'do' stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) ;
    public final pollenParser.stmtDoWhile_return stmtDoWhile() throws RecognitionException {
        pollenParser.stmtDoWhile_return retval = new pollenParser.stmtDoWhile_return();
        retval.start = input.LT(1);

        int stmtDoWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal382=null;
        Atom string_literal384=null;
        Atom char_literal385=null;
        Atom char_literal387=null;
        pollenParser.stmtBlock_return stmtBlock383 =null;

        pollenParser.expr_return expr386 =null;

        pollenParser.delim_return delim388 =null;


        BaseNode string_literal382_tree=null;
        BaseNode string_literal384_tree=null;
        BaseNode char_literal385_tree=null;
        BaseNode char_literal387_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:2: ( 'do' stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:4: 'do' stmtBlock 'while' '(' expr ')' delim
            {
            string_literal382=(Atom)match(input,152,FOLLOW_152_in_stmtDoWhile5432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal382);


            pushFollow(FOLLOW_stmtBlock_in_stmtDoWhile5434);
            stmtBlock383=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock383.getTree());

            string_literal384=(Atom)match(input,189,FOLLOW_189_in_stmtDoWhile5436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal384);


            char_literal385=(Atom)match(input,125,FOLLOW_125_in_stmtDoWhile5438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal385);


            pushFollow(FOLLOW_expr_in_stmtDoWhile5440);
            expr386=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr386.getTree());

            char_literal387=(Atom)match(input,126,FOLLOW_126_in_stmtDoWhile5442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal387);


            pushFollow(FOLLOW_delim_in_stmtDoWhile5444);
            delim388=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim388.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 797:47: -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:50: ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE", true)
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, stmtDoWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDoWhile"


    public static class stmtIf_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIf"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:1: stmtIf : 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) ;
    public final pollenParser.stmtIf_return stmtIf() throws RecognitionException {
        pollenParser.stmtIf_return retval = new pollenParser.stmtIf_return();
        retval.start = input.LT(1);

        int stmtIf_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal389=null;
        pollenParser.stmtIfBlock_return stmtIfBlock390 =null;

        pollenParser.stmtsElif_return stmtsElif391 =null;

        pollenParser.stmtElse_return stmtElse392 =null;


        BaseNode string_literal389_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_stmtsElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtsElif");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:2: ( 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:4: 'if' stmtIfBlock stmtsElif ( stmtElse )?
            {
            string_literal389=(Atom)match(input,163,FOLLOW_163_in_stmtIf5471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal389);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtIf5473);
            stmtIfBlock390=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock390.getTree());

            pushFollow(FOLLOW_stmtsElif_in_stmtIf5475);
            stmtsElif391=stmtsElif();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsElif.add(stmtsElif391.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:31: ( stmtElse )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==154) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:31: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtIf5477);
                    stmtElse392=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse392.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtsElif, stmtElse, stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 800:41: -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:44: ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.If(S_IF, "S_IF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_1, stream_stmtsElif.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:94: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, stmtIf_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIf"


    public static class stmtIfBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIfBlock"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:1: stmtIfBlock : '(' expr ')' stmtBlock -> expr stmtBlock ;
    public final pollenParser.stmtIfBlock_return stmtIfBlock() throws RecognitionException {
        pollenParser.stmtIfBlock_return retval = new pollenParser.stmtIfBlock_return();
        retval.start = input.LT(1);

        int stmtIfBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal393=null;
        Atom char_literal395=null;
        pollenParser.expr_return expr394 =null;

        pollenParser.stmtBlock_return stmtBlock396 =null;


        BaseNode char_literal393_tree=null;
        BaseNode char_literal395_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:2: ( '(' expr ')' stmtBlock -> expr stmtBlock )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:4: '(' expr ')' stmtBlock
            {
            char_literal393=(Atom)match(input,125,FOLLOW_125_in_stmtIfBlock5507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal393);


            pushFollow(FOLLOW_expr_in_stmtIfBlock5509);
            expr394=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr394.getTree());

            char_literal395=(Atom)match(input,126,FOLLOW_126_in_stmtIfBlock5511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal395);


            pushFollow(FOLLOW_stmtBlock_in_stmtIfBlock5513);
            stmtBlock396=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock396.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 803:27: -> expr stmtBlock
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, stmtIfBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIfBlock"


    public static class stmtsElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsElif"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:1: stmtsElif : ( stmtElif )* -> ^( LIST ( stmtElif )* ) ;
    public final pollenParser.stmtsElif_return stmtsElif() throws RecognitionException {
        pollenParser.stmtsElif_return retval = new pollenParser.stmtsElif_return();
        retval.start = input.LT(1);

        int stmtsElif_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtElif_return stmtElif397 =null;


        RewriteRuleSubtreeStream stream_stmtElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtElif");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:2: ( ( stmtElif )* -> ^( LIST ( stmtElif )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:4: ( stmtElif )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:4: ( stmtElif )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==153) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:4: stmtElif
            	    {
            	    pushFollow(FOLLOW_stmtElif_in_stmtsElif5529);
            	    stmtElif397=stmtElif();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtElif.add(stmtElif397.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtElif
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 806:14: -> ^( LIST ( stmtElif )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:17: ^( LIST ( stmtElif )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:24: ( stmtElif )*
                while ( stream_stmtElif.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElif.nextTree());

                }
                stream_stmtElif.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, stmtsElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsElif"


    public static class stmtElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElif"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:1: stmtElif : 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) ;
    public final pollenParser.stmtElif_return stmtElif() throws RecognitionException {
        pollenParser.stmtElif_return retval = new pollenParser.stmtElif_return();
        retval.start = input.LT(1);

        int stmtElif_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal398=null;
        pollenParser.stmtIfBlock_return stmtIfBlock399 =null;


        BaseNode string_literal398_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:2: ( 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:4: 'elif' stmtIfBlock
            {
            string_literal398=(Atom)match(input,153,FOLLOW_153_in_stmtElif5549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal398);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtElif5551);
            stmtIfBlock399=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock399.getTree());

            // AST REWRITE
            // elements: stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 809:23: -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:26: ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Elif(S_ELIF, "S_ELIF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, stmtElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElif"


    public static class stmtElse_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElse"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:811:1: stmtElse : 'else' stmtBlock -> stmtBlock ;
    public final pollenParser.stmtElse_return stmtElse() throws RecognitionException {
        pollenParser.stmtElse_return retval = new pollenParser.stmtElse_return();
        retval.start = input.LT(1);

        int stmtElse_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal400=null;
        pollenParser.stmtBlock_return stmtBlock401 =null;


        BaseNode string_literal400_tree=null;
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:812:2: ( 'else' stmtBlock -> stmtBlock )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:812:4: 'else' stmtBlock
            {
            string_literal400=(Atom)match(input,154,FOLLOW_154_in_stmtElse5575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal400);


            pushFollow(FOLLOW_stmtBlock_in_stmtElse5577);
            stmtBlock401=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock401.getTree());

            // AST REWRITE
            // elements: stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 812:21: -> stmtBlock
            {
                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, stmtElse_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElse"


    public static class stmtProvided_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtProvided"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:814:1: stmtProvided : 'provided' '(' expr ')' stmtBlock ( stmtElse )? -> ^( S_PROVIDED expr stmtBlock ( stmtElse )? ) ;
    public final pollenParser.stmtProvided_return stmtProvided() throws RecognitionException {
        pollenParser.stmtProvided_return retval = new pollenParser.stmtProvided_return();
        retval.start = input.LT(1);

        int stmtProvided_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal402=null;
        Atom char_literal403=null;
        Atom char_literal405=null;
        pollenParser.expr_return expr404 =null;

        pollenParser.stmtBlock_return stmtBlock406 =null;

        pollenParser.stmtElse_return stmtElse407 =null;


        BaseNode string_literal402_tree=null;
        BaseNode char_literal403_tree=null;
        BaseNode char_literal405_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:815:2: ( 'provided' '(' expr ')' stmtBlock ( stmtElse )? -> ^( S_PROVIDED expr stmtBlock ( stmtElse )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:815:4: 'provided' '(' expr ')' stmtBlock ( stmtElse )?
            {
            string_literal402=(Atom)match(input,178,FOLLOW_178_in_stmtProvided5591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal402);


            char_literal403=(Atom)match(input,125,FOLLOW_125_in_stmtProvided5593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal403);


            pushFollow(FOLLOW_expr_in_stmtProvided5595);
            expr404=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr404.getTree());

            char_literal405=(Atom)match(input,126,FOLLOW_126_in_stmtProvided5597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal405);


            pushFollow(FOLLOW_stmtBlock_in_stmtProvided5599);
            stmtBlock406=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock406.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:815:38: ( stmtElse )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==154) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:815:39: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtProvided5602);
                    stmtElse407=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse407.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtElse, stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 816:3: -> ^( S_PROVIDED expr stmtBlock ( stmtElse )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:816:6: ^( S_PROVIDED expr stmtBlock ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(S_PROVIDED, "S_PROVIDED")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:816:34: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, stmtProvided_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtProvided"


    public static class stmtWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtWhile"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:1: stmtWhile : 'while' '(' expr ')' stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) ;
    public final pollenParser.stmtWhile_return stmtWhile() throws RecognitionException {
        pollenParser.stmtWhile_return retval = new pollenParser.stmtWhile_return();
        retval.start = input.LT(1);

        int stmtWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal408=null;
        Atom char_literal409=null;
        Atom char_literal411=null;
        pollenParser.expr_return expr410 =null;

        pollenParser.stmtBlock_return stmtBlock412 =null;


        BaseNode string_literal408_tree=null;
        BaseNode char_literal409_tree=null;
        BaseNode char_literal411_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:2: ( 'while' '(' expr ')' stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:4: 'while' '(' expr ')' stmtBlock
            {
            string_literal408=(Atom)match(input,189,FOLLOW_189_in_stmtWhile5629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal408);


            char_literal409=(Atom)match(input,125,FOLLOW_125_in_stmtWhile5631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal409);


            pushFollow(FOLLOW_expr_in_stmtWhile5633);
            expr410=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr410.getTree());

            char_literal411=(Atom)match(input,126,FOLLOW_126_in_stmtWhile5634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal411);


            pushFollow(FOLLOW_stmtBlock_in_stmtWhile5636);
            stmtBlock412=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock412.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 819:34: -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:37: ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, stmtWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtWhile"


    public static class stmtDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDecl"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:1: stmtDecl : varAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) ;
    public final pollenParser.stmtDecl_return stmtDecl() throws RecognitionException {
        pollenParser.stmtDecl_return retval = new pollenParser.stmtDecl_return();
        retval.start = input.LT(1);

        int stmtDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr413 =null;

        pollenParser.varDecl_return varDecl414 =null;

        pollenParser.delim_return delim415 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	atFlags.clear();			

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:828:4: ( varAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:828:7: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_stmtDecl5674);
            varAttr413=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr413.getTree());

            pushFollow(FOLLOW_varDecl_in_stmtDecl5676);
            varDecl414=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl414.getTree());

            pushFollow(FOLLOW_delim_in_stmtDecl5678);
            delim415=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim415.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 828:29: -> ^( S_DECL[\"S_DECL\"] varDecl )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:828:32: ^( S_DECL[\"S_DECL\"] varDecl )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_varDecl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              atFlags.clear();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, stmtDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDecl"


    public static class varDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclaration"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:1: varDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.varDeclaration_return varDeclaration() throws RecognitionException {
        pollenParser.varDeclaration_return retval = new pollenParser.varDeclaration_return();
        retval.start = input.LT(1);

        int varDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr416 =null;

        pollenParser.varDecl_return varDecl417 =null;

        pollenParser.delim_return delim418 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	atFlags.clear();			

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:837:4: ( varAttr varDecl delim -> varDecl )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:837:7: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_varDeclaration5720);
            varAttr416=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr416.getTree());

            pushFollow(FOLLOW_varDecl_in_varDeclaration5722);
            varDecl417=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl417.getTree());

            pushFollow(FOLLOW_delim_in_varDeclaration5724);
            delim418=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim418.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 837:29: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              atFlags.clear();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, varDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclaration"


    public static class varAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varAttr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:1: varAttr : ( 'const' | 'volatile' | 'host' )* ;
    public final pollenParser.varAttr_return varAttr() throws RecognitionException {
        pollenParser.varAttr_return retval = new pollenParser.varAttr_return();
        retval.start = input.LT(1);

        int varAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal419=null;
        Atom string_literal420=null;
        Atom string_literal421=null;

        BaseNode string_literal419_tree=null;
        BaseNode string_literal420_tree=null;
        BaseNode string_literal421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:841:2: ( ( 'const' | 'volatile' | 'host' )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:841:4: ( 'const' | 'volatile' | 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:841:4: ( 'const' | 'volatile' | 'host' )*
            loop96:
            do {
                int alt96=4;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt96=1;
                    }
                    break;
                case 188:
                    {
                    alt96=2;
                    }
                    break;
                case 162:
                    {
                    alt96=3;
                    }
                    break;

                }

                switch (alt96) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:841:7: 'const'
            	    {
            	    string_literal419=(Atom)match(input,149,FOLLOW_149_in_varAttr5745); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal419_tree = 
            	    (BaseNode)adaptor.create(string_literal419)
            	    ;
            	    adaptor.addChild(root_0, string_literal419_tree);
            	    }

            	    if ( state.backtracking==0 ) { atFlags.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:842:6: 'volatile'
            	    {
            	    string_literal420=(Atom)match(input,188,FOLLOW_188_in_varAttr5754); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal420_tree = 
            	    (BaseNode)adaptor.create(string_literal420)
            	    ;
            	    adaptor.addChild(root_0, string_literal420_tree);
            	    }

            	    if ( state.backtracking==0 ) { atFlags.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:843:7: 'host'
            	    {
            	    string_literal421=(Atom)match(input,162,FOLLOW_162_in_varAttr5764); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal421_tree = 
            	    (BaseNode)adaptor.create(string_literal421)
            	    ;
            	    adaptor.addChild(root_0, string_literal421_tree);
            	    }

            	    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, varAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varAttr"


    protected static class varDecl_scope {
        Object typ;
    }
    protected Stack varDecl_stack = new Stack();


    public static class varDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDecl"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:846:1: varDecl : ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( typeName '(' )=> varFcnRef | ( typeName varInit )=> varDeclList | 'new' typeName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", atFlags] typeName ^( IDENT ^( E_EXPR ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) ) ) );
    public final pollenParser.varDecl_return varDecl() throws RecognitionException {
        varDecl_stack.push(new varDecl_scope());
        pollenParser.varDecl_return retval = new pollenParser.varDecl_return();
        retval.start = input.LT(1);

        int varDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal426=null;
        Atom IDENT428=null;
        pollenParser.varDeclList_return varDeclList422 =null;

        pollenParser.varArray_return varArray423 =null;

        pollenParser.varFcnRef_return varFcnRef424 =null;

        pollenParser.varDeclList_return varDeclList425 =null;

        pollenParser.typeName_return typeName427 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList429 =null;


        BaseNode string_literal426_tree=null;
        BaseNode IDENT428_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");

        	((varDecl_scope)varDecl_stack.peek()).typ = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:2: ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( typeName '(' )=> varFcnRef | ( typeName varInit )=> varDeclList | 'new' typeName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", atFlags] typeName ^( IDENT ^( E_EXPR ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) ) ) )
            int alt97=5;
            switch ( input.LA(1) ) {
            case 143:
            case 145:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                int LA97_1 = input.LA(2);

                if ( (synpred169_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred170_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA97_2 = input.LA(2);

                if ( (synpred169_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred170_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;

                }
                }
                break;
            case 172:
                {
                alt97=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:4: ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl5808);
                    varDeclList422=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList422.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:5: ( typeName IDENT '[' )=> varArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varArray_in_varDecl5825);
                    varArray423=varArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varArray423.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:5: ( typeName '(' )=> varFcnRef
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef_in_varDecl5841);
                    varFcnRef424=varFcnRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef424.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:858:6: ( typeName varInit )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl5857);
                    varDeclList425=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList425.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:859:5: 'new' typeName IDENT fcnArgumentList
                    {
                    string_literal426=(Atom)match(input,172,FOLLOW_172_in_varDecl5863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal426);


                    pushFollow(FOLLOW_typeName_in_varDecl5865);
                    typeName427=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName427.getTree());

                    IDENT428=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varDecl5867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT428);


                    pushFollow(FOLLOW_fcnArgumentList_in_varDecl5869);
                    fcnArgumentList429=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList429.getTree());

                    if ( state.backtracking==0 ) { atFlags.add(Flags.NEW); }

                    // AST REWRITE
                    // elements: fcnArgumentList, typeName, typeName, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 861:3: -> ^( D_VAR[\"D_VAR\", atFlags] typeName ^( IDENT ^( E_EXPR ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:861:6: ^( D_VAR[\"D_VAR\", atFlags] typeName ^( IDENT ^( E_EXPR ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:862:6: ^( IDENT ^( E_EXPR ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        stream_IDENT.nextNode()
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:862:14: ^( E_EXPR ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(E_EXPR, "E_EXPR")
                        , root_3);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:862:23: ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_4);

                        adaptor.addChild(root_4, stream_typeName.nextTree());

                        adaptor.addChild(root_4, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, varDecl_StartIndex); }

            varDecl_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varDecl"


    public static class varFcnRef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:864:1: varFcnRef : typeName fcnRefTypeList IDENT -> ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT ) ;
    public final pollenParser.varFcnRef_return varFcnRef() throws RecognitionException {
        pollenParser.varFcnRef_return retval = new pollenParser.varFcnRef_return();
        retval.start = input.LT(1);

        int varFcnRef_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT432=null;
        pollenParser.typeName_return typeName430 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList431 =null;


        BaseNode IDENT432_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:865:2: ( typeName fcnRefTypeList IDENT -> ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:865:4: typeName fcnRefTypeList IDENT
            {
            pushFollow(FOLLOW_typeName_in_varFcnRef5931);
            typeName430=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName430.getTree());

            pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef5933);
            fcnRefTypeList431=fcnRefTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList431.getTree());

            IDENT432=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef5935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT432);


            // AST REWRITE
            // elements: fcnRefTypeList, typeName, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 866:3: -> ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:866:6: ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, varFcnRef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varFcnRef"


    public static class fcnRefTypeList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypeList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:868:1: fcnRefTypeList : '(' fcnRefTypes ')' -> fcnRefTypes ;
    public final pollenParser.fcnRefTypeList_return fcnRefTypeList() throws RecognitionException {
        pollenParser.fcnRefTypeList_return retval = new pollenParser.fcnRefTypeList_return();
        retval.start = input.LT(1);

        int fcnRefTypeList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal433=null;
        Atom char_literal435=null;
        pollenParser.fcnRefTypes_return fcnRefTypes434 =null;


        BaseNode char_literal433_tree=null;
        BaseNode char_literal435_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_fcnRefTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:869:2: ( '(' fcnRefTypes ')' -> fcnRefTypes )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:869:4: '(' fcnRefTypes ')'
            {
            char_literal433=(Atom)match(input,125,FOLLOW_125_in_fcnRefTypeList5967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(char_literal433);


            pushFollow(FOLLOW_fcnRefTypes_in_fcnRefTypeList5969);
            fcnRefTypes434=fcnRefTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypes.add(fcnRefTypes434.getTree());

            char_literal435=(Atom)match(input,126,FOLLOW_126_in_fcnRefTypeList5971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(char_literal435);


            // AST REWRITE
            // elements: fcnRefTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 869:24: -> fcnRefTypes
            {
                adaptor.addChild(root_0, stream_fcnRefTypes.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, fcnRefTypeList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypeList"


    public static class fcnRefTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypes"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:871:1: fcnRefTypes : ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.fcnRefTypes_return fcnRefTypes() throws RecognitionException {
        pollenParser.fcnRefTypes_return retval = new pollenParser.fcnRefTypes_return();
        retval.start = input.LT(1);

        int fcnRefTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal437=null;
        pollenParser.typeName_return typeName436 =null;

        pollenParser.typeName_return typeName438 =null;


        BaseNode char_literal437_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:2: ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==IDENT||LA99_0==143||LA99_0==145||(LA99_0 >= 166 && LA99_0 <= 168)||LA99_0==181||(LA99_0 >= 185 && LA99_0 <= 187)) ) {
                alt99=1;
            }
            else if ( (LA99_0==126) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }
            switch (alt99) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:4: typeName ( ',' typeName )*
                    {
                    pushFollow(FOLLOW_typeName_in_fcnRefTypes5985);
                    typeName436=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName436.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:13: ( ',' typeName )*
                    loop98:
                    do {
                        int alt98=2;
                        int LA98_0 = input.LA(1);

                        if ( (LA98_0==128) ) {
                            alt98=1;
                        }


                        switch (alt98) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:14: ',' typeName
                    	    {
                    	    char_literal437=(Atom)match(input,128,FOLLOW_128_in_fcnRefTypes5988); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal437);


                    	    pushFollow(FOLLOW_typeName_in_fcnRefTypes5990);
                    	    typeName438=typeName();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeName.add(typeName438.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop98;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 873:3: -> ^( LIST[\"LIST\"] ( typeName )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:873:6: ^( LIST[\"LIST\"] ( typeName )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_typeName.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_typeName.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeName.nextTree());

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:874:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 874:4: -> ^( LIST[\"LIST\"] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:874:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, fcnRefTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypes"


    public static class varArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArray"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:1: varArray : typeName IDENT varArraySpec ( '=' initializer )? -> ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? ) ;
    public final pollenParser.varArray_return varArray() throws RecognitionException {
        pollenParser.varArray_return retval = new pollenParser.varArray_return();
        retval.start = input.LT(1);

        int varArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT440=null;
        Atom char_literal442=null;
        pollenParser.typeName_return typeName439 =null;

        pollenParser.varArraySpec_return varArraySpec441 =null;

        pollenParser.initializer_return initializer443 =null;


        BaseNode IDENT440_tree=null;
        BaseNode char_literal442_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:2: ( typeName IDENT varArraySpec ( '=' initializer )? -> ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:4: typeName IDENT varArraySpec ( '=' initializer )?
            {
            pushFollow(FOLLOW_typeName_in_varArray6031);
            typeName439=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName439.getTree());

            IDENT440=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varArray6033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT440);


            pushFollow(FOLLOW_varArraySpec_in_varArray6035);
            varArraySpec441=varArraySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec441.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:32: ( '=' initializer )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ASSIGN) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:33: '=' initializer
                    {
                    char_literal442=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varArray6038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal442);


                    pushFollow(FOLLOW_initializer_in_varArray6040);
                    initializer443=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer443.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: initializer, varArraySpec, IDENT, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 878:2: -> ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:878:6: ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Arr(D_ARR, "D_Arr", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_varArraySpec.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:878:74: ( initializer )?
                if ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, varArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArray"


    public static class varArraySpec_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArraySpec"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:880:1: varArraySpec : ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) ;
    public final pollenParser.varArraySpec_return varArraySpec() throws RecognitionException {
        pollenParser.varArraySpec_return retval = new pollenParser.varArraySpec_return();
        retval.start = input.LT(1);

        int varArraySpec_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal444=null;
        Atom char_literal446=null;
        pollenParser.varDim_return varDim445 =null;


        BaseNode char_literal444_tree=null;
        BaseNode char_literal446_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_varDim=new RewriteRuleSubtreeStream(adaptor,"rule varDim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:2: ( ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:4: ( '[' varDim ']' )+
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:4: ( '[' varDim ']' )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==138) ) {
                    int LA101_1 = input.LA(2);

                    if ( (synpred176_pollen()) ) {
                        alt101=1;
                    }


                }


                switch (alt101) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:5: '[' varDim ']'
            	    {
            	    char_literal444=(Atom)match(input,138,FOLLOW_138_in_varArraySpec6078); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal444);


            	    pushFollow(FOLLOW_varDim_in_varArraySpec6080);
            	    varDim445=varDim();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_varDim.add(varDim445.getTree());

            	    char_literal446=(Atom)match(input,139,FOLLOW_139_in_varArraySpec6082); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_139.add(char_literal446);


            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            // AST REWRITE
            // elements: varDim
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 881:22: -> ^( LIST[\"LIST\"] ( varDim )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:27: ^( LIST[\"LIST\"] ( varDim )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_varDim.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varDim.hasNext() ) {
                    adaptor.addChild(root_1, stream_varDim.nextTree());

                }
                stream_varDim.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, varArraySpec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArraySpec"


    public static class varDim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDim"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:883:1: varDim : ( expr | -> NIL );
    public final pollenParser.varDim_return varDim() throws RecognitionException {
        pollenParser.varDim_return retval = new pollenParser.varDim_return();
        retval.start = input.LT(1);

        int varDim_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr447 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:884:2: ( expr | -> NIL )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( ((LA102_0 >= BIT_NOT && LA102_0 <= CHAR)||LA102_0==DEC||LA102_0==HEX_LIT||LA102_0==IDENT||(LA102_0 >= INC && LA102_0 <= INT_LIT)||LA102_0==LOG_NOT||LA102_0==MINUS||LA102_0==OCT_LIT||LA102_0==REAL_LIT||LA102_0==STRING||LA102_0==125||(LA102_0 >= 137 && LA102_0 <= 138)||LA102_0==159||(LA102_0 >= 172 && LA102_0 <= 173)||LA102_0==183) ) {
                alt102=1;
            }
            else if ( (LA102_0==139) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:884:5: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_varDim6110);
                    expr447=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr447.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:885:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 885:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, varDim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDim"


    public static class initializer_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:887:1: initializer : ( expr | '{' initializer_list ( ',' )? '}' -> initializer_list );
    public final pollenParser.initializer_return initializer() throws RecognitionException {
        pollenParser.initializer_return retval = new pollenParser.initializer_return();
        retval.start = input.LT(1);

        int initializer_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal449=null;
        Atom char_literal451=null;
        Atom char_literal452=null;
        pollenParser.expr_return expr448 =null;

        pollenParser.initializer_list_return initializer_list450 =null;


        BaseNode char_literal449_tree=null;
        BaseNode char_literal451_tree=null;
        BaseNode char_literal452_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_initializer_list=new RewriteRuleSubtreeStream(adaptor,"rule initializer_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:2: ( expr | '{' initializer_list ( ',' )? '}' -> initializer_list )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( ((LA104_0 >= BIT_NOT && LA104_0 <= CHAR)||LA104_0==DEC||LA104_0==HEX_LIT||LA104_0==IDENT||(LA104_0 >= INC && LA104_0 <= INT_LIT)||LA104_0==LOG_NOT||LA104_0==MINUS||LA104_0==OCT_LIT||LA104_0==REAL_LIT||LA104_0==STRING||LA104_0==125||(LA104_0 >= 137 && LA104_0 <= 138)||LA104_0==159||(LA104_0 >= 172 && LA104_0 <= 173)||LA104_0==183) ) {
                alt104=1;
            }
            else if ( (LA104_0==190) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:4: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_initializer6130);
                    expr448=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr448.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:4: '{' initializer_list ( ',' )? '}'
                    {
                    char_literal449=(Atom)match(input,190,FOLLOW_190_in_initializer6136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal449);


                    pushFollow(FOLLOW_initializer_list_in_initializer6138);
                    initializer_list450=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer_list.add(initializer_list450.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:25: ( ',' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==128) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:25: ','
                            {
                            char_literal451=(Atom)match(input,128,FOLLOW_128_in_initializer6140); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_128.add(char_literal451);


                            }
                            break;

                    }


                    char_literal452=(Atom)match(input,193,FOLLOW_193_in_initializer6143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal452);


                    // AST REWRITE
                    // elements: initializer_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 889:34: -> initializer_list
                    {
                        adaptor.addChild(root_0, stream_initializer_list.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer"


    public static class initializer_list_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer_list"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:891:1: initializer_list : initializer ( ',' initializer )* -> ^( LIST[\"LIST\"] ( initializer )+ ) ;
    public final pollenParser.initializer_list_return initializer_list() throws RecognitionException {
        pollenParser.initializer_list_return retval = new pollenParser.initializer_list_return();
        retval.start = input.LT(1);

        int initializer_list_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal454=null;
        pollenParser.initializer_return initializer453 =null;

        pollenParser.initializer_return initializer455 =null;


        BaseNode char_literal454_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:2: ( initializer ( ',' initializer )* -> ^( LIST[\"LIST\"] ( initializer )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:4: initializer ( ',' initializer )*
            {
            pushFollow(FOLLOW_initializer_in_initializer_list6157);
            initializer453=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_initializer.add(initializer453.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:16: ( ',' initializer )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==128) ) {
                    int LA105_1 = input.LA(2);

                    if ( (synpred180_pollen()) ) {
                        alt105=1;
                    }


                }


                switch (alt105) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:17: ',' initializer
            	    {
            	    char_literal454=(Atom)match(input,128,FOLLOW_128_in_initializer_list6160); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_128.add(char_literal454);


            	    pushFollow(FOLLOW_initializer_in_initializer_list6162);
            	    initializer455=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_initializer.add(initializer455.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            // AST REWRITE
            // elements: initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 892:35: -> ^( LIST[\"LIST\"] ( initializer )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:38: ^( LIST[\"LIST\"] ( initializer )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_initializer.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer_list"


    public static class varDeclList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:1: varDeclList : ( varBuiltInType ! varInit2 ( ',' ! varInit2 )* | userTypeName ! varInit ( ',' ! varInit )* );
    public final pollenParser.varDeclList_return varDeclList() throws RecognitionException {
        pollenParser.varDeclList_return retval = new pollenParser.varDeclList_return();
        retval.start = input.LT(1);

        int varDeclList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal458=null;
        Atom char_literal462=null;
        pollenParser.varBuiltInType_return varBuiltInType456 =null;

        pollenParser.varInit2_return varInit2457 =null;

        pollenParser.varInit2_return varInit2459 =null;

        pollenParser.userTypeName_return userTypeName460 =null;

        pollenParser.varInit_return varInit461 =null;

        pollenParser.varInit_return varInit463 =null;


        BaseNode char_literal458_tree=null;
        BaseNode char_literal462_tree=null;


        	assert ((varDecl_scope)varDecl_stack.peek()).typ != null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:2: ( varBuiltInType ! varInit2 ( ',' ! varInit2 )* | userTypeName ! varInit ( ',' ! varInit )* )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==143||LA108_0==145||(LA108_0 >= 166 && LA108_0 <= 168)||LA108_0==181||(LA108_0 >= 185 && LA108_0 <= 187)) ) {
                alt108=1;
            }
            else if ( (LA108_0==IDENT) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:4: varBuiltInType ! varInit2 ( ',' ! varInit2 )*
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varBuiltInType_in_varDeclList6196);
                    varBuiltInType456=varBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (varBuiltInType456!=null?((BaseNode)varBuiltInType456.tree):null); }

                    pushFollow(FOLLOW_varInit2_in_varDeclList6201);
                    varInit2457=varInit2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2457.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:70: ( ',' ! varInit2 )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==128) ) {
                            int LA106_1 = input.LA(2);

                            if ( (synpred181_pollen()) ) {
                                alt106=1;
                            }


                        }


                        switch (alt106) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:71: ',' ! varInit2
                    	    {
                    	    char_literal458=(Atom)match(input,128,FOLLOW_128_in_varDeclList6204); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_varInit2_in_varDeclList6207);
                    	    varInit2459=varInit2();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2459.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:4: userTypeName ! varInit ( ',' ! varInit )*
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_varDeclList6214);
                    userTypeName460=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (userTypeName460!=null?((BaseNode)userTypeName460.tree):null); }

                    pushFollow(FOLLOW_varInit_in_varDeclList6219);
                    varInit461=varInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit461.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:65: ( ',' ! varInit )*
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==128) ) {
                            int LA107_1 = input.LA(2);

                            if ( (synpred183_pollen()) ) {
                                alt107=1;
                            }


                        }


                        switch (alt107) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:66: ',' ! varInit
                    	    {
                    	    char_literal462=(Atom)match(input,128,FOLLOW_128_in_varDeclList6222); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_varInit_in_varDeclList6225);
                    	    varInit463=varInit();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit463.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, varDeclList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclList"


    public static class varBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varBuiltInType"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:901:1: varBuiltInType : builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) ;
    public final pollenParser.varBuiltInType_return varBuiltInType() throws RecognitionException {
        pollenParser.varBuiltInType_return retval = new pollenParser.varBuiltInType_return();
        retval.start = input.LT(1);

        int varBuiltInType_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType464 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:2: ( builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:4: builtinType
            {
            pushFollow(FOLLOW_builtinType_in_varBuiltInType6238);
            builtinType464=builtinType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtinType.add(builtinType464.getTree());

            // AST REWRITE
            // elements: builtinType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 902:16: -> ^( T_STD[\"T_STD\", atFlags] builtinType )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:19: ^( T_STD[\"T_STD\", atFlags] builtinType )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_builtinType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, varBuiltInType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varBuiltInType"


    public static class varInit2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit2"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:904:1: varInit2 : IDENT ( ASSIGN expr )? -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) ) ;
    public final pollenParser.varInit2_return varInit2() throws RecognitionException {
        pollenParser.varInit2_return retval = new pollenParser.varInit2_return();
        retval.start = input.LT(1);

        int varInit2_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT465=null;
        Atom ASSIGN466=null;
        pollenParser.expr_return expr467 =null;


        BaseNode IDENT465_tree=null;
        BaseNode ASSIGN466_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:905:2: ( IDENT ( ASSIGN expr )? -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:905:4: IDENT ( ASSIGN expr )?
            {
            IDENT465=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit26262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT465);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:905:10: ( ASSIGN expr )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ASSIGN) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:905:11: ASSIGN expr
                    {
                    ASSIGN466=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit26265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN466);


                    pushFollow(FOLLOW_expr_in_varInit26267);
                    expr467=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr467.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expr, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 906:3: -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:906:6: ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Var(D_VAR, "D_VAR", atFlags)
                , root_1);

                adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:906:62: ^( IDENT ( expr )? )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                stream_IDENT.nextNode()
                , root_2);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:906:70: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_2, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, varInit2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit2"


    public static class varInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:908:1: varInit : ( IDENT BIND expr -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) ) | IDENT ( ASSIGN expr )? -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) ) );
    public final pollenParser.varInit_return varInit() throws RecognitionException {
        pollenParser.varInit_return retval = new pollenParser.varInit_return();
        retval.start = input.LT(1);

        int varInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT468=null;
        Atom BIND469=null;
        Atom IDENT471=null;
        Atom ASSIGN472=null;
        pollenParser.expr_return expr470 =null;

        pollenParser.expr_return expr473 =null;


        BaseNode IDENT468_tree=null;
        BaseNode BIND469_tree=null;
        BaseNode IDENT471_tree=null;
        BaseNode ASSIGN472_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:2: ( IDENT BIND expr -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) ) | IDENT ( ASSIGN expr )? -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) ) )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==IDENT) ) {
                int LA111_1 = input.LA(2);

                if ( (synpred185_pollen()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:5: IDENT BIND expr
                    {
                    IDENT468=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit6305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT468);


                    BIND469=(Atom)match(input,BIND,FOLLOW_BIND_in_varInit6307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND469);


                    pushFollow(FOLLOW_expr_in_varInit6309);
                    expr470=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr470.getTree());

                    if ( state.backtracking==0 ) { atFlags.add(Flags.PROTOCOL_MEMBER); }

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 911:3: -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:911:6: ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:911:70: ^( IDENT ( expr )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        stream_IDENT.nextNode()
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:911:78: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_2, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:912:4: IDENT ( ASSIGN expr )?
                    {
                    IDENT471=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit6340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT471);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:912:10: ( ASSIGN expr )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==ASSIGN) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:912:11: ASSIGN expr
                            {
                            ASSIGN472=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit6343); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN472);


                            pushFollow(FOLLOW_expr_in_varInit6345);
                            expr473=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr473.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 913:2: -> ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:913:5: ^( D_VAR[\"D_VAR\", atFlags] ^( IDENT ( expr )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:913:69: ^( IDENT ( expr )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        stream_IDENT.nextNode()
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:913:77: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_2, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, varInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit"


    public static class builtinType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtinType"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:916:1: builtinType : ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'string' | 'uint8' | 'uint16' | 'uint32' );
    public final pollenParser.builtinType_return builtinType() throws RecognitionException {
        pollenParser.builtinType_return retval = new pollenParser.builtinType_return();
        retval.start = input.LT(1);

        int builtinType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set474=null;

        BaseNode set474_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:917:5: ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'string' | 'uint8' | 'uint16' | 'uint32' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set474=(Atom)input.LT(1);

            if ( input.LA(1)==143||input.LA(1)==145||(input.LA(1) >= 166 && input.LA(1) <= 168)||input.LA(1)==181||(input.LA(1) >= 185 && input.LA(1) <= 187) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set474)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, builtinType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "builtinType"


    protected static class qualName_scope {
        String s;
    }
    protected Stack qualName_stack = new Stack();


    public static class qualName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:928:1: qualName : IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] ;
    public final pollenParser.qualName_return qualName() throws RecognitionException {
        qualName_stack.push(new qualName_scope());
        pollenParser.qualName_return retval = new pollenParser.qualName_return();
        retval.start = input.LT(1);

        int qualName_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT475=null;
        pollenParser.qualNameList_return qualNameList476 =null;


        BaseNode IDENT475_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualNameList");

        	((qualName_scope)qualName_stack.peek()).s = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:5: ( IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:10: IDENT ( ( qualNameList )? )
            {
            IDENT475=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualName6509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT475);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:16: ( ( qualNameList )? )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:17: ( qualNameList )?
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:17: ( qualNameList )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==129) ) {
                int LA112_1 = input.LA(2);

                if ( (synpred195_pollen()) ) {
                    alt112=1;
                }
            }
            switch (alt112) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:17: qualNameList
                    {
                    pushFollow(FOLLOW_qualNameList_in_qualName6512);
                    qualNameList476=qualNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualNameList.add(qualNameList476.getTree());

                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 938:33: -> IDENT[$IDENT.text + $qualName::s]
            {
                adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(IDENT, (IDENT475!=null?IDENT475.getText():null) + ((qualName_scope)qualName_stack.peek()).s)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	//System.out.println("Qual : "  + ((qualName_scope)qualName_stack.peek()).s);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, qualName_StartIndex); }

            qualName_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "qualName"


    public static class qualNameList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:941:1: qualNameList : ( '.' ! IDENT !)+ ;
    public final pollenParser.qualNameList_return qualNameList() throws RecognitionException {
        pollenParser.qualNameList_return retval = new pollenParser.qualNameList_return();
        retval.start = input.LT(1);

        int qualNameList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal477=null;
        Atom IDENT478=null;

        BaseNode char_literal477_tree=null;
        BaseNode IDENT478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:2: ( ( '.' ! IDENT !)+ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:2: ( '.' ! IDENT !)+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:2: ( '.' ! IDENT !)+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==129) ) {
                    int LA113_1 = input.LA(2);

                    if ( (synpred196_pollen()) ) {
                        alt113=1;
                    }


                }


                switch (alt113) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:6: '.' ! IDENT !
            	    {
            	    char_literal477=(Atom)match(input,129,FOLLOW_129_in_qualNameList6540); if (state.failed) return retval;

            	    IDENT478=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameList6556); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {((qualName_scope)qualName_stack.peek()).s += "." + (IDENT478!=null?IDENT478.getText():null);}

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, qualNameList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualNameList"


    public static class arrayLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:964:1: arrayLit : '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) ;
    public final pollenParser.arrayLit_return arrayLit() throws RecognitionException {
        pollenParser.arrayLit_return retval = new pollenParser.arrayLit_return();
        retval.start = input.LT(1);

        int arrayLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal479=null;
        Atom char_literal481=null;
        pollenParser.arrayLitList_return arrayLitList480 =null;


        BaseNode char_literal479_tree=null;
        BaseNode char_literal481_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_arrayLitList=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:965:2: ( '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:965:4: '[' arrayLitList ']'
            {
            char_literal479=(Atom)match(input,138,FOLLOW_138_in_arrayLit6592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(char_literal479);


            pushFollow(FOLLOW_arrayLitList_in_arrayLit6594);
            arrayLitList480=arrayLitList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayLitList.add(arrayLitList480.getTree());

            char_literal481=(Atom)match(input,139,FOLLOW_139_in_arrayLit6596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(char_literal481);


            // AST REWRITE
            // elements: arrayLitList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 965:25: -> ^( LIST[\"LIST\"] arrayLitList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:965:28: ^( LIST[\"LIST\"] arrayLitList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_arrayLitList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, arrayLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLit"


    public static class arrayLitList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:967:1: arrayLitList : ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL );
    public final pollenParser.arrayLitList_return arrayLitList() throws RecognitionException {
        pollenParser.arrayLitList_return retval = new pollenParser.arrayLitList_return();
        retval.start = input.LT(1);

        int arrayLitList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal483=null;
        pollenParser.arrayLitElem_return arrayLitElem482 =null;

        pollenParser.arrayLitElem_return arrayLitElem484 =null;


        BaseNode char_literal483_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_arrayLitElem=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitElem");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:968:2: ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==CHAR||LA115_0==HEX_LIT||LA115_0==IDENT||LA115_0==INT_LIT||LA115_0==OCT_LIT||LA115_0==REAL_LIT||LA115_0==STRING||LA115_0==159||LA115_0==173||LA115_0==183) ) {
                alt115=1;
            }
            else if ( (LA115_0==139) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:968:4: arrayLitElem ( ',' arrayLitElem )*
                    {
                    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList6618);
                    arrayLitElem482=arrayLitElem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem482.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:968:17: ( ',' arrayLitElem )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==128) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:968:18: ',' arrayLitElem
                    	    {
                    	    char_literal483=(Atom)match(input,128,FOLLOW_128_in_arrayLitList6621); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_128.add(char_literal483);


                    	    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList6623);
                    	    arrayLitElem484=arrayLitElem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem484.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: arrayLitElem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 968:37: -> ( arrayLitElem )+
                    {
                        if ( !(stream_arrayLitElem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_arrayLitElem.hasNext() ) {
                            adaptor.addChild(root_0, stream_arrayLitElem.nextTree());

                        }
                        stream_arrayLitElem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:969:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 969:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, arrayLitList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitList"


    public static class arrayLitElem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitElem"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:971:1: arrayLitElem : ( primitiveLit | namedConstant );
    public final pollenParser.arrayLitElem_return arrayLitElem() throws RecognitionException {
        pollenParser.arrayLitElem_return retval = new pollenParser.arrayLitElem_return();
        retval.start = input.LT(1);

        int arrayLitElem_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit485 =null;

        pollenParser.namedConstant_return namedConstant486 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:972:2: ( primitiveLit | namedConstant )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==CHAR||LA116_0==HEX_LIT||LA116_0==INT_LIT||LA116_0==OCT_LIT||LA116_0==REAL_LIT||LA116_0==STRING||LA116_0==159||LA116_0==173||LA116_0==183) ) {
                alt116=1;
            }
            else if ( (LA116_0==IDENT) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:972:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_arrayLitElem6647);
                    primitiveLit485=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit485.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:972:19: namedConstant
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_namedConstant_in_arrayLitElem6651);
                    namedConstant486=namedConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namedConstant486.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, arrayLitElem_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitElem"


    public static class namedConstant_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedConstant"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:974:1: namedConstant : qualName ;
    public final pollenParser.namedConstant_return namedConstant() throws RecognitionException {
        pollenParser.namedConstant_return retval = new pollenParser.namedConstant_return();
        retval.start = input.LT(1);

        int namedConstant_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName487 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:975:2: ( qualName )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:975:4: qualName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualName_in_namedConstant6661);
            qualName487=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualName487.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, namedConstant_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namedConstant"


    public static class boolLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:977:1: boolLit : ( 'true' | 'false' ) ;
    public final pollenParser.boolLit_return boolLit() throws RecognitionException {
        pollenParser.boolLit_return retval = new pollenParser.boolLit_return();
        retval.start = input.LT(1);

        int boolLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set488=null;

        BaseNode set488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:978:2: ( ( 'true' | 'false' ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:978:4: ( 'true' | 'false' )
            {
            root_0 = (BaseNode)adaptor.nil();


            set488=(Atom)input.LT(1);

            if ( input.LA(1)==159||input.LA(1)==183 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set488)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { litFlags.add(LitFlags.BOOL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, boolLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolLit"


    public static class nullLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:980:1: nullLit : 'null' ;
    public final pollenParser.nullLit_return nullLit() throws RecognitionException {
        pollenParser.nullLit_return retval = new pollenParser.nullLit_return();
        retval.start = input.LT(1);

        int nullLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal489=null;

        BaseNode string_literal489_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:981:2: ( 'null' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:981:4: 'null'
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal489=(Atom)match(input,173,FOLLOW_173_in_nullLit6691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal489_tree = 
            (BaseNode)adaptor.create(string_literal489)
            ;
            adaptor.addChild(root_0, string_literal489_tree);
            }

            if ( state.backtracking==0 ) {litFlags.add(LitFlags.NULL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, nullLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nullLit"


    public static class numLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:983:1: numLit : ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT );
    public final pollenParser.numLit_return numLit() throws RecognitionException {
        pollenParser.numLit_return retval = new pollenParser.numLit_return();
        retval.start = input.LT(1);

        int numLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom INT_LIT490=null;
        Atom OCT_LIT491=null;
        Atom REAL_LIT492=null;
        Atom HEX_LIT493=null;

        BaseNode INT_LIT490_tree=null;
        BaseNode OCT_LIT491_tree=null;
        BaseNode REAL_LIT492_tree=null;
        BaseNode HEX_LIT493_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:987:2: ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT )
            int alt117=4;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt117=1;
                }
                break;
            case OCT_LIT:
                {
                alt117=2;
                }
                break;
            case REAL_LIT:
                {
                alt117=3;
                }
                break;
            case HEX_LIT:
                {
                alt117=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:987:4: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT490=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_numLit6708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT490_tree = 
                    (BaseNode)adaptor.create(INT_LIT490)
                    ;
                    adaptor.addChild(root_0, INT_LIT490_tree);
                    }

                    if ( state.backtracking==0 ) {litFlags.add(LitFlags.INT);}

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:988:5: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT491=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_numLit6717); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT491_tree = 
                    (BaseNode)adaptor.create(OCT_LIT491)
                    ;
                    adaptor.addChild(root_0, OCT_LIT491_tree);
                    }

                    if ( state.backtracking==0 ) {litFlags.add(LitFlags.OCT);}

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:989:5: REAL_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    REAL_LIT492=(Atom)match(input,REAL_LIT,FOLLOW_REAL_LIT_in_numLit6726); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REAL_LIT492_tree = 
                    (BaseNode)adaptor.create(REAL_LIT492)
                    ;
                    adaptor.addChild(root_0, REAL_LIT492_tree);
                    }

                    if ( state.backtracking==0 ) {litFlags.add(LitFlags.REAL);}

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:990:5: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT493=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_numLit6735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT493_tree = 
                    (BaseNode)adaptor.create(HEX_LIT493)
                    ;
                    adaptor.addChild(root_0, HEX_LIT493_tree);
                    }

                    if ( state.backtracking==0 ) {litFlags.add(LitFlags.HEX);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	litFlags.add(LitFlags.NUM);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, numLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numLit"


    public static class primitiveLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:993:1: primitiveLit : ( boolLit -> ^( E_CONST[\"E_CONST\", litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", litFlags] CHAR ) );
    public final pollenParser.primitiveLit_return primitiveLit() throws RecognitionException {
        pollenParser.primitiveLit_return retval = new pollenParser.primitiveLit_return();
        retval.start = input.LT(1);

        int primitiveLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom STRING497=null;
        Atom CHAR498=null;
        pollenParser.boolLit_return boolLit494 =null;

        pollenParser.numLit_return numLit495 =null;

        pollenParser.nullLit_return nullLit496 =null;


        BaseNode STRING497_tree=null;
        BaseNode CHAR498_tree=null;
        RewriteRuleTokenStream stream_CHAR=new RewriteRuleTokenStream(adaptor,"token CHAR");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleSubtreeStream stream_numLit=new RewriteRuleSubtreeStream(adaptor,"rule numLit");
        RewriteRuleSubtreeStream stream_nullLit=new RewriteRuleSubtreeStream(adaptor,"rule nullLit");
        RewriteRuleSubtreeStream stream_boolLit=new RewriteRuleSubtreeStream(adaptor,"rule boolLit");

        	litFlags.clear();	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1000:2: ( boolLit -> ^( E_CONST[\"E_CONST\", litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", litFlags] CHAR ) )
            int alt118=5;
            switch ( input.LA(1) ) {
            case 159:
            case 183:
                {
                alt118=1;
                }
                break;
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
                {
                alt118=2;
                }
                break;
            case 173:
                {
                alt118=3;
                }
                break;
            case STRING:
                {
                alt118=4;
                }
                break;
            case CHAR:
                {
                alt118=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }

            switch (alt118) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1000:4: boolLit
                    {
                    pushFollow(FOLLOW_boolLit_in_primitiveLit6760);
                    boolLit494=boolLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolLit.add(boolLit494.getTree());

                    // AST REWRITE
                    // elements: boolLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1000:12: -> ^( E_CONST[\"E_CONST\", litFlags] boolLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1000:15: ^( E_CONST[\"E_CONST\", litFlags] boolLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_boolLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1001:4: numLit
                    {
                    pushFollow(FOLLOW_numLit_in_primitiveLit6779);
                    numLit495=numLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numLit.add(numLit495.getTree());

                    // AST REWRITE
                    // elements: numLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1001:12: -> ^( E_CONST[\"E_CONST\", litFlags] numLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1001:15: ^( E_CONST[\"E_CONST\", litFlags] numLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_numLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1002:4: nullLit
                    {
                    pushFollow(FOLLOW_nullLit_in_primitiveLit6799);
                    nullLit496=nullLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullLit.add(nullLit496.getTree());

                    // AST REWRITE
                    // elements: nullLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1002:12: -> ^( E_CONST[\"E_CONST\", litFlags] nullLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1002:15: ^( E_CONST[\"E_CONST\", litFlags] nullLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_nullLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1003:4: STRING
                    {
                    STRING497=(Atom)match(input,STRING,FOLLOW_STRING_in_primitiveLit6818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(STRING497);


                    if ( state.backtracking==0 ) {litFlags.add(LitFlags.STR);}

                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1004:5: -> ^( E_CONST[\"E_CONST\", litFlags] STRING )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1004:8: ^( E_CONST[\"E_CONST\", litFlags] STRING )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1005:4: CHAR
                    {
                    CHAR498=(Atom)match(input,CHAR,FOLLOW_CHAR_in_primitiveLit6846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR.add(CHAR498);


                    if ( state.backtracking==0 ) {litFlags.add(LitFlags.CHR);}

                    // AST REWRITE
                    // elements: CHAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1006:6: -> ^( E_CONST[\"E_CONST\", litFlags] CHAR )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1006:9: ^( E_CONST[\"E_CONST\", litFlags] CHAR )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	litFlags.clear();	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, primitiveLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "primitiveLit"


    public static class stmtInjection_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjection"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1008:1: stmtInjection : c= INJECT ( NL )+ -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) ) ;
    public final pollenParser.stmtInjection_return stmtInjection() throws RecognitionException {
        pollenParser.stmtInjection_return retval = new pollenParser.stmtInjection_return();
        retval.start = input.LT(1);

        int stmtInjection_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;
        Atom NL499=null;

        BaseNode c_tree=null;
        BaseNode NL499_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1009:2: (c= INJECT ( NL )+ -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1009:4: c= INJECT ( NL )+
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_stmtInjection6881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        c.setText(getInject(c.getText()));
                    }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1012:2: ( NL )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==NL) ) {
                    int LA119_1 = input.LA(2);

                    if ( (synpred208_pollen()) ) {
                        alt119=1;
                    }


                }


                switch (alt119) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1012:2: NL
            	    {
            	    NL499=(Atom)match(input,NL,FOLLOW_NL_in_stmtInjection6887); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL499);


            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);


            // AST REWRITE
            // elements: INJECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1013:2: -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1013:5: ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Inject(S_INJ, "S_INJ")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1013:40: ^( E_INJ[\"E_INJ\"] INJECT )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, 
                stream_INJECT.nextNode()
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, stmtInjection_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjection"


    public static class injectionCode_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionCode"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1015:1: injectionCode : c= INJECT -> ^( E_INJ[\"E_INJ\"] INJECT ) ;
    public final pollenParser.injectionCode_return injectionCode() throws RecognitionException {
        pollenParser.injectionCode_return retval = new pollenParser.injectionCode_return();
        retval.start = input.LT(1);

        int injectionCode_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1016:2: (c= INJECT -> ^( E_INJ[\"E_INJ\"] INJECT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1016:4: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_injectionCode6927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        c.setText(getInject(c.getText()));
                    }

            // AST REWRITE
            // elements: INJECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1019:2: -> ^( E_INJ[\"E_INJ\"] INJECT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1019:5: ^( E_INJ[\"E_INJ\"] INJECT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_1);

                adaptor.addChild(root_1, 
                stream_INJECT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 139, injectionCode_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionCode"


    public static class injectionDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionDecl"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1021:1: injectionDecl : c= INJECT -> ^( D_INJ[\"D_INJ\"] INJECT ) ;
    public final pollenParser.injectionDecl_return injectionDecl() throws RecognitionException {
        pollenParser.injectionDecl_return retval = new pollenParser.injectionDecl_return();
        retval.start = input.LT(1);

        int injectionDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1022:2: (c= INJECT -> ^( D_INJ[\"D_INJ\"] INJECT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1022:4: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_injectionDecl6959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        c.setText(getInject(c.getText()));
                    }

            // AST REWRITE
            // elements: INJECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1025:10: -> ^( D_INJ[\"D_INJ\"] INJECT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1025:13: ^( D_INJ[\"D_INJ\"] INJECT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Inject(D_INJ, "D_INJ")
                , root_1);

                adaptor.addChild(root_1, 
                stream_INJECT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 140, injectionDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionDecl"


    public static class delim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delim"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1027:1: delim : ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->);
    public final pollenParser.delim_return delim() throws RecognitionException {
        pollenParser.delim_return retval = new pollenParser.delim_return();
        retval.start = input.LT(1);

        int delim_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI500=null;
        Atom NL501=null;
        Atom NL502=null;
        Atom NL503=null;

        BaseNode SEMI500_tree=null;
        BaseNode NL501_tree=null;
        BaseNode NL502_tree=null;
        BaseNode NL503_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:2: ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->)
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==SEMI) ) {
                int LA123_1 = input.LA(2);

                if ( (synpred210_pollen()) ) {
                    alt123=1;
                }
                else if ( (synpred214_pollen()) ) {
                    alt123=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA123_0==NL) ) {
                int LA123_2 = input.LA(2);

                if ( (synpred212_pollen()) ) {
                    alt123=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt123=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA123_0==161) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==165) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==INJECT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==170) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==171) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==147) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==177) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==148) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==155) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==193) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==157) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==179) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==162) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==143||LA123_0==145||(LA123_0 >= 166 && LA123_0 <= 168)||LA123_0==181||(LA123_0 >= 185 && LA123_0 <= 187)) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==IDENT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==125) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==149) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==188) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==172) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==EOF) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==128) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==151) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==146) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==137) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==142) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==190) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==176) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==180) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==144) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==150) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==160) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==182) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==152) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==163) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==178) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==189) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==159||LA123_0==183) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==INT_LIT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==OCT_LIT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==REAL_LIT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==HEX_LIT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==173) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==STRING) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==CHAR) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==138) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==LOG_NOT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==BIT_NOT) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==MINUS) && (synpred214_pollen())) {
                alt123=3;
            }
            else if ( (LA123_0==DEC||LA123_0==INC) && (synpred214_pollen())) {
                alt123=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:4: ( SEMI ) ( NL )*
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:4: ( SEMI )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:5: SEMI
                    {
                    SEMI500=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim6997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI500);


                    }


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:11: ( NL )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==NL) ) {
                            int LA120_1 = input.LA(2);

                            if ( (synpred209_pollen()) ) {
                                alt120=1;
                            }


                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:12: NL
                    	    {
                    	    NL501=(Atom)match(input,NL,FOLLOW_NL_in_delim7001); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL501);


                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1028:17: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:4: ( NL )+
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:4: ( NL )+
                    int cnt121=0;
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==NL) ) {
                            int LA121_1 = input.LA(2);

                            if ( (synpred211_pollen()) ) {
                                alt121=1;
                            }


                        }


                        switch (alt121) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:5: NL
                    	    {
                    	    NL502=(Atom)match(input,NL,FOLLOW_NL_in_delim7012); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL502);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt121 >= 1 ) break loop121;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(121, input);
                                throw eee;
                        }
                        cnt121++;
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1029:10: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:4: ( ( NL )* '}' )=> ( NL )*
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:20: ( NL )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==NL) ) {
                            int LA122_1 = input.LA(2);

                            if ( (synpred215_pollen()) ) {
                                alt122=1;
                            }


                        }


                        switch (alt122) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:20: NL
                    	    {
                    	    NL503=(Atom)match(input,NL,FOLLOW_NL_in_delim7036); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL503);


                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1031:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 141, delim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delim"

    // $ANTLR start synpred4_pollen
    public final void synpred4_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:228:9: ( stmtExport )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:228:9: stmtExport
        {
        pushFollow(FOLLOW_stmtExport_in_synpred4_pollen878);
        stmtExport();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_pollen

    // $ANTLR start synpred7_pollen
    public final void synpred7_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:257:9: ( fcnDefinition )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:257:9: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred7_pollen1022);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_pollen

    // $ANTLR start synpred9_pollen
    public final void synpred9_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:259:9: ( varDeclaration )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:259:9: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred9_pollen1043);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_pollen

    // $ANTLR start synpred13_pollen
    public final void synpred13_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:274:6: ( fcnDefinition )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:274:6: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred13_pollen1169);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_pollen

    // $ANTLR start synpred14_pollen
    public final void synpred14_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:275:8: ( varDeclaration )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:275:8: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred14_pollen1178);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_pollen

    // $ANTLR start synpred18_pollen
    public final void synpred18_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:26: ( delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:26: delim
        {
        pushFollow(FOLLOW_delim_in_synpred18_pollen1318);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_pollen

    // $ANTLR start synpred19_pollen
    public final void synpred19_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:4: ( IDENT ASSIGN INT_LIT ( delim )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:4: IDENT ASSIGN INT_LIT ( delim )?
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred19_pollen1311); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred19_pollen1313); if (state.failed) return ;

        match(input,INT_LIT,FOLLOW_INT_LIT_in_synpred19_pollen1315); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:25: ( delim )?
        int alt124=2;
        int LA124_0 = input.LA(1);

        if ( (LA124_0==NL||LA124_0==SEMI) ) {
            alt124=1;
        }
        else if ( (LA124_0==EOF) ) {
            int LA124_3 = input.LA(2);

            if ( (synpred18_pollen()) ) {
                alt124=1;
            }
        }
        switch (alt124) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:26: delim
                {
                pushFollow(FOLLOW_delim_in_synpred19_pollen1318);
                delim();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred19_pollen

    // $ANTLR start synpred20_pollen
    public final void synpred20_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:306:11: ( delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:306:11: delim
        {
        pushFollow(FOLLOW_delim_in_synpred20_pollen1346);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_pollen

    // $ANTLR start synpred28_pollen
    public final void synpred28_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:340:7: ( fcnDefinitionHost )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:340:7: fcnDefinitionHost
        {
        pushFollow(FOLLOW_fcnDefinitionHost_in_synpred28_pollen1579);
        fcnDefinitionHost();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_pollen

    // $ANTLR start synpred30_pollen
    public final void synpred30_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:342:7: ( varDeclaration )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:342:7: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred30_pollen1595);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_pollen

    // $ANTLR start synpred31_pollen
    public final void synpred31_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:347:28: ( metaArguments )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:347:28: metaArguments
        {
        pushFollow(FOLLOW_metaArguments_in_synpred31_pollen1634);
        metaArguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_pollen

    // $ANTLR start synpred39_pollen
    public final void synpred39_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:7: ( '{' metaArgument ( ',' metaArgument )* '}' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:7: '{' metaArgument ( ',' metaArgument )* '}'
        {
        match(input,190,FOLLOW_190_in_synpred39_pollen1921); if (state.failed) return ;

        pushFollow(FOLLOW_metaArgument_in_synpred39_pollen1923);
        metaArgument();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:25: ( ',' metaArgument )*
        loop125:
        do {
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==128) ) {
                alt125=1;
            }


            switch (alt125) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:391:26: ',' metaArgument
        	    {
        	    match(input,128,FOLLOW_128_in_synpred39_pollen1927); if (state.failed) return ;

        	    pushFollow(FOLLOW_metaArgument_in_synpred39_pollen1929);
        	    metaArgument();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop125;
            }
        } while (true);


        match(input,193,FOLLOW_193_in_synpred39_pollen1933); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred39_pollen

    // $ANTLR start synpred42_pollen
    public final void synpred42_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:4: ( qualName metaArguments )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:4: qualName metaArguments
        {
        pushFollow(FOLLOW_qualName_in_synpred42_pollen2046);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_metaArguments_in_synpred42_pollen2048);
        metaArguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_pollen

    // $ANTLR start synpred44_pollen
    public final void synpred44_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:424:10: ( 'module' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:424:11: 'module'
        {
        match(input,171,FOLLOW_171_in_synpred44_pollen2125); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_pollen

    // $ANTLR start synpred45_pollen
    public final void synpred45_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:425:8: ( 'class' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:425:9: 'class'
        {
        match(input,147,FOLLOW_147_in_synpred45_pollen2145); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_pollen

    // $ANTLR start synpred46_pollen
    public final void synpred46_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:426:10: ( 'protocol' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:426:11: 'protocol'
        {
        match(input,177,FOLLOW_177_in_synpred46_pollen2163); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_pollen

    // $ANTLR start synpred47_pollen
    public final void synpred47_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:427:10: ( 'composition' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:427:11: 'composition'
        {
        match(input,148,FOLLOW_148_in_synpred47_pollen2181); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred47_pollen

    // $ANTLR start synpred48_pollen
    public final void synpred48_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:428:10: ( 'enum' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:428:11: 'enum'
        {
        match(input,155,FOLLOW_155_in_synpred48_pollen2199); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred48_pollen

    // $ANTLR start synpred50_pollen
    public final void synpred50_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:23: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred50_pollen2289); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_pollen

    // $ANTLR start synpred54_pollen
    public final void synpred54_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:23: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:448:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred54_pollen2356); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred54_pollen

    // $ANTLR start synpred73_pollen
    public final void synpred73_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:10: ( ',' expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:10: ',' expr
        {
        match(input,128,FOLLOW_128_in_synpred73_pollen2558); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred73_pollen2560);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred73_pollen

    // $ANTLR start synpred74_pollen
    public final void synpred74_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:4: ( expr ( ',' expr )* )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:4: expr ( ',' expr )*
        {
        pushFollow(FOLLOW_expr_in_synpred74_pollen2555);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:9: ( ',' expr )*
        loop126:
        do {
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==128) ) {
                alt126=1;
            }


            switch (alt126) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:10: ',' expr
        	    {
        	    match(input,128,FOLLOW_128_in_synpred74_pollen2558); if (state.failed) return ;

        	    pushFollow(FOLLOW_expr_in_synpred74_pollen2560);
        	    expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop126;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred74_pollen

    // $ANTLR start synpred75_pollen
    public final void synpred75_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:483:4: ( exprLogicalOr '?' expr ':' expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:483:4: exprLogicalOr '?' expr ':' expr
        {
        pushFollow(FOLLOW_exprLogicalOr_in_synpred75_pollen2599);
        exprLogicalOr();

        state._fsp--;
        if (state.failed) return ;

        match(input,136,FOLLOW_136_in_synpred75_pollen2601); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred75_pollen2603);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,131,FOLLOW_131_in_synpred75_pollen2605); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred75_pollen2607);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred75_pollen

    // $ANTLR start synpred76_pollen
    public final void synpred76_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:489:4: ( '||' exprLogicalAnd )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:489:4: '||' exprLogicalAnd
        {
        match(input,192,FOLLOW_192_in_synpred76_pollen2662); if (state.failed) return ;

        pushFollow(FOLLOW_exprLogicalAnd_in_synpred76_pollen2664);
        exprLogicalAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred76_pollen

    // $ANTLR start synpred77_pollen
    public final void synpred77_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:496:3: ( '&&' exprBitwiseOr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:496:3: '&&' exprBitwiseOr
        {
        match(input,123,FOLLOW_123_in_synpred77_pollen2715); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseOr_in_synpred77_pollen2717);
        exprBitwiseOr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred77_pollen

    // $ANTLR start synpred78_pollen
    public final void synpred78_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:3: ( '|' exprBitwiseXor )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:3: '|' exprBitwiseXor
        {
        match(input,191,FOLLOW_191_in_synpred78_pollen2766); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseXor_in_synpred78_pollen2768);
        exprBitwiseXor();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred78_pollen

    // $ANTLR start synpred79_pollen
    public final void synpred79_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:510:3: ( '^' exprBitwiseAnd )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:510:3: '^' exprBitwiseAnd
        {
        match(input,140,FOLLOW_140_in_synpred79_pollen2816); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseAnd_in_synpred79_pollen2818);
        exprBitwiseAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred79_pollen

    // $ANTLR start synpred80_pollen
    public final void synpred80_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:517:3: ( '&' exprEquality )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:517:3: '&' exprEquality
        {
        match(input,124,FOLLOW_124_in_synpred80_pollen2866); if (state.failed) return ;

        pushFollow(FOLLOW_exprEquality_in_synpred80_pollen2868);
        exprEquality();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred80_pollen

    // $ANTLR start synpred81_pollen
    public final void synpred81_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:524:3: ( equalityOp exprRelational )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:524:3: equalityOp exprRelational
        {
        pushFollow(FOLLOW_equalityOp_in_synpred81_pollen2917);
        equalityOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprRelational_in_synpred81_pollen2919);
        exprRelational();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred81_pollen

    // $ANTLR start synpred82_pollen
    public final void synpred82_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:531:3: ( relationalOp exprShift )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:531:3: relationalOp exprShift
        {
        pushFollow(FOLLOW_relationalOp_in_synpred82_pollen2968);
        relationalOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprShift_in_synpred82_pollen2970);
        exprShift();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred82_pollen

    // $ANTLR start synpred83_pollen
    public final void synpred83_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:538:3: ( shiftOp exprAddSub )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:538:3: shiftOp exprAddSub
        {
        pushFollow(FOLLOW_shiftOp_in_synpred83_pollen3020);
        shiftOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprAddSub_in_synpred83_pollen3023);
        exprAddSub();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred83_pollen

    // $ANTLR start synpred84_pollen
    public final void synpred84_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:545:3: ( addSubOp exprMultDiv )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:545:3: addSubOp exprMultDiv
        {
        pushFollow(FOLLOW_addSubOp_in_synpred84_pollen3072);
        addSubOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprMultDiv_in_synpred84_pollen3074);
        exprMultDiv();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred84_pollen

    // $ANTLR start synpred85_pollen
    public final void synpred85_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:3: ( multDivModOp exprUnary )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:3: multDivModOp exprUnary
        {
        pushFollow(FOLLOW_multDivModOp_in_synpred85_pollen3129);
        multDivModOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprUnary_in_synpred85_pollen3131);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred85_pollen

    // $ANTLR start synpred93_pollen
    public final void synpred93_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:567:4: ( varOrFcnOrArray incDecOp )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:567:4: varOrFcnOrArray incDecOp
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred93_pollen3329);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_incDecOp_in_synpred93_pollen3331);
        incDecOp();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred93_pollen

    // $ANTLR start synpred94_pollen
    public final void synpred94_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:4: ( varOrFcnOrArray )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:4: varOrFcnOrArray
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred94_pollen3352);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred94_pollen

    // $ANTLR start synpred104_pollen
    public final void synpred104_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:4: ( typeName qualName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:4: typeName qualName
        {
        pushFollow(FOLLOW_typeName_in_synpred104_pollen3666);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred104_pollen3668);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred104_pollen

    // $ANTLR start synpred105_pollen
    public final void synpred105_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:4: ({...}? typeName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:4: {...}? typeName
        {
        if ( !((input.LT(1).getText().equals(ti.getTypeName()) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred105_pollen", "input.LT(1).getText().equals(ti.getTypeName()) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred105_pollen3714);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred105_pollen

    // $ANTLR start synpred106_pollen
    public final void synpred106_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:631:4: ( qualName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:631:4: qualName
        {
        pushFollow(FOLLOW_qualName_in_synpred106_pollen3759);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred106_pollen

    // $ANTLR start synpred108_pollen
    public final void synpred108_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:4: ( '(' typeName ( ',' typeName )* ')' qualName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:5: '(' typeName ( ',' typeName )* ')' qualName
        {
        match(input,125,FOLLOW_125_in_synpred108_pollen3828); if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred108_pollen3830);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:18: ( ',' typeName )*
        loop127:
        do {
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==128) ) {
                alt127=1;
            }


            switch (alt127) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:19: ',' typeName
        	    {
        	    match(input,128,FOLLOW_128_in_synpred108_pollen3833); if (state.failed) return ;

        	    pushFollow(FOLLOW_typeName_in_synpred108_pollen3835);
        	    typeName();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop127;
            }
        } while (true);


        match(input,126,FOLLOW_126_in_synpred108_pollen3839); if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred108_pollen3841);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred108_pollen

    // $ANTLR start synpred113_pollen
    public final void synpred113_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:35: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:35: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred113_pollen4070);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred113_pollen

    // $ANTLR start synpred115_pollen
    public final void synpred115_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:30: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:30: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred115_pollen4103);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred115_pollen

    // $ANTLR start synpred116_pollen
    public final void synpred116_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:4: ( '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:4: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
        {
        match(input,137,FOLLOW_137_in_synpred116_pollen4097); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred116_pollen4099); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred116_pollen4101);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:30: ( fieldOrArrayAccess )?
        int alt130=2;
        int LA130_0 = input.LA(1);

        if ( (LA130_0==129||LA130_0==138) ) {
            alt130=1;
        }
        switch (alt130) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:30: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred116_pollen4103);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred116_pollen

    // $ANTLR start synpred117_pollen
    public final void synpred117_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:14: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:14: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred117_pollen4159);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred117_pollen

    // $ANTLR start synpred118_pollen
    public final void synpred118_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:4: ( '@' IDENT ( fieldOrArrayAccess )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:4: '@' IDENT ( fieldOrArrayAccess )?
        {
        match(input,137,FOLLOW_137_in_synpred118_pollen4155); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred118_pollen4157); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:14: ( fieldOrArrayAccess )?
        int alt131=2;
        int LA131_0 = input.LA(1);

        if ( (LA131_0==129||LA131_0==138) ) {
            alt131=1;
        }
        switch (alt131) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:666:14: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred118_pollen4159);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred118_pollen

    // $ANTLR start synpred119_pollen
    public final void synpred119_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:668:4: ( '@' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:668:4: '@'
        {
        match(input,137,FOLLOW_137_in_synpred119_pollen4198); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred119_pollen

    // $ANTLR start synpred120_pollen
    public final void synpred120_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:29: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:29: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred120_pollen4222);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred120_pollen

    // $ANTLR start synpred121_pollen
    public final void synpred121_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:4: ( qualName fcnArgumentList ( fieldOrArrayAccess )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:4: qualName fcnArgumentList ( fieldOrArrayAccess )?
        {
        pushFollow(FOLLOW_qualName_in_synpred121_pollen4218);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred121_pollen4220);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:29: ( fieldOrArrayAccess )?
        int alt132=2;
        int LA132_0 = input.LA(1);

        if ( (LA132_0==129||LA132_0==138) ) {
            alt132=1;
        }
        switch (alt132) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:29: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred121_pollen4222);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred121_pollen

    // $ANTLR start synpred122_pollen
    public final void synpred122_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:13: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:13: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred122_pollen4262);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred122_pollen

    // $ANTLR start synpred124_pollen
    public final void synpred124_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:20: ( arrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:20: arrayAccess
        {
        pushFollow(FOLLOW_arrayAccess_in_synpred124_pollen4296);
        arrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred124_pollen

    // $ANTLR start synpred125_pollen
    public final void synpred125_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:4: ( '.' IDENT fcnArgumentList )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:4: '.' IDENT fcnArgumentList
        {
        match(input,129,FOLLOW_129_in_synpred125_pollen4310); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred125_pollen4312); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred125_pollen4314);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred125_pollen

    // $ANTLR start synpred126_pollen
    public final void synpred126_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:9: ( exprList )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:9: exprList
        {
        pushFollow(FOLLOW_exprList_in_synpred126_pollen4366);
        exprList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred126_pollen

    // $ANTLR start synpred127_pollen
    public final void synpred127_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:5: ( stmt )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:5: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred127_pollen4423);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred127_pollen

    // $ANTLR start synpred128_pollen
    public final void synpred128_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:4: ( ( stmt )+ )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:4: ( stmt )+
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:4: ( stmt )+
        int cnt133=0;
        loop133:
        do {
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( ((LA133_0 >= BIT_NOT && LA133_0 <= CHAR)||LA133_0==DEC||LA133_0==HEX_LIT||LA133_0==IDENT||(LA133_0 >= INC && LA133_0 <= INT_LIT)||LA133_0==LOG_NOT||LA133_0==MINUS||LA133_0==NL||LA133_0==OCT_LIT||LA133_0==REAL_LIT||LA133_0==STRING||LA133_0==125||(LA133_0 >= 137 && LA133_0 <= 138)||(LA133_0 >= 142 && LA133_0 <= 145)||(LA133_0 >= 149 && LA133_0 <= 150)||LA133_0==152||(LA133_0 >= 159 && LA133_0 <= 160)||(LA133_0 >= 162 && LA133_0 <= 163)||(LA133_0 >= 166 && LA133_0 <= 168)||(LA133_0 >= 172 && LA133_0 <= 173)||LA133_0==176||LA133_0==178||(LA133_0 >= 180 && LA133_0 <= 183)||(LA133_0 >= 185 && LA133_0 <= 190)) ) {
                alt133=1;
            }


            switch (alt133) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:5: stmt
        	    {
        	    pushFollow(FOLLOW_stmt_in_synpred128_pollen4423);
        	    stmt();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt133 >= 1 ) break loop133;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(133, input);
                    throw eee;
            }
            cnt133++;
        } while (true);


        }

    }
    // $ANTLR end synpred128_pollen

    // $ANTLR start synpred129_pollen
    public final void synpred129_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:5: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:5: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred129_pollen4445); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred129_pollen

    // $ANTLR start synpred130_pollen
    public final void synpred130_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:5: ( stmtDecl )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:5: stmtDecl
        {
        pushFollow(FOLLOW_stmtDecl_in_synpred130_pollen4466);
        stmtDecl();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred130_pollen

    // $ANTLR start synpred131_pollen
    public final void synpred131_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:5: ( stmtAssign )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:5: stmtAssign
        {
        pushFollow(FOLLOW_stmtAssign_in_synpred131_pollen4472);
        stmtAssign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred131_pollen

    // $ANTLR start synpred133_pollen
    public final void synpred133_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:699:4: ( stmtBind )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:699:4: stmtBind
        {
        pushFollow(FOLLOW_stmtBind_in_synpred133_pollen4482);
        stmtBind();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred133_pollen

    // $ANTLR start synpred145_pollen
    public final void synpred145_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:4: ( stmtInjection )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:4: stmtInjection
        {
        pushFollow(FOLLOW_stmtInjection_in_synpred145_pollen4546);
        stmtInjection();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred145_pollen

    // $ANTLR start synpred146_pollen
    public final void synpred146_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:715:4: ( varOrFcnOrArray ASSIGN expr delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:715:4: varOrFcnOrArray ASSIGN expr delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred146_pollen4577);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred146_pollen4579); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred146_pollen4581);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred146_pollen4583);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred146_pollen

    // $ANTLR start synpred147_pollen
    public final void synpred147_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:4: ( injectionCode ASSIGN expr delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:4: injectionCode ASSIGN expr delim
        {
        pushFollow(FOLLOW_injectionCode_in_synpred147_pollen4618);
        injectionCode();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred147_pollen4620); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred147_pollen4622);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred147_pollen4625);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred147_pollen

    // $ANTLR start synpred148_pollen
    public final void synpred148_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:719:4: ( varOrFcnOrArray assignOp expr delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:719:4: varOrFcnOrArray assignOp expr delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred148_pollen4660);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_assignOp_in_synpred148_pollen4662);
        assignOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred148_pollen4664);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred148_pollen4667);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred148_pollen

    // $ANTLR start synpred153_pollen
    public final void synpred153_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:4: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:4: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
        {
        match(input,180,FOLLOW_180_in_synpred153_pollen4892); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:13: ( '(' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:14: '('
        {
        match(input,125,FOLLOW_125_in_synpred153_pollen4895); if (state.failed) return ;

        }


        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:19: ( expr ( ',' expr )+ )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:20: expr ( ',' expr )+
        {
        pushFollow(FOLLOW_expr_in_synpred153_pollen4899);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:25: ( ',' expr )+
        int cnt134=0;
        loop134:
        do {
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==128) ) {
                alt134=1;
            }


            switch (alt134) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:26: ',' expr
        	    {
        	    match(input,128,FOLLOW_128_in_synpred153_pollen4902); if (state.failed) return ;

        	    pushFollow(FOLLOW_expr_in_synpred153_pollen4904);
        	    expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt134 >= 1 ) break loop134;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(134, input);
                    throw eee;
            }
            cnt134++;
        } while (true);


        }


        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:38: ( ')' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:39: ')'
        {
        match(input,126,FOLLOW_126_in_synpred153_pollen4910); if (state.failed) return ;

        }


        pushFollow(FOLLOW_delim_in_synpred153_pollen4913);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred153_pollen

    // $ANTLR start synpred156_pollen
    public final void synpred156_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:769:9: ( typeName IDENT '=' expr SEMI )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:769:9: typeName IDENT '=' expr SEMI
        {
        pushFollow(FOLLOW_typeName_in_synpred156_pollen5172);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred156_pollen5174); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred156_pollen5176); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred156_pollen5178);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,SEMI,FOLLOW_SEMI_in_synpred156_pollen5180); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred156_pollen

    // $ANTLR start synpred160_pollen
    public final void synpred160_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:18: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:18: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred160_pollen5368); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred160_pollen

    // $ANTLR start synpred161_pollen
    public final void synpred161_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:25: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:794:25: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred161_pollen5403); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred161_pollen

    // $ANTLR start synpred169_pollen
    public final void synpred169_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:4: ( typeName IDENT ( ASSIGN expr )? ',' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:5: typeName IDENT ( ASSIGN expr )? ','
        {
        pushFollow(FOLLOW_typeName_in_synpred169_pollen5792);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred169_pollen5794); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:20: ( ASSIGN expr )?
        int alt135=2;
        int LA135_0 = input.LA(1);

        if ( (LA135_0==ASSIGN) ) {
            alt135=1;
        }
        switch (alt135) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:21: ASSIGN expr
                {
                match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred169_pollen5797); if (state.failed) return ;

                pushFollow(FOLLOW_expr_in_synpred169_pollen5799);
                expr();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,128,FOLLOW_128_in_synpred169_pollen5803); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred169_pollen

    // $ANTLR start synpred170_pollen
    public final void synpred170_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:5: ( typeName IDENT '[' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:6: typeName IDENT '['
        {
        pushFollow(FOLLOW_typeName_in_synpred170_pollen5816);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred170_pollen5818); if (state.failed) return ;

        match(input,138,FOLLOW_138_in_synpred170_pollen5820); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred170_pollen

    // $ANTLR start synpred171_pollen
    public final void synpred171_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:5: ( typeName '(' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:6: typeName '('
        {
        pushFollow(FOLLOW_typeName_in_synpred171_pollen5833);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,125,FOLLOW_125_in_synpred171_pollen5835); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred171_pollen

    // $ANTLR start synpred172_pollen
    public final void synpred172_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:858:6: ( typeName varInit )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:858:7: typeName varInit
        {
        pushFollow(FOLLOW_typeName_in_synpred172_pollen5850);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred172_pollen5852);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred172_pollen

    // $ANTLR start synpred176_pollen
    public final void synpred176_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:5: ( '[' varDim ']' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:5: '[' varDim ']'
        {
        match(input,138,FOLLOW_138_in_synpred176_pollen6078); if (state.failed) return ;

        pushFollow(FOLLOW_varDim_in_synpred176_pollen6080);
        varDim();

        state._fsp--;
        if (state.failed) return ;

        match(input,139,FOLLOW_139_in_synpred176_pollen6082); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred176_pollen

    // $ANTLR start synpred180_pollen
    public final void synpred180_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:17: ( ',' initializer )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:17: ',' initializer
        {
        match(input,128,FOLLOW_128_in_synpred180_pollen6160); if (state.failed) return ;

        pushFollow(FOLLOW_initializer_in_synpred180_pollen6162);
        initializer();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred180_pollen

    // $ANTLR start synpred181_pollen
    public final void synpred181_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:71: ( ',' varInit2 )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:71: ',' varInit2
        {
        match(input,128,FOLLOW_128_in_synpred181_pollen6204); if (state.failed) return ;

        pushFollow(FOLLOW_varInit2_in_synpred181_pollen6207);
        varInit2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred181_pollen

    // $ANTLR start synpred183_pollen
    public final void synpred183_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:66: ( ',' varInit )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:66: ',' varInit
        {
        match(input,128,FOLLOW_128_in_synpred183_pollen6222); if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred183_pollen6225);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred183_pollen

    // $ANTLR start synpred185_pollen
    public final void synpred185_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:5: ( IDENT BIND expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:5: IDENT BIND expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred185_pollen6305); if (state.failed) return ;

        match(input,BIND,FOLLOW_BIND_in_synpred185_pollen6307); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred185_pollen6309);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred185_pollen

    // $ANTLR start synpred195_pollen
    public final void synpred195_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:17: ( qualNameList )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:17: qualNameList
        {
        pushFollow(FOLLOW_qualNameList_in_synpred195_pollen6512);
        qualNameList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred195_pollen

    // $ANTLR start synpred196_pollen
    public final void synpred196_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:6: ( '.' IDENT )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:6: '.' IDENT
        {
        match(input,129,FOLLOW_129_in_synpred196_pollen6540); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred196_pollen6556); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred196_pollen

    // $ANTLR start synpred208_pollen
    public final void synpred208_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1012:2: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1012:2: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred208_pollen6887); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred208_pollen

    // $ANTLR start synpred209_pollen
    public final void synpred209_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:12: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:12: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred209_pollen7001); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred209_pollen

    // $ANTLR start synpred210_pollen
    public final void synpred210_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:4: ( ( SEMI ) ( NL )* )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:4: ( SEMI ) ( NL )*
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:4: ( SEMI )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:5: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred210_pollen6997); if (state.failed) return ;

        }


        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:11: ( NL )*
        loop139:
        do {
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==NL) ) {
                alt139=1;
            }


            switch (alt139) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:12: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred210_pollen7001); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop139;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred210_pollen

    // $ANTLR start synpred211_pollen
    public final void synpred211_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:5: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:5: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred211_pollen7012); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred211_pollen

    // $ANTLR start synpred212_pollen
    public final void synpred212_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:4: ( ( NL )+ )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:4: ( NL )+
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:4: ( NL )+
        int cnt140=0;
        loop140:
        do {
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==NL) ) {
                alt140=1;
            }


            switch (alt140) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:5: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred212_pollen7012); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt140 >= 1 ) break loop140;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(140, input);
                    throw eee;
            }
            cnt140++;
        } while (true);


        }

    }
    // $ANTLR end synpred212_pollen

    // $ANTLR start synpred214_pollen
    public final void synpred214_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:4: ( ( NL )* '}' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:5: ( NL )* '}'
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:5: ( NL )*
        loop141:
        do {
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==NL) ) {
                alt141=1;
            }


            switch (alt141) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:6: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred214_pollen7026); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop141;
            }
        } while (true);


        match(input,193,FOLLOW_193_in_synpred214_pollen7030); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred214_pollen

    // $ANTLR start synpred215_pollen
    public final void synpred215_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:20: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1031:20: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred215_pollen7036); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred215_pollen

    // Delegated rules

    public final boolean synpred169_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_NL_in_unit675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040020L,0x00028C2208180000L});
    public static final BitSet FOLLOW_unitPackage_in_unit679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPackage_in_unitPackage709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x00020C2208180000L});
    public static final BitSet FOLLOW_importList_in_unitPackage715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x00020C0008180000L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00020C0008180000L});
    public static final BitSet FOLLOW_unitTypeDefinition_in_unitPackage731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage739 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_pollenEOF_in_unitPackage747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_pollenEOF757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmtInjectionList775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_175_in_stmtPackage805 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_stmtPackage807 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtPackage809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_stmtExport844 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_stmtExport846 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtExport848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtExport_in_exportList878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_147_in_classDefinition924 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_classDef_in_classDefinition926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classDef951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000001000000000L});
    public static final BitSet FOLLOW_implementsClause_in_classDef960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_classDef967 = new BitSet(new long[]{0x8000000000000000L,0x2000000000040020L,0x1E2811C4082A8000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classFeatureList_in_classDef969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_classDef971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFeature_in_classFeatureList993 = new BitSet(new long[]{0x8000000000000002L,0x2000000000000020L,0x1E2811C4082A8000L});
    public static final BitSet FOLLOW_fcnDefinition_in_classFeature1022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_classFeature1033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_classFeature1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_classFeature1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_classFeature1063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_moduleDefinition1080 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_moduleDefinition1082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000001000000000L});
    public static final BitSet FOLLOW_implementsClause_in_moduleDefinition1097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_moduleDefinition1106 = new BitSet(new long[]{0x8000000000000000L,0x2000000000040020L,0x1E2811C4082A8000L,0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeatureList_in_moduleDefinition1108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_moduleDefinition1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeature_in_moduleFeatureList1143 = new BitSet(new long[]{0x8000000000000002L,0x2000000000000020L,0x1E2811C4082A8000L});
    public static final BitSet FOLLOW_fcnDefinition_in_moduleFeature1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_moduleFeature1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_moduleFeature1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_moduleFeature1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_moduleFeature1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_enumDefinition1211 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_enumDef_in_enumDefinition1213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumDef1239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_enumDef1248 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_enumList_in_enumDef1250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_enumDef1252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList1281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_enumList1284 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_enumElement_in_enumList1286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_enumElement1311 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_enumElement1313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INT_LIT_in_enumElement1315 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_enumElement1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement1343 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_enumElement1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_protocolDefinition1366 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_protocolDefinition1368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000040000000L});
    public static final BitSet FOLLOW_extendsClause_in_protocolDefinition1376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_protocolDefinition1382 = new BitSet(new long[]{0x8000000000000000L,0x2000000000040020L,0x0E2801C408028000L,0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeatureList_in_protocolDefinition1384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_protocolDefinition1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeature_in_protocolFeatureList1419 = new BitSet(new long[]{0x8000000000000002L,0x2000000000000020L,0x0E2801C408028000L});
    public static final BitSet FOLLOW_enumDefinition_in_protocolFeature1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclaration_in_protocolFeature1458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_protocolFeature1469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_compositionDefinition1482 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_compositionDefinition1484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000040000000L});
    public static final BitSet FOLLOW_extendsClause_in_compositionDefinition1492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_compositionDefinition1499 = new BitSet(new long[]{0x8000000000000000L,0x2000000000040020L,0x1E2811C428228000L,0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeatureList_in_compositionDefinition1501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_compositionDefinition1503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeature_in_compositionFeatureList1545 = new BitSet(new long[]{0x8000000000000002L,0x2000000000000020L,0x1E2811C428228000L});
    public static final BitSet FOLLOW_exportList_in_compositionFeature1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_compositionFeature1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_compositionFeature1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_compositionFeature1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_compositionFeature1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importFrom_in_stmtImport1619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_stmtImport1629 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_stmtImport1631 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L,0x4000000000002000L});
    public static final BitSet FOLLOW_metaArguments_in_stmtImport1634 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L,0x0000000000002000L});
    public static final BitSet FOLLOW_importAs_in_stmtImport1647 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtImport1649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_importFrom1691 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_importFrom1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_importAs1722 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_importAs1724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImport_in_importList1750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_170_in_meta1784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_meta1793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0F2001C000028000L});
    public static final BitSet FOLLOW_metaFormalParameters_in_meta1795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_meta1797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaFormalParameter_in_metaFormalParameters1822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_metaFormalParameters1826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0F2001C000028000L});
    public static final BitSet FOLLOW_metaFormalParameter_in_metaFormalParameters1828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_metaFormalParameterType_in_metaFormalParameter1851 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_metaFormalParameter1853 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaFormalParameter1856 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_metaFormalParameter1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_metaFormalParameterType1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_metaFormalParameterType1894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_metaArguments1921 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_metaArguments1923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_metaArguments1927 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_metaArguments1929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_metaArguments1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_metaArguments1953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_metaArguments1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_metaArgument1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_metaArgument1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_typeName2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameScalar2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_typeNameScalar2036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeName2046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_metaArguments_in_userTypeName2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeName2069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_meta_in_unitTypeDefinition2108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080008180000L});
    public static final BitSet FOLLOW_moduleDefinition_in_unitTypeDefinition2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_unitTypeDefinition2151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolDefinition_in_unitTypeDefinition2168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionDefinition_in_unitTypeDefinition2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_unitTypeDefinition2204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_extendsClause2229 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_extendsClause2231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_implementsClause2254 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_implementsClause2256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_braceClose2280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_braceClose2285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_braceClose2289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_braceCloseAtEOF2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_braceCloseAtEOF2318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_braceCloseAtEOF2322 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_braceOpen2347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_braceOpen2352 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_braceOpen2356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_LOG_NOT_in_logicalNotOp2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_NOT_in_bitwiseNotOp2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprList2555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_exprList2558 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprList2560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr2599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expr2601 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_expr2603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_expr2605 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_expr2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr2630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr2648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_exprLogicalOr2662 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr2664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd2703 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_exprLogicalAnd2715 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd2717 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr2754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_exprBitwiseOr2766 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr2768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_exprBitwiseXor2816 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd2854 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_exprBitwiseAnd2866 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd2868 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality2904 = new BitSet(new long[]{0x0000004000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_equalityOp_in_exprEquality2917 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality2919 = new BitSet(new long[]{0x0000004000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational2955 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000400L,0x0000000000000050L});
    public static final BitSet FOLLOW_relationalOp_in_exprRelational2968 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational2970 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000400L,0x0000000000000050L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift3007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_shiftOp_in_exprShift3020 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift3023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000A0L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub3060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000401000L});
    public static final BitSet FOLLOW_addSubOp_in_exprAddSub3072 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub3074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000401000L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv3117 = new BitSet(new long[]{0x0000000000000002L,0x8400000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_multDivModOp_in_exprMultDiv3129 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv3131 = new BitSet(new long[]{0x0000000000000002L,0x8400000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_172_in_exprNew3166 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_exprNew3168 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_exprNew3170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_exprUnary3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_exprUnary3201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLit_in_exprUnary3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNotOp_in_exprUnary3230 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseNotOp_in_exprUnary3256 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_exprUnary3282 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3284 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_exprUnary3286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_exprUnary3302 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary3329 = new BitSet(new long[]{0x0000000000002000L,0x0000000000000010L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary3357 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0000100000000200L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_exprUnary3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnDefinition3400 = new BitSet(new long[]{0x8000000000000000L,0x2000000000000000L,0x0E2001C400028000L});
    public static final BitSet FOLLOW_162_in_fcnDefinition3411 = new BitSet(new long[]{0x8000000000000000L,0x2000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinition3421 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnFormalParameterList_in_fcnDefinition3423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinition3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnDefinitionHost3467 = new BitSet(new long[]{0x8000000000000000L,0x2000000000000000L,0x0E2001C400028000L});
    public static final BitSet FOLLOW_162_in_fcnDefinitionHost3472 = new BitSet(new long[]{0x8000000000000000L,0x2000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinitionHost3483 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnFormalParameterList_in_fcnDefinitionHost3486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinitionHost3488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnAttr3532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_fcnAttr3543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpen_in_fcnBody3560 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011241170L,0x7EF531CD8163C600L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmts_in_fcnBody3563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_fcnBody3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnDeclaration3606 = new BitSet(new long[]{0x8000000000000000L,0x2000000000000000L,0x0E2001C400028000L});
    public static final BitSet FOLLOW_162_in_fcnDeclaration3617 = new BitSet(new long[]{0x8000000000000000L,0x2000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDeclaration3627 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnFormalParameterList_in_fcnDeclaration3630 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_fcnDeclaration3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName3666 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName3846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_fcnTypes_fcnName3857 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnTypes_in_fcnTypes_fcnName3859 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_fcnTypes_fcnName3861 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_fcnTypes_fcnName3863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes3884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnTypes3887 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes3889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_125_in_fcnFormalParameterList3924 = new BitSet(new long[]{0x8000000000000000L,0x4000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnFormalParameters_in_fcnFormalParameterList3926 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_fcnFormalParameterList3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnFormalParameter_in_fcnFormalParameters3942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnFormalParameters3945 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnFormalParameter_in_fcnFormalParameters3947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_typeName_in_fcnFormalParameter3990 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_fcnFormalParameter3992 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_fcnFormalParameter3996 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_fcnFormalParameter3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_fcnArgumentList4035 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_fcnArguments_in_fcnArgumentList4037 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_fcnArgumentList4039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_fcnArguments4054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_varOrFcnOrArray4064 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_varOrFcnOrArray4066 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray4068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray4097 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray4099 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray4101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray4155 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray4157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray4218 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray4220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray4260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldAccess_in_fieldOrArrayAccess4292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_arrayAccess_in_fieldOrArrayAccess4296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_129_in_fieldAccess4310 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess4312 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldAccess4314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_fieldAccess4336 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_arrayAccess4363 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000E00L});
    public static final BitSet FOLLOW_exprList_in_arrayAccess4366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_arrayAccess4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpen_in_stmtBlock4393 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011241170L,0x7EF531CD8163C600L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmts_in_stmtBlock4395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_stmtBlock4397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_stmts4423 = new BitSet(new long[]{0x9000000000002C02L,0x2000000011241170L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_stmts4445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_stmtDecl_in_stmt4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmt4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssert_in_stmt4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_stmt4482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt4487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPrint_in_stmt4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtReturn_in_stmt4497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBreak_in_stmt4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtContinue_in_stmt4508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtFor_in_stmt4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtSwitch_in_stmt4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDoWhile_in_stmt4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtIf_in_stmt4530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtProvided_in_stmt4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtWhile_in_stmt4540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmt4546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmt4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmt4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign4577 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign4579 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign4618 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign4620 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4622 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign4660 = new BitSet(new long[]{0x0000000000008390L,0x0000000022018200L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign4662 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign4702 = new BitSet(new long[]{0x0000000000008390L,0x0000000022018200L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign4704 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4706 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_stmtAssert4748 = new BitSet(new long[]{0x9000000000002C00L,0x2000000015241170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprList_in_stmtAssert4750 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtAssert4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtBind4770 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_stmtBind4772 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtBind4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtBind4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_stmtPrint4811 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080720090000600L});
    public static final BitSet FOLLOW_stmtPrintTarget_in_stmtPrint4814 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprList_in_stmtPrint4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_stmtPrintTarget4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_stmtPrintTarget4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_stmtPrintTarget4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_stmtReturn4892 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_stmtReturn4895 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn4899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtReturn4902 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn4904 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_stmtReturn4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_stmtReturn4941 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn4945 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_stmtBreak4981 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtBreak4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_stmtContinue5005 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtContinue5007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_stmtFor5034 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_stmtFor5036 = new BitSet(new long[]{0x8000000000000000L,0x0000000004000020L,0x0E2011C000028200L});
    public static final BitSet FOLLOW_stmtForInit_in_stmtFor5038 = new BitSet(new long[]{0x9000000000002C00L,0x2000000015201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_stmtForCond_in_stmtFor5040 = new BitSet(new long[]{0x9000000000002C00L,0x6000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_stmtForNext_in_stmtFor5042 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_stmtFor5044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtFor5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond5096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForCond5121 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond5123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit5146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_stmtForInit5172 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_stmtForInit5174 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtForInit5176 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtForInit5178 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit5180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmtForInit5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForNext5276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_stmtSwitch5295 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_stmtSwitch5297 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtSwitch5299 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_stmtSwitch5301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_stmtSwitch5303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000840000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmtsCase_in_stmtSwitch5305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000800000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDefault_in_stmtSwitch5307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_stmtSwitch5310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtCase_in_stmtsCase5340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_151_in_stmtDefault5364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_stmtDefault5366 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011241170L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_stmtDefault5368 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011241170L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_stmts_in_stmtDefault5371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_stmtCase5395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INT_LIT_in_stmtCase5398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_stmtCase5401 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011241170L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_stmtCase5403 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011241170L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_stmts_in_stmtCase5406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_stmtDoWhile5432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtDoWhile5434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_stmtDoWhile5436 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_stmtDoWhile5438 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtDoWhile5440 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_stmtDoWhile5442 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtDoWhile5444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_stmtIf5471 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtIf5473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_stmtsElif_in_stmtIf5475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtIf5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_stmtIfBlock5507 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtIfBlock5509 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_stmtIfBlock5511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtIfBlock5513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtElif_in_stmtsElif5529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_stmtElif5549 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtElif5551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_stmtElse5575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtElse5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_stmtProvided5591 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_stmtProvided5593 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtProvided5595 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_stmtProvided5597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtProvided5599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtProvided5602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtWhile5629 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_stmtWhile5631 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtWhile5633 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_stmtWhile5634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtWhile5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_stmtDecl5674 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2011C000028000L});
    public static final BitSet FOLLOW_varDecl_in_stmtDecl5676 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_stmtDecl5678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_varDeclaration5720 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2011C000028000L});
    public static final BitSet FOLLOW_varDecl_in_varDeclaration5722 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_varDeclaration5724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_varAttr5745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000400200000L});
    public static final BitSet FOLLOW_188_in_varAttr5754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000400200000L});
    public static final BitSet FOLLOW_162_in_varAttr5764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000400200000L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl5808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varArray_in_varDecl5825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef_in_varDecl5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_varDecl5863 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_varDecl5865 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varDecl5867 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varDecl5869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef5931 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef5933 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef5935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_fcnRefTypeList5967 = new BitSet(new long[]{0x8000000000000000L,0x4000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnRefTypes_in_fcnRefTypeList5969 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_fcnRefTypeList5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes5985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnRefTypes5988 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes5990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_typeName_in_varArray6031 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_varArray6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varArraySpec_in_varArray6035 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varArray6038 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_in_varArray6040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_varArraySpec6078 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000E00L});
    public static final BitSet FOLLOW_varDim_in_varArraySpec6080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_varArraySpec6082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_expr_in_varDim6110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_initializer6130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_initializer6136 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_list_in_initializer6138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_initializer6140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_initializer6143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list6157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_initializer_list6160 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_in_initializer_list6162 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varBuiltInType_in_varDeclList6196 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit2_in_varDeclList6201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_varDeclList6204 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit2_in_varDeclList6207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_userTypeName_in_varDeclList6214 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit_in_varDeclList6219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_varDeclList6222 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit_in_varDeclList6225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_builtinType_in_varBuiltInType6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit26262 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit26265 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_varInit26267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit6305 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_varInit6307 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_varInit6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit6340 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit6343 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_varInit6345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualName6509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameList_in_qualName6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_qualNameList6540 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualNameList6556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_arrayLit6592 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0080200080000800L});
    public static final BitSet FOLLOW_arrayLitList_in_arrayLit6594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_arrayLit6596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList6618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_arrayLitList6621 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0080200080000000L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList6623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_primitiveLit_in_arrayLitElem6647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedConstant_in_arrayLitElem6651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_namedConstant6661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_boolLit6673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_nullLit6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_numLit6708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_numLit6717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LIT_in_numLit6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_numLit6735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolLit_in_primitiveLit6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numLit_in_primitiveLit6779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullLit_in_primitiveLit6799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_primitiveLit6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_primitiveLit6846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_stmtInjection6881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_stmtInjection6887 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_INJECT_in_injectionCode6927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_injectionDecl6959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_delim6997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_delim7001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_delim7012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_delim7036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_stmtExport_in_synpred4_pollen878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred7_pollen1022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred9_pollen1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred13_pollen1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred14_pollen1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delim_in_synpred18_pollen1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred19_pollen1311 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred19_pollen1313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INT_LIT_in_synpred19_pollen1315 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_synpred19_pollen1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delim_in_synpred20_pollen1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_synpred28_pollen1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred30_pollen1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaArguments_in_synpred31_pollen1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred39_pollen1921 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_synpred39_pollen1923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred39_pollen1927 = new BitSet(new long[]{0x9000000000000800L,0x0000000011200040L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_synpred39_pollen1929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred39_pollen1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred42_pollen2046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_metaArguments_in_synpred42_pollen2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_synpred44_pollen2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_synpred45_pollen2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred46_pollen2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_synpred47_pollen2181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_synpred48_pollen2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred50_pollen2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred54_pollen2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred73_pollen2558 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred73_pollen2560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred74_pollen2555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred74_pollen2558 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred74_pollen2560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprLogicalOr_in_synpred75_pollen2599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred75_pollen2601 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred75_pollen2603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred75_pollen2605 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred75_pollen2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_synpred76_pollen2662 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_synpred76_pollen2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_synpred77_pollen2715 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_synpred77_pollen2717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_synpred78_pollen2766 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_synpred78_pollen2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_synpred79_pollen2816 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_synpred79_pollen2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred80_pollen2866 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprEquality_in_synpred80_pollen2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityOp_in_synpred81_pollen2917 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprRelational_in_synpred81_pollen2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred82_pollen2968 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprShift_in_synpred82_pollen2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred83_pollen3020 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprAddSub_in_synpred83_pollen3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addSubOp_in_synpred84_pollen3072 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprMultDiv_in_synpred84_pollen3074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multDivModOp_in_synpred85_pollen3129 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprUnary_in_synpred85_pollen3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred93_pollen3329 = new BitSet(new long[]{0x0000000000002000L,0x0000000000000010L});
    public static final BitSet FOLLOW_incDecOp_in_synpred93_pollen3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred94_pollen3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred104_pollen3666 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_synpred104_pollen3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred105_pollen3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred106_pollen3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred108_pollen3828 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_synpred108_pollen3830 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred108_pollen3833 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000000L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_synpred108_pollen3835 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_synpred108_pollen3839 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_qualName_in_synpred108_pollen3841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred113_pollen4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred115_pollen4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred116_pollen4097 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred116_pollen4099 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred116_pollen4101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred116_pollen4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred117_pollen4159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred118_pollen4155 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred118_pollen4157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred118_pollen4159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred119_pollen4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred120_pollen4222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred121_pollen4218 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred121_pollen4220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred121_pollen4222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred122_pollen4262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_synpred124_pollen4296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred125_pollen4310 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred125_pollen4312 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred125_pollen4314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_synpred126_pollen4366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred127_pollen4423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred128_pollen4423 = new BitSet(new long[]{0x9000000000002C02L,0x2000000011241170L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_synpred129_pollen4445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDecl_in_synpred130_pollen4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_synpred131_pollen4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_synpred133_pollen4482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_synpred145_pollen4546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred146_pollen4577 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred146_pollen4579 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred146_pollen4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_synpred146_pollen4583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_synpred147_pollen4618 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred147_pollen4620 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred147_pollen4622 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_synpred147_pollen4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred148_pollen4660 = new BitSet(new long[]{0x0000000000008390L,0x0000000022018200L});
    public static final BitSet FOLLOW_assignOp_in_synpred148_pollen4662 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred148_pollen4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_synpred148_pollen4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred153_pollen4892 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_synpred153_pollen4895 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred153_pollen4899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred153_pollen4902 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred153_pollen4904 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_126_in_synpred153_pollen4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000004040000L});
    public static final BitSet FOLLOW_delim_in_synpred153_pollen4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred156_pollen5172 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred156_pollen5174 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred156_pollen5176 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred156_pollen5178 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred156_pollen5180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred160_pollen5368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred161_pollen5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred169_pollen5792 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred169_pollen5794 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred169_pollen5797 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred169_pollen5799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_synpred169_pollen5803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred170_pollen5816 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred170_pollen5818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred170_pollen5820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred171_pollen5833 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_synpred171_pollen5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred172_pollen5850 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit_in_synpred172_pollen5852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_synpred176_pollen6078 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000E00L});
    public static final BitSet FOLLOW_varDim_in_synpred176_pollen6080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred176_pollen6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred180_pollen6160 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_in_synpred180_pollen6162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred181_pollen6204 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit2_in_synpred181_pollen6207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_synpred183_pollen6222 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_varInit_in_synpred183_pollen6225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred185_pollen6305 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_synpred185_pollen6307 = new BitSet(new long[]{0x9000000000002C00L,0x2000000011201170L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred185_pollen6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameList_in_synpred195_pollen6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred196_pollen6540 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred196_pollen6556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred208_pollen6887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred209_pollen7001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred210_pollen6997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_synpred210_pollen7001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_synpred211_pollen7012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred212_pollen7012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_NL_in_synpred214_pollen7026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred214_pollen7030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred215_pollen7036 = new BitSet(new long[]{0x0000000000000002L});

}