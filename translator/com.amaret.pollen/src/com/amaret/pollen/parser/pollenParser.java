// $ANTLR 3.4 /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g 2012-09-14 19:29:29

    package com.amaret.pollen.parser;
    import java.util.EnumSet;
    import java.util.ArrayList;
    import java.lang.*;
    import java.io.*;
    import com.amaret.pollen.parser.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class pollenParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_EQ", "ASSIGN", "BIND", "BITAND_EQ", "BITOR_EQ", "BITXOR_EQ", "BIT_NOT", "CHAR", "D", "DEC", "DELIM", "DIV_EQ", "D_ARG", "D_ARR", "D_ARR_DIM", "D_CLASS", "D_COMPOSITION", "D_CONST", "D_ENUM", "D_ENUMVAL", "D_FCN_CTOR", "D_FCN_DCL", "D_FCN_DEF", "D_FCN_REF", "D_FCN_TYP_NM", "D_FIELD", "D_FORMAL", "D_INJ", "D_INSTANCE", "D_META", "D_MODULE", "D_PROTOCOL", "D_VAR", "E", "EQ", "EXPORT", "E_ADDR", "E_BINARY", "E_CALL", "E_CONST", "E_DEREF", "E_EXPR", "E_HASH", "E_IDENT", "E_INDEX", "E_INJ", "E_NEW", "E_NUMLIT", "E_PAREN", "E_QUEST", "E_SELF", "E_UNARY", "E_VEC", "FCNBODY", "GT", "GT_EQ", "H", "HEX_LIT", "HOST", "I", "IDENT", "IJ_BEG", "IJ_END", "ILLEGAL_CHARACTER", "IMPORT", "INC", "INJECT", "INT_LIT", "LIST", "LOG_NOT", "LSHFT_EQ", "LT", "LT_EQ", "LU", "MINUS", "ML_COMMENT", "MODULE", "MOD_EQ", "MUL_EQ", "NIL", "NL", "NOT_EQ", "O", "OCT_LIT", "PLUS", "QNAME", "REAL_LIT", "RSHFT_EQ", "SEMI", "SL_COMMENT", "STRING", "SUB_EQ", "S_ASSERT", "S_ASSIGN", "S_BIND", "S_BLOCK", "S_BREAK", "S_CASE", "S_CONTINUE", "S_DECL", "S_ELIF", "S_EXPR", "S_FOR", "S_FOREACH", "S_IF", "S_INJ", "S_PACKAGE", "S_PRINT", "S_PROVIDED", "S_RETURN", "S_SWITCH", "S_WHILE", "T_ARR", "T_FCN", "T_LST", "T_STD", "T_USR", "UNIT", "VOID", "WS", "'%'", "'&&'", "'&'", "'('", "')'", "'*'", "','", "'.'", "'/'", "':'", "'<<'", "'>>'", "'?'", "'@'", "'['", "']'", "'^'", "'as'", "'assert'", "'bool'", "'break'", "'byte'", "'case'", "'class'", "'composition'", "'const'", "'continue'", "'default'", "'do'", "'elif'", "'else'", "'enum'", "'err'", "'export'", "'extends'", "'false'", "'for'", "'from'", "'host'", "'if'", "'implements'", "'import'", "'int16'", "'int32'", "'int8'", "'log'", "'meta'", "'module'", "'new'", "'null'", "'out'", "'package'", "'print'", "'protocol'", "'provided'", "'public'", "'return'", "'string'", "'switch'", "'true'", "'type'", "'uint16'", "'uint32'", "'uint8'", "'volatile'", "'while'", "'{'", "'|'", "'||'", "'}'"
    };

    public static final int EOF=-1;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int ADD_EQ=4;
    public static final int ASSIGN=5;
    public static final int BIND=6;
    public static final int BITAND_EQ=7;
    public static final int BITOR_EQ=8;
    public static final int BITXOR_EQ=9;
    public static final int BIT_NOT=10;
    public static final int CHAR=11;
    public static final int D=12;
    public static final int DEC=13;
    public static final int DELIM=14;
    public static final int DIV_EQ=15;
    public static final int D_ARG=16;
    public static final int D_ARR=17;
    public static final int D_ARR_DIM=18;
    public static final int D_CLASS=19;
    public static final int D_COMPOSITION=20;
    public static final int D_CONST=21;
    public static final int D_ENUM=22;
    public static final int D_ENUMVAL=23;
    public static final int D_FCN_CTOR=24;
    public static final int D_FCN_DCL=25;
    public static final int D_FCN_DEF=26;
    public static final int D_FCN_REF=27;
    public static final int D_FCN_TYP_NM=28;
    public static final int D_FIELD=29;
    public static final int D_FORMAL=30;
    public static final int D_INJ=31;
    public static final int D_INSTANCE=32;
    public static final int D_META=33;
    public static final int D_MODULE=34;
    public static final int D_PROTOCOL=35;
    public static final int D_VAR=36;
    public static final int E=37;
    public static final int EQ=38;
    public static final int EXPORT=39;
    public static final int E_ADDR=40;
    public static final int E_BINARY=41;
    public static final int E_CALL=42;
    public static final int E_CONST=43;
    public static final int E_DEREF=44;
    public static final int E_EXPR=45;
    public static final int E_HASH=46;
    public static final int E_IDENT=47;
    public static final int E_INDEX=48;
    public static final int E_INJ=49;
    public static final int E_NEW=50;
    public static final int E_NUMLIT=51;
    public static final int E_PAREN=52;
    public static final int E_QUEST=53;
    public static final int E_SELF=54;
    public static final int E_UNARY=55;
    public static final int E_VEC=56;
    public static final int FCNBODY=57;
    public static final int GT=58;
    public static final int GT_EQ=59;
    public static final int H=60;
    public static final int HEX_LIT=61;
    public static final int HOST=62;
    public static final int I=63;
    public static final int IDENT=64;
    public static final int IJ_BEG=65;
    public static final int IJ_END=66;
    public static final int ILLEGAL_CHARACTER=67;
    public static final int IMPORT=68;
    public static final int INC=69;
    public static final int INJECT=70;
    public static final int INT_LIT=71;
    public static final int LIST=72;
    public static final int LOG_NOT=73;
    public static final int LSHFT_EQ=74;
    public static final int LT=75;
    public static final int LT_EQ=76;
    public static final int LU=77;
    public static final int MINUS=78;
    public static final int ML_COMMENT=79;
    public static final int MODULE=80;
    public static final int MOD_EQ=81;
    public static final int MUL_EQ=82;
    public static final int NIL=83;
    public static final int NL=84;
    public static final int NOT_EQ=85;
    public static final int O=86;
    public static final int OCT_LIT=87;
    public static final int PLUS=88;
    public static final int QNAME=89;
    public static final int REAL_LIT=90;
    public static final int RSHFT_EQ=91;
    public static final int SEMI=92;
    public static final int SL_COMMENT=93;
    public static final int STRING=94;
    public static final int SUB_EQ=95;
    public static final int S_ASSERT=96;
    public static final int S_ASSIGN=97;
    public static final int S_BIND=98;
    public static final int S_BLOCK=99;
    public static final int S_BREAK=100;
    public static final int S_CASE=101;
    public static final int S_CONTINUE=102;
    public static final int S_DECL=103;
    public static final int S_ELIF=104;
    public static final int S_EXPR=105;
    public static final int S_FOR=106;
    public static final int S_FOREACH=107;
    public static final int S_IF=108;
    public static final int S_INJ=109;
    public static final int S_PACKAGE=110;
    public static final int S_PRINT=111;
    public static final int S_PROVIDED=112;
    public static final int S_RETURN=113;
    public static final int S_SWITCH=114;
    public static final int S_WHILE=115;
    public static final int T_ARR=116;
    public static final int T_FCN=117;
    public static final int T_LST=118;
    public static final int T_STD=119;
    public static final int T_USR=120;
    public static final int UNIT=121;
    public static final int VOID=122;
    public static final int WS=123;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public pollenParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public pollenParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[354+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return pollenParser.tokenNames; }
    public String getGrammarFileName() { return "/home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g"; }



    	private boolean isMetaInstance = false;
    	private UnitNode client = null;
    	private ImportNode clientImport = null;
    	// Trigger meta instantiation via this constructor
    	public pollenParser(TokenStream tokens, UnitNode cl, ImportNode cli) {
    	    this(tokens, new RecognizerSharedState());
    	    isMetaInstance = (cl != null && cli != null); 
    	    client = cl;
    	    clientImport = cli;
    	}
    	    
        EnumSet<Flags> atFlags = EnumSet.noneOf(Flags.class);
        
       private class TypeInfo {
        	public EnumSet<Flags> getUnitFlags() {
    			return uf;
    		}
    		public void setUnitFlags(EnumSet<Flags> unitFlags) {
    			uf.addAll(unitFlags);
    		}
    		public String getTypeName() {
    			return tn;
    		}
    		public void setTypeName(String typeName) {
    			this.tn = typeName;
    		}
    		EnumSet<Flags> uf = EnumSet.noneOf(Flags.class);
        	String tn = "";  
        }
        ArrayList<TypeInfo> tl = new ArrayList<TypeInfo>();
        TypeInfo ti;
        
        String getInject(String text) {
            	return text.substring(text.indexOf("{")+1,text.lastIndexOf("}"));
        }
        
        void DBG(String dbg) {
        	System.out.println(dbg);
        }
        // Override to extract PollenException message when present
        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
            String hdr = getErrorHeader(e);
            String msg = getErrorMessage(e, tokenNames);
            if ( e instanceof PollenException) {
            			msg = e.toString();
            }
            hdr = pollenLexer.getFileName()+ ": " + hdr;
            emitErrorMessage(hdr+" "+msg);       
        }

        String pkgName;
        void DBG_LT() {
          System.out.print("LT: "); 
        	if (input.LT(0) != null) System.out.print(input.LT(0).getText() + ", "); 
        	if (input.LT(1) != null) System.out.print(input.LT(1).getText() + ", "); 
        	if (input.LT(2) != null) System.out.print(input.LT(2).getText() + ", "); 
        	System.out.println();
        }
        /** A mismatched char or Token or tree node */
    	public class PollenException extends RecognitionException {
    		
    		String msg;

    		public PollenException(String m, IntStream input) {
    			super(input);
    			msg = m;
    		}
    		public String toString() {
    			return "PollenException(" + msg + ")";
    		}
    	}


    public static class unit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:229:1: unit : ( NL )* unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) ;
    public final pollenParser.unit_return unit() throws RecognitionException {
        pollenParser.unit_return retval = new pollenParser.unit_return();
        retval.start = input.LT(1);

        int unit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL1=null;
        pollenParser.unitPackage_return unitPackage2 =null;


        BaseNode NL1_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_unitPackage=new RewriteRuleSubtreeStream(adaptor,"rule unitPackage");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:5: ( ( NL )* unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:9: ( NL )* unitPackage
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:9: ( NL )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==NL) ) {
                    int LA1_1 = input.LA(2);

                    if ( (synpred1_pollen()) ) {
                        alt1=1;
                    }


                }


                switch (alt1) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:10: NL
            	    {
            	    NL1=(Atom)match(input,NL,FOLLOW_NL_in_unit675); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL1);


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            pushFollow(FOLLOW_unitPackage_in_unit679);
            unitPackage2=unitPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitPackage.add(unitPackage2.getTree());

            // AST REWRITE
            // elements: unitPackage
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 230:29: -> ^( UNIT[\"UNIT\"] unitPackage )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:32: ^( UNIT[\"UNIT\"] unitPackage )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new UnitNode(UNIT, "UNIT")
                , root_1);

                adaptor.addChild(root_1, stream_unitPackage.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, unit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unit"


    protected static class unitPackage_scope {
        Object unitImports;
    }
    protected Stack unitPackage_stack = new Stack();


    public static class unitPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitPackage"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:232:1: unitPackage : stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF ;
    public final pollenParser.unitPackage_return unitPackage() throws RecognitionException {
        unitPackage_stack.push(new unitPackage_scope());
        pollenParser.unitPackage_return retval = new pollenParser.unitPackage_return();
        retval.start = input.LT(1);

        int unitPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtPackage_return stmtPackage3 =null;

        pollenParser.importList_return importList4 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList5 =null;

        pollenParser.unitTypeDefinition_return unitTypeDefinition6 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList7 =null;

        pollenParser.pollenEOF_return pollenEOF8 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:236:2: ( stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:236:5: stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList pollenEOF
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_stmtPackage_in_unitPackage713);
            stmtPackage3=stmtPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPackage3.getTree());

            pushFollow(FOLLOW_importList_in_unitPackage719);
            importList4=importList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, importList4.getTree());

            if ( state.backtracking==0 ) {((unitPackage_scope)unitPackage_stack.peek()).unitImports = (importList4!=null?((BaseNode)importList4.tree):null);}

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage729);
            stmtInjectionList5=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjectionList5.getTree());

            pushFollow(FOLLOW_unitTypeDefinition_in_unitPackage737);
            unitTypeDefinition6=unitTypeDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unitTypeDefinition6.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage745);
            stmtInjectionList7=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjectionList7.getTree());

            pushFollow(FOLLOW_pollenEOF_in_unitPackage753);
            pollenEOF8=pollenEOF();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pollenEOF8.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, unitPackage_StartIndex); }

            unitPackage_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitPackage"


    public static class pollenEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pollenEOF"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:243:1: pollenEOF : EOF !;
    public final pollenParser.pollenEOF_return pollenEOF() throws RecognitionException {
        pollenParser.pollenEOF_return retval = new pollenParser.pollenEOF_return();
        retval.start = input.LT(1);

        int pollenEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom EOF9=null;

        BaseNode EOF9_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:244:2: ( EOF !)
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:244:4: EOF !
            {
            root_0 = (BaseNode)adaptor.nil();


            EOF9=(Atom)match(input,EOF,FOLLOW_EOF_in_pollenEOF763); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (java.lang.ClassCastException e) {

                //ignore: antlr bug

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, pollenEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pollenEOF"


    public static class stmtInjectionList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjectionList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:249:1: stmtInjectionList : ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) ;
    public final pollenParser.stmtInjectionList_return stmtInjectionList() throws RecognitionException {
        pollenParser.stmtInjectionList_return retval = new pollenParser.stmtInjectionList_return();
        retval.start = input.LT(1);

        int stmtInjectionList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtInjection_return stmtInjection10 =null;


        RewriteRuleSubtreeStream stream_stmtInjection=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjection");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:250:2: ( ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:250:3: ( stmtInjection )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:250:3: ( stmtInjection )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==INJECT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:250:4: stmtInjection
            	    {
            	    pushFollow(FOLLOW_stmtInjection_in_stmtInjectionList781);
            	    stmtInjection10=stmtInjection();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtInjection.add(stmtInjection10.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtInjection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 250:20: -> ^( LIST[\"LIST\"] ( stmtInjection )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:250:23: ^( LIST[\"LIST\"] ( stmtInjection )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:250:48: ( stmtInjection )*
                while ( stream_stmtInjection.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtInjection.nextTree());

                }
                stream_stmtInjection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, stmtInjectionList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjectionList"


    public static class stmtPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPackage"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:252:1: stmtPackage : ( 'package' qualName delim -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) );
    public final pollenParser.stmtPackage_return stmtPackage() throws RecognitionException {
        pollenParser.stmtPackage_return retval = new pollenParser.stmtPackage_return();
        retval.start = input.LT(1);

        int stmtPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal11=null;
        pollenParser.qualName_return qualName12 =null;

        pollenParser.delim_return delim13 =null;


        BaseNode string_literal11_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

           String pkg = ParseUnit.mkPackageName(ParseUnit.current().getCurrPath());

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:256:2: ( 'package' qualName delim -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==175) ) {
                alt3=1;
            }
            else if ( (LA3_0==EOF||LA3_0==INJECT||LA3_0==NL||(LA3_0 >= 147 && LA3_0 <= 148)||LA3_0==155||LA3_0==161||LA3_0==165||(LA3_0 >= 170 && LA3_0 <= 171)||LA3_0==177||LA3_0==190) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:256:4: 'package' qualName delim
                    {
                    string_literal11=(Atom)match(input,175,FOLLOW_175_in_stmtPackage811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(string_literal11);


                    pushFollow(FOLLOW_qualName_in_stmtPackage813);
                    qualName12=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName12.getTree());

                    pushFollow(FOLLOW_delim_in_stmtPackage815);
                    delim13=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim13.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 256:29: -> ^( S_PACKAGE[pkg] qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:256:32: ^( S_PACKAGE[pkg] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:257:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 257:4: -> ^( S_PACKAGE[pkg] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:257:7: ^( S_PACKAGE[pkg] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, stmtPackage_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPackage"


    public static class stmtExport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtExport"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:259:1: stmtExport : 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) ;
    public final pollenParser.stmtExport_return stmtExport() throws RecognitionException {
        pollenParser.stmtExport_return retval = new pollenParser.stmtExport_return();
        retval.start = input.LT(1);

        int stmtExport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal14=null;
        pollenParser.qualName_return qualName15 =null;

        pollenParser.delim_return delim16 =null;


        BaseNode string_literal14_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:260:5: ( 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:260:9: 'export' qualName delim
            {
            string_literal14=(Atom)match(input,157,FOLLOW_157_in_stmtExport850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal14);


            pushFollow(FOLLOW_qualName_in_stmtExport852);
            qualName15=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName15.getTree());

            pushFollow(FOLLOW_delim_in_stmtExport854);
            delim16=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim16.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 260:33: -> ^( EXPORT[\"EXPORT\"] qualName )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:260:36: ^( EXPORT[\"EXPORT\"] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExportNode(EXPORT, "EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, stmtExport_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtExport"


    public static class exportList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exportList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:262:1: exportList : ( stmtExport )+ -> ^( LIST[\"LIST\"] ( stmtExport )+ ) ;
    public final pollenParser.exportList_return exportList() throws RecognitionException {
        pollenParser.exportList_return retval = new pollenParser.exportList_return();
        retval.start = input.LT(1);

        int exportList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtExport_return stmtExport17 =null;


        RewriteRuleSubtreeStream stream_stmtExport=new RewriteRuleSubtreeStream(adaptor,"rule stmtExport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:5: ( ( stmtExport )+ -> ^( LIST[\"LIST\"] ( stmtExport )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:9: ( stmtExport )+
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:9: ( stmtExport )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==157) ) {
                    int LA4_1 = input.LA(2);

                    if ( (synpred4_pollen()) ) {
                        alt4=1;
                    }


                }


                switch (alt4) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:9: stmtExport
            	    {
            	    pushFollow(FOLLOW_stmtExport_in_exportList884);
            	    stmtExport17=stmtExport();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtExport.add(stmtExport17.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);


            // AST REWRITE
            // elements: stmtExport
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 264:6: -> ^( LIST[\"LIST\"] ( stmtExport )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:264:9: ^( LIST[\"LIST\"] ( stmtExport )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_stmtExport.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stmtExport.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtExport.nextTree());

                }
                stream_stmtExport.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, exportList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exportList"


    public static class classDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:266:1: classDefinition : 'class' IDENT ( implementsClause ) braceOpen classFeatureList braceClose -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] IDENT classFeatureList implementsClause ) ;
    public final pollenParser.classDefinition_return classDefinition() throws RecognitionException {
        pollenParser.classDefinition_return retval = new pollenParser.classDefinition_return();
        retval.start = input.LT(1);

        int classDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal18=null;
        Atom IDENT19=null;
        pollenParser.implementsClause_return implementsClause20 =null;

        pollenParser.braceOpen_return braceOpen21 =null;

        pollenParser.classFeatureList_return classFeatureList22 =null;

        pollenParser.braceClose_return braceClose23 =null;


        BaseNode string_literal18_tree=null;
        BaseNode IDENT19_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_classFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule classFeatureList");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        	if (tl.size() > 1) { // nested class
        	  ti = new TypeInfo();
        	  tl.add(ti);		
        	}	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:279:2: ( 'class' IDENT ( implementsClause ) braceOpen classFeatureList braceClose -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] IDENT classFeatureList implementsClause ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:279:4: 'class' IDENT ( implementsClause ) braceOpen classFeatureList braceClose
            {
            string_literal18=(Atom)match(input,147,FOLLOW_147_in_classDefinition929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal18);


            IDENT19=(Atom)match(input,IDENT,FOLLOW_IDENT_in_classDefinition931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT19);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT19!=null?IDENT19.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.CLASS));}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:281:3: ( implementsClause )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:281:4: implementsClause
            {
            pushFollow(FOLLOW_implementsClause_in_classDefinition940);
            implementsClause20=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause20.getTree());

            }


            pushFollow(FOLLOW_braceOpen_in_classDefinition945);
            braceOpen21=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen21.getTree());

            pushFollow(FOLLOW_classFeatureList_in_classDefinition947);
            classFeatureList22=classFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFeatureList.add(classFeatureList22.getTree());

            pushFollow(FOLLOW_braceClose_in_classDefinition949);
            braceClose23=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose23.getTree());

            // AST REWRITE
            // elements: implementsClause, IDENT, classFeatureList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 283:3: -> ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] IDENT classFeatureList implementsClause )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:283:6: ^( D_CLASS[\"D_CLASS\", ti.getUnitFlags()] IDENT classFeatureList implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_CLASS, "D_CLASS", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_classFeatureList.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	if (tl.size() > 1) {
               	tl.remove(tl.size()-1);
               	ti = tl.get(tl.size()-1);
               }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, classDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classDefinition"


    public static class classFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:286:1: classFeatureList : ( classFeature )* -> ^( LIST[\"LIST\"] ( classFeature )* ) ;
    public final pollenParser.classFeatureList_return classFeatureList() throws RecognitionException {
        pollenParser.classFeatureList_return retval = new pollenParser.classFeatureList_return();
        retval.start = input.LT(1);

        int classFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.classFeature_return classFeature24 =null;


        RewriteRuleSubtreeStream stream_classFeature=new RewriteRuleSubtreeStream(adaptor,"rule classFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:287:2: ( ( classFeature )* -> ^( LIST[\"LIST\"] ( classFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:287:4: ( classFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:287:4: ( classFeature )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==IDENT||LA5_0==INJECT||LA5_0==127||LA5_0==143||LA5_0==145||LA5_0==147||LA5_0==149||LA5_0==155||LA5_0==162||(LA5_0 >= 166 && LA5_0 <= 168)||LA5_0==172||LA5_0==179||LA5_0==181||(LA5_0 >= 185 && LA5_0 <= 188)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:287:4: classFeature
            	    {
            	    pushFollow(FOLLOW_classFeature_in_classFeatureList987);
            	    classFeature24=classFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFeature.add(classFeature24.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            // AST REWRITE
            // elements: classFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 287:18: -> ^( LIST[\"LIST\"] ( classFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:287:21: ^( LIST[\"LIST\"] ( classFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:287:46: ( classFeature )*
                while ( stream_classFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFeature.nextTree());

                }
                stream_classFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, classFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeatureList"


    public static class classFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:289:1: classFeature : ( fcnDefinition | enumDefinition | varDeclaration | classDefinition | injectionDecl );
    public final pollenParser.classFeature_return classFeature() throws RecognitionException {
        pollenParser.classFeature_return retval = new pollenParser.classFeature_return();
        retval.start = input.LT(1);

        int classFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition25 =null;

        pollenParser.enumDefinition_return enumDefinition26 =null;

        pollenParser.varDeclaration_return varDeclaration27 =null;

        pollenParser.classDefinition_return classDefinition28 =null;

        pollenParser.injectionDecl_return injectionDecl29 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:290:5: ( fcnDefinition | enumDefinition | varDeclaration | classDefinition | injectionDecl )
            int alt6=5;
            switch ( input.LA(1) ) {
            case 127:
            case 179:
                {
                alt6=1;
                }
                break;
            case 162:
                {
                int LA6_2 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 2, input);

                    throw nvae;

                }
                }
                break;
            case 143:
                {
                int LA6_3 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 3, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA6_4 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 4, input);

                    throw nvae;

                }
                }
                break;
            case 168:
                {
                int LA6_5 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 5, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                int LA6_6 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 6, input);

                    throw nvae;

                }
                }
                break;
            case 167:
                {
                int LA6_7 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 7, input);

                    throw nvae;

                }
                }
                break;
            case 181:
                {
                int LA6_8 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 8, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA6_9 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 9, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA6_10 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 10, input);

                    throw nvae;

                }
                }
                break;
            case 186:
                {
                int LA6_11 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 11, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA6_12 = input.LA(2);

                if ( (synpred6_pollen()) ) {
                    alt6=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt6=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 12, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                alt6=2;
                }
                break;
            case 149:
            case 172:
            case 188:
                {
                alt6=3;
                }
                break;
            case 147:
                {
                alt6=4;
                }
                break;
            case INJECT:
                {
                alt6=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:290:9: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_classFeature1016);
                    fcnDefinition25=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition25.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:291:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_classFeature1027);
                    enumDefinition26=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition26.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:292:9: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_classFeature1037);
                    varDeclaration27=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration27.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:293:9: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_classFeature1047);
                    classDefinition28=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition28.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:294:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_classFeature1057);
                    injectionDecl29=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl29.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, classFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeature"


    public static class moduleDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:296:1: moduleDefinition : 'module' IDENT ( implementsClause ) braceOpen moduleFeatureList braceClose -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList implementsClause ) ;
    public final pollenParser.moduleDefinition_return moduleDefinition() throws RecognitionException {
        pollenParser.moduleDefinition_return retval = new pollenParser.moduleDefinition_return();
        retval.start = input.LT(1);

        int moduleDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal30=null;
        Atom IDENT31=null;
        pollenParser.implementsClause_return implementsClause32 =null;

        pollenParser.braceOpen_return braceOpen33 =null;

        pollenParser.moduleFeatureList_return moduleFeatureList34 =null;

        pollenParser.braceClose_return braceClose35 =null;


        BaseNode string_literal30_tree=null;
        BaseNode IDENT31_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_moduleFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:297:2: ( 'module' IDENT ( implementsClause ) braceOpen moduleFeatureList braceClose -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList implementsClause ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:297:7: 'module' IDENT ( implementsClause ) braceOpen moduleFeatureList braceClose
            {
            string_literal30=(Atom)match(input,171,FOLLOW_171_in_moduleDefinition1075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal30);


            IDENT31=(Atom)match(input,IDENT,FOLLOW_IDENT_in_moduleDefinition1077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT31);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT31!=null?IDENT31.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.MODULE));}

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:299:4: ( implementsClause )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:299:5: implementsClause
            {
            pushFollow(FOLLOW_implementsClause_in_moduleDefinition1092);
            implementsClause32=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause32.getTree());

            }


            pushFollow(FOLLOW_braceOpen_in_moduleDefinition1099);
            braceOpen33=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen33.getTree());

            pushFollow(FOLLOW_moduleFeatureList_in_moduleDefinition1101);
            moduleFeatureList34=moduleFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleFeatureList.add(moduleFeatureList34.getTree());

            pushFollow(FOLLOW_braceClose_in_moduleDefinition1103);
            braceClose35=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose35.getTree());

            // AST REWRITE
            // elements: IDENT, moduleFeatureList, implementsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 301:4: -> ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList implementsClause )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:301:7: ^( D_MODULE[\"D_MODULE\", ti.getUnitFlags()] IDENT moduleFeatureList implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_MODULE, "D_MODULE", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_moduleFeatureList.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, moduleDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleDefinition"


    public static class moduleFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:304:1: moduleFeatureList : ( moduleFeature )* -> ^( LIST[\"LIST\"] ( moduleFeature )* ) ;
    public final pollenParser.moduleFeatureList_return moduleFeatureList() throws RecognitionException {
        pollenParser.moduleFeatureList_return retval = new pollenParser.moduleFeatureList_return();
        retval.start = input.LT(1);

        int moduleFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.moduleFeature_return moduleFeature36 =null;


        RewriteRuleSubtreeStream stream_moduleFeature=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:2: ( ( moduleFeature )* -> ^( LIST[\"LIST\"] ( moduleFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:4: ( moduleFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:4: ( moduleFeature )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==IDENT||LA7_0==INJECT||LA7_0==127||LA7_0==143||LA7_0==145||LA7_0==147||LA7_0==149||LA7_0==155||LA7_0==162||(LA7_0 >= 166 && LA7_0 <= 168)||LA7_0==172||LA7_0==179||LA7_0==181||(LA7_0 >= 185 && LA7_0 <= 188)) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:4: moduleFeature
            	    {
            	    pushFollow(FOLLOW_moduleFeature_in_moduleFeatureList1143);
            	    moduleFeature36=moduleFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_moduleFeature.add(moduleFeature36.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            // AST REWRITE
            // elements: moduleFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 305:19: -> ^( LIST[\"LIST\"] ( moduleFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:22: ^( LIST[\"LIST\"] ( moduleFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:305:47: ( moduleFeature )*
                while ( stream_moduleFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_moduleFeature.nextTree());

                }
                stream_moduleFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, moduleFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeatureList"


    public static class moduleFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:307:1: moduleFeature : ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl );
    public final pollenParser.moduleFeature_return moduleFeature() throws RecognitionException {
        pollenParser.moduleFeature_return retval = new pollenParser.moduleFeature_return();
        retval.start = input.LT(1);

        int moduleFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition37 =null;

        pollenParser.varDeclaration_return varDeclaration38 =null;

        pollenParser.enumDefinition_return enumDefinition39 =null;

        pollenParser.classDefinition_return classDefinition40 =null;

        pollenParser.injectionDecl_return injectionDecl41 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:308:2: ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl )
            int alt8=5;
            switch ( input.LA(1) ) {
            case 127:
            case 179:
                {
                alt8=1;
                }
                break;
            case 162:
                {
                int LA8_2 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 2, input);

                    throw nvae;

                }
                }
                break;
            case 143:
                {
                int LA8_3 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 3, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA8_4 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 4, input);

                    throw nvae;

                }
                }
                break;
            case 168:
                {
                int LA8_5 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 5, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                int LA8_6 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 6, input);

                    throw nvae;

                }
                }
                break;
            case 167:
                {
                int LA8_7 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 7, input);

                    throw nvae;

                }
                }
                break;
            case 181:
                {
                int LA8_8 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 8, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA8_9 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 9, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA8_10 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 10, input);

                    throw nvae;

                }
                }
                break;
            case 186:
                {
                int LA8_11 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 11, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA8_12 = input.LA(2);

                if ( (synpred11_pollen()) ) {
                    alt8=1;
                }
                else if ( (synpred12_pollen()) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 12, input);

                    throw nvae;

                }
                }
                break;
            case 149:
            case 172:
            case 188:
                {
                alt8=2;
                }
                break;
            case 155:
                {
                alt8=3;
                }
                break;
            case 147:
                {
                alt8=4;
                }
                break;
            case INJECT:
                {
                alt8=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:308:6: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_moduleFeature1169);
                    fcnDefinition37=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition37.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:309:8: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_moduleFeature1178);
                    varDeclaration38=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration38.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:310:6: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_moduleFeature1185);
                    enumDefinition39=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition39.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:311:6: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_moduleFeature1192);
                    classDefinition40=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition40.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:312:5: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_moduleFeature1198);
                    injectionDecl41=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl41.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, moduleFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeature"


    public static class enumDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:314:1: enumDefinition : 'enum' ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList ) ;
    public final pollenParser.enumDefinition_return enumDefinition() throws RecognitionException {
        pollenParser.enumDefinition_return retval = new pollenParser.enumDefinition_return();
        retval.start = input.LT(1);

        int enumDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal42=null;
        Atom IDENT43=null;
        pollenParser.braceOpen_return braceOpen44 =null;

        pollenParser.enumList_return enumList45 =null;

        pollenParser.braceClose_return braceClose46 =null;


        BaseNode string_literal42_tree=null;
        BaseNode IDENT43_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleSubtreeStream stream_enumList=new RewriteRuleSubtreeStream(adaptor,"rule enumList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

        	if (tl.size() > 1) { // nested 
        	  ti = new TypeInfo();
        	  tl.add(ti);		
        	}	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:327:2: ( 'enum' ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:327:5: 'enum' ( IDENT braceOpen enumList braceClose )
            {
            string_literal42=(Atom)match(input,155,FOLLOW_155_in_enumDefinition1222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal42);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:327:11: ( IDENT braceOpen enumList braceClose )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:327:12: IDENT braceOpen enumList braceClose
            {
            IDENT43=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumDefinition1224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT43);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT43!=null?IDENT43.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.ENUM));}

            pushFollow(FOLLOW_braceOpen_in_enumDefinition1233);
            braceOpen44=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen44.getTree());

            pushFollow(FOLLOW_enumList_in_enumDefinition1235);
            enumList45=enumList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumList.add(enumList45.getTree());

            pushFollow(FOLLOW_braceClose_in_enumDefinition1237);
            braceClose46=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose46.getTree());

            }


            // AST REWRITE
            // elements: IDENT, enumList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 330:3: -> ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:330:6: ^( D_ENUM[\"D_ENUM\", ti.getUnitFlags()] IDENT enumList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_ENUM, "D_ENUM", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_enumList.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	if (tl.size() > 1) {
               	tl.remove(tl.size()-1);
               	ti = tl.get(tl.size()-1);
               }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, enumDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumDefinition"


    public static class enumList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:333:1: enumList : enumElement ( ',' enumElement )* -> ^( LIST[\"LIST\"] ( enumElement )+ ) ;
    public final pollenParser.enumList_return enumList() throws RecognitionException {
        pollenParser.enumList_return retval = new pollenParser.enumList_return();
        retval.start = input.LT(1);

        int enumList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal48=null;
        pollenParser.enumElement_return enumElement47 =null;

        pollenParser.enumElement_return enumElement49 =null;


        BaseNode char_literal48_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_enumElement=new RewriteRuleSubtreeStream(adaptor,"rule enumElement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:334:2: ( enumElement ( ',' enumElement )* -> ^( LIST[\"LIST\"] ( enumElement )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:334:4: enumElement ( ',' enumElement )*
            {
            pushFollow(FOLLOW_enumElement_in_enumList1273);
            enumElement47=enumElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumElement.add(enumElement47.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:334:16: ( ',' enumElement )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==130) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:334:17: ',' enumElement
            	    {
            	    char_literal48=(Atom)match(input,130,FOLLOW_130_in_enumList1276); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal48);


            	    pushFollow(FOLLOW_enumElement_in_enumList1278);
            	    enumElement49=enumElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumElement.add(enumElement49.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            // AST REWRITE
            // elements: enumElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 334:35: -> ^( LIST[\"LIST\"] ( enumElement )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:334:38: ^( LIST[\"LIST\"] ( enumElement )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_enumElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, enumList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumList"


    public static class enumElement_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumElement"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:336:1: enumElement : ( IDENT ASSIGN INT_LIT ( delim )? -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) ) | IDENT ( delim )? -> ^( D_ENUMVAL IDENT ) );
    public final pollenParser.enumElement_return enumElement() throws RecognitionException {
        pollenParser.enumElement_return retval = new pollenParser.enumElement_return();
        retval.start = input.LT(1);

        int enumElement_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT50=null;
        Atom ASSIGN51=null;
        Atom INT_LIT52=null;
        Atom IDENT54=null;
        pollenParser.delim_return delim53 =null;

        pollenParser.delim_return delim55 =null;


        BaseNode IDENT50_tree=null;
        BaseNode ASSIGN51_tree=null;
        BaseNode INT_LIT52_tree=null;
        BaseNode IDENT54_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:2: ( IDENT ASSIGN INT_LIT ( delim )? -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) ) | IDENT ( delim )? -> ^( D_ENUMVAL IDENT ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==IDENT) ) {
                int LA12_1 = input.LA(2);

                if ( (synpred17_pollen()) ) {
                    alt12=1;
                }
                else if ( (true) ) {
                    alt12=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:4: IDENT ASSIGN INT_LIT ( delim )?
                    {
                    IDENT50=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement1303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT50);


                    ASSIGN51=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_enumElement1305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN51);


                    INT_LIT52=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_enumElement1307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT52);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:25: ( delim )?
                    int alt10=2;
                    switch ( input.LA(1) ) {
                        case SEMI:
                            {
                            alt10=1;
                            }
                            break;
                        case NL:
                            {
                            int LA10_2 = input.LA(2);

                            if ( (synpred16_pollen()) ) {
                                alt10=1;
                            }
                            }
                            break;
                        case 130:
                            {
                            int LA10_3 = input.LA(2);

                            if ( (synpred16_pollen()) ) {
                                alt10=1;
                            }
                            }
                            break;
                        case 193:
                            {
                            int LA10_4 = input.LA(2);

                            if ( (synpred16_pollen()) ) {
                                alt10=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            int LA10_5 = input.LA(2);

                            if ( (synpred16_pollen()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    switch (alt10) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:26: delim
                            {
                            pushFollow(FOLLOW_delim_in_enumElement1310);
                            delim53=delim();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_delim.add(delim53.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: INT_LIT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 337:34: -> ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:37: ^( D_ENUMVAL[\"D_ENUMVAL\", ti.getUnitFlags()] ^( IDENT INT_LIT ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", ti.getUnitFlags())
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:99: ^( IDENT INT_LIT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        stream_IDENT.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_INT_LIT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:4: IDENT ( delim )?
                    {
                    IDENT54=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement1335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT54);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:10: ( delim )?
                    int alt11=2;
                    switch ( input.LA(1) ) {
                        case SEMI:
                            {
                            alt11=1;
                            }
                            break;
                        case NL:
                            {
                            int LA11_2 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt11=1;
                            }
                            }
                            break;
                        case 130:
                            {
                            int LA11_3 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt11=1;
                            }
                            }
                            break;
                        case 193:
                            {
                            int LA11_4 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt11=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            int LA11_5 = input.LA(2);

                            if ( (synpred18_pollen()) ) {
                                alt11=1;
                            }
                            }
                            break;
                    }

                    switch (alt11) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:11: delim
                            {
                            pushFollow(FOLLOW_delim_in_enumElement1338);
                            delim55=delim();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_delim.add(delim55.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 338:19: -> ^( D_ENUMVAL IDENT )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:22: ^( D_ENUMVAL IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_ENUMVAL, "D_ENUMVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, enumElement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumElement"


    public static class protocolDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:340:1: protocolDefinition : 'protocol' IDENT extendsClause braceOpen protocolFeatureList braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList extendsClause ) ;
    public final pollenParser.protocolDefinition_return protocolDefinition() throws RecognitionException {
        pollenParser.protocolDefinition_return retval = new pollenParser.protocolDefinition_return();
        retval.start = input.LT(1);

        int protocolDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal56=null;
        Atom IDENT57=null;
        pollenParser.extendsClause_return extendsClause58 =null;

        pollenParser.braceOpen_return braceOpen59 =null;

        pollenParser.protocolFeatureList_return protocolFeatureList60 =null;

        pollenParser.braceClose_return braceClose61 =null;


        BaseNode string_literal56_tree=null;
        BaseNode IDENT57_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_protocolFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:341:2: ( 'protocol' IDENT extendsClause braceOpen protocolFeatureList braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList extendsClause ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:341:4: 'protocol' IDENT extendsClause braceOpen protocolFeatureList braceClose
            {
            string_literal56=(Atom)match(input,177,FOLLOW_177_in_protocolDefinition1358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal56);


            IDENT57=(Atom)match(input,IDENT,FOLLOW_IDENT_in_protocolDefinition1360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT57);


            if ( state.backtracking==0 ) { ti.setTypeName((IDENT57!=null?IDENT57.getText():null)); ti.setUnitFlags(EnumSet.of(Flags.PROTOCOL));}

            pushFollow(FOLLOW_extendsClause_in_protocolDefinition1368);
            extendsClause58=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause58.getTree());

            pushFollow(FOLLOW_braceOpen_in_protocolDefinition1372);
            braceOpen59=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen59.getTree());

            pushFollow(FOLLOW_protocolFeatureList_in_protocolDefinition1374);
            protocolFeatureList60=protocolFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocolFeatureList.add(protocolFeatureList60.getTree());

            pushFollow(FOLLOW_braceClose_in_protocolDefinition1376);
            braceClose61=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose61.getTree());

            // AST REWRITE
            // elements: IDENT, extendsClause, protocolFeatureList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 345:3: -> ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList extendsClause )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:345:6: ^( D_PROTOCOL[\"D_PROTOCOL\", ti.getUnitFlags()] IDENT protocolFeatureList extendsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_PROTOCOL, "D_PROTOCOL", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_protocolFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, protocolDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolDefinition"


    public static class protocolFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:348:1: protocolFeatureList : ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) ;
    public final pollenParser.protocolFeatureList_return protocolFeatureList() throws RecognitionException {
        pollenParser.protocolFeatureList_return retval = new pollenParser.protocolFeatureList_return();
        retval.start = input.LT(1);

        int protocolFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.protocolFeature_return protocolFeature62 =null;


        RewriteRuleSubtreeStream stream_protocolFeature=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:349:2: ( ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:349:4: ( protocolFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:349:4: ( protocolFeature )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==IDENT||LA13_0==INJECT||LA13_0==127||LA13_0==143||LA13_0==145||LA13_0==155||LA13_0==162||(LA13_0 >= 166 && LA13_0 <= 168)||LA13_0==179||LA13_0==181||(LA13_0 >= 185 && LA13_0 <= 187)) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:349:4: protocolFeature
            	    {
            	    pushFollow(FOLLOW_protocolFeature_in_protocolFeatureList1414);
            	    protocolFeature62=protocolFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protocolFeature.add(protocolFeature62.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            // AST REWRITE
            // elements: protocolFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 349:21: -> ^( LIST[\"LIST\"] ( protocolFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:349:24: ^( LIST[\"LIST\"] ( protocolFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:349:49: ( protocolFeature )*
                while ( stream_protocolFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_protocolFeature.nextTree());

                }
                stream_protocolFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, protocolFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeatureList"


    public static class protocolFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:351:1: protocolFeature : ( enumDefinition | fcnDeclaration | injectionDecl );
    public final pollenParser.protocolFeature_return protocolFeature() throws RecognitionException {
        pollenParser.protocolFeature_return retval = new pollenParser.protocolFeature_return();
        retval.start = input.LT(1);

        int protocolFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.enumDefinition_return enumDefinition63 =null;

        pollenParser.fcnDeclaration_return fcnDeclaration64 =null;

        pollenParser.injectionDecl_return injectionDecl65 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:352:5: ( enumDefinition | fcnDeclaration | injectionDecl )
            int alt14=3;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt14=1;
                }
                break;
            case IDENT:
            case 127:
            case 143:
            case 145:
            case 162:
            case 166:
            case 167:
            case 168:
            case 179:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt14=2;
                }
                break;
            case INJECT:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:352:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_protocolFeature1443);
                    enumDefinition63=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition63.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:353:9: fcnDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDeclaration_in_protocolFeature1453);
                    fcnDeclaration64=fcnDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDeclaration64.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:354:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_protocolFeature1464);
                    injectionDecl65=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl65.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, protocolFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeature"


    public static class compositionDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:356:1: compositionDefinition : 'composition' IDENT extendsClause braceOpen compositionFeatureList braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList extendsClause ) ;
    public final pollenParser.compositionDefinition_return compositionDefinition() throws RecognitionException {
        pollenParser.compositionDefinition_return retval = new pollenParser.compositionDefinition_return();
        retval.start = input.LT(1);

        int compositionDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal66=null;
        Atom IDENT67=null;
        pollenParser.extendsClause_return extendsClause68 =null;

        pollenParser.braceOpen_return braceOpen69 =null;

        pollenParser.compositionFeatureList_return compositionFeatureList70 =null;

        pollenParser.braceClose_return braceClose71 =null;


        BaseNode string_literal66_tree=null;
        BaseNode IDENT67_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_compositionFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeatureList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:357:2: ( 'composition' IDENT extendsClause braceOpen compositionFeatureList braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList extendsClause ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:357:4: 'composition' IDENT extendsClause braceOpen compositionFeatureList braceClose
            {
            string_literal66=(Atom)match(input,148,FOLLOW_148_in_compositionDefinition1477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal66);


            IDENT67=(Atom)match(input,IDENT,FOLLOW_IDENT_in_compositionDefinition1479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT67);


            if ( state.backtracking==0 ) { 
            		  ti.setTypeName((IDENT67!=null?IDENT67.getText():null)); 
            		  ti.setUnitFlags(EnumSet.of(Flags.COMPOSITION));
            		}

            pushFollow(FOLLOW_extendsClause_in_compositionDefinition1487);
            extendsClause68=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause68.getTree());

            pushFollow(FOLLOW_braceOpen_in_compositionDefinition1493);
            braceOpen69=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen69.getTree());

            pushFollow(FOLLOW_compositionFeatureList_in_compositionDefinition1495);
            compositionFeatureList70=compositionFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compositionFeatureList.add(compositionFeatureList70.getTree());

            pushFollow(FOLLOW_braceClose_in_compositionDefinition1497);
            braceClose71=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose71.getTree());

            // AST REWRITE
            // elements: extendsClause, IDENT, compositionFeatureList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 364:4: -> ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList extendsClause )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:364:7: ^( D_COMPOSITION[\"D_COMPOSITION\", ti.getUnitFlags()] IDENT compositionFeatureList extendsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_COMPOSITION, "D_COMPOSITION", ti.getUnitFlags())
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_compositionFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, compositionDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionDefinition"


    public static class compositionFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeatureList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:367:1: compositionFeatureList : ( compositionFeature )* -> ^( LIST[\"LIST\"] ( compositionFeature )* ) ;
    public final pollenParser.compositionFeatureList_return compositionFeatureList() throws RecognitionException {
        pollenParser.compositionFeatureList_return retval = new pollenParser.compositionFeatureList_return();
        retval.start = input.LT(1);

        int compositionFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.compositionFeature_return compositionFeature72 =null;


        RewriteRuleSubtreeStream stream_compositionFeature=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:2: ( ( compositionFeature )* -> ^( LIST[\"LIST\"] ( compositionFeature )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:4: ( compositionFeature )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:4: ( compositionFeature )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==IDENT||LA15_0==INJECT||LA15_0==127||LA15_0==143||LA15_0==145||LA15_0==149||LA15_0==155||LA15_0==157||LA15_0==162||(LA15_0 >= 166 && LA15_0 <= 168)||LA15_0==172||LA15_0==179||LA15_0==181||(LA15_0 >= 185 && LA15_0 <= 188)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:4: compositionFeature
            	    {
            	    pushFollow(FOLLOW_compositionFeature_in_compositionFeatureList1542);
            	    compositionFeature72=compositionFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compositionFeature.add(compositionFeature72.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            // AST REWRITE
            // elements: compositionFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 368:24: -> ^( LIST[\"LIST\"] ( compositionFeature )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:27: ^( LIST[\"LIST\"] ( compositionFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:368:52: ( compositionFeature )*
                while ( stream_compositionFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_compositionFeature.nextTree());

                }
                stream_compositionFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, compositionFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeatureList"


    public static class compositionFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeature"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:370:1: compositionFeature : ( exportList | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl );
    public final pollenParser.compositionFeature_return compositionFeature() throws RecognitionException {
        pollenParser.compositionFeature_return retval = new pollenParser.compositionFeature_return();
        retval.start = input.LT(1);

        int compositionFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exportList_return exportList73 =null;

        pollenParser.fcnDefinitionHost_return fcnDefinitionHost74 =null;

        pollenParser.enumDefinition_return enumDefinition75 =null;

        pollenParser.varDeclaration_return varDeclaration76 =null;

        pollenParser.injectionDecl_return injectionDecl77 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:371:3: ( exportList | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl )
            int alt16=5;
            switch ( input.LA(1) ) {
            case 157:
                {
                alt16=1;
                }
                break;
            case 127:
            case 179:
                {
                alt16=2;
                }
                break;
            case 162:
                {
                int LA16_3 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 3, input);

                    throw nvae;

                }
                }
                break;
            case 143:
                {
                int LA16_4 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 4, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA16_5 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 5, input);

                    throw nvae;

                }
                }
                break;
            case 168:
                {
                int LA16_6 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 6, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                int LA16_7 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 7, input);

                    throw nvae;

                }
                }
                break;
            case 167:
                {
                int LA16_8 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 8, input);

                    throw nvae;

                }
                }
                break;
            case 181:
                {
                int LA16_9 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 9, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA16_10 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 10, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA16_11 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 11, input);

                    throw nvae;

                }
                }
                break;
            case 186:
                {
                int LA16_12 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 12, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA16_13 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt16=2;
                }
                else if ( (synpred26_pollen()) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 13, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                alt16=3;
                }
                break;
            case 149:
            case 172:
            case 188:
                {
                alt16=4;
                }
                break;
            case INJECT:
                {
                alt16=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:371:6: exportList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exportList_in_compositionFeature1568);
                    exportList73=exportList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exportList73.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:7: fcnDefinitionHost
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionHost_in_compositionFeature1576);
                    fcnDefinitionHost74=fcnDefinitionHost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionHost74.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:373:7: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_compositionFeature1584);
                    enumDefinition75=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition75.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:374:7: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_compositionFeature1592);
                    varDeclaration76=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration76.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:375:6: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_compositionFeature1599);
                    injectionDecl77=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl77.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, compositionFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeature"


    public static class stmtImport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImport"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:377:1: stmtImport : ( importFrom 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? ) ;
    public final pollenParser.stmtImport_return stmtImport() throws RecognitionException {
        pollenParser.stmtImport_return retval = new pollenParser.stmtImport_return();
        retval.start = input.LT(1);

        int stmtImport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal79=null;
        pollenParser.importFrom_return importFrom78 =null;

        pollenParser.qualName_return qualName80 =null;

        pollenParser.metaArguments_return metaArguments81 =null;

        pollenParser.importAs_return importAs82 =null;

        pollenParser.delim_return delim83 =null;


        BaseNode string_literal79_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleSubtreeStream stream_importFrom=new RewriteRuleSubtreeStream(adaptor,"rule importFrom");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:5: ( ( importFrom 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:9: ( importFrom 'import' qualName ( metaArguments )? importAs delim )
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:9: ( importFrom 'import' qualName ( metaArguments )? importAs delim )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:378:10: importFrom 'import' qualName ( metaArguments )? importAs delim
            {
            pushFollow(FOLLOW_importFrom_in_stmtImport1616);
            importFrom78=importFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importFrom.add(importFrom78.getTree());

            string_literal79=(Atom)match(input,165,FOLLOW_165_in_stmtImport1626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal79);


            pushFollow(FOLLOW_qualName_in_stmtImport1628);
            qualName80=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName80.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:379:27: ( metaArguments )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==190) ) {
                int LA17_1 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt17=1;
                }
            }
            switch (alt17) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:379:28: metaArguments
                    {
                    pushFollow(FOLLOW_metaArguments_in_stmtImport1631);
                    metaArguments81=metaArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments81.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_importAs_in_stmtImport1644);
            importAs82=importAs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importAs.add(importAs82.getTree());

            pushFollow(FOLLOW_delim_in_stmtImport1646);
            delim83=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim83.getTree());

            }


            // AST REWRITE
            // elements: qualName, importFrom, importAs, metaArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 380:26: -> ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:380:29: ^( IMPORT[\"IMPORT\"] importFrom qualName importAs ( metaArguments )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ImportNode(IMPORT, "IMPORT")
                , root_1);

                adaptor.addChild(root_1, stream_importFrom.nextTree());

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_1, stream_importAs.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:380:89: ( metaArguments )?
                if ( stream_metaArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaArguments.nextTree());

                }
                stream_metaArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, stmtImport_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtImport"


    public static class importFrom_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importFrom"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:382:1: importFrom : ( 'from' qualName -> qualName | -> IDENT[defaultPkg] );
    public final pollenParser.importFrom_return importFrom() throws RecognitionException {
        pollenParser.importFrom_return retval = new pollenParser.importFrom_return();
        retval.start = input.LT(1);

        int importFrom_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal84=null;
        pollenParser.qualName_return qualName85 =null;


        BaseNode string_literal84_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");

        	String defaultPkg = "";
        	String path = this.getTokenStream().getSourceName();
           int k = path.lastIndexOf(File.separator);
           int j = path.lastIndexOf(File.separator, k-1);
            j = j == -1 ? 0 : j+1;
            // the default package is the containing directory
            defaultPkg = path.substring(j, k);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:392:5: ( 'from' qualName -> qualName | -> IDENT[defaultPkg] )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==161) ) {
                alt18=1;
            }
            else if ( (LA18_0==165) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:392:9: 'from' qualName
                    {
                    string_literal84=(Atom)match(input,161,FOLLOW_161_in_importFrom1688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal84);


                    pushFollow(FOLLOW_qualName_in_importFrom1690);
                    qualName85=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName85.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 392:25: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:393:8: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 393:8: -> IDENT[defaultPkg]
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(IDENT, defaultPkg)
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, importFrom_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importFrom"


    public static class importAs_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importAs"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:395:1: importAs : ( 'as' qualName -> qualName | -> NIL );
    public final pollenParser.importAs_return importAs() throws RecognitionException {
        pollenParser.importAs_return retval = new pollenParser.importAs_return();
        retval.start = input.LT(1);

        int importAs_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal86=null;
        pollenParser.qualName_return qualName87 =null;


        BaseNode string_literal86_tree=null;
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:396:2: ( 'as' qualName -> qualName | -> NIL )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==141) ) {
                alt19=1;
            }
            else if ( (LA19_0==EOF||(LA19_0 >= BIT_NOT && LA19_0 <= CHAR)||LA19_0==DEC||LA19_0==HEX_LIT||LA19_0==IDENT||(LA19_0 >= INC && LA19_0 <= INT_LIT)||LA19_0==LOG_NOT||LA19_0==MINUS||LA19_0==NL||LA19_0==OCT_LIT||LA19_0==REAL_LIT||LA19_0==SEMI||LA19_0==STRING||LA19_0==127||LA19_0==130||(LA19_0 >= 137 && LA19_0 <= 138)||(LA19_0 >= 142 && LA19_0 <= 152)||LA19_0==155||LA19_0==157||(LA19_0 >= 159 && LA19_0 <= 163)||(LA19_0 >= 165 && LA19_0 <= 168)||(LA19_0 >= 170 && LA19_0 <= 173)||(LA19_0 >= 176 && LA19_0 <= 183)||(LA19_0 >= 185 && LA19_0 <= 190)||LA19_0==193) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:396:4: 'as' qualName
                    {
                    string_literal86=(Atom)match(input,141,FOLLOW_141_in_importAs1719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(string_literal86);


                    pushFollow(FOLLOW_qualName_in_importAs1721);
                    qualName87=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName87.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 396:18: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:397:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 397:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, importAs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importAs"


    public static class importList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:399:1: importList : ( stmtImport )* -> ^( LIST[\"LIST\"] ( stmtImport )* ) ;
    public final pollenParser.importList_return importList() throws RecognitionException {
        pollenParser.importList_return retval = new pollenParser.importList_return();
        retval.start = input.LT(1);

        int importList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtImport_return stmtImport88 =null;


        RewriteRuleSubtreeStream stream_stmtImport=new RewriteRuleSubtreeStream(adaptor,"rule stmtImport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:400:5: ( ( stmtImport )* -> ^( LIST[\"LIST\"] ( stmtImport )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:400:9: ( stmtImport )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:400:9: ( stmtImport )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==161||LA20_0==165) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:400:9: stmtImport
            	    {
            	    pushFollow(FOLLOW_stmtImport_in_importList1747);
            	    stmtImport88=stmtImport();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtImport.add(stmtImport88.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtImport
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 401:6: -> ^( LIST[\"LIST\"] ( stmtImport )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:401:9: ^( LIST[\"LIST\"] ( stmtImport )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:401:34: ( stmtImport )*
                while ( stream_stmtImport.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtImport.nextTree());

                }
                stream_stmtImport.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, importList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importList"


    public static class meta_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "meta"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:403:1: meta : ({...}? 'meta' importList ( braceOpen metaParmsInstantiate braceClose ) | 'meta' importList ( braceOpen formalParameters braceClose ) -> formalParameters | -> LIST[\"LIST\"] );
    public final pollenParser.meta_return meta() throws RecognitionException {
        pollenParser.meta_return retval = new pollenParser.meta_return();
        retval.start = input.LT(1);

        int meta_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal89=null;
        Atom string_literal94=null;
        pollenParser.importList_return importList90 =null;

        pollenParser.braceOpen_return braceOpen91 =null;

        pollenParser.metaParmsInstantiate_return metaParmsInstantiate92 =null;

        pollenParser.braceClose_return braceClose93 =null;

        pollenParser.importList_return importList95 =null;

        pollenParser.braceOpen_return braceOpen96 =null;

        pollenParser.formalParameters_return formalParameters97 =null;

        pollenParser.braceClose_return braceClose98 =null;


        BaseNode string_literal89_tree=null;
        BaseNode string_literal94_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_importList=new RewriteRuleSubtreeStream(adaptor,"rule importList");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:407:2: ({...}? 'meta' importList ( braceOpen metaParmsInstantiate braceClose ) | 'meta' importList ( braceOpen formalParameters braceClose ) -> formalParameters | -> LIST[\"LIST\"] )
            int alt21=3;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==170) ) {
                int LA21_1 = input.LA(2);

                if ( ((((isMetaInstance)&&(isMetaInstance))&&synpred31_pollen())) ) {
                    alt21=1;
                }
                else if ( (synpred32_pollen()) ) {
                    alt21=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA21_0 >= 147 && LA21_0 <= 148)||LA21_0==155||LA21_0==171||LA21_0==177) ) {
                alt21=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:407:4: {...}? 'meta' importList ( braceOpen metaParmsInstantiate braceClose )
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    if ( !((isMetaInstance)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "meta", "isMetaInstance");
                    }

                    string_literal89=(Atom)match(input,170,FOLLOW_170_in_meta1790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal89_tree = 
                    (BaseNode)adaptor.create(string_literal89)
                    ;
                    adaptor.addChild(root_0, string_literal89_tree);
                    }

                    if ( state.backtracking==0 ) { ti.setUnitFlags(EnumSet.of(Flags.META));}

                    pushFollow(FOLLOW_importList_in_meta1805);
                    importList90=importList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importList90.getTree());

                    if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports = (importList90!=null?((BaseNode)importList90.tree):null); }

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:4: ( braceOpen metaParmsInstantiate braceClose )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:5: braceOpen metaParmsInstantiate braceClose
                    {
                    pushFollow(FOLLOW_braceOpen_in_meta1813);
                    braceOpen91=braceOpen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceOpen91.getTree());

                    pushFollow(FOLLOW_metaParmsInstantiate_in_meta1820);
                    metaParmsInstantiate92=metaParmsInstantiate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaParmsInstantiate92.getTree());

                    pushFollow(FOLLOW_braceClose_in_meta1826);
                    braceClose93=braceClose();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceClose93.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:413:4: 'meta' importList ( braceOpen formalParameters braceClose )
                    {
                    string_literal94=(Atom)match(input,170,FOLLOW_170_in_meta1833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(string_literal94);


                    if ( state.backtracking==0 ) { ti.setUnitFlags(EnumSet.of(Flags.META));}

                    pushFollow(FOLLOW_importList_in_meta1843);
                    importList95=importList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importList.add(importList95.getTree());

                    if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports = (importList95!=null?((BaseNode)importList95.tree):null); }

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:416:4: ( braceOpen formalParameters braceClose )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:416:5: braceOpen formalParameters braceClose
                    {
                    pushFollow(FOLLOW_braceOpen_in_meta1851);
                    braceOpen96=braceOpen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen96.getTree());

                    pushFollow(FOLLOW_formalParameters_in_meta1853);
                    formalParameters97=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters97.getTree());

                    pushFollow(FOLLOW_braceClose_in_meta1855);
                    braceClose98=braceClose();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_braceClose.add(braceClose98.getTree());

                    }


                    // AST REWRITE
                    // elements: formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 417:7: -> formalParameters
                    {
                        adaptor.addChild(root_0, stream_formalParameters.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:419:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 419:4: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                        adaptor.addChild(root_0,  ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).metaImports = (BaseNode)adaptor.create(NIL, "NIL") );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, meta_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "meta"


    protected static class metaParmsInstantiate_scope {
        int idx;
        List<Object> l;
    }
    protected Stack metaParmsInstantiate_stack = new Stack();


    public static class metaParmsInstantiate_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmsInstantiate"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:422:1: metaParmsInstantiate : m1= metaInstantiate ( ',' !m2= metaInstantiate )* ;
    public final pollenParser.metaParmsInstantiate_return metaParmsInstantiate() throws RecognitionException {
        metaParmsInstantiate_stack.push(new metaParmsInstantiate_scope());
        pollenParser.metaParmsInstantiate_return retval = new pollenParser.metaParmsInstantiate_return();
        retval.start = input.LT(1);

        int metaParmsInstantiate_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal99=null;
        pollenParser.metaInstantiate_return m1 =null;

        pollenParser.metaInstantiate_return m2 =null;


        BaseNode char_literal99_tree=null;


        	((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).idx = 0;
        	((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).l = new ArrayList<Object>();	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:2: (m1= metaInstantiate ( ',' !m2= metaInstantiate )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:439:4: m1= metaInstantiate ( ',' !m2= metaInstantiate )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_metaInstantiate_in_metaParmsInstantiate1908);
            m1=metaInstantiate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m1.getTree());

            if ( state.backtracking==0 ) { ((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null)); }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:440:3: ( ',' !m2= metaInstantiate )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==130) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:440:4: ',' !m2= metaInstantiate
            	    {
            	    char_literal99=(Atom)match(input,130,FOLLOW_130_in_metaParmsInstantiate1915); if (state.failed) return retval;

            	    pushFollow(FOLLOW_metaInstantiate_in_metaParmsInstantiate1924);
            	    m2=metaInstantiate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, m2.getTree());

            	    if ( state.backtracking==0 ) { ((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null)); }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
             	for (Object o : ((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).l) {
             		if (o instanceof ImportNode) {
             			// add the instantiated import to unit imports
             			((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);			
             		}
             	}
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, metaParmsInstantiate_StartIndex); }

            metaParmsInstantiate_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "metaParmsInstantiate"


    public static class metaInstantiate_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaInstantiate"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:460:1: metaInstantiate : ( 'type' IDENT ( '=' expr )? -> ^( IMPORT[\"IMPORT\"] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( '=' primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\"] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", arg.getLitFlags()] IDENT[arg.getValue().getText()] ) ) );
    public final pollenParser.metaInstantiate_return metaInstantiate() throws RecognitionException {
        pollenParser.metaInstantiate_return retval = new pollenParser.metaInstantiate_return();
        retval.start = input.LT(1);

        int metaInstantiate_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom id=null;
        Atom string_literal100=null;
        Atom IDENT101=null;
        Atom char_literal102=null;
        Atom char_literal105=null;
        pollenParser.expr_return expr103 =null;

        pollenParser.builtinType_return builtinType104 =null;

        pollenParser.primitiveLit_return primitiveLit106 =null;


        BaseNode id_tree=null;
        BaseNode string_literal100_tree=null;
        BaseNode IDENT101_tree=null;
        BaseNode char_literal102_tree=null;
        BaseNode char_literal105_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        RewriteRuleSubtreeStream stream_primitiveLit=new RewriteRuleSubtreeStream(adaptor,"rule primitiveLit");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

        	// for import stmt 
        	String name = "";
        	String as = "";
        	String from = ""; 
        	ExprNode.Const arg = null;
        	if (clientImport.getMeta().size() < ((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).idx+1) {
        		  throw new PollenException("Not enough parameters to instantiate meta type", input);
        	}

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:2: ( 'type' IDENT ( '=' expr )? -> ^( IMPORT[\"IMPORT\"] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( '=' primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\"] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", arg.getLitFlags()] IDENT[arg.getValue().getText()] ) ) )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==184) ) {
                alt25=1;
            }
            else if ( (LA25_0==143||LA25_0==145||(LA25_0 >= 166 && LA25_0 <= 168)||LA25_0==181||(LA25_0 >= 185 && LA25_0 <= 187)) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:4: 'type' IDENT ( '=' expr )?
                    {
                    string_literal100=(Atom)match(input,184,FOLLOW_184_in_metaInstantiate1956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal100);


                    IDENT101=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaInstantiate1958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT101);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:17: ( '=' expr )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==ASSIGN) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:19: '=' expr
                            {
                            char_literal102=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaInstantiate1962); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal102);


                            pushFollow(FOLLOW_expr_in_metaInstantiate1964);
                            expr103=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr103.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { 
                    			   // get 'as' name
                    				as = (IDENT101!=null?IDENT101.getText():null);
                    		    	// get 'from' pkg
                    		    	for (ImportNode imp: client.getImports()) {
                    		    		if (clientImport.getName().getText().equals(imp.getName().getText())) {
                    		    			from = imp.getFrom().getText();
                    		    			break;
                    		    		}
                    		    	}	
                    		    	// get import name
                    		    	if (clientImport.getMeta() == null) {
                    		    		// instantiate to defaults
                    		    	}
                    		    	else if (clientImport.getMeta().isEmpty()) {
                    		    		// {} defer instantiation - fail? Or?
                    		    	}
                    		    	else {
                    		    		// get instantiation value
                    		    		BaseNode b = clientImport.getMeta().get(((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).idx);
                    		    		if (b instanceof TypeNode.Usr) {
                    		    			name = ((TypeNode.Usr) b).getName().getText();		    			
                    		    		}
                    		    		else if (b instanceof TypeNode.Std) {
                    		    			name = ((TypeNode.Std) b).getText();		    			
                    		    		}
                    		    		else {
                    		    			throw new PollenException("Meta type parameter requires type to instantiate", input);
                    		    		}		    		
                    		    	}

                    	    	}

                    // AST REWRITE
                    // elements: IDENT, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 507:4: -> ^( IMPORT[\"IMPORT\"] IDENT[from] IDENT[name] IDENT[as] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:507:7: ^( IMPORT[\"IMPORT\"] IDENT[from] IDENT[name] IDENT[as] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, from)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, name)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, as)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:7: builtinType id= IDENT ( '=' primitiveLit )?
                    {
                    pushFollow(FOLLOW_builtinType_in_metaInstantiate2001);
                    builtinType104=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType104.getTree());

                    id=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaInstantiate2005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:28: ( '=' primitiveLit )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==ASSIGN) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:508:29: '=' primitiveLit
                            {
                            char_literal105=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaInstantiate2008); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal105);


                            pushFollow(FOLLOW_primitiveLit_in_metaInstantiate2010);
                            primitiveLit106=primitiveLit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_primitiveLit.add(primitiveLit106.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    		 		BaseNode b = clientImport.getMeta().get(((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).idx);
                    		 		if (!(b instanceof ExprNode.Const)) 
                    		 			throw new PollenException("Invalid meta value parameter specification (must be a constant)", input);
                    		 		arg = (ExprNode.Const) b;
                    		 		EnumSet<LitFlags> formalType = (builtinType104!=null?builtinType104.f:null);
                    		 		if (!(arg.getLitFlags().contains(LitFlags.NUM) && formalType.contains(LitFlags.NUM))) {
                    		 			if (!(arg.getLitFlags().equals(formalType)))
                    		 				throw new PollenException("Fomal and actual meta value parameters have inconsistent types", input);	 		
                    		 		}
                    	 		}

                    // AST REWRITE
                    // elements: IDENT, builtinType, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 520:3: -> ^( D_FORMAL[\"D_FORMAL\"] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", arg.getLitFlags()] IDENT[arg.getValue().getText()] ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:520:6: ^( D_FORMAL[\"D_FORMAL\"] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", arg.getLitFlags()] IDENT[arg.getValue().getText()] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:520:47: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:520:126: ^( E_CONST[\"E_CONST\", arg.getLitFlags()] IDENT[arg.getValue().getText()] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", arg.getLitFlags())
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, arg.getValue().getText())
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	((metaParmsInstantiate_scope)metaParmsInstantiate_stack.peek()).idx++;
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, metaInstantiate_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaInstantiate"


    public static class metaArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArguments"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:522:1: metaArguments : ( '{' metaArgument ( ',' metaArgument )* '}' -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | '{' '}' -> LIST[\"LIST\"] );
    public final pollenParser.metaArguments_return metaArguments() throws RecognitionException {
        pollenParser.metaArguments_return retval = new pollenParser.metaArguments_return();
        retval.start = input.LT(1);

        int metaArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal107=null;
        Atom char_literal109=null;
        Atom char_literal111=null;
        Atom char_literal112=null;
        Atom char_literal113=null;
        pollenParser.metaArgument_return metaArgument108 =null;

        pollenParser.metaArgument_return metaArgument110 =null;


        BaseNode char_literal107_tree=null;
        BaseNode char_literal109_tree=null;
        BaseNode char_literal111_tree=null;
        BaseNode char_literal112_tree=null;
        BaseNode char_literal113_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_metaArgument=new RewriteRuleSubtreeStream(adaptor,"rule metaArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:4: ( '{' metaArgument ( ',' metaArgument )* '}' -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | '{' '}' -> LIST[\"LIST\"] )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==190) ) {
                int LA27_1 = input.LA(2);

                if ( (synpred38_pollen()) ) {
                    alt27=1;
                }
                else if ( (true) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:7: '{' metaArgument ( ',' metaArgument )* '}'
                    {
                    char_literal107=(Atom)match(input,190,FOLLOW_190_in_metaArguments2074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal107);


                    pushFollow(FOLLOW_metaArgument_in_metaArguments2076);
                    metaArgument108=metaArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument108.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:25: ( ',' metaArgument )*
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( (LA26_0==130) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:26: ',' metaArgument
                    	    {
                    	    char_literal109=(Atom)match(input,130,FOLLOW_130_in_metaArguments2080); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal109);


                    	    pushFollow(FOLLOW_metaArgument_in_metaArguments2082);
                    	    metaArgument110=metaArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument110.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);


                    char_literal111=(Atom)match(input,193,FOLLOW_193_in_metaArguments2086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal111);


                    // AST REWRITE
                    // elements: metaArgument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 523:49: -> ^( LIST[\"LIST\"] ( metaArgument )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:52: ^( LIST[\"LIST\"] ( metaArgument )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_metaArgument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_metaArgument.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArgument.nextTree());

                        }
                        stream_metaArgument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:524:6: '{' '}'
                    {
                    char_literal112=(Atom)match(input,190,FOLLOW_190_in_metaArguments2106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal112);


                    char_literal113=(Atom)match(input,193,FOLLOW_193_in_metaArguments2108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal113);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 524:19: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, metaArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArguments"


    public static class metaArgument_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgument"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:527:1: metaArgument : ( primitiveLit | typeNameScalar );
    public final pollenParser.metaArgument_return metaArgument() throws RecognitionException {
        pollenParser.metaArgument_return retval = new pollenParser.metaArgument_return();
        retval.start = input.LT(1);

        int metaArgument_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit114 =null;

        pollenParser.typeNameScalar_return typeNameScalar115 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:528:2: ( primitiveLit | typeNameScalar )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CHAR||LA28_0==HEX_LIT||LA28_0==INT_LIT||LA28_0==OCT_LIT||LA28_0==REAL_LIT||LA28_0==STRING||LA28_0==159||LA28_0==173||LA28_0==183) ) {
                alt28=1;
            }
            else if ( (LA28_0==IDENT||LA28_0==143||LA28_0==145||(LA28_0 >= 166 && LA28_0 <= 168)||LA28_0==181||(LA28_0 >= 185 && LA28_0 <= 187)) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:528:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_metaArgument2137);
                    primitiveLit114=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit114.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:4: typeNameScalar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_typeNameScalar_in_metaArgument2143);
                    typeNameScalar115=typeNameScalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar115.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, metaArgument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArgument"


    public static class typeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:531:1: typeName : typeNameScalar ;
    public final pollenParser.typeName_return typeName() throws RecognitionException {
        pollenParser.typeName_return retval = new pollenParser.typeName_return();
        retval.start = input.LT(1);

        int typeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeNameScalar_return typeNameScalar116 =null;




        	//System.out.print("typeName: "); DBG_LT(); <DeclNode.Fcn>["D_FCN_DCL", atFlags]

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:535:2: ( typeNameScalar )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:535:4: typeNameScalar
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeNameScalar_in_typeName2157);
            typeNameScalar116=typeNameScalar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar116.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, typeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeName"


    public static class typeNameScalar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameScalar"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:537:1: typeNameScalar : ( builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) | userTypeName );
    public final pollenParser.typeNameScalar_return typeNameScalar() throws RecognitionException {
        pollenParser.typeNameScalar_return retval = new pollenParser.typeNameScalar_return();
        retval.start = input.LT(1);

        int typeNameScalar_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType117 =null;

        pollenParser.userTypeName_return userTypeName118 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:538:2: ( builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) | userTypeName )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==143||LA29_0==145||(LA29_0 >= 166 && LA29_0 <= 168)||LA29_0==181||(LA29_0 >= 185 && LA29_0 <= 187)) ) {
                alt29=1;
            }
            else if ( (LA29_0==IDENT) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:538:4: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameScalar2170);
                    builtinType117=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType117.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 538:16: -> ^( T_STD[\"T_STD\", atFlags] builtinType )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:538:19: ^( T_STD[\"T_STD\", atFlags] builtinType )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_builtinType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:539:4: userTypeName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_typeNameScalar2189);
                    userTypeName118=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeName118.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, typeNameScalar_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeNameScalar"


    public static class userTypeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:541:1: userTypeName : qualName -> ^( T_USR[\"T_USR\", atFlags] qualName ) ;
    public final pollenParser.userTypeName_return userTypeName() throws RecognitionException {
        pollenParser.userTypeName_return retval = new pollenParser.userTypeName_return();
        retval.start = input.LT(1);

        int userTypeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName119 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:544:2: ( qualName -> ^( T_USR[\"T_USR\", atFlags] qualName ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:544:4: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeName2203);
            qualName119=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName119.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 544:14: -> ^( T_USR[\"T_USR\", atFlags] qualName )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:544:17: ^( T_USR[\"T_USR\", atFlags] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, userTypeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "userTypeName"


    protected static class unitTypeDefinition_scope {
        Object meta;
        Object metaImports;
    }
    protected Stack unitTypeDefinition_stack = new Stack();


    public static class unitTypeDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitTypeDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:547:1: unitTypeDefinition : ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition ) ;
    public final pollenParser.unitTypeDefinition_return unitTypeDefinition() throws RecognitionException {
        unitTypeDefinition_stack.push(new unitTypeDefinition_scope());
        pollenParser.unitTypeDefinition_return retval = new pollenParser.unitTypeDefinition_return();
        retval.start = input.LT(1);

        int unitTypeDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.meta_return meta120 =null;

        pollenParser.moduleDefinition_return moduleDefinition121 =null;

        pollenParser.classDefinition_return classDefinition122 =null;

        pollenParser.protocolDefinition_return protocolDefinition123 =null;

        pollenParser.compositionDefinition_return compositionDefinition124 =null;

        pollenParser.enumDefinition_return enumDefinition125 =null;




        		ti = new TypeInfo();
        		tl.add(ti);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:560:4: ( ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:560:8: ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:560:8: ( meta !)
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:560:9: meta !
            {
            pushFollow(FOLLOW_meta_in_unitTypeDefinition2246);
            meta120=meta();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta = (meta120!=null?((BaseNode)meta120.tree):null); }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:561:6: ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumDefinition )
            int alt30=5;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==171) && (synpred41_pollen())) {
                alt30=1;
            }
            else if ( (LA30_0==147) && (synpred42_pollen())) {
                alt30=2;
            }
            else if ( (LA30_0==177) && (synpred43_pollen())) {
                alt30=3;
            }
            else if ( (LA30_0==148) && (synpred44_pollen())) {
                alt30=4;
            }
            else if ( (LA30_0==155) && (synpred45_pollen())) {
                alt30=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:10: ( 'module' )=> moduleDefinition
                    {
                    pushFollow(FOLLOW_moduleDefinition_in_unitTypeDefinition2276);
                    moduleDefinition121=moduleDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleDefinition121.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:563:8: ( 'class' )=> classDefinition
                    {
                    pushFollow(FOLLOW_classDefinition_in_unitTypeDefinition2297);
                    classDefinition122=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition122.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:564:10: ( 'protocol' )=> protocolDefinition
                    {
                    pushFollow(FOLLOW_protocolDefinition_in_unitTypeDefinition2314);
                    protocolDefinition123=protocolDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocolDefinition123.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:565:10: ( 'composition' )=> compositionDefinition
                    {
                    pushFollow(FOLLOW_compositionDefinition_in_unitTypeDefinition2332);
                    compositionDefinition124=compositionDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compositionDefinition124.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:566:10: ( 'enum' )=> enumDefinition
                    {
                    pushFollow(FOLLOW_enumDefinition_in_unitTypeDefinition2350);
                    enumDefinition125=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition125.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               // debug
            	System.out.println(ti.getTypeName() + ", " + ti.getUnitFlags().toString());
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, unitTypeDefinition_StartIndex); }

            unitTypeDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitTypeDefinition"


    public static class extendsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extendsClause"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:569:1: extendsClause : ( 'extends' qualName -> qualName | -> NIL );
    public final pollenParser.extendsClause_return extendsClause() throws RecognitionException {
        pollenParser.extendsClause_return retval = new pollenParser.extendsClause_return();
        retval.start = input.LT(1);

        int extendsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal126=null;
        pollenParser.qualName_return qualName127 =null;


        BaseNode string_literal126_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:570:5: ( 'extends' qualName -> qualName | -> NIL )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==158) ) {
                alt31=1;
            }
            else if ( (LA31_0==NL||LA31_0==190) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:570:9: 'extends' qualName
                    {
                    string_literal126=(Atom)match(input,158,FOLLOW_158_in_extendsClause2375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_158.add(string_literal126);


                    pushFollow(FOLLOW_qualName_in_extendsClause2377);
                    qualName127=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName127.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 570:28: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:571:8: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 571:8: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, extendsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extendsClause"


    public static class implementsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementsClause"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:574:1: implementsClause : ( 'implements' qualName -> qualName | -> NIL );
    public final pollenParser.implementsClause_return implementsClause() throws RecognitionException {
        pollenParser.implementsClause_return retval = new pollenParser.implementsClause_return();
        retval.start = input.LT(1);

        int implementsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal128=null;
        pollenParser.qualName_return qualName129 =null;


        BaseNode string_literal128_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:575:5: ( 'implements' qualName -> qualName | -> NIL )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==164) ) {
                alt32=1;
            }
            else if ( (LA32_0==NL||LA32_0==190) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:575:9: 'implements' qualName
                    {
                    string_literal128=(Atom)match(input,164,FOLLOW_164_in_implementsClause2411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_164.add(string_literal128);


                    pushFollow(FOLLOW_qualName_in_implementsClause2413);
                    qualName129=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName129.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 575:31: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:7: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 576:7: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, implementsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implementsClause"


    public static class braceClose_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceClose"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:1: braceClose : ( NL !)* '}' ! ( NL !)* ;
    public final pollenParser.braceClose_return braceClose() throws RecognitionException {
        pollenParser.braceClose_return retval = new pollenParser.braceClose_return();
        retval.start = input.LT(1);

        int braceClose_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL130=null;
        Atom char_literal131=null;
        Atom NL132=null;

        BaseNode NL130_tree=null;
        BaseNode char_literal131_tree=null;
        BaseNode NL132_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:5: ( ( NL !)* '}' ! ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:10: ( NL !)* '}' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:10: ( NL !)*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==NL) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:11: NL !
            	    {
            	    NL130=(Atom)match(input,NL,FOLLOW_NL_in_braceClose2447); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            char_literal131=(Atom)match(input,193,FOLLOW_193_in_braceClose2452); if (state.failed) return retval;

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:22: ( NL !)*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==NL) ) {
                    int LA34_1 = input.LA(2);

                    if ( (synpred49_pollen()) ) {
                        alt34=1;
                    }


                }


                switch (alt34) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:23: NL !
            	    {
            	    NL132=(Atom)match(input,NL,FOLLOW_NL_in_braceClose2456); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, braceClose_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceClose"


    public static class braceCloseAtEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceCloseAtEOF"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:581:1: braceCloseAtEOF : ( ( NL !)* ) '}' ! ( NL !)* ;
    public final pollenParser.braceCloseAtEOF_return braceCloseAtEOF() throws RecognitionException {
        pollenParser.braceCloseAtEOF_return retval = new pollenParser.braceCloseAtEOF_return();
        retval.start = input.LT(1);

        int braceCloseAtEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL133=null;
        Atom char_literal134=null;
        Atom NL135=null;

        BaseNode NL133_tree=null;
        BaseNode char_literal134_tree=null;
        BaseNode NL135_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:5: ( ( ( NL !)* ) '}' ! ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:9: ( ( NL !)* ) '}' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:9: ( ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:10: ( NL !)*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:12: ( NL !)*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==NL) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:12: NL !
            	    {
            	    NL133=(Atom)match(input,NL,FOLLOW_NL_in_braceCloseAtEOF2480); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }


            char_literal134=(Atom)match(input,193,FOLLOW_193_in_braceCloseAtEOF2485); if (state.failed) return retval;

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:21: ( NL !)*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==NL) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:22: NL !
            	    {
            	    NL135=(Atom)match(input,NL,FOLLOW_NL_in_braceCloseAtEOF2489); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, braceCloseAtEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceCloseAtEOF"


    public static class braceOpen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceOpen"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:587:1: braceOpen : ( NL !)* '{' ! ( NL !)* ;
    public final pollenParser.braceOpen_return braceOpen() throws RecognitionException {
        pollenParser.braceOpen_return retval = new pollenParser.braceOpen_return();
        retval.start = input.LT(1);

        int braceOpen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL136=null;
        Atom char_literal137=null;
        Atom NL138=null;

        BaseNode NL136_tree=null;
        BaseNode char_literal137_tree=null;
        BaseNode NL138_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:5: ( ( NL !)* '{' ! ( NL !)* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:10: ( NL !)* '{' ! ( NL !)*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:10: ( NL !)*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==NL) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:11: NL !
            	    {
            	    NL136=(Atom)match(input,NL,FOLLOW_NL_in_braceOpen2514); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            char_literal137=(Atom)match(input,190,FOLLOW_190_in_braceOpen2519); if (state.failed) return retval;

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:22: ( NL !)*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==NL) ) {
                    int LA38_1 = input.LA(2);

                    if ( (synpred53_pollen()) ) {
                        alt38=1;
                    }


                }


                switch (alt38) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:23: NL !
            	    {
            	    NL138=(Atom)match(input,NL,FOLLOW_NL_in_braceOpen2523); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, braceOpen_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceOpen"


    public static class equalityOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:590:1: equalityOp : ( EQ | NOT_EQ );
    public final pollenParser.equalityOp_return equalityOp() throws RecognitionException {
        pollenParser.equalityOp_return retval = new pollenParser.equalityOp_return();
        retval.start = input.LT(1);

        int equalityOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set139=null;

        BaseNode set139_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:591:2: ( EQ | NOT_EQ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set139=(Atom)input.LT(1);

            if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set139)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, equalityOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equalityOp"


    public static class relationalOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:593:1: relationalOp : ( LT | GT | LT_EQ | GT_EQ );
    public final pollenParser.relationalOp_return relationalOp() throws RecognitionException {
        pollenParser.relationalOp_return retval = new pollenParser.relationalOp_return();
        retval.start = input.LT(1);

        int relationalOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set140=null;

        BaseNode set140_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:594:2: ( LT | GT | LT_EQ | GT_EQ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set140=(Atom)input.LT(1);

            if ( (input.LA(1) >= GT && input.LA(1) <= GT_EQ)||(input.LA(1) >= LT && input.LA(1) <= LT_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set140)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, relationalOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relationalOp"


    public static class shiftOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:596:1: shiftOp : ( '<<' | '>>' );
    public final pollenParser.shiftOp_return shiftOp() throws RecognitionException {
        pollenParser.shiftOp_return retval = new pollenParser.shiftOp_return();
        retval.start = input.LT(1);

        int shiftOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set141=null;

        BaseNode set141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:597:2: ( '<<' | '>>' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set141=(Atom)input.LT(1);

            if ( (input.LA(1) >= 134 && input.LA(1) <= 135) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set141)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, shiftOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shiftOp"


    public static class incDecOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incDecOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:599:1: incDecOp : ( INC | DEC );
    public final pollenParser.incDecOp_return incDecOp() throws RecognitionException {
        pollenParser.incDecOp_return retval = new pollenParser.incDecOp_return();
        retval.start = input.LT(1);

        int incDecOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set142=null;

        BaseNode set142_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:2: ( INC | DEC )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set142=(Atom)input.LT(1);

            if ( input.LA(1)==DEC||input.LA(1)==INC ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set142)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, incDecOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "incDecOp"


    public static class addSubOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addSubOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:602:1: addSubOp : ( PLUS | MINUS );
    public final pollenParser.addSubOp_return addSubOp() throws RecognitionException {
        pollenParser.addSubOp_return retval = new pollenParser.addSubOp_return();
        retval.start = input.LT(1);

        int addSubOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set143=null;

        BaseNode set143_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:603:2: ( PLUS | MINUS )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set143=(Atom)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set143)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, addSubOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "addSubOp"


    public static class assignOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:605:1: assignOp : ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ );
    public final pollenParser.assignOp_return assignOp() throws RecognitionException {
        pollenParser.assignOp_return retval = new pollenParser.assignOp_return();
        retval.start = input.LT(1);

        int assignOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set144=null;

        BaseNode set144_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:606:2: ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set144=(Atom)input.LT(1);

            if ( input.LA(1)==ADD_EQ||(input.LA(1) >= BITAND_EQ && input.LA(1) <= BITXOR_EQ)||input.LA(1)==DIV_EQ||input.LA(1)==LSHFT_EQ||(input.LA(1) >= MOD_EQ && input.LA(1) <= MUL_EQ)||input.LA(1)==RSHFT_EQ||input.LA(1)==SUB_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set144)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, assignOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignOp"


    public static class multDivModOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multDivModOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:608:1: multDivModOp : ( '*' | '/' | '%' );
    public final pollenParser.multDivModOp_return multDivModOp() throws RecognitionException {
        pollenParser.multDivModOp_return retval = new pollenParser.multDivModOp_return();
        retval.start = input.LT(1);

        int multDivModOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set145=null;

        BaseNode set145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:609:2: ( '*' | '/' | '%' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set145=(Atom)input.LT(1);

            if ( input.LA(1)==124||input.LA(1)==129||input.LA(1)==132 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set145)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, multDivModOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multDivModOp"


    public static class logicalNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalNotOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:611:1: logicalNotOp : LOG_NOT ;
    public final pollenParser.logicalNotOp_return logicalNotOp() throws RecognitionException {
        pollenParser.logicalNotOp_return retval = new pollenParser.logicalNotOp_return();
        retval.start = input.LT(1);

        int logicalNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom LOG_NOT146=null;

        BaseNode LOG_NOT146_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:612:2: ( LOG_NOT )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:612:4: LOG_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            LOG_NOT146=(Atom)match(input,LOG_NOT,FOLLOW_LOG_NOT_in_logicalNotOp2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOG_NOT146_tree = 
            (BaseNode)adaptor.create(LOG_NOT146)
            ;
            adaptor.addChild(root_0, LOG_NOT146_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, logicalNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalNotOp"


    public static class bitwiseNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitwiseNotOp"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:614:1: bitwiseNotOp : BIT_NOT ;
    public final pollenParser.bitwiseNotOp_return bitwiseNotOp() throws RecognitionException {
        pollenParser.bitwiseNotOp_return retval = new pollenParser.bitwiseNotOp_return();
        retval.start = input.LT(1);

        int bitwiseNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIT_NOT147=null;

        BaseNode BIT_NOT147_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:615:2: ( BIT_NOT )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:615:4: BIT_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            BIT_NOT147=(Atom)match(input,BIT_NOT,FOLLOW_BIT_NOT_in_bitwiseNotOp2711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIT_NOT147_tree = 
            (BaseNode)adaptor.create(BIT_NOT147)
            ;
            adaptor.addChild(root_0, BIT_NOT147_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, bitwiseNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitwiseNotOp"


    public static class exprList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:617:1: exprList : ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.exprList_return exprList() throws RecognitionException {
        pollenParser.exprList_return retval = new pollenParser.exprList_return();
        retval.start = input.LT(1);

        int exprList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal149=null;
        pollenParser.expr_return expr148 =null;

        pollenParser.expr_return expr150 =null;


        BaseNode char_literal149_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:2: ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0 >= BIT_NOT && LA40_0 <= CHAR)||LA40_0==DEC||LA40_0==HEX_LIT||LA40_0==IDENT||(LA40_0 >= INC && LA40_0 <= INT_LIT)||LA40_0==LOG_NOT||LA40_0==MINUS||LA40_0==OCT_LIT||LA40_0==REAL_LIT||LA40_0==STRING||LA40_0==127||(LA40_0 >= 137 && LA40_0 <= 138)||LA40_0==159||(LA40_0 >= 172 && LA40_0 <= 173)||LA40_0==183) ) {
                int LA40_1 = input.LA(2);

                if ( (synpred73_pollen()) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA40_0==NL||LA40_0==SEMI||LA40_0==128||LA40_0==130||LA40_0==139||(LA40_0 >= 142 && LA40_0 <= 152)||LA40_0==155||LA40_0==157||(LA40_0 >= 160 && LA40_0 <= 163)||(LA40_0 >= 165 && LA40_0 <= 168)||(LA40_0 >= 170 && LA40_0 <= 171)||(LA40_0 >= 176 && LA40_0 <= 182)||(LA40_0 >= 185 && LA40_0 <= 190)||LA40_0==193) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:4: expr ( ',' expr )*
                    {
                    pushFollow(FOLLOW_expr_in_exprList2722);
                    expr148=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr148.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:9: ( ',' expr )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==130) ) {
                            int LA39_1 = input.LA(2);

                            if ( (synpred72_pollen()) ) {
                                alt39=1;
                            }


                        }


                        switch (alt39) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:10: ',' expr
                    	    {
                    	    char_literal149=(Atom)match(input,130,FOLLOW_130_in_exprList2725); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal149);


                    	    pushFollow(FOLLOW_expr_in_exprList2727);
                    	    expr150=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr150.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 619:3: -> ^( LIST[\"LIST\"] ( expr )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:619:6: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:620:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 620:4: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, exprList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprList"


    public static class expr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:622:1: expr : ( exprLogicalOr '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr ) | exprLogicalOr );
    public final pollenParser.expr_return expr() throws RecognitionException {
        pollenParser.expr_return retval = new pollenParser.expr_return();
        retval.start = input.LT(1);

        int expr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal152=null;
        Atom char_literal154=null;
        pollenParser.exprLogicalOr_return exprLogicalOr151 =null;

        pollenParser.expr_return expr153 =null;

        pollenParser.expr_return expr155 =null;

        pollenParser.exprLogicalOr_return exprLogicalOr156 =null;


        BaseNode char_literal152_tree=null;
        BaseNode char_literal154_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_exprLogicalOr=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalOr");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:2: ( exprLogicalOr '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr ) | exprLogicalOr )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0 >= BIT_NOT && LA41_0 <= CHAR)||LA41_0==DEC||LA41_0==HEX_LIT||LA41_0==IDENT||(LA41_0 >= INC && LA41_0 <= INT_LIT)||LA41_0==LOG_NOT||LA41_0==MINUS||LA41_0==OCT_LIT||LA41_0==REAL_LIT||LA41_0==STRING||LA41_0==127||(LA41_0 >= 137 && LA41_0 <= 138)||LA41_0==159||(LA41_0 >= 172 && LA41_0 <= 173)||LA41_0==183) ) {
                int LA41_1 = input.LA(2);

                if ( (synpred74_pollen()) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:4: exprLogicalOr '?' expr ':' expr
                    {
                    pushFollow(FOLLOW_exprLogicalOr_in_expr2766);
                    exprLogicalOr151=exprLogicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprLogicalOr.add(exprLogicalOr151.getTree());

                    char_literal152=(Atom)match(input,136,FOLLOW_136_in_expr2768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal152);


                    pushFollow(FOLLOW_expr_in_expr2770);
                    expr153=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr153.getTree());

                    char_literal154=(Atom)match(input,133,FOLLOW_133_in_expr2772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal154);


                    pushFollow(FOLLOW_expr_in_expr2774);
                    expr155=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr155.getTree());

                    // AST REWRITE
                    // elements: expr, expr, exprLogicalOr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 623:36: -> ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:39: ^( E_QUEST[\"E_QUEST\"] exprLogicalOr expr expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Quest(E_QUEST, "E_QUEST")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprLogicalOr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:624:4: exprLogicalOr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprLogicalOr_in_expr2797);
                    exprLogicalOr156=exprLogicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprLogicalOr156.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class exprLogicalOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalOr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:626:1: exprLogicalOr : ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* ;
    public final pollenParser.exprLogicalOr_return exprLogicalOr() throws RecognitionException {
        pollenParser.exprLogicalOr_return retval = new pollenParser.exprLogicalOr_return();
        retval.start = input.LT(1);

        int exprLogicalOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal158=null;
        pollenParser.exprLogicalAnd_return exprLogicalAnd157 =null;

        pollenParser.exprLogicalAnd_return exprLogicalAnd159 =null;


        BaseNode string_literal158_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_exprLogicalAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:2: ( ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:4: ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:4: ( exprLogicalAnd -> exprLogicalAnd )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:5: exprLogicalAnd
            {
            pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr2815);
            exprLogicalAnd157=exprLogicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd157.getTree());

            // AST REWRITE
            // elements: exprLogicalAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 627:20: -> exprLogicalAnd
            {
                adaptor.addChild(root_0, stream_exprLogicalAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:628:3: ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==192) ) {
                    int LA42_1 = input.LA(2);

                    if ( (synpred75_pollen()) ) {
                        alt42=1;
                    }


                }


                switch (alt42) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:4: '||' exprLogicalAnd
            	    {
            	    string_literal158=(Atom)match(input,192,FOLLOW_192_in_exprLogicalOr2829); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_192.add(string_literal158);


            	    pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr2831);
            	    exprLogicalAnd159=exprLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd159.getTree());

            	    // AST REWRITE
            	    // elements: exprLogicalAnd, 192, exprLogicalOr
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 630:5: -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:630:8: ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_192.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprLogicalAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, exprLogicalOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalOr"


    public static class exprLogicalAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalAnd"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:633:1: exprLogicalAnd : ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* ;
    public final pollenParser.exprLogicalAnd_return exprLogicalAnd() throws RecognitionException {
        pollenParser.exprLogicalAnd_return retval = new pollenParser.exprLogicalAnd_return();
        retval.start = input.LT(1);

        int exprLogicalAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal161=null;
        pollenParser.exprBitwiseOr_return exprBitwiseOr160 =null;

        pollenParser.exprBitwiseOr_return exprBitwiseOr162 =null;


        BaseNode string_literal161_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_exprBitwiseOr=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseOr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:2: ( ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:4: ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:4: ( exprBitwiseOr -> exprBitwiseOr )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:634:5: exprBitwiseOr
            {
            pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd2870);
            exprBitwiseOr160=exprBitwiseOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr160.getTree());

            // AST REWRITE
            // elements: exprBitwiseOr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 634:19: -> exprBitwiseOr
            {
                adaptor.addChild(root_0, stream_exprBitwiseOr.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:635:2: ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==125) ) {
                    int LA43_1 = input.LA(2);

                    if ( (synpred76_pollen()) ) {
                        alt43=1;
                    }


                }


                switch (alt43) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:3: '&&' exprBitwiseOr
            	    {
            	    string_literal161=(Atom)match(input,125,FOLLOW_125_in_exprLogicalAnd2882); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(string_literal161);


            	    pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd2884);
            	    exprBitwiseOr162=exprBitwiseOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr162.getTree());

            	    // AST REWRITE
            	    // elements: 125, exprBitwiseOr, exprLogicalAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 637:4: -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:637:7: ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_125.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseOr.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, exprLogicalAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalAnd"


    public static class exprBitwiseOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseOr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:640:1: exprBitwiseOr : ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* ;
    public final pollenParser.exprBitwiseOr_return exprBitwiseOr() throws RecognitionException {
        pollenParser.exprBitwiseOr_return retval = new pollenParser.exprBitwiseOr_return();
        retval.start = input.LT(1);

        int exprBitwiseOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal164=null;
        pollenParser.exprBitwiseXor_return exprBitwiseXor163 =null;

        pollenParser.exprBitwiseXor_return exprBitwiseXor165 =null;


        BaseNode char_literal164_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_exprBitwiseXor=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseXor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:641:2: ( ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:641:4: ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:641:4: ( exprBitwiseXor -> exprBitwiseXor )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:641:5: exprBitwiseXor
            {
            pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr2921);
            exprBitwiseXor163=exprBitwiseXor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor163.getTree());

            // AST REWRITE
            // elements: exprBitwiseXor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 641:20: -> exprBitwiseXor
            {
                adaptor.addChild(root_0, stream_exprBitwiseXor.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:642:2: ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==191) ) {
                    int LA44_1 = input.LA(2);

                    if ( (synpred77_pollen()) ) {
                        alt44=1;
                    }


                }


                switch (alt44) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:643:3: '|' exprBitwiseXor
            	    {
            	    char_literal164=(Atom)match(input,191,FOLLOW_191_in_exprBitwiseOr2933); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_191.add(char_literal164);


            	    pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr2935);
            	    exprBitwiseXor165=exprBitwiseXor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor165.getTree());

            	    // AST REWRITE
            	    // elements: 191, exprBitwiseOr, exprBitwiseXor
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 644:3: -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:644:6: ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_191.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseXor.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, exprBitwiseOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseOr"


    public static class exprBitwiseXor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseXor"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:647:1: exprBitwiseXor : ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* ;
    public final pollenParser.exprBitwiseXor_return exprBitwiseXor() throws RecognitionException {
        pollenParser.exprBitwiseXor_return retval = new pollenParser.exprBitwiseXor_return();
        retval.start = input.LT(1);

        int exprBitwiseXor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal167=null;
        pollenParser.exprBitwiseAnd_return exprBitwiseAnd166 =null;

        pollenParser.exprBitwiseAnd_return exprBitwiseAnd168 =null;


        BaseNode char_literal167_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_exprBitwiseAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:648:2: ( ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:648:4: ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:648:4: ( exprBitwiseAnd -> exprBitwiseAnd )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:648:5: exprBitwiseAnd
            {
            pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2971);
            exprBitwiseAnd166=exprBitwiseAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd166.getTree());

            // AST REWRITE
            // elements: exprBitwiseAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 648:20: -> exprBitwiseAnd
            {
                adaptor.addChild(root_0, stream_exprBitwiseAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:649:2: ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==140) ) {
                    int LA45_1 = input.LA(2);

                    if ( (synpred78_pollen()) ) {
                        alt45=1;
                    }


                }


                switch (alt45) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:3: '^' exprBitwiseAnd
            	    {
            	    char_literal167=(Atom)match(input,140,FOLLOW_140_in_exprBitwiseXor2983); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_140.add(char_literal167);


            	    pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2985);
            	    exprBitwiseAnd168=exprBitwiseAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd168.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseXor, exprBitwiseAnd, 140
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 651:3: -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:651:6: ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_140.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, exprBitwiseXor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseXor"


    public static class exprBitwiseAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseAnd"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:654:1: exprBitwiseAnd : ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* ;
    public final pollenParser.exprBitwiseAnd_return exprBitwiseAnd() throws RecognitionException {
        pollenParser.exprBitwiseAnd_return retval = new pollenParser.exprBitwiseAnd_return();
        retval.start = input.LT(1);

        int exprBitwiseAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal170=null;
        pollenParser.exprEquality_return exprEquality169 =null;

        pollenParser.exprEquality_return exprEquality171 =null;


        BaseNode char_literal170_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_exprEquality=new RewriteRuleSubtreeStream(adaptor,"rule exprEquality");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:655:2: ( ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:655:4: ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:655:4: ( exprEquality -> exprEquality )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:655:5: exprEquality
            {
            pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd3021);
            exprEquality169=exprEquality();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality169.getTree());

            // AST REWRITE
            // elements: exprEquality
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 655:18: -> exprEquality
            {
                adaptor.addChild(root_0, stream_exprEquality.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:656:2: ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==126) ) {
                    int LA46_1 = input.LA(2);

                    if ( (synpred79_pollen()) ) {
                        alt46=1;
                    }


                }


                switch (alt46) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:657:3: '&' exprEquality
            	    {
            	    char_literal170=(Atom)match(input,126,FOLLOW_126_in_exprBitwiseAnd3033); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal170);


            	    pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd3035);
            	    exprEquality171=exprEquality();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality171.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseAnd, 126, exprEquality
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 658:3: -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:658:6: ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_126.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprEquality.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, exprBitwiseAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseAnd"


    public static class exprEquality_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprEquality"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:661:1: exprEquality : ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* ;
    public final pollenParser.exprEquality_return exprEquality() throws RecognitionException {
        pollenParser.exprEquality_return retval = new pollenParser.exprEquality_return();
        retval.start = input.LT(1);

        int exprEquality_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprRelational_return exprRelational172 =null;

        pollenParser.equalityOp_return equalityOp173 =null;

        pollenParser.exprRelational_return exprRelational174 =null;


        RewriteRuleSubtreeStream stream_equalityOp=new RewriteRuleSubtreeStream(adaptor,"rule equalityOp");
        RewriteRuleSubtreeStream stream_exprRelational=new RewriteRuleSubtreeStream(adaptor,"rule exprRelational");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:2: ( ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:4: ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:4: ( exprRelational -> exprRelational )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:662:5: exprRelational
            {
            pushFollow(FOLLOW_exprRelational_in_exprEquality3071);
            exprRelational172=exprRelational();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational172.getTree());

            // AST REWRITE
            // elements: exprRelational
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 662:20: -> exprRelational
            {
                adaptor.addChild(root_0, stream_exprRelational.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:2: ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==EQ||LA47_0==NOT_EQ) ) {
                    int LA47_1 = input.LA(2);

                    if ( (synpred80_pollen()) ) {
                        alt47=1;
                    }


                }


                switch (alt47) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:664:3: equalityOp exprRelational
            	    {
            	    pushFollow(FOLLOW_equalityOp_in_exprEquality3084);
            	    equalityOp173=equalityOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityOp.add(equalityOp173.getTree());

            	    pushFollow(FOLLOW_exprRelational_in_exprEquality3086);
            	    exprRelational174=exprRelational();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational174.getTree());

            	    // AST REWRITE
            	    // elements: equalityOp, exprRelational, exprEquality
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 665:3: -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:665:6: ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_equalityOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprRelational.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, exprEquality_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprEquality"


    public static class exprRelational_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprRelational"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:668:1: exprRelational : ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* ;
    public final pollenParser.exprRelational_return exprRelational() throws RecognitionException {
        pollenParser.exprRelational_return retval = new pollenParser.exprRelational_return();
        retval.start = input.LT(1);

        int exprRelational_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprShift_return exprShift175 =null;

        pollenParser.relationalOp_return relationalOp176 =null;

        pollenParser.exprShift_return exprShift177 =null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_exprShift=new RewriteRuleSubtreeStream(adaptor,"rule exprShift");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:2: ( ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:4: ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:4: ( exprShift -> exprShift )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:5: exprShift
            {
            pushFollow(FOLLOW_exprShift_in_exprRelational3122);
            exprShift175=exprShift();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprShift.add(exprShift175.getTree());

            // AST REWRITE
            // elements: exprShift
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 669:15: -> exprShift
            {
                adaptor.addChild(root_0, stream_exprShift.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:670:2: ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( ((LA48_0 >= GT && LA48_0 <= GT_EQ)||(LA48_0 >= LT && LA48_0 <= LT_EQ)) ) {
                    int LA48_1 = input.LA(2);

                    if ( (synpred81_pollen()) ) {
                        alt48=1;
                    }


                }


                switch (alt48) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:3: relationalOp exprShift
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_exprRelational3135);
            	    relationalOp176=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relationalOp.add(relationalOp176.getTree());

            	    pushFollow(FOLLOW_exprShift_in_exprRelational3137);
            	    exprShift177=exprShift();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprShift.add(exprShift177.getTree());

            	    // AST REWRITE
            	    // elements: relationalOp, exprRelational, exprShift
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 672:3: -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:672:6: ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_relationalOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprShift.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, exprRelational_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprRelational"


    public static class exprShift_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprShift"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:675:1: exprShift : ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* ;
    public final pollenParser.exprShift_return exprShift() throws RecognitionException {
        pollenParser.exprShift_return retval = new pollenParser.exprShift_return();
        retval.start = input.LT(1);

        int exprShift_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprAddSub_return exprAddSub178 =null;

        pollenParser.shiftOp_return shiftOp179 =null;

        pollenParser.exprAddSub_return exprAddSub180 =null;


        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        RewriteRuleSubtreeStream stream_exprAddSub=new RewriteRuleSubtreeStream(adaptor,"rule exprAddSub");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:676:2: ( ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:676:4: ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:676:4: ( exprAddSub -> exprAddSub )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:676:5: exprAddSub
            {
            pushFollow(FOLLOW_exprAddSub_in_exprShift3174);
            exprAddSub178=exprAddSub();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub178.getTree());

            // AST REWRITE
            // elements: exprAddSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 676:16: -> exprAddSub
            {
                adaptor.addChild(root_0, stream_exprAddSub.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:677:2: ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( ((LA49_0 >= 134 && LA49_0 <= 135)) ) {
                    int LA49_1 = input.LA(2);

                    if ( (synpred82_pollen()) ) {
                        alt49=1;
                    }


                }


                switch (alt49) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:3: shiftOp exprAddSub
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_exprShift3187);
            	    shiftOp179=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftOp.add(shiftOp179.getTree());

            	    pushFollow(FOLLOW_exprAddSub_in_exprShift3190);
            	    exprAddSub180=exprAddSub();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub180.getTree());

            	    // AST REWRITE
            	    // elements: shiftOp, exprShift, exprAddSub
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 679:3: -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:679:6: ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_shiftOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprAddSub.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, exprShift_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprShift"


    public static class exprAddSub_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAddSub"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:682:1: exprAddSub : ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* ;
    public final pollenParser.exprAddSub_return exprAddSub() throws RecognitionException {
        pollenParser.exprAddSub_return retval = new pollenParser.exprAddSub_return();
        retval.start = input.LT(1);

        int exprAddSub_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprMultDiv_return exprMultDiv181 =null;

        pollenParser.addSubOp_return addSubOp182 =null;

        pollenParser.exprMultDiv_return exprMultDiv183 =null;


        RewriteRuleSubtreeStream stream_addSubOp=new RewriteRuleSubtreeStream(adaptor,"rule addSubOp");
        RewriteRuleSubtreeStream stream_exprMultDiv=new RewriteRuleSubtreeStream(adaptor,"rule exprMultDiv");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:683:2: ( ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:683:4: ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:683:4: ( exprMultDiv -> exprMultDiv )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:683:5: exprMultDiv
            {
            pushFollow(FOLLOW_exprMultDiv_in_exprAddSub3227);
            exprMultDiv181=exprMultDiv();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv181.getTree());

            // AST REWRITE
            // elements: exprMultDiv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 683:17: -> exprMultDiv
            {
                adaptor.addChild(root_0, stream_exprMultDiv.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:684:2: ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==MINUS||LA50_0==PLUS) ) {
                    int LA50_1 = input.LA(2);

                    if ( (synpred83_pollen()) ) {
                        alt50=1;
                    }


                }


                switch (alt50) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:685:3: addSubOp exprMultDiv
            	    {
            	    pushFollow(FOLLOW_addSubOp_in_exprAddSub3239);
            	    addSubOp182=addSubOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_addSubOp.add(addSubOp182.getTree());

            	    pushFollow(FOLLOW_exprMultDiv_in_exprAddSub3241);
            	    exprMultDiv183=exprMultDiv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv183.getTree());

            	    // AST REWRITE
            	    // elements: exprMultDiv, addSubOp, exprAddSub
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 686:3: -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:686:6: ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_addSubOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprMultDiv.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, exprAddSub_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprAddSub"


    public static class exprMultDiv_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprMultDiv"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:689:1: exprMultDiv : ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* ;
    public final pollenParser.exprMultDiv_return exprMultDiv() throws RecognitionException {
        pollenParser.exprMultDiv_return retval = new pollenParser.exprMultDiv_return();
        retval.start = input.LT(1);

        int exprMultDiv_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprUnary_return exprUnary184 =null;

        pollenParser.multDivModOp_return multDivModOp185 =null;

        pollenParser.exprUnary_return exprUnary186 =null;


        RewriteRuleSubtreeStream stream_multDivModOp=new RewriteRuleSubtreeStream(adaptor,"rule multDivModOp");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:690:2: ( ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:690:4: ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:690:4: ( exprUnary -> exprUnary )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:690:5: exprUnary
            {
            pushFollow(FOLLOW_exprUnary_in_exprMultDiv3284);
            exprUnary184=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary184.getTree());

            // AST REWRITE
            // elements: exprUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 690:15: -> exprUnary
            {
                adaptor.addChild(root_0, stream_exprUnary.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:691:2: ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==124||LA51_0==129||LA51_0==132) ) {
                    int LA51_1 = input.LA(2);

                    if ( (synpred84_pollen()) ) {
                        alt51=1;
                    }


                }


                switch (alt51) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:3: multDivModOp exprUnary
            	    {
            	    pushFollow(FOLLOW_multDivModOp_in_exprMultDiv3296);
            	    multDivModOp185=multDivModOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multDivModOp.add(multDivModOp185.getTree());

            	    pushFollow(FOLLOW_exprUnary_in_exprMultDiv3298);
            	    exprUnary186=exprUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary186.getTree());

            	    // AST REWRITE
            	    // elements: exprMultDiv, multDivModOp, exprUnary
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 693:3: -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	    {
            	        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:6: ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_multDivModOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprUnary.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, exprMultDiv_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprMultDiv"


    public static class exprNew_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprNew"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:1: exprNew : 'new' typeName fcnArgumentList -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ;
    public final pollenParser.exprNew_return exprNew() throws RecognitionException {
        pollenParser.exprNew_return retval = new pollenParser.exprNew_return();
        retval.start = input.LT(1);

        int exprNew_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal187=null;
        pollenParser.typeName_return typeName188 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList189 =null;


        BaseNode string_literal187_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:2: ( 'new' typeName fcnArgumentList -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:4: 'new' typeName fcnArgumentList
            {
            string_literal187=(Atom)match(input,172,FOLLOW_172_in_exprNew3333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal187);


            pushFollow(FOLLOW_typeName_in_exprNew3335);
            typeName188=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName188.getTree());

            pushFollow(FOLLOW_fcnArgumentList_in_exprNew3337);
            fcnArgumentList189=fcnArgumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList189.getTree());

            // AST REWRITE
            // elements: typeName, fcnArgumentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 697:35: -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:38: ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.New(E_NEW, "E_NEW")
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, exprNew_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprNew"


    public static class exprUnary_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprUnary"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:699:1: exprUnary : ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr ) | '(' expr ')' -> ^( E_PAREN expr ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] MINUS expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew );
    public final pollenParser.exprUnary_return exprUnary() throws RecognitionException {
        pollenParser.exprUnary_return retval = new pollenParser.exprUnary_return();
        retval.start = input.LT(1);

        int exprUnary_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal197=null;
        Atom char_literal199=null;
        Atom MINUS200=null;
        pollenParser.primitiveLit_return primitiveLit190 =null;

        pollenParser.injectionCode_return injectionCode191 =null;

        pollenParser.arrayLit_return arrayLit192 =null;

        pollenParser.logicalNotOp_return logicalNotOp193 =null;

        pollenParser.expr_return expr194 =null;

        pollenParser.bitwiseNotOp_return bitwiseNotOp195 =null;

        pollenParser.expr_return expr196 =null;

        pollenParser.expr_return expr198 =null;

        pollenParser.expr_return expr201 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray202 =null;

        pollenParser.incDecOp_return incDecOp203 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray204 =null;

        pollenParser.incDecOp_return incDecOp205 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray206 =null;

        pollenParser.exprNew_return exprNew207 =null;


        BaseNode char_literal197_tree=null;
        BaseNode char_literal199_tree=null;
        BaseNode MINUS200_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arrayLit=new RewriteRuleSubtreeStream(adaptor,"rule arrayLit");
        RewriteRuleSubtreeStream stream_incDecOp=new RewriteRuleSubtreeStream(adaptor,"rule incDecOp");
        RewriteRuleSubtreeStream stream_logicalNotOp=new RewriteRuleSubtreeStream(adaptor,"rule logicalNotOp");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_bitwiseNotOp=new RewriteRuleSubtreeStream(adaptor,"rule bitwiseNotOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:700:2: ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr ) | '(' expr ')' -> ^( E_PAREN expr ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] MINUS expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew )
            int alt52=11;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 159:
            case 173:
            case 183:
                {
                alt52=1;
                }
                break;
            case INJECT:
                {
                alt52=2;
                }
                break;
            case 138:
                {
                alt52=3;
                }
                break;
            case LOG_NOT:
                {
                alt52=4;
                }
                break;
            case BIT_NOT:
                {
                alt52=5;
                }
                break;
            case 127:
                {
                alt52=6;
                }
                break;
            case MINUS:
                {
                alt52=7;
                }
                break;
            case 172:
                {
                int LA52_8 = input.LA(2);

                if ( (synpred92_pollen()) ) {
                    alt52=8;
                }
                else if ( (synpred93_pollen()) ) {
                    alt52=9;
                }
                else if ( (true) ) {
                    alt52=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 8, input);

                    throw nvae;

                }
                }
                break;
            case DEC:
            case INC:
                {
                alt52=10;
                }
                break;
            case IDENT:
            case 137:
                {
                int LA52_13 = input.LA(2);

                if ( (synpred92_pollen()) ) {
                    alt52=8;
                }
                else if ( (synpred93_pollen()) ) {
                    alt52=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }

            switch (alt52) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:700:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_exprUnary3363);
                    primitiveLit190=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit190.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:701:4: injectionCode
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionCode_in_exprUnary3368);
                    injectionCode191=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionCode191.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:702:4: arrayLit
                    {
                    pushFollow(FOLLOW_arrayLit_in_exprUnary3373);
                    arrayLit192=arrayLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLit.add(arrayLit192.getTree());

                    // AST REWRITE
                    // elements: arrayLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 702:18: -> ^( E_VEC[\"E_VEC\"] arrayLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:702:21: ^( E_VEC[\"E_VEC\"] arrayLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_arrayLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:703:4: logicalNotOp expr
                    {
                    pushFollow(FOLLOW_logicalNotOp_in_exprUnary3397);
                    logicalNotOp193=logicalNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicalNotOp.add(logicalNotOp193.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary3399);
                    expr194=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr194.getTree());

                    // AST REWRITE
                    // elements: expr, logicalNotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 703:25: -> ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:703:28: ^( E_UNARY[\"E_UNARY\"] logicalNotOp expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_logicalNotOp.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:704:4: bitwiseNotOp expr
                    {
                    pushFollow(FOLLOW_bitwiseNotOp_in_exprUnary3423);
                    bitwiseNotOp195=bitwiseNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bitwiseNotOp.add(bitwiseNotOp195.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary3425);
                    expr196=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr196.getTree());

                    // AST REWRITE
                    // elements: bitwiseNotOp, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 704:25: -> ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:704:28: ^( E_UNARY[\"E_UNARY\"] bitwiseNotOp expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_bitwiseNotOp.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:705:4: '(' expr ')'
                    {
                    char_literal197=(Atom)match(input,127,FOLLOW_127_in_exprUnary3449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal197);


                    pushFollow(FOLLOW_expr_in_exprUnary3451);
                    expr198=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr198.getTree());

                    char_literal199=(Atom)match(input,128,FOLLOW_128_in_exprUnary3453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal199);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 705:20: -> ^( E_PAREN expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:705:23: ^( E_PAREN expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(E_PAREN, "E_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:706:4: MINUS expr
                    {
                    MINUS200=(Atom)match(input,MINUS,FOLLOW_MINUS_in_exprUnary3469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS200);


                    pushFollow(FOLLOW_expr_in_exprUnary3471);
                    expr201=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr201.getTree());

                    // AST REWRITE
                    // elements: MINUS, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 706:19: -> ^( E_UNARY[\"E_UNARY\"] MINUS expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:706:22: ^( E_UNARY[\"E_UNARY\"] MINUS expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_MINUS.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:4: varOrFcnOrArray incDecOp
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary3496);
                    varOrFcnOrArray202=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray202.getTree());

                    pushFollow(FOLLOW_incDecOp_in_exprUnary3498);
                    incDecOp203=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp203.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 707:29: -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:32: ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY", true)
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:708:4: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary3519);
                    varOrFcnOrArray204=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray204.getTree());

                    }
                    break;
                case 10 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:709:4: incDecOp varOrFcnOrArray
                    {
                    pushFollow(FOLLOW_incDecOp_in_exprUnary3524);
                    incDecOp205=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp205.getTree());

                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary3526);
                    varOrFcnOrArray206=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray206.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 709:29: -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:709:32: ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:710:4: exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_exprUnary3547);
                    exprNew207=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew207.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, exprUnary_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprUnary"


    public static class fcnDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinition"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:712:1: fcnDefinition : ( 'public' )? ( 'host' )? fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody ) ;
    public final pollenParser.fcnDefinition_return fcnDefinition() throws RecognitionException {
        pollenParser.fcnDefinition_return retval = new pollenParser.fcnDefinition_return();
        retval.start = input.LT(1);

        int fcnDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal208=null;
        Atom string_literal209=null;
        pollenParser.fcnType_fcnName_return fcnType_fcnName210 =null;

        pollenParser.formalParameterList_return formalParameterList211 =null;

        pollenParser.fcnBody_return fcnBody212 =null;


        BaseNode string_literal208_tree=null;
        BaseNode string_literal209_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

        	EnumSet<Flags> atFlags = EnumSet.noneOf(Flags.class);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:2: ( ( 'public' )? ( 'host' )? fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:4: ( 'public' )? ( 'host' )? fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:4: ( 'public' )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==179) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:5: 'public'
                    {
                    string_literal208=(Atom)match(input,179,FOLLOW_179_in_fcnDefinition3563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal208);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.PUBLIC); }

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:3: ( 'host' )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==162) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:717:4: 'host'
                    {
                    string_literal209=(Atom)match(input,162,FOLLOW_162_in_fcnDefinition3574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal209);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinition3584);
            fcnType_fcnName210=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName210.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinition3586);
            formalParameterList211=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList211.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinition3588);
            fcnBody212=fcnBody((formalParameterList211!=null?((BaseNode)formalParameterList211.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody212.getTree());

            // AST REWRITE
            // elements: fcnBody, formalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 719:3: -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:719:6: ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, fcnDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinition"


    public static class fcnDefinitionHost_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinitionHost"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:721:1: fcnDefinitionHost : ( 'public' )? ( 'host' )? fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody ) ;
    public final pollenParser.fcnDefinitionHost_return fcnDefinitionHost() throws RecognitionException {
        pollenParser.fcnDefinitionHost_return retval = new pollenParser.fcnDefinitionHost_return();
        retval.start = input.LT(1);

        int fcnDefinitionHost_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal213=null;
        Atom string_literal214=null;
        pollenParser.fcnType_fcnName_return fcnType_fcnName215 =null;

        pollenParser.formalParameterList_return formalParameterList216 =null;

        pollenParser.fcnBody_return fcnBody217 =null;


        BaseNode string_literal213_tree=null;
        BaseNode string_literal214_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

        	EnumSet<Flags> atFlags = EnumSet.noneOf(Flags.class);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:2: ( ( 'public' )? ( 'host' )? fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:4: ( 'public' )? ( 'host' )? fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:4: ( 'public' )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==179) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:5: 'public'
                    {
                    string_literal213=(Atom)match(input,179,FOLLOW_179_in_fcnDefinitionHost3626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal213);


                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:16: ( 'host' )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==162) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:17: 'host'
                    {
                    string_literal214=(Atom)match(input,162,FOLLOW_162_in_fcnDefinitionHost3631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal214);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinitionHost3642);
            fcnType_fcnName215=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName215.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinitionHost3645);
            formalParameterList216=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList216.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinitionHost3647);
            fcnBody217=fcnBody((formalParameterList216!=null?((BaseNode)formalParameterList216.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody217.getTree());

            if ( state.backtracking==0 ) { 	atFlags.add(Flags.PUBLIC); /* enforce */ 	
            			if (!atFlags.contains(Flags.HOST))
                   		throw new PollenException("Composition features must be one of host functions, export statements, or enum definitions.", input);
            		}

            // AST REWRITE
            // elements: formalParameterList, fcnBody, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 732:3: -> ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:732:6: ^( D_FCN_DEF[\"D_FCN_DEF\", atFlags] fcnType_fcnName formalParameterList fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, fcnDefinitionHost_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinitionHost"


    public static class fcnAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnAttr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:739:1: fcnAttr : ( 'public' )? ( 'host' )? ;
    public final pollenParser.fcnAttr_return fcnAttr() throws RecognitionException {
        pollenParser.fcnAttr_return retval = new pollenParser.fcnAttr_return();
        retval.start = input.LT(1);

        int fcnAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal218=null;
        Atom string_literal219=null;

        BaseNode string_literal218_tree=null;
        BaseNode string_literal219_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:740:2: ( ( 'public' )? ( 'host' )? )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:740:4: ( 'public' )? ( 'host' )?
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:740:4: ( 'public' )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==179) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:740:5: 'public'
                    {
                    string_literal218=(Atom)match(input,179,FOLLOW_179_in_fcnAttr3691); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal218_tree = 
                    (BaseNode)adaptor.create(string_literal218)
                    ;
                    adaptor.addChild(root_0, string_literal218_tree);
                    }

                    if ( state.backtracking==0 ) { atFlags.add(Flags.PUBLIC); }

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:741:3: ( 'host' )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==162) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:741:4: 'host'
                    {
                    string_literal219=(Atom)match(input,162,FOLLOW_162_in_fcnAttr3702); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal219_tree = 
                    (BaseNode)adaptor.create(string_literal219)
                    ;
                    adaptor.addChild(root_0, string_literal219_tree);
                    }

                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, fcnAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnAttr"


    public static class fcnBody_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnBody"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:743:1: fcnBody[CommonTree formals] : braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) ;
    public final pollenParser.fcnBody_return fcnBody(CommonTree formals) throws RecognitionException {
        pollenParser.fcnBody_return retval = new pollenParser.fcnBody_return();
        retval.start = input.LT(1);

        int fcnBody_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen220 =null;

        pollenParser.stmts_return stmts221 =null;

        pollenParser.braceClose_return braceClose222 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:744:3: ( braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:744:5: braceOpen ( stmts ) braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_fcnBody3719);
            braceOpen220=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen220.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:744:15: ( stmts )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:744:16: stmts
            {
            pushFollow(FOLLOW_stmts_in_fcnBody3722);
            stmts221=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts221.getTree());

            }


            pushFollow(FOLLOW_braceClose_in_fcnBody3726);
            braceClose222=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose222.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 744:36: -> ^( FCNBODY[\"FCNBODY\"] stmts )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:744:39: ^( FCNBODY[\"FCNBODY\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new BodyNode(FCNBODY, "FCNBODY")
                , root_1);

                adaptor.addChild(root_1, formals);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, fcnBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnBody"


    public static class fcnDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDeclaration"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:746:1: fcnDeclaration : ( 'public' )? ( 'host' )? fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName formalParameterList ) ;
    public final pollenParser.fcnDeclaration_return fcnDeclaration() throws RecognitionException {
        pollenParser.fcnDeclaration_return retval = new pollenParser.fcnDeclaration_return();
        retval.start = input.LT(1);

        int fcnDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal223=null;
        Atom string_literal224=null;
        pollenParser.fcnType_fcnName_return fcnType_fcnName225 =null;

        pollenParser.formalParameterList_return formalParameterList226 =null;

        pollenParser.delim_return delim227 =null;


        BaseNode string_literal223_tree=null;
        BaseNode string_literal224_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	atFlags = EnumSet.noneOf(Flags.class);	

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:4: ( ( 'public' )? ( 'host' )? fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName formalParameterList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:6: ( 'public' )? ( 'host' )? fcnType_fcnName ( formalParameterList ) delim
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:6: ( 'public' )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==179) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:7: 'public'
                    {
                    string_literal223=(Atom)match(input,179,FOLLOW_179_in_fcnDeclaration3761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal223);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.PUBLIC); }

                    }
                    break;

            }


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:751:3: ( 'host' )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==162) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:751:4: 'host'
                    {
                    string_literal224=(Atom)match(input,162,FOLLOW_162_in_fcnDeclaration3772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal224);


                    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

                    }
                    break;

            }


            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDeclaration3782);
            fcnType_fcnName225=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName225.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:752:19: ( formalParameterList )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:752:20: formalParameterList
            {
            pushFollow(FOLLOW_formalParameterList_in_fcnDeclaration3785);
            formalParameterList226=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList226.getTree());

            }


            pushFollow(FOLLOW_delim_in_fcnDeclaration3788);
            delim227=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim227.getTree());

            // AST REWRITE
            // elements: fcnType_fcnName, formalParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 753:4: -> ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName formalParameterList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:753:7: ^( D_FCN_DCL[\"D_FCN_DCL\", atFlags] fcnType_fcnName formalParameterList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DCL, "D_FCN_DCL", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, fcnDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDeclaration"


    public static class fcnType_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnType_fcnName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:755:1: fcnType_fcnName : ( typeName qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName ) | qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName );
    public final pollenParser.fcnType_fcnName_return fcnType_fcnName() throws RecognitionException {
        pollenParser.fcnType_fcnName_return retval = new pollenParser.fcnType_fcnName_return();
        retval.start = input.LT(1);

        int fcnType_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeName_return typeName228 =null;

        pollenParser.qualName_return qualName229 =null;

        pollenParser.typeName_return typeName230 =null;

        pollenParser.qualName_return qualName231 =null;

        pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName232 =null;


        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:758:2: ( typeName qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName ) | qualName -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName )
            int alt61=4;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==143) ) {
                int LA61_1 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==145) ) {
                int LA61_2 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==168) ) {
                int LA61_3 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==166) ) {
                int LA61_4 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==167) ) {
                int LA61_5 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==181) ) {
                int LA61_6 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==187) ) {
                int LA61_7 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==185) ) {
                int LA61_8 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==186) ) {
                int LA61_9 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==IDENT) ) {
                int LA61_10 = input.LA(2);

                if ( (synpred103_pollen()) ) {
                    alt61=1;
                }
                else if ( ((((input.LT(1).getText().equals(ti.getTypeName()) )&&(input.LT(1).getText().equals(ti.getTypeName()) ))&&synpred104_pollen())) ) {
                    alt61=2;
                }
                else if ( (synpred105_pollen()) ) {
                    alt61=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==127) && (synpred107_pollen())) {
                alt61=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:758:4: typeName qualName
                    {
                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName3821);
                    typeName228=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName228.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName3823);
                    qualName229=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName229.getTree());

                    // AST REWRITE
                    // elements: qualName, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 759:3: -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:6: ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:22: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", atFlags)
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:62: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:760:4: {...}? typeName
                    {
                    if ( !((input.LT(1).getText().equals(ti.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "input.LT(1).getText().equals(ti.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName3869);
                    typeName230=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName230.getTree());

                    // AST REWRITE
                    // elements: typeName, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 761:3: -> ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:761:6: ^( D_FCN_CTOR ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) ) typeName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:761:19: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", atFlags)
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:761:59: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:762:4: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName3914);
                    qualName231=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName231.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 763:3: -> ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:763:6: ^( D_FCN_TYP_NM ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:763:21: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", atFlags)
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:764:5: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:764:30: ^( T_STD[\"T_STD\", atFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", atFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:4: ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName4001);
                    fcnTypes_fcnName232=fcnTypes_fcnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnTypes_fcnName232.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, fcnType_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnType_fcnName"


    public static class fcnTypes_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes_fcnName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:767:1: fcnTypes_fcnName : '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM fcnTypes qualName ) ;
    public final pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName() throws RecognitionException {
        pollenParser.fcnTypes_fcnName_return retval = new pollenParser.fcnTypes_fcnName_return();
        retval.start = input.LT(1);

        int fcnTypes_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal233=null;
        Atom char_literal235=null;
        pollenParser.fcnTypes_return fcnTypes234 =null;

        pollenParser.qualName_return qualName236 =null;


        BaseNode char_literal233_tree=null;
        BaseNode char_literal235_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnTypes");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:768:2: ( '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM fcnTypes qualName ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:768:4: '(' fcnTypes ')' qualName
            {
            char_literal233=(Atom)match(input,127,FOLLOW_127_in_fcnTypes_fcnName4012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal233);


            pushFollow(FOLLOW_fcnTypes_in_fcnTypes_fcnName4014);
            fcnTypes234=fcnTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnTypes.add(fcnTypes234.getTree());

            char_literal235=(Atom)match(input,128,FOLLOW_128_in_fcnTypes_fcnName4016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal235);


            pushFollow(FOLLOW_qualName_in_fcnTypes_fcnName4018);
            qualName236=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName236.getTree());

            // AST REWRITE
            // elements: qualName, fcnTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 768:30: -> ^( D_FCN_TYP_NM fcnTypes qualName )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:768:33: ^( D_FCN_TYP_NM fcnTypes qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                , root_1);

                adaptor.addChild(root_1, stream_fcnTypes.nextTree());

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, fcnTypes_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes_fcnName"


    public static class fcnTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:770:1: fcnTypes : typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) ;
    public final pollenParser.fcnTypes_return fcnTypes() throws RecognitionException {
        pollenParser.fcnTypes_return retval = new pollenParser.fcnTypes_return();
        retval.start = input.LT(1);

        int fcnTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal238=null;
        pollenParser.typeName_return typeName237 =null;

        pollenParser.typeName_return typeName239 =null;


        BaseNode char_literal238_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:2: ( typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:4: typeName ( ',' typeName )*
            {
            pushFollow(FOLLOW_typeName_in_fcnTypes4039);
            typeName237=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName237.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:13: ( ',' typeName )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==130) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:14: ',' typeName
            	    {
            	    char_literal238=(Atom)match(input,130,FOLLOW_130_in_fcnTypes4042); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal238);


            	    pushFollow(FOLLOW_typeName_in_fcnTypes4044);
            	    typeName239=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeName.add(typeName239.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            // AST REWRITE
            // elements: typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 771:29: -> ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:32: ^( T_LST[\"T_LST\", atFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Lst(T_LST, "T_LST", atFlags)
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:72: ^( LIST[\"LIST\"] ( typeName )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_typeName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_typeName.nextTree());

                }
                stream_typeName.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, fcnTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes"


    public static class formalParameterList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:773:1: formalParameterList : '(' formalParameters ')' -> formalParameters ;
    public final pollenParser.formalParameterList_return formalParameterList() throws RecognitionException {
        pollenParser.formalParameterList_return retval = new pollenParser.formalParameterList_return();
        retval.start = input.LT(1);

        int formalParameterList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal240=null;
        Atom char_literal242=null;
        pollenParser.formalParameters_return formalParameters241 =null;


        BaseNode char_literal240_tree=null;
        BaseNode char_literal242_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:774:2: ( '(' formalParameters ')' -> formalParameters )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:774:4: '(' formalParameters ')'
            {
            char_literal240=(Atom)match(input,127,FOLLOW_127_in_formalParameterList4079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal240);


            pushFollow(FOLLOW_formalParameters_in_formalParameterList4081);
            formalParameters241=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters241.getTree());

            char_literal242=(Atom)match(input,128,FOLLOW_128_in_formalParameterList4083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal242);


            // AST REWRITE
            // elements: formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 774:29: -> formalParameters
            {
                adaptor.addChild(root_0, stream_formalParameters.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, formalParameterList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterList"


    public static class formalParameters_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameters"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:776:1: formalParameters : ( formalParameter ( ',' formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.formalParameters_return formalParameters() throws RecognitionException {
        pollenParser.formalParameters_return retval = new pollenParser.formalParameters_return();
        retval.start = input.LT(1);

        int formalParameters_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal244=null;
        pollenParser.formalParameter_return formalParameter243 =null;

        pollenParser.formalParameter_return formalParameter245 =null;


        BaseNode char_literal244_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:2: ( formalParameter ( ',' formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==IDENT||LA64_0==143||LA64_0==145||(LA64_0 >= 166 && LA64_0 <= 168)||LA64_0==181||(LA64_0 >= 184 && LA64_0 <= 187)) ) {
                alt64=1;
            }
            else if ( (LA64_0==NL||LA64_0==128||LA64_0==193) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:4: formalParameter ( ',' formalParameter )*
                    {
                    pushFollow(FOLLOW_formalParameter_in_formalParameters4097);
                    formalParameter243=formalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter243.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:20: ( ',' formalParameter )*
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( (LA63_0==130) ) {
                            alt63=1;
                        }


                        switch (alt63) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:21: ',' formalParameter
                    	    {
                    	    char_literal244=(Atom)match(input,130,FOLLOW_130_in_formalParameters4100); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal244);


                    	    pushFollow(FOLLOW_formalParameter_in_formalParameters4102);
                    	    formalParameter245=formalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter245.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: formalParameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 778:3: -> ^( LIST[\"LIST\"] ( formalParameter )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:778:6: ^( LIST[\"LIST\"] ( formalParameter )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_formalParameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameter.nextTree());

                        }
                        stream_formalParameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 779:4: -> ^( LIST[\"LIST\"] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, formalParameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameters"


    public static class formalParameter_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameter"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:781:1: formalParameter : ( 'type' IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\", atFlags] ^( T_USR[\"T_USR\", atFlags] IDENT ) IDENT ( expr )? ) | typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) );
    public final pollenParser.formalParameter_return formalParameter() throws RecognitionException {
        pollenParser.formalParameter_return retval = new pollenParser.formalParameter_return();
        retval.start = input.LT(1);

        int formalParameter_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal246=null;
        Atom IDENT247=null;
        Atom char_literal248=null;
        Atom IDENT251=null;
        Atom char_literal252=null;
        pollenParser.expr_return expr249 =null;

        pollenParser.typeName_return typeName250 =null;

        pollenParser.expr_return expr253 =null;


        BaseNode string_literal246_tree=null;
        BaseNode IDENT247_tree=null;
        BaseNode char_literal248_tree=null;
        BaseNode IDENT251_tree=null;
        BaseNode char_literal252_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

        	EnumSet<Flags> atFlags = EnumSet.noneOf(Flags.class);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:2: ( 'type' IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\", atFlags] ^( T_USR[\"T_USR\", atFlags] IDENT ) IDENT ( expr )? ) | typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==184) ) {
                alt67=1;
            }
            else if ( (LA67_0==IDENT||LA67_0==143||LA67_0==145||(LA67_0 >= 166 && LA67_0 <= 168)||LA67_0==181||(LA67_0 >= 185 && LA67_0 <= 187)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:6: 'type' IDENT ( '=' expr )?
                    {
                    string_literal246=(Atom)match(input,184,FOLLOW_184_in_formalParameter4150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal246);


                    IDENT247=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter4152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT247);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:19: ( '=' expr )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==ASSIGN) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:785:21: '=' expr
                            {
                            char_literal248=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter4156); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal248);


                            pushFollow(FOLLOW_expr_in_formalParameter4158);
                            expr249=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr249.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { atFlags.add(Flags.TYPE_META_FP); }

                    // AST REWRITE
                    // elements: expr, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 787:3: -> ^( D_FORMAL[\"D_FORMAL\", atFlags] ^( T_USR[\"T_USR\", atFlags] IDENT ) IDENT ( expr )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:787:6: ^( D_FORMAL[\"D_FORMAL\", atFlags] ^( T_USR[\"T_USR\", atFlags] IDENT ) IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", atFlags)
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:787:55: ^( T_USR[\"T_USR\", atFlags] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", atFlags)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:787:108: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:6: typeName IDENT ( '=' expr )?
                    {
                    pushFollow(FOLLOW_typeName_in_formalParameter4206);
                    typeName250=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName250.getTree());

                    IDENT251=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter4208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT251);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:21: ( '=' expr )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==ASSIGN) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:788:23: '=' expr
                            {
                            char_literal252=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter4212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal252);


                            pushFollow(FOLLOW_expr_in_formalParameter4214);
                            expr253=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr253.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: typeName, expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 789:3: -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:789:6: ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:789:61: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, formalParameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameter"


    public static class fcnArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArgumentList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:792:1: fcnArgumentList : '(' fcnArguments ')' -> fcnArguments ;
    public final pollenParser.fcnArgumentList_return fcnArgumentList() throws RecognitionException {
        pollenParser.fcnArgumentList_return retval = new pollenParser.fcnArgumentList_return();
        retval.start = input.LT(1);

        int fcnArgumentList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal254=null;
        Atom char_literal256=null;
        pollenParser.fcnArguments_return fcnArguments255 =null;


        BaseNode char_literal254_tree=null;
        BaseNode char_literal256_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnArguments=new RewriteRuleSubtreeStream(adaptor,"rule fcnArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:793:2: ( '(' fcnArguments ')' -> fcnArguments )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:793:4: '(' fcnArguments ')'
            {
            char_literal254=(Atom)match(input,127,FOLLOW_127_in_fcnArgumentList4250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal254);


            pushFollow(FOLLOW_fcnArguments_in_fcnArgumentList4252);
            fcnArguments255=fcnArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArguments.add(fcnArguments255.getTree());

            char_literal256=(Atom)match(input,128,FOLLOW_128_in_fcnArgumentList4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal256);


            // AST REWRITE
            // elements: fcnArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 793:25: -> fcnArguments
            {
                adaptor.addChild(root_0, stream_fcnArguments.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, fcnArgumentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArgumentList"


    public static class fcnArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArguments"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:795:1: fcnArguments : exprList ;
    public final pollenParser.fcnArguments_return fcnArguments() throws RecognitionException {
        pollenParser.fcnArguments_return retval = new pollenParser.fcnArguments_return();
        retval.start = input.LT(1);

        int fcnArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprList_return exprList257 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:796:2: ( exprList )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:796:4: exprList
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprList_in_fcnArguments4269);
            exprList257=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprList257.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, fcnArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArguments"


    public static class varOrFcnOrArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrFcnOrArray"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:798:1: varOrFcnOrArray : ( 'new' typeName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? ) | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) );
    public final pollenParser.varOrFcnOrArray_return varOrFcnOrArray() throws RecognitionException {
        pollenParser.varOrFcnOrArray_return retval = new pollenParser.varOrFcnOrArray_return();
        retval.start = input.LT(1);

        int varOrFcnOrArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal258=null;
        Atom char_literal262=null;
        Atom IDENT263=null;
        Atom char_literal266=null;
        Atom IDENT267=null;
        Atom char_literal269=null;
        pollenParser.typeName_return typeName259 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList260 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess261 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList264 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess265 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess268 =null;

        pollenParser.qualName_return qualName270 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList271 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess272 =null;

        pollenParser.qualName_return qualName273 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess274 =null;


        BaseNode string_literal258_tree=null;
        BaseNode char_literal262_tree=null;
        BaseNode IDENT263_tree=null;
        BaseNode char_literal266_tree=null;
        BaseNode IDENT267_tree=null;
        BaseNode char_literal269_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:2: ( 'new' typeName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? ) | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) )
            int alt73=6;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt73=1;
                }
                break;
            case 137:
                {
                int LA73_2 = input.LA(2);

                if ( (synpred117_pollen()) ) {
                    alt73=2;
                }
                else if ( (synpred119_pollen()) ) {
                    alt73=3;
                }
                else if ( (synpred120_pollen()) ) {
                    alt73=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA73_6 = input.LA(2);

                if ( (synpred122_pollen()) ) {
                    alt73=5;
                }
                else if ( (true) ) {
                    alt73=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:4: 'new' typeName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    string_literal258=(Atom)match(input,172,FOLLOW_172_in_varOrFcnOrArray4279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal258);


                    pushFollow(FOLLOW_typeName_in_varOrFcnOrArray4281);
                    typeName259=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName259.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray4283);
                    fcnArgumentList260=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList260.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:35: ( fieldOrArrayAccess )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==138) ) {
                        int LA68_1 = input.LA(2);

                        if ( (synpred114_pollen()) ) {
                            alt68=1;
                        }
                    }
                    else if ( (LA68_0==131) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:35: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4285);
                            fieldOrArrayAccess261=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess261.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fcnArgumentList, typeName, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 800:3: -> ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:6: ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:62: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:4: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    char_literal262=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray4312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal262);


                    IDENT263=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray4314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT263);


                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray4316);
                    fcnArgumentList264=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList264.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:30: ( fieldOrArrayAccess )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==138) ) {
                        int LA69_1 = input.LA(2);

                        if ( (synpred116_pollen()) ) {
                            alt69=1;
                        }
                    }
                    else if ( (LA69_0==131) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:30: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4318);
                            fieldOrArrayAccess265=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess265.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fcnArgumentList, IDENT, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 802:3: -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:6: ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:4: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:38: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_3);

                        adaptor.addChild(root_3, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:98: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:4: '@' IDENT ( fieldOrArrayAccess )?
                    {
                    char_literal266=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray4370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal266);


                    IDENT267=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray4372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT267);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:14: ( fieldOrArrayAccess )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==138) ) {
                        int LA70_1 = input.LA(2);

                        if ( (synpred118_pollen()) ) {
                            alt70=1;
                        }
                    }
                    else if ( (LA70_0==131) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:14: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4374);
                            fieldOrArrayAccess268=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess268.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 805:3: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:6: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:40: ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:83: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:4: '@'
                    {
                    char_literal269=(Atom)match(input,137,FOLLOW_137_in_varOrFcnOrArray4413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(char_literal269);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 807:3: -> ^( E_SELF[\"E_SELF\"] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:807:6: ^( E_SELF[\"E_SELF\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:4: qualName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray4433);
                    qualName270=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName270.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray4435);
                    fcnArgumentList271=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList271.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:29: ( fieldOrArrayAccess )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==138) ) {
                        int LA71_1 = input.LA(2);

                        if ( (synpred121_pollen()) ) {
                            alt71=1;
                        }
                    }
                    else if ( (LA71_0==131) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:29: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4437);
                            fieldOrArrayAccess272=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess272.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fcnArgumentList, fieldOrArrayAccess, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 809:3: -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:6: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:40: ^( E_IDENT[\"E_IDENT\"] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:103: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:4: qualName ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray4475);
                    qualName273=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName273.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:13: ( fieldOrArrayAccess )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==138) ) {
                        int LA72_1 = input.LA(2);

                        if ( (synpred123_pollen()) ) {
                            alt72=1;
                        }
                    }
                    else if ( (LA72_0==131) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:13: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4477);
                            fieldOrArrayAccess274=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess274.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: qualName, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 810:33: -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:36: ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:82: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, varOrFcnOrArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varOrFcnOrArray"


    public static class fieldOrArrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldOrArrayAccess"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:812:1: fieldOrArrayAccess : ( fieldAccess | arrayAccess )+ ;
    public final pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess() throws RecognitionException {
        pollenParser.fieldOrArrayAccess_return retval = new pollenParser.fieldOrArrayAccess_return();
        retval.start = input.LT(1);

        int fieldOrArrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fieldAccess_return fieldAccess275 =null;

        pollenParser.arrayAccess_return arrayAccess276 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:2: ( ( fieldAccess | arrayAccess )+ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:5: ( fieldAccess | arrayAccess )+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:5: ( fieldAccess | arrayAccess )+
            int cnt74=0;
            loop74:
            do {
                int alt74=3;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==131) ) {
                    alt74=1;
                }
                else if ( (LA74_0==138) ) {
                    int LA74_2 = input.LA(2);

                    if ( (synpred125_pollen()) ) {
                        alt74=2;
                    }


                }


                switch (alt74) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:6: fieldAccess
            	    {
            	    pushFollow(FOLLOW_fieldAccess_in_fieldOrArrayAccess4507);
            	    fieldAccess275=fieldAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldAccess275.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:20: arrayAccess
            	    {
            	    pushFollow(FOLLOW_arrayAccess_in_fieldOrArrayAccess4511);
            	    arrayAccess276=arrayAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess276.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, fieldOrArrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldOrArrayAccess"


    public static class fieldAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldAccess"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:815:1: fieldAccess : ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) );
    public final pollenParser.fieldAccess_return fieldAccess() throws RecognitionException {
        pollenParser.fieldAccess_return retval = new pollenParser.fieldAccess_return();
        retval.start = input.LT(1);

        int fieldAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal277=null;
        Atom IDENT278=null;
        Atom char_literal280=null;
        Atom IDENT281=null;
        pollenParser.fcnArgumentList_return fcnArgumentList279 =null;


        BaseNode char_literal277_tree=null;
        BaseNode IDENT278_tree=null;
        BaseNode char_literal280_tree=null;
        BaseNode IDENT281_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:2: ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==131) ) {
                int LA75_1 = input.LA(2);

                if ( (synpred126_pollen()) ) {
                    alt75=1;
                }
                else if ( (true) ) {
                    alt75=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:4: '.' IDENT fcnArgumentList
                    {
                    char_literal277=(Atom)match(input,131,FOLLOW_131_in_fieldAccess4525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal277);


                    IDENT278=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess4527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT278);


                    pushFollow(FOLLOW_fcnArgumentList_in_fieldAccess4529);
                    fcnArgumentList279=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList279.getTree());

                    // AST REWRITE
                    // elements: fcnArgumentList, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 818:30: -> ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:33: ^( E_CALL[\"E_CALL\", true] IDENT fcnArgumentList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:4: '.' IDENT
                    {
                    char_literal280=(Atom)match(input,131,FOLLOW_131_in_fieldAccess4551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal280);


                    IDENT281=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess4553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT281);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 819:15: -> ^( E_IDENT[\"E_IDENT\", true] IDENT )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:18: ^( E_IDENT[\"E_IDENT\", true] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, fieldAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldAccess"


    public static class arrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayAccess"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:1: arrayAccess : '[' ( exprList )? ']' -> ^( E_INDEX ( exprList )? ) ;
    public final pollenParser.arrayAccess_return arrayAccess() throws RecognitionException {
        pollenParser.arrayAccess_return retval = new pollenParser.arrayAccess_return();
        retval.start = input.LT(1);

        int arrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal282=null;
        Atom char_literal284=null;
        pollenParser.exprList_return exprList283 =null;


        BaseNode char_literal282_tree=null;
        BaseNode char_literal284_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:2: ( '[' ( exprList )? ']' -> ^( E_INDEX ( exprList )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:4: '[' ( exprList )? ']'
            {
            char_literal282=(Atom)match(input,138,FOLLOW_138_in_arrayAccess4578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(char_literal282);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:8: ( exprList )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==139) ) {
                int LA76_1 = input.LA(2);

                if ( (synpred127_pollen()) ) {
                    alt76=1;
                }
            }
            else if ( ((LA76_0 >= BIT_NOT && LA76_0 <= CHAR)||LA76_0==DEC||LA76_0==HEX_LIT||LA76_0==IDENT||(LA76_0 >= INC && LA76_0 <= INT_LIT)||LA76_0==LOG_NOT||LA76_0==MINUS||LA76_0==NL||LA76_0==OCT_LIT||LA76_0==REAL_LIT||LA76_0==SEMI||LA76_0==STRING||(LA76_0 >= 127 && LA76_0 <= 128)||LA76_0==130||(LA76_0 >= 137 && LA76_0 <= 138)||(LA76_0 >= 142 && LA76_0 <= 152)||LA76_0==155||LA76_0==157||(LA76_0 >= 159 && LA76_0 <= 163)||(LA76_0 >= 165 && LA76_0 <= 168)||(LA76_0 >= 170 && LA76_0 <= 173)||(LA76_0 >= 176 && LA76_0 <= 183)||(LA76_0 >= 185 && LA76_0 <= 190)||LA76_0==193) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:9: exprList
                    {
                    pushFollow(FOLLOW_exprList_in_arrayAccess4581);
                    exprList283=exprList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprList.add(exprList283.getTree());

                    }
                    break;

            }


            char_literal284=(Atom)match(input,139,FOLLOW_139_in_arrayAccess4585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(char_literal284);


            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 822:24: -> ^( E_INDEX ( exprList )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:27: ^( E_INDEX ( exprList )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(E_INDEX, "E_INDEX")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:37: ( exprList )?
                if ( stream_exprList.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprList.nextTree());

                }
                stream_exprList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, arrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayAccess"


    public static class stmtBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBlock"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:826:1: stmtBlock : braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) ;
    public final pollenParser.stmtBlock_return stmtBlock() throws RecognitionException {
        pollenParser.stmtBlock_return retval = new pollenParser.stmtBlock_return();
        retval.start = input.LT(1);

        int stmtBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen285 =null;

        pollenParser.stmts_return stmts286 =null;

        pollenParser.braceClose_return braceClose287 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:827:2: ( braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:827:4: braceOpen stmts braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_stmtBlock4608);
            braceOpen285=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen285.getTree());

            pushFollow(FOLLOW_stmts_in_stmtBlock4610);
            stmts286=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts286.getTree());

            pushFollow(FOLLOW_braceClose_in_stmtBlock4612);
            braceClose287=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose287.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 827:32: -> ^( S_BLOCK[\"S_BLOCK\"] stmts )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:827:35: ^( S_BLOCK[\"S_BLOCK\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Block(S_BLOCK, "S_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, stmtBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBlock"


    public static class stmts_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmts"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:829:1: stmts : ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | ( ( NL )* ) -> LIST[\"LIST\"] );
    public final pollenParser.stmts_return stmts() throws RecognitionException {
        pollenParser.stmts_return retval = new pollenParser.stmts_return();
        retval.start = input.LT(1);

        int stmts_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NL289=null;
        pollenParser.stmt_return stmt288 =null;


        BaseNode NL289_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:2: ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | ( ( NL )* ) -> LIST[\"LIST\"] )
            int alt79=2;
            switch ( input.LA(1) ) {
            case NL:
                {
                int LA79_1 = input.LA(2);

                if ( (synpred129_pollen()) ) {
                    alt79=1;
                }
                else if ( (true) ) {
                    alt79=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 1, input);

                    throw nvae;

                }
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case IDENT:
            case INC:
            case INJECT:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 127:
            case 137:
            case 138:
            case 142:
            case 143:
            case 144:
            case 145:
            case 149:
            case 150:
            case 152:
            case 159:
            case 160:
            case 162:
            case 163:
            case 166:
            case 167:
            case 168:
            case 172:
            case 173:
            case 176:
            case 178:
            case 180:
            case 181:
            case 182:
            case 183:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
                {
                alt79=1;
                }
                break;
            case 146:
            case 151:
            case 193:
                {
                alt79=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:4: ( stmt )+
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:4: ( stmt )+
                    int cnt77=0;
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==NL) ) {
                            int LA77_1 = input.LA(2);

                            if ( (synpred128_pollen()) ) {
                                alt77=1;
                            }


                        }
                        else if ( ((LA77_0 >= BIT_NOT && LA77_0 <= CHAR)||LA77_0==DEC||LA77_0==HEX_LIT||LA77_0==IDENT||(LA77_0 >= INC && LA77_0 <= INT_LIT)||LA77_0==LOG_NOT||LA77_0==MINUS||LA77_0==OCT_LIT||LA77_0==REAL_LIT||LA77_0==STRING||LA77_0==127||(LA77_0 >= 137 && LA77_0 <= 138)||(LA77_0 >= 142 && LA77_0 <= 145)||(LA77_0 >= 149 && LA77_0 <= 150)||LA77_0==152||(LA77_0 >= 159 && LA77_0 <= 160)||(LA77_0 >= 162 && LA77_0 <= 163)||(LA77_0 >= 166 && LA77_0 <= 168)||(LA77_0 >= 172 && LA77_0 <= 173)||LA77_0==176||LA77_0==178||(LA77_0 >= 180 && LA77_0 <= 183)||(LA77_0 >= 185 && LA77_0 <= 190)) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:5: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_stmts4638);
                    	    stmt288=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmt.add(stmt288.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt77 >= 1 ) break loop77;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(77, input);
                                throw eee;
                        }
                        cnt77++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 830:12: -> ^( LIST[\"LIST\"] ( stmt )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:15: ^( LIST[\"LIST\"] ( stmt )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmt.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt.nextTree());

                        }
                        stream_stmt.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:4: ( ( NL )* )
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:4: ( ( NL )* )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:5: ( NL )*
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:5: ( NL )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==NL) ) {
                            int LA78_1 = input.LA(2);

                            if ( (synpred130_pollen()) ) {
                                alt78=1;
                            }


                        }


                        switch (alt78) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:5: NL
                    	    {
                    	    NL289=(Atom)match(input,NL,FOLLOW_NL_in_stmts4660); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL289);


                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 831:10: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, stmts_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmts"


    public static class stmt_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:833:1: stmt : ( stmtDecl | stmtAssign | stmtAssert | stmtBind | stmtBlock | stmtPrint | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) );
    public final pollenParser.stmt_return stmt() throws RecognitionException {
        pollenParser.stmt_return retval = new pollenParser.stmt_return();
        retval.start = input.LT(1);

        int stmt_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtDecl_return stmtDecl290 =null;

        pollenParser.stmtAssign_return stmtAssign291 =null;

        pollenParser.stmtAssert_return stmtAssert292 =null;

        pollenParser.stmtBind_return stmtBind293 =null;

        pollenParser.stmtBlock_return stmtBlock294 =null;

        pollenParser.stmtPrint_return stmtPrint295 =null;

        pollenParser.stmtReturn_return stmtReturn296 =null;

        pollenParser.stmtBreak_return stmtBreak297 =null;

        pollenParser.stmtContinue_return stmtContinue298 =null;

        pollenParser.stmtFor_return stmtFor299 =null;

        pollenParser.stmtSwitch_return stmtSwitch300 =null;

        pollenParser.stmtDoWhile_return stmtDoWhile301 =null;

        pollenParser.stmtIf_return stmtIf302 =null;

        pollenParser.stmtProvided_return stmtProvided303 =null;

        pollenParser.stmtWhile_return stmtWhile304 =null;

        pollenParser.stmtInjection_return stmtInjection305 =null;

        pollenParser.expr_return expr306 =null;

        pollenParser.delim_return delim307 =null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:834:2: ( stmtDecl | stmtAssign | stmtAssert | stmtBind | stmtBlock | stmtPrint | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) )
            int alt80=17;
            switch ( input.LA(1) ) {
            case IDENT:
            case 172:
                {
                int LA80_1 = input.LA(2);

                if ( (synpred131_pollen()) ) {
                    alt80=1;
                }
                else if ( (synpred132_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred134_pollen()) ) {
                    alt80=4;
                }
                else if ( (true) ) {
                    alt80=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 149:
            case 162:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
            case 188:
                {
                alt80=1;
                }
                break;
            case 137:
                {
                int LA80_7 = input.LA(2);

                if ( (synpred132_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred134_pollen()) ) {
                    alt80=4;
                }
                else if ( (true) ) {
                    alt80=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 7, input);

                    throw nvae;

                }
                }
                break;
            case 142:
                {
                alt80=3;
                }
                break;
            case INJECT:
                {
                int LA80_9 = input.LA(2);

                if ( (synpred132_pollen()) ) {
                    alt80=2;
                }
                else if ( (synpred146_pollen()) ) {
                    alt80=16;
                }
                else if ( (true) ) {
                    alt80=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 9, input);

                    throw nvae;

                }
                }
                break;
            case NL:
            case 190:
                {
                alt80=5;
                }
                break;
            case 176:
                {
                alt80=6;
                }
                break;
            case 180:
                {
                alt80=7;
                }
                break;
            case 144:
                {
                alt80=8;
                }
                break;
            case 150:
                {
                alt80=9;
                }
                break;
            case 160:
                {
                alt80=10;
                }
                break;
            case 182:
                {
                alt80=11;
                }
                break;
            case 152:
                {
                alt80=12;
                }
                break;
            case 163:
                {
                alt80=13;
                }
                break;
            case 178:
                {
                alt80=14;
                }
                break;
            case 189:
                {
                alt80=15;
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case INC:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 127:
            case 138:
            case 159:
            case 173:
            case 183:
                {
                alt80=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }

            switch (alt80) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:834:5: stmtDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDecl_in_stmt4681);
                    stmtDecl290=stmtDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDecl290.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:835:5: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmt4687);
                    stmtAssign291=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign291.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:836:4: stmtAssert
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssert_in_stmt4692);
                    stmtAssert292=stmtAssert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssert292.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:837:4: stmtBind
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBind_in_stmt4697);
                    stmtBind293=stmtBind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBind293.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:838:4: stmtBlock
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBlock_in_stmt4702);
                    stmtBlock294=stmtBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBlock294.getTree());

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:4: stmtPrint
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPrint_in_stmt4707);
                    stmtPrint295=stmtPrint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPrint295.getTree());

                    }
                    break;
                case 7 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:840:4: stmtReturn
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtReturn_in_stmt4712);
                    stmtReturn296=stmtReturn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtReturn296.getTree());

                    }
                    break;
                case 8 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:841:4: stmtBreak
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBreak_in_stmt4717);
                    stmtBreak297=stmtBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBreak297.getTree());

                    }
                    break;
                case 9 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:842:5: stmtContinue
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtContinue_in_stmt4723);
                    stmtContinue298=stmtContinue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtContinue298.getTree());

                    }
                    break;
                case 10 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:843:5: stmtFor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtFor_in_stmt4729);
                    stmtFor299=stmtFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtFor299.getTree());

                    }
                    break;
                case 11 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:844:4: stmtSwitch
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtSwitch_in_stmt4734);
                    stmtSwitch300=stmtSwitch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtSwitch300.getTree());

                    }
                    break;
                case 12 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:845:5: stmtDoWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDoWhile_in_stmt4740);
                    stmtDoWhile301=stmtDoWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDoWhile301.getTree());

                    }
                    break;
                case 13 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:846:4: stmtIf
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtIf_in_stmt4745);
                    stmtIf302=stmtIf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtIf302.getTree());

                    }
                    break;
                case 14 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:847:4: stmtProvided
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtProvided_in_stmt4750);
                    stmtProvided303=stmtProvided();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtProvided303.getTree());

                    }
                    break;
                case 15 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:848:4: stmtWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtWhile_in_stmt4755);
                    stmtWhile304=stmtWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtWhile304.getTree());

                    }
                    break;
                case 16 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:849:4: stmtInjection
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtInjection_in_stmt4761);
                    stmtInjection305=stmtInjection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjection305.getTree());

                    }
                    break;
                case 17 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:4: expr delim
                    {
                    pushFollow(FOLLOW_expr_in_stmt4766);
                    expr306=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr306.getTree());

                    pushFollow(FOLLOW_delim_in_stmt4768);
                    delim307=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim307.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 850:15: -> ^( S_EXPR[\"S_EXPR\"] expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:18: ^( S_EXPR[\"S_EXPR\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Expr(S_EXPR, "S_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, stmt_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class stmtAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssign"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:852:1: stmtAssign : ( varOrFcnOrArray ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) );
    public final pollenParser.stmtAssign_return stmtAssign() throws RecognitionException {
        pollenParser.stmtAssign_return retval = new pollenParser.stmtAssign_return();
        retval.start = input.LT(1);

        int stmtAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom ASSIGN309=null;
        Atom ASSIGN313=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray308 =null;

        pollenParser.expr_return expr310 =null;

        pollenParser.delim_return delim311 =null;

        pollenParser.injectionCode_return injectionCode312 =null;

        pollenParser.expr_return expr314 =null;

        pollenParser.delim_return delim315 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray316 =null;

        pollenParser.assignOp_return assignOp317 =null;

        pollenParser.expr_return expr318 =null;

        pollenParser.delim_return delim319 =null;

        pollenParser.injectionCode_return injectionCode320 =null;

        pollenParser.assignOp_return assignOp321 =null;

        pollenParser.expr_return expr322 =null;

        pollenParser.delim_return delim323 =null;


        BaseNode ASSIGN309_tree=null;
        BaseNode ASSIGN313_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_injectionCode=new RewriteRuleSubtreeStream(adaptor,"rule injectionCode");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:853:2: ( varOrFcnOrArray ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) )
            int alt81=4;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==IDENT||LA81_0==137||LA81_0==172) ) {
                int LA81_1 = input.LA(2);

                if ( (synpred147_pollen()) ) {
                    alt81=1;
                }
                else if ( (synpred149_pollen()) ) {
                    alt81=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA81_0==INJECT) ) {
                int LA81_4 = input.LA(2);

                if ( (synpred148_pollen()) ) {
                    alt81=2;
                }
                else if ( (true) ) {
                    alt81=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 4, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:853:4: varOrFcnOrArray ASSIGN expr delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign4792);
                    varOrFcnOrArray308=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray308.getTree());

                    ASSIGN309=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign4794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN309);


                    pushFollow(FOLLOW_expr_in_stmtAssign4796);
                    expr310=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr310.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4798);
                    delim311=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim311.getTree());

                    // AST REWRITE
                    // elements: expr, varOrFcnOrArray, ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 854:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:854:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:854:46: ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:4: injectionCode ASSIGN expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign4833);
                    injectionCode312=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode312.getTree());

                    ASSIGN313=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign4835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN313);


                    pushFollow(FOLLOW_expr_in_stmtAssign4837);
                    expr314=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr314.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4840);
                    delim315=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim315.getTree());

                    // AST REWRITE
                    // elements: expr, injectionCode, ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 856:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:46: ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:4: varOrFcnOrArray assignOp expr delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign4875);
                    varOrFcnOrArray316=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray316.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign4877);
                    assignOp317=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp317.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign4879);
                    expr318=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr318.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4882);
                    delim319=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim319.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, assignOp, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 858:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:858:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:858:46: ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:859:4: injectionCode assignOp expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign4917);
                    injectionCode320=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode320.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign4919);
                    assignOp321=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp321.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign4921);
                    expr322=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr322.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign4923);
                    delim323=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim323.getTree());

                    // AST REWRITE
                    // elements: injectionCode, expr, assignOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 860:3: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:860:6: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:860:46: ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, stmtAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtAssign"


    public static class stmtAssert_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssert"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:862:1: stmtAssert : 'assert' exprList delim -> ^( S_ASSERT exprList ) ;
    public final pollenParser.stmtAssert_return stmtAssert() throws RecognitionException {
        pollenParser.stmtAssert_return retval = new pollenParser.stmtAssert_return();
        retval.start = input.LT(1);

        int stmtAssert_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal324=null;
        pollenParser.exprList_return exprList325 =null;

        pollenParser.delim_return delim326 =null;


        BaseNode string_literal324_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:863:2: ( 'assert' exprList delim -> ^( S_ASSERT exprList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:863:4: 'assert' exprList delim
            {
            string_literal324=(Atom)match(input,142,FOLLOW_142_in_stmtAssert4963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal324);


            pushFollow(FOLLOW_exprList_in_stmtAssert4965);
            exprList325=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprList.add(exprList325.getTree());

            pushFollow(FOLLOW_delim_in_stmtAssert4967);
            delim326=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim326.getTree());

            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 863:28: -> ^( S_ASSERT exprList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:863:31: ^( S_ASSERT exprList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(S_ASSERT, "S_ASSERT")
                , root_1);

                adaptor.addChild(root_1, stream_exprList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, stmtAssert_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtAssert"


    public static class stmtBind_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBind"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:865:1: stmtBind : varOrFcnOrArray BIND expr delim -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr ) ;
    public final pollenParser.stmtBind_return stmtBind() throws RecognitionException {
        pollenParser.stmtBind_return retval = new pollenParser.stmtBind_return();
        retval.start = input.LT(1);

        int stmtBind_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIND328=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray327 =null;

        pollenParser.expr_return expr329 =null;

        pollenParser.delim_return delim330 =null;


        BaseNode BIND328_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:866:2: ( varOrFcnOrArray BIND expr delim -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:866:4: varOrFcnOrArray BIND expr delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtBind4985);
            varOrFcnOrArray327=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray327.getTree());

            BIND328=(Atom)match(input,BIND,FOLLOW_BIND_in_stmtBind4987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND328);


            pushFollow(FOLLOW_expr_in_stmtBind4990);
            expr329=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr329.getTree());

            pushFollow(FOLLOW_delim_in_stmtBind4993);
            delim330=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim330.getTree());

            // AST REWRITE
            // elements: varOrFcnOrArray, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 866:38: -> ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:866:41: ^( S_BIND[\"S_BIND\"] varOrFcnOrArray expr )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Bind(S_BIND, "S_BIND")
                , root_1);

                adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, stmtBind_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBind"


    public static class stmtPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrint"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:868:1: stmtPrint : 'print' ( stmtPrintTarget[flags] )? exprList -> ^( S_PRINT[\"S_PRINT\", flags] exprList ) ;
    public final pollenParser.stmtPrint_return stmtPrint() throws RecognitionException {
        pollenParser.stmtPrint_return retval = new pollenParser.stmtPrint_return();
        retval.start = input.LT(1);

        int stmtPrint_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal331=null;
        pollenParser.stmtPrintTarget_return stmtPrintTarget332 =null;

        pollenParser.exprList_return exprList333 =null;


        BaseNode string_literal331_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleSubtreeStream stream_stmtPrintTarget=new RewriteRuleSubtreeStream(adaptor,"rule stmtPrintTarget");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");

        	EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:2: ( 'print' ( stmtPrintTarget[flags] )? exprList -> ^( S_PRINT[\"S_PRINT\", flags] exprList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:4: 'print' ( stmtPrintTarget[flags] )? exprList
            {
            string_literal331=(Atom)match(input,176,FOLLOW_176_in_stmtPrint5026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal331);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:12: ( stmtPrintTarget[flags] )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==156||LA82_0==169||LA82_0==174) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:872:13: stmtPrintTarget[flags]
                    {
                    pushFollow(FOLLOW_stmtPrintTarget_in_stmtPrint5029);
                    stmtPrintTarget332=stmtPrintTarget(flags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtPrintTarget.add(stmtPrintTarget332.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_exprList_in_stmtPrint5034);
            exprList333=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprList.add(exprList333.getTree());

            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 873:3: -> ^( S_PRINT[\"S_PRINT\", flags] exprList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:873:6: ^( S_PRINT[\"S_PRINT\", flags] exprList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                , root_1);

                adaptor.addChild(root_1, stream_exprList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, stmtPrint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrint"


    public static class stmtPrintTarget_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrintTarget"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:875:1: stmtPrintTarget[EnumSet<Flags> f] : ( 'log' | 'err' | 'out' ) ;
    public final pollenParser.stmtPrintTarget_return stmtPrintTarget(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.stmtPrintTarget_return retval = new pollenParser.stmtPrintTarget_return();
        retval.start = input.LT(1);

        int stmtPrintTarget_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal334=null;
        Atom string_literal335=null;
        Atom string_literal336=null;

        BaseNode string_literal334_tree=null;
        BaseNode string_literal335_tree=null;
        BaseNode string_literal336_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:2: ( ( 'log' | 'err' | 'out' ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:3: ( 'log' | 'err' | 'out' )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:3: ( 'log' | 'err' | 'out' )
            int alt83=3;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt83=1;
                }
                break;
            case 156:
                {
                alt83=2;
                }
                break;
            case 174:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }

            switch (alt83) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:877:7: 'log'
                    {
                    string_literal334=(Atom)match(input,169,FOLLOW_169_in_stmtPrintTarget5069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal334_tree = 
                    (BaseNode)adaptor.create(string_literal334)
                    ;
                    adaptor.addChild(root_0, string_literal334_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.LOG); }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:878:6: 'err'
                    {
                    string_literal335=(Atom)match(input,156,FOLLOW_156_in_stmtPrintTarget5079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal335_tree = 
                    (BaseNode)adaptor.create(string_literal335)
                    ;
                    adaptor.addChild(root_0, string_literal335_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.ERR); }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:879:6: 'out'
                    {
                    string_literal336=(Atom)match(input,174,FOLLOW_174_in_stmtPrintTarget5088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal336_tree = 
                    (BaseNode)adaptor.create(string_literal336)
                    ;
                    adaptor.addChild(root_0, string_literal336_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.OUT); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, stmtPrintTarget_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrintTarget"


    public static class stmtReturn_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtReturn"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:882:1: stmtReturn : ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) );
    public final pollenParser.stmtReturn_return stmtReturn() throws RecognitionException {
        pollenParser.stmtReturn_return retval = new pollenParser.stmtReturn_return();
        retval.start = input.LT(1);

        int stmtReturn_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal337=null;
        Atom char_literal338=null;
        Atom char_literal340=null;
        Atom char_literal342=null;
        Atom string_literal344=null;
        pollenParser.expr_return expr339 =null;

        pollenParser.expr_return expr341 =null;

        pollenParser.delim_return delim343 =null;

        pollenParser.expr_return expr345 =null;

        pollenParser.delim_return delim346 =null;


        BaseNode string_literal337_tree=null;
        BaseNode char_literal338_tree=null;
        BaseNode char_literal340_tree=null;
        BaseNode char_literal342_tree=null;
        BaseNode string_literal344_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:2: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==180) ) {
                int LA85_1 = input.LA(2);

                if ( (synpred154_pollen()) ) {
                    alt85=1;
                }
                else if ( (true) ) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:4: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
                    {
                    string_literal337=(Atom)match(input,180,FOLLOW_180_in_stmtReturn5108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal337);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:13: ( '(' )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:14: '('
                    {
                    char_literal338=(Atom)match(input,127,FOLLOW_127_in_stmtReturn5111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal338);


                    }


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:19: ( expr ( ',' expr )+ )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:20: expr ( ',' expr )+
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn5115);
                    expr339=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr339.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:25: ( ',' expr )+
                    int cnt84=0;
                    loop84:
                    do {
                        int alt84=2;
                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==130) ) {
                            alt84=1;
                        }


                        switch (alt84) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:26: ',' expr
                    	    {
                    	    char_literal340=(Atom)match(input,130,FOLLOW_130_in_stmtReturn5118); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal340);


                    	    pushFollow(FOLLOW_expr_in_stmtReturn5120);
                    	    expr341=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr341.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt84 >= 1 ) break loop84;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(84, input);
                                throw eee;
                        }
                        cnt84++;
                    } while (true);


                    }


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:38: ( ')' )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:39: ')'
                    {
                    char_literal342=(Atom)match(input,128,FOLLOW_128_in_stmtReturn5126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal342);


                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn5129);
                    delim343=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim343.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 887:3: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:887:6: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:887:46: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:887:77: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_3, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:4: 'return' ( expr ) delim
                    {
                    string_literal344=(Atom)match(input,180,FOLLOW_180_in_stmtReturn5170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(string_literal344);


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:14: ( expr )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:15: expr
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn5174);
                    expr345=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr345.getTree());

                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn5178);
                    delim346=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim346.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 889:3: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:6: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:46: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:889:77: ^( LIST[\"LIST\"] expr )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_expr.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, stmtReturn_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtReturn"


    public static class stmtBreak_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBreak"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:891:1: stmtBreak : 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) ;
    public final pollenParser.stmtBreak_return stmtBreak() throws RecognitionException {
        pollenParser.stmtBreak_return retval = new pollenParser.stmtBreak_return();
        retval.start = input.LT(1);

        int stmtBreak_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal347=null;
        pollenParser.delim_return delim348 =null;


        BaseNode string_literal347_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:2: ( 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:4: 'break' delim
            {
            string_literal347=(Atom)match(input,144,FOLLOW_144_in_stmtBreak5223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal347);


            pushFollow(FOLLOW_delim_in_stmtBreak5225);
            delim348=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim348.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 892:18: -> ^( S_BREAK[\"S_BREAK\"] )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:21: ^( S_BREAK[\"S_BREAK\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Break(S_BREAK, "S_BREAK")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, stmtBreak_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBreak"


    public static class stmtContinue_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtContinue"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:1: stmtContinue : 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) ;
    public final pollenParser.stmtContinue_return stmtContinue() throws RecognitionException {
        pollenParser.stmtContinue_return retval = new pollenParser.stmtContinue_return();
        retval.start = input.LT(1);

        int stmtContinue_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal349=null;
        pollenParser.delim_return delim350 =null;


        BaseNode string_literal349_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:895:2: ( 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:895:4: 'continue' delim
            {
            string_literal349=(Atom)match(input,150,FOLLOW_150_in_stmtContinue5247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal349);


            pushFollow(FOLLOW_delim_in_stmtContinue5249);
            delim350=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim350.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 895:21: -> ^( S_CONTINUE[\"S_CONTINUE\"] )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:895:24: ^( S_CONTINUE[\"S_CONTINUE\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Continue(S_CONTINUE, "S_CONTINUE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, stmtContinue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtContinue"


    public static class stmtFor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtFor"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:897:1: stmtFor : 'for' '(' stmtForInit stmtForCond stmtForNext ')' stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock ) ;
    public final pollenParser.stmtFor_return stmtFor() throws RecognitionException {
        pollenParser.stmtFor_return retval = new pollenParser.stmtFor_return();
        retval.start = input.LT(1);

        int stmtFor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal351=null;
        Atom char_literal352=null;
        Atom char_literal356=null;
        pollenParser.stmtForInit_return stmtForInit353 =null;

        pollenParser.stmtForCond_return stmtForCond354 =null;

        pollenParser.stmtForNext_return stmtForNext355 =null;

        pollenParser.stmtBlock_return stmtBlock357 =null;


        BaseNode string_literal351_tree=null;
        BaseNode char_literal352_tree=null;
        BaseNode char_literal356_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_stmtForCond=new RewriteRuleSubtreeStream(adaptor,"rule stmtForCond");
        RewriteRuleSubtreeStream stream_stmtForInit=new RewriteRuleSubtreeStream(adaptor,"rule stmtForInit");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_stmtForNext=new RewriteRuleSubtreeStream(adaptor,"rule stmtForNext");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:5: ( 'for' '(' stmtForInit stmtForCond stmtForNext ')' stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:9: 'for' '(' stmtForInit stmtForCond stmtForNext ')' stmtBlock
            {
            string_literal351=(Atom)match(input,160,FOLLOW_160_in_stmtFor5276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal351);


            char_literal352=(Atom)match(input,127,FOLLOW_127_in_stmtFor5278); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal352);


            pushFollow(FOLLOW_stmtForInit_in_stmtFor5280);
            stmtForInit353=stmtForInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForInit.add(stmtForInit353.getTree());

            pushFollow(FOLLOW_stmtForCond_in_stmtFor5282);
            stmtForCond354=stmtForCond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForCond.add(stmtForCond354.getTree());

            pushFollow(FOLLOW_stmtForNext_in_stmtFor5284);
            stmtForNext355=stmtForNext();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForNext.add(stmtForNext355.getTree());

            char_literal356=(Atom)match(input,128,FOLLOW_128_in_stmtFor5286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal356);


            pushFollow(FOLLOW_stmtBlock_in_stmtFor5288);
            stmtBlock357=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock357.getTree());

            // AST REWRITE
            // elements: stmtBlock, stmtForNext, stmtForCond, stmtForInit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 899:13: -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:16: ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.For(S_FOR, "S_FOR")
                , root_1);

                adaptor.addChild(root_1, stream_stmtForInit.nextTree());

                adaptor.addChild(root_1, stream_stmtForCond.nextTree());

                adaptor.addChild(root_1, stream_stmtForNext.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, stmtFor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtFor"


    public static class stmtForCond_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForCond"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:901:1: stmtForCond : ( SEMI -> NIL | expr SEMI -> expr );
    public final pollenParser.stmtForCond_return stmtForCond() throws RecognitionException {
        pollenParser.stmtForCond_return retval = new pollenParser.stmtForCond_return();
        retval.start = input.LT(1);

        int stmtForCond_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI358=null;
        Atom SEMI360=null;
        pollenParser.expr_return expr359 =null;


        BaseNode SEMI358_tree=null;
        BaseNode SEMI360_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:5: ( SEMI -> NIL | expr SEMI -> expr )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==SEMI) ) {
                alt86=1;
            }
            else if ( ((LA86_0 >= BIT_NOT && LA86_0 <= CHAR)||LA86_0==DEC||LA86_0==HEX_LIT||LA86_0==IDENT||(LA86_0 >= INC && LA86_0 <= INT_LIT)||LA86_0==LOG_NOT||LA86_0==MINUS||LA86_0==OCT_LIT||LA86_0==REAL_LIT||LA86_0==STRING||LA86_0==127||(LA86_0 >= 137 && LA86_0 <= 138)||LA86_0==159||(LA86_0 >= 172 && LA86_0 <= 173)||LA86_0==183) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:9: SEMI
                    {
                    SEMI358=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond5338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI358);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 903:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:904:9: expr SEMI
                    {
                    pushFollow(FOLLOW_expr_in_stmtForCond5363);
                    expr359=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr359.getTree());

                    SEMI360=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond5365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI360);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 904:19: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, stmtForCond_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForCond"


    public static class stmtForInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForInit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:907:1: stmtForInit : ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | stmtAssign );
    public final pollenParser.stmtForInit_return stmtForInit() throws RecognitionException {
        pollenParser.stmtForInit_return retval = new pollenParser.stmtForInit_return();
        retval.start = input.LT(1);

        int stmtForInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI361=null;
        Atom IDENT363=null;
        Atom char_literal364=null;
        Atom SEMI366=null;
        pollenParser.typeName_return typeName362 =null;

        pollenParser.expr_return expr365 =null;

        pollenParser.stmtAssign_return stmtAssign367 =null;


        BaseNode SEMI361_tree=null;
        BaseNode IDENT363_tree=null;
        BaseNode char_literal364_tree=null;
        BaseNode SEMI366_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:908:5: ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | stmtAssign )
            int alt87=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt87=1;
                }
                break;
            case IDENT:
                {
                int LA87_2 = input.LA(2);

                if ( (synpred157_pollen()) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;

                }
                }
                break;
            case 143:
            case 145:
            case 166:
            case 167:
            case 168:
            case 181:
            case 185:
            case 186:
            case 187:
                {
                alt87=2;
                }
                break;
            case INJECT:
            case 137:
            case 172:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }

            switch (alt87) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:908:9: SEMI
                    {
                    SEMI361=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit5388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI361);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 909:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:9: typeName IDENT '=' expr SEMI
                    {
                    pushFollow(FOLLOW_typeName_in_stmtForInit5414);
                    typeName362=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName362.getTree());

                    IDENT363=(Atom)match(input,IDENT,FOLLOW_IDENT_in_stmtForInit5416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT363);


                    char_literal364=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtForInit5418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal364);


                    pushFollow(FOLLOW_expr_in_stmtForInit5420);
                    expr365=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr365.getTree());

                    SEMI366=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit5422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI366);


                    // AST REWRITE
                    // elements: IDENT, expr, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 911:13: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:911:16: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Decl(S_DECL, "S_DECL")
                        , root_1);

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:912:12: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_typeName.nextTree());

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:913:9: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmtForInit5484);
                    stmtAssign367=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign367.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, stmtForInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForInit"


    public static class stmtForNext_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForNext"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:915:1: stmtForNext : ( -> NIL | expr );
    public final pollenParser.stmtForNext_return stmtForNext() throws RecognitionException {
        pollenParser.stmtForNext_return retval = new pollenParser.stmtForNext_return();
        retval.start = input.LT(1);

        int stmtForNext_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr368 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:916:5: ( -> NIL | expr )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==128) ) {
                alt88=1;
            }
            else if ( ((LA88_0 >= BIT_NOT && LA88_0 <= CHAR)||LA88_0==DEC||LA88_0==HEX_LIT||LA88_0==IDENT||(LA88_0 >= INC && LA88_0 <= INT_LIT)||LA88_0==LOG_NOT||LA88_0==MINUS||LA88_0==OCT_LIT||LA88_0==REAL_LIT||LA88_0==STRING||LA88_0==127||(LA88_0 >= 137 && LA88_0 <= 138)||LA88_0==159||(LA88_0 >= 172 && LA88_0 <= 173)||LA88_0==183) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:917:13: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 917:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:918:9: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_stmtForNext5527);
                    expr368=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, stmtForNext_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForNext"


    public static class stmtSwitch_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtSwitch"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:926:1: stmtSwitch : 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) ;
    public final pollenParser.stmtSwitch_return stmtSwitch() throws RecognitionException {
        pollenParser.stmtSwitch_return retval = new pollenParser.stmtSwitch_return();
        retval.start = input.LT(1);

        int stmtSwitch_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal369=null;
        Atom char_literal370=null;
        Atom char_literal372=null;
        pollenParser.expr_return expr371 =null;

        pollenParser.braceOpen_return braceOpen373 =null;

        pollenParser.stmtsCase_return stmtsCase374 =null;

        pollenParser.stmtDefault_return stmtDefault375 =null;

        pollenParser.braceClose_return braceClose376 =null;


        BaseNode string_literal369_tree=null;
        BaseNode char_literal370_tree=null;
        BaseNode char_literal372_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtsCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtsCase");
        RewriteRuleSubtreeStream stream_stmtDefault=new RewriteRuleSubtreeStream(adaptor,"rule stmtDefault");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:927:2: ( 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:927:4: 'switch' '(' expr ')' braceOpen stmtsCase ( stmtDefault )? braceClose
            {
            string_literal369=(Atom)match(input,182,FOLLOW_182_in_stmtSwitch5546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal369);


            char_literal370=(Atom)match(input,127,FOLLOW_127_in_stmtSwitch5548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal370);


            pushFollow(FOLLOW_expr_in_stmtSwitch5550);
            expr371=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr371.getTree());

            char_literal372=(Atom)match(input,128,FOLLOW_128_in_stmtSwitch5552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal372);


            pushFollow(FOLLOW_braceOpen_in_stmtSwitch5554);
            braceOpen373=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen373.getTree());

            pushFollow(FOLLOW_stmtsCase_in_stmtSwitch5556);
            stmtsCase374=stmtsCase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsCase.add(stmtsCase374.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:927:46: ( stmtDefault )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==151) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:927:46: stmtDefault
                    {
                    pushFollow(FOLLOW_stmtDefault_in_stmtSwitch5558);
                    stmtDefault375=stmtDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtDefault.add(stmtDefault375.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_stmtSwitch5561);
            braceClose376=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose376.getTree());

            // AST REWRITE
            // elements: stmtDefault, expr, stmtsCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 927:70: -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:927:73: ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Switch(S_SWITCH, "S_SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtsCase.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:927:129: ( stmtDefault )?
                if ( stream_stmtDefault.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtDefault.nextTree());

                }
                stream_stmtDefault.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, stmtSwitch_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtSwitch"


    public static class stmtsCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsCase"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:929:1: stmtsCase : ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) ;
    public final pollenParser.stmtsCase_return stmtsCase() throws RecognitionException {
        pollenParser.stmtsCase_return retval = new pollenParser.stmtsCase_return();
        retval.start = input.LT(1);

        int stmtsCase_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtCase_return stmtCase377 =null;


        RewriteRuleSubtreeStream stream_stmtCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtCase");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:2: ( ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:4: ( stmtCase )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:4: ( stmtCase )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==146) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:4: stmtCase
            	    {
            	    pushFollow(FOLLOW_stmtCase_in_stmtsCase5591);
            	    stmtCase377=stmtCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtCase.add(stmtCase377.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 930:14: -> ^( LIST[\"LIST\"] ( stmtCase )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:17: ^( LIST[\"LIST\"] ( stmtCase )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:42: ( stmtCase )*
                while ( stream_stmtCase.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtCase.nextTree());

                }
                stream_stmtCase.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, stmtsCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsCase"


    public static class stmtDefault_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDefault"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:932:1: stmtDefault : 'default' ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts ) ;
    public final pollenParser.stmtDefault_return stmtDefault() throws RecognitionException {
        pollenParser.stmtDefault_return retval = new pollenParser.stmtDefault_return();
        retval.start = input.LT(1);

        int stmtDefault_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal378=null;
        Atom char_literal379=null;
        Atom NL380=null;
        pollenParser.stmts_return stmts381 =null;


        BaseNode string_literal378_tree=null;
        BaseNode char_literal379_tree=null;
        BaseNode NL380_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:2: ( 'default' ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:4: 'default' ':' ( NL )* stmts
            {
            string_literal378=(Atom)match(input,151,FOLLOW_151_in_stmtDefault5615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal378);


            char_literal379=(Atom)match(input,133,FOLLOW_133_in_stmtDefault5617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal379);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:18: ( NL )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==NL) ) {
                    int LA91_1 = input.LA(2);

                    if ( (synpred161_pollen()) ) {
                        alt91=1;
                    }


                }


                switch (alt91) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:18: NL
            	    {
            	    NL380=(Atom)match(input,NL,FOLLOW_NL_in_stmtDefault5619); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL380);


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            pushFollow(FOLLOW_stmts_in_stmtDefault5622);
            stmts381=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts381.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 933:28: -> ^( S_CASE[\"S_CASE\"] stmts )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:31: ^( S_CASE[\"S_CASE\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, stmtDefault_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDefault"


    public static class stmtCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtCase"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:935:1: stmtCase : 'case' ( INT_LIT ) ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT ) ;
    public final pollenParser.stmtCase_return stmtCase() throws RecognitionException {
        pollenParser.stmtCase_return retval = new pollenParser.stmtCase_return();
        retval.start = input.LT(1);

        int stmtCase_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal382=null;
        Atom INT_LIT383=null;
        Atom char_literal384=null;
        Atom NL385=null;
        pollenParser.stmts_return stmts386 =null;


        BaseNode string_literal382_tree=null;
        BaseNode INT_LIT383_tree=null;
        BaseNode char_literal384_tree=null;
        BaseNode NL385_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:2: ( 'case' ( INT_LIT ) ':' ( NL )* stmts -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:4: 'case' ( INT_LIT ) ':' ( NL )* stmts
            {
            string_literal382=(Atom)match(input,146,FOLLOW_146_in_stmtCase5646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal382);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:11: ( INT_LIT )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:12: INT_LIT
            {
            INT_LIT383=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_stmtCase5649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT383);


            }


            char_literal384=(Atom)match(input,133,FOLLOW_133_in_stmtCase5652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal384);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:25: ( NL )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==NL) ) {
                    int LA92_1 = input.LA(2);

                    if ( (synpred162_pollen()) ) {
                        alt92=1;
                    }


                }


                switch (alt92) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:25: NL
            	    {
            	    NL385=(Atom)match(input,NL,FOLLOW_NL_in_stmtCase5654); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL385);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            pushFollow(FOLLOW_stmts_in_stmtCase5657);
            stmts386=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts386.getTree());

            // AST REWRITE
            // elements: stmts, INT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 936:35: -> ^( S_CASE[\"S_CASE\"] stmts INT_LIT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:38: ^( S_CASE[\"S_CASE\"] stmts INT_LIT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_1, 
                stream_INT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, stmtCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtCase"


    public static class stmtDoWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDoWhile"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:938:1: stmtDoWhile : 'do' stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) ;
    public final pollenParser.stmtDoWhile_return stmtDoWhile() throws RecognitionException {
        pollenParser.stmtDoWhile_return retval = new pollenParser.stmtDoWhile_return();
        retval.start = input.LT(1);

        int stmtDoWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal387=null;
        Atom string_literal389=null;
        Atom char_literal390=null;
        Atom char_literal392=null;
        pollenParser.stmtBlock_return stmtBlock388 =null;

        pollenParser.expr_return expr391 =null;

        pollenParser.delim_return delim393 =null;


        BaseNode string_literal387_tree=null;
        BaseNode string_literal389_tree=null;
        BaseNode char_literal390_tree=null;
        BaseNode char_literal392_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:939:2: ( 'do' stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:939:4: 'do' stmtBlock 'while' '(' expr ')' delim
            {
            string_literal387=(Atom)match(input,152,FOLLOW_152_in_stmtDoWhile5683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal387);


            pushFollow(FOLLOW_stmtBlock_in_stmtDoWhile5685);
            stmtBlock388=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock388.getTree());

            string_literal389=(Atom)match(input,189,FOLLOW_189_in_stmtDoWhile5687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal389);


            char_literal390=(Atom)match(input,127,FOLLOW_127_in_stmtDoWhile5689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal390);


            pushFollow(FOLLOW_expr_in_stmtDoWhile5691);
            expr391=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr391.getTree());

            char_literal392=(Atom)match(input,128,FOLLOW_128_in_stmtDoWhile5693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal392);


            pushFollow(FOLLOW_delim_in_stmtDoWhile5695);
            delim393=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim393.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 939:47: -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:939:50: ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE", true)
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, stmtDoWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDoWhile"


    public static class stmtIf_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIf"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:941:1: stmtIf : 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) ;
    public final pollenParser.stmtIf_return stmtIf() throws RecognitionException {
        pollenParser.stmtIf_return retval = new pollenParser.stmtIf_return();
        retval.start = input.LT(1);

        int stmtIf_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal394=null;
        pollenParser.stmtIfBlock_return stmtIfBlock395 =null;

        pollenParser.stmtsElif_return stmtsElif396 =null;

        pollenParser.stmtElse_return stmtElse397 =null;


        BaseNode string_literal394_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_stmtsElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtsElif");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:2: ( 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:4: 'if' stmtIfBlock stmtsElif ( stmtElse )?
            {
            string_literal394=(Atom)match(input,163,FOLLOW_163_in_stmtIf5722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal394);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtIf5724);
            stmtIfBlock395=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock395.getTree());

            pushFollow(FOLLOW_stmtsElif_in_stmtIf5726);
            stmtsElif396=stmtsElif();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsElif.add(stmtsElif396.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:31: ( stmtElse )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==154) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:31: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtIf5728);
                    stmtElse397=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse397.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtsElif, stmtElse, stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 942:41: -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:44: ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.If(S_IF, "S_IF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_1, stream_stmtsElif.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:942:94: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, stmtIf_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIf"


    public static class stmtIfBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIfBlock"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:944:1: stmtIfBlock : '(' expr ')' stmtBlock -> expr stmtBlock ;
    public final pollenParser.stmtIfBlock_return stmtIfBlock() throws RecognitionException {
        pollenParser.stmtIfBlock_return retval = new pollenParser.stmtIfBlock_return();
        retval.start = input.LT(1);

        int stmtIfBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal398=null;
        Atom char_literal400=null;
        pollenParser.expr_return expr399 =null;

        pollenParser.stmtBlock_return stmtBlock401 =null;


        BaseNode char_literal398_tree=null;
        BaseNode char_literal400_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:945:2: ( '(' expr ')' stmtBlock -> expr stmtBlock )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:945:4: '(' expr ')' stmtBlock
            {
            char_literal398=(Atom)match(input,127,FOLLOW_127_in_stmtIfBlock5758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal398);


            pushFollow(FOLLOW_expr_in_stmtIfBlock5760);
            expr399=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr399.getTree());

            char_literal400=(Atom)match(input,128,FOLLOW_128_in_stmtIfBlock5762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal400);


            pushFollow(FOLLOW_stmtBlock_in_stmtIfBlock5764);
            stmtBlock401=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock401.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 945:27: -> expr stmtBlock
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, stmtIfBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIfBlock"


    public static class stmtsElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsElif"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:947:1: stmtsElif : ( stmtElif )* -> ^( LIST ( stmtElif )* ) ;
    public final pollenParser.stmtsElif_return stmtsElif() throws RecognitionException {
        pollenParser.stmtsElif_return retval = new pollenParser.stmtsElif_return();
        retval.start = input.LT(1);

        int stmtsElif_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtElif_return stmtElif402 =null;


        RewriteRuleSubtreeStream stream_stmtElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtElif");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:948:2: ( ( stmtElif )* -> ^( LIST ( stmtElif )* ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:948:4: ( stmtElif )*
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:948:4: ( stmtElif )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==153) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:948:4: stmtElif
            	    {
            	    pushFollow(FOLLOW_stmtElif_in_stmtsElif5780);
            	    stmtElif402=stmtElif();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtElif.add(stmtElif402.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtElif
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 948:14: -> ^( LIST ( stmtElif )* )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:948:17: ^( LIST ( stmtElif )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                (BaseNode)adaptor.create(LIST, "LIST")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:948:24: ( stmtElif )*
                while ( stream_stmtElif.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElif.nextTree());

                }
                stream_stmtElif.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, stmtsElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsElif"


    public static class stmtElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElif"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:950:1: stmtElif : 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) ;
    public final pollenParser.stmtElif_return stmtElif() throws RecognitionException {
        pollenParser.stmtElif_return retval = new pollenParser.stmtElif_return();
        retval.start = input.LT(1);

        int stmtElif_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal403=null;
        pollenParser.stmtIfBlock_return stmtIfBlock404 =null;


        BaseNode string_literal403_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:951:2: ( 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:951:4: 'elif' stmtIfBlock
            {
            string_literal403=(Atom)match(input,153,FOLLOW_153_in_stmtElif5800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal403);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtElif5802);
            stmtIfBlock404=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock404.getTree());

            // AST REWRITE
            // elements: stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 951:23: -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:951:26: ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Elif(S_ELIF, "S_ELIF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, stmtElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElif"


    public static class stmtElse_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElse"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:953:1: stmtElse : 'else' stmtBlock -> stmtBlock ;
    public final pollenParser.stmtElse_return stmtElse() throws RecognitionException {
        pollenParser.stmtElse_return retval = new pollenParser.stmtElse_return();
        retval.start = input.LT(1);

        int stmtElse_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal405=null;
        pollenParser.stmtBlock_return stmtBlock406 =null;


        BaseNode string_literal405_tree=null;
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:954:2: ( 'else' stmtBlock -> stmtBlock )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:954:4: 'else' stmtBlock
            {
            string_literal405=(Atom)match(input,154,FOLLOW_154_in_stmtElse5826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal405);


            pushFollow(FOLLOW_stmtBlock_in_stmtElse5828);
            stmtBlock406=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock406.getTree());

            // AST REWRITE
            // elements: stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 954:21: -> stmtBlock
            {
                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, stmtElse_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElse"


    public static class stmtProvided_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtProvided"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:956:1: stmtProvided : 'provided' '(' expr ')' stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) ;
    public final pollenParser.stmtProvided_return stmtProvided() throws RecognitionException {
        pollenParser.stmtProvided_return retval = new pollenParser.stmtProvided_return();
        retval.start = input.LT(1);

        int stmtProvided_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal407=null;
        Atom char_literal408=null;
        Atom char_literal410=null;
        pollenParser.expr_return expr409 =null;

        pollenParser.stmtBlock_return stmtBlock411 =null;

        pollenParser.stmtElse_return stmtElse412 =null;


        BaseNode string_literal407_tree=null;
        BaseNode char_literal408_tree=null;
        BaseNode char_literal410_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:957:2: ( 'provided' '(' expr ')' stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:957:4: 'provided' '(' expr ')' stmtBlock ( stmtElse )?
            {
            string_literal407=(Atom)match(input,178,FOLLOW_178_in_stmtProvided5842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal407);


            char_literal408=(Atom)match(input,127,FOLLOW_127_in_stmtProvided5844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal408);


            pushFollow(FOLLOW_expr_in_stmtProvided5846);
            expr409=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr409.getTree());

            char_literal410=(Atom)match(input,128,FOLLOW_128_in_stmtProvided5848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal410);


            pushFollow(FOLLOW_stmtBlock_in_stmtProvided5850);
            stmtBlock411=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock411.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:957:38: ( stmtElse )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==154) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:957:39: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtProvided5853);
                    stmtElse412=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse412.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtElse, expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 958:3: -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:958:6: ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Provided(S_PROVIDED, "S_PROVIDED")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:958:67: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, stmtProvided_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtProvided"


    public static class stmtWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtWhile"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:960:1: stmtWhile : 'while' '(' expr ')' stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) ;
    public final pollenParser.stmtWhile_return stmtWhile() throws RecognitionException {
        pollenParser.stmtWhile_return retval = new pollenParser.stmtWhile_return();
        retval.start = input.LT(1);

        int stmtWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal413=null;
        Atom char_literal414=null;
        Atom char_literal416=null;
        pollenParser.expr_return expr415 =null;

        pollenParser.stmtBlock_return stmtBlock417 =null;


        BaseNode string_literal413_tree=null;
        BaseNode char_literal414_tree=null;
        BaseNode char_literal416_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:961:2: ( 'while' '(' expr ')' stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:961:4: 'while' '(' expr ')' stmtBlock
            {
            string_literal413=(Atom)match(input,189,FOLLOW_189_in_stmtWhile5886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal413);


            char_literal414=(Atom)match(input,127,FOLLOW_127_in_stmtWhile5888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal414);


            pushFollow(FOLLOW_expr_in_stmtWhile5890);
            expr415=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr415.getTree());

            char_literal416=(Atom)match(input,128,FOLLOW_128_in_stmtWhile5891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal416);


            pushFollow(FOLLOW_stmtBlock_in_stmtWhile5893);
            stmtBlock417=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock417.getTree());

            // AST REWRITE
            // elements: stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 961:34: -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:961:37: ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, stmtWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtWhile"


    public static class stmtDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDecl"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:963:1: stmtDecl : varAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) ;
    public final pollenParser.stmtDecl_return stmtDecl() throws RecognitionException {
        pollenParser.stmtDecl_return retval = new pollenParser.stmtDecl_return();
        retval.start = input.LT(1);

        int stmtDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr418 =null;

        pollenParser.varDecl_return varDecl419 =null;

        pollenParser.delim_return delim420 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	atFlags = EnumSet.noneOf(Flags.class);			

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:967:4: ( varAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:967:7: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_stmtDecl5927);
            varAttr418=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr418.getTree());

            pushFollow(FOLLOW_varDecl_in_stmtDecl5929);
            varDecl419=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl419.getTree());

            pushFollow(FOLLOW_delim_in_stmtDecl5931);
            delim420=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim420.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 967:29: -> ^( S_DECL[\"S_DECL\"] varDecl )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:967:32: ^( S_DECL[\"S_DECL\"] varDecl )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_varDecl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, stmtDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDecl"


    public static class varDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclaration"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:969:1: varDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.varDeclaration_return varDeclaration() throws RecognitionException {
        pollenParser.varDeclaration_return retval = new pollenParser.varDeclaration_return();
        retval.start = input.LT(1);

        int varDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr421 =null;

        pollenParser.varDecl_return varDecl422 =null;

        pollenParser.delim_return delim423 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

        	atFlags = EnumSet.noneOf(Flags.class);		

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:973:4: ( varAttr varDecl delim -> varDecl )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:973:7: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_varDeclaration5969);
            varAttr421=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr421.getTree());

            pushFollow(FOLLOW_varDecl_in_varDeclaration5971);
            varDecl422=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl422.getTree());

            pushFollow(FOLLOW_delim_in_varDeclaration5973);
            delim423=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim423.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 973:29: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, varDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclaration"


    public static class varAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varAttr"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:975:1: varAttr : ( 'const' | 'volatile' | 'host' )* ;
    public final pollenParser.varAttr_return varAttr() throws RecognitionException {
        pollenParser.varAttr_return retval = new pollenParser.varAttr_return();
        retval.start = input.LT(1);

        int varAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal424=null;
        Atom string_literal425=null;
        Atom string_literal426=null;

        BaseNode string_literal424_tree=null;
        BaseNode string_literal425_tree=null;
        BaseNode string_literal426_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:977:2: ( ( 'const' | 'volatile' | 'host' )* )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:977:4: ( 'const' | 'volatile' | 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:977:4: ( 'const' | 'volatile' | 'host' )*
            loop96:
            do {
                int alt96=4;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt96=1;
                    }
                    break;
                case 188:
                    {
                    alt96=2;
                    }
                    break;
                case 162:
                    {
                    alt96=3;
                    }
                    break;

                }

                switch (alt96) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:977:7: 'const'
            	    {
            	    string_literal424=(Atom)match(input,149,FOLLOW_149_in_varAttr5994); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal424_tree = 
            	    (BaseNode)adaptor.create(string_literal424)
            	    ;
            	    adaptor.addChild(root_0, string_literal424_tree);
            	    }

            	    if ( state.backtracking==0 ) { atFlags.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:978:6: 'volatile'
            	    {
            	    string_literal425=(Atom)match(input,188,FOLLOW_188_in_varAttr6003); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal425_tree = 
            	    (BaseNode)adaptor.create(string_literal425)
            	    ;
            	    adaptor.addChild(root_0, string_literal425_tree);
            	    }

            	    if ( state.backtracking==0 ) { atFlags.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:979:7: 'host'
            	    {
            	    string_literal426=(Atom)match(input,162,FOLLOW_162_in_varAttr6013); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal426_tree = 
            	    (BaseNode)adaptor.create(string_literal426)
            	    ;
            	    adaptor.addChild(root_0, string_literal426_tree);
            	    }

            	    if ( state.backtracking==0 ) { atFlags.add(Flags.HOST); }

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, varAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varAttr"


    protected static class varDecl_scope {
        Object typ;
    }
    protected Stack varDecl_stack = new Stack();


    public static class varDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDecl"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:982:1: varDecl : ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( typeName '(' )=> varFcnRef | ( typeName varInit )=> varDeclList | 'new' typeName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", atFlags] typeName IDENT ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) );
    public final pollenParser.varDecl_return varDecl() throws RecognitionException {
        varDecl_stack.push(new varDecl_scope());
        pollenParser.varDecl_return retval = new pollenParser.varDecl_return();
        retval.start = input.LT(1);

        int varDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal431=null;
        Atom IDENT433=null;
        pollenParser.varDeclList_return varDeclList427 =null;

        pollenParser.varArray_return varArray428 =null;

        pollenParser.varFcnRef_return varFcnRef429 =null;

        pollenParser.varDeclList_return varDeclList430 =null;

        pollenParser.typeName_return typeName432 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList434 =null;


        BaseNode string_literal431_tree=null;
        BaseNode IDENT433_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");

        	((varDecl_scope)varDecl_stack.peek()).typ = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:2: ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( typeName '(' )=> varFcnRef | ( typeName varInit )=> varDeclList | 'new' typeName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", atFlags] typeName IDENT ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) ) )
            int alt97=5;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA97_1 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA97_2 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;

                }
                }
                break;
            case 168:
                {
                int LA97_3 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 3, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                int LA97_4 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 4, input);

                    throw nvae;

                }
                }
                break;
            case 167:
                {
                int LA97_5 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 5, input);

                    throw nvae;

                }
                }
                break;
            case 181:
                {
                int LA97_6 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 6, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA97_7 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 7, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA97_8 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 8, input);

                    throw nvae;

                }
                }
                break;
            case 186:
                {
                int LA97_9 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 9, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA97_10 = input.LA(2);

                if ( (synpred170_pollen()) ) {
                    alt97=1;
                }
                else if ( (synpred171_pollen()) ) {
                    alt97=2;
                }
                else if ( (synpred172_pollen()) ) {
                    alt97=3;
                }
                else if ( (synpred173_pollen()) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 10, input);

                    throw nvae;

                }
                }
                break;
            case 172:
                {
                alt97=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:4: ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl6057);
                    varDeclList427=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList427.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:992:5: ( typeName IDENT '[' )=> varArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varArray_in_varDecl6074);
                    varArray428=varArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varArray428.getTree());

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:993:5: ( typeName '(' )=> varFcnRef
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef_in_varDecl6090);
                    varFcnRef429=varFcnRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef429.getTree());

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:994:6: ( typeName varInit )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl6106);
                    varDeclList430=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList430.getTree());

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:995:5: 'new' typeName IDENT fcnArgumentList
                    {
                    string_literal431=(Atom)match(input,172,FOLLOW_172_in_varDecl6112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal431);


                    pushFollow(FOLLOW_typeName_in_varDecl6114);
                    typeName432=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName432.getTree());

                    IDENT433=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varDecl6116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT433);


                    pushFollow(FOLLOW_fcnArgumentList_in_varDecl6118);
                    fcnArgumentList434=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList434.getTree());

                    if ( state.backtracking==0 ) { atFlags.add(Flags.NEW); }

                    // AST REWRITE
                    // elements: typeName, IDENT, typeName, fcnArgumentList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 997:3: -> ^( D_VAR[\"D_VAR\", atFlags] typeName IDENT ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:6: ^( D_VAR[\"D_VAR\", atFlags] typeName IDENT ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:14: ^( E_NEW[\"E_NEW\"] typeName fcnArgumentList )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_2);

                        adaptor.addChild(root_2, stream_typeName.nextTree());

                        adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, varDecl_StartIndex); }

            varDecl_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varDecl"


    public static class varFcnRef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1000:1: varFcnRef : typeName fcnRefTypeList IDENT -> ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT ) ;
    public final pollenParser.varFcnRef_return varFcnRef() throws RecognitionException {
        pollenParser.varFcnRef_return retval = new pollenParser.varFcnRef_return();
        retval.start = input.LT(1);

        int varFcnRef_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT437=null;
        pollenParser.typeName_return typeName435 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList436 =null;


        BaseNode IDENT437_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1001:2: ( typeName fcnRefTypeList IDENT -> ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1001:4: typeName fcnRefTypeList IDENT
            {
            pushFollow(FOLLOW_typeName_in_varFcnRef6176);
            typeName435=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName435.getTree());

            pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef6178);
            fcnRefTypeList436=fcnRefTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList436.getTree());

            IDENT437=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef6180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT437);


            // AST REWRITE
            // elements: IDENT, fcnRefTypeList, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1002:3: -> ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1002:6: ^( D_FCN_REF[\"D_FCN_REF\", atFlags] typeName fcnRefTypeList IDENT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, varFcnRef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varFcnRef"


    public static class fcnRefTypeList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypeList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1004:1: fcnRefTypeList : '(' fcnRefTypes ')' -> fcnRefTypes ;
    public final pollenParser.fcnRefTypeList_return fcnRefTypeList() throws RecognitionException {
        pollenParser.fcnRefTypeList_return retval = new pollenParser.fcnRefTypeList_return();
        retval.start = input.LT(1);

        int fcnRefTypeList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal438=null;
        Atom char_literal440=null;
        pollenParser.fcnRefTypes_return fcnRefTypes439 =null;


        BaseNode char_literal438_tree=null;
        BaseNode char_literal440_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_fcnRefTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1005:2: ( '(' fcnRefTypes ')' -> fcnRefTypes )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1005:4: '(' fcnRefTypes ')'
            {
            char_literal438=(Atom)match(input,127,FOLLOW_127_in_fcnRefTypeList6212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(char_literal438);


            pushFollow(FOLLOW_fcnRefTypes_in_fcnRefTypeList6214);
            fcnRefTypes439=fcnRefTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypes.add(fcnRefTypes439.getTree());

            char_literal440=(Atom)match(input,128,FOLLOW_128_in_fcnRefTypeList6216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(char_literal440);


            // AST REWRITE
            // elements: fcnRefTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1005:24: -> fcnRefTypes
            {
                adaptor.addChild(root_0, stream_fcnRefTypes.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, fcnRefTypeList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypeList"


    public static class fcnRefTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypes"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1007:1: fcnRefTypes : ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.fcnRefTypes_return fcnRefTypes() throws RecognitionException {
        pollenParser.fcnRefTypes_return retval = new pollenParser.fcnRefTypes_return();
        retval.start = input.LT(1);

        int fcnRefTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal442=null;
        pollenParser.typeName_return typeName441 =null;

        pollenParser.typeName_return typeName443 =null;


        BaseNode char_literal442_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1008:2: ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==IDENT||LA99_0==143||LA99_0==145||(LA99_0 >= 166 && LA99_0 <= 168)||LA99_0==181||(LA99_0 >= 185 && LA99_0 <= 187)) ) {
                alt99=1;
            }
            else if ( (LA99_0==128) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }
            switch (alt99) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1008:4: typeName ( ',' typeName )*
                    {
                    pushFollow(FOLLOW_typeName_in_fcnRefTypes6230);
                    typeName441=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName441.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1008:13: ( ',' typeName )*
                    loop98:
                    do {
                        int alt98=2;
                        int LA98_0 = input.LA(1);

                        if ( (LA98_0==130) ) {
                            alt98=1;
                        }


                        switch (alt98) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1008:14: ',' typeName
                    	    {
                    	    char_literal442=(Atom)match(input,130,FOLLOW_130_in_fcnRefTypes6233); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal442);


                    	    pushFollow(FOLLOW_typeName_in_fcnRefTypes6235);
                    	    typeName443=typeName();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeName.add(typeName443.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop98;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1009:3: -> ^( LIST[\"LIST\"] ( typeName )+ )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1009:6: ^( LIST[\"LIST\"] ( typeName )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_typeName.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_typeName.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeName.nextTree());

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1010:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1010:4: -> ^( LIST[\"LIST\"] )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1010:7: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, fcnRefTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypes"


    public static class varArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArray"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1012:1: varArray : typeName IDENT varArraySpec ( '=' initializer )? -> ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? ) ;
    public final pollenParser.varArray_return varArray() throws RecognitionException {
        pollenParser.varArray_return retval = new pollenParser.varArray_return();
        retval.start = input.LT(1);

        int varArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT445=null;
        Atom char_literal447=null;
        pollenParser.typeName_return typeName444 =null;

        pollenParser.varArraySpec_return varArraySpec446 =null;

        pollenParser.initializer_return initializer448 =null;


        BaseNode IDENT445_tree=null;
        BaseNode char_literal447_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1013:2: ( typeName IDENT varArraySpec ( '=' initializer )? -> ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1013:4: typeName IDENT varArraySpec ( '=' initializer )?
            {
            pushFollow(FOLLOW_typeName_in_varArray6276);
            typeName444=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName444.getTree());

            IDENT445=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varArray6278); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT445);


            pushFollow(FOLLOW_varArraySpec_in_varArray6280);
            varArraySpec446=varArraySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec446.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1013:32: ( '=' initializer )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ASSIGN) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1013:33: '=' initializer
                    {
                    char_literal447=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varArray6283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal447);


                    pushFollow(FOLLOW_initializer_in_varArray6285);
                    initializer448=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer448.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: typeName, IDENT, varArraySpec, initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1014:2: -> ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1014:6: ^( D_ARR[\"D_Arr\", atFlags] typeName IDENT varArraySpec ( initializer )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Arr(D_ARR, "D_Arr", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_varArraySpec.nextTree());

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1014:74: ( initializer )?
                if ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, varArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArray"


    public static class varArraySpec_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArraySpec"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1016:1: varArraySpec : ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) ;
    public final pollenParser.varArraySpec_return varArraySpec() throws RecognitionException {
        pollenParser.varArraySpec_return retval = new pollenParser.varArraySpec_return();
        retval.start = input.LT(1);

        int varArraySpec_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal449=null;
        Atom char_literal451=null;
        pollenParser.varDim_return varDim450 =null;


        BaseNode char_literal449_tree=null;
        BaseNode char_literal451_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_varDim=new RewriteRuleSubtreeStream(adaptor,"rule varDim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:2: ( ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:4: ( '[' varDim ']' )+
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:4: ( '[' varDim ']' )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==138) ) {
                    int LA101_1 = input.LA(2);

                    if ( (synpred177_pollen()) ) {
                        alt101=1;
                    }


                }


                switch (alt101) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:5: '[' varDim ']'
            	    {
            	    char_literal449=(Atom)match(input,138,FOLLOW_138_in_varArraySpec6323); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal449);


            	    pushFollow(FOLLOW_varDim_in_varArraySpec6325);
            	    varDim450=varDim();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_varDim.add(varDim450.getTree());

            	    char_literal451=(Atom)match(input,139,FOLLOW_139_in_varArraySpec6327); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_139.add(char_literal451);


            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            // AST REWRITE
            // elements: varDim
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1017:22: -> ^( LIST[\"LIST\"] ( varDim )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:27: ^( LIST[\"LIST\"] ( varDim )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_varDim.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varDim.hasNext() ) {
                    adaptor.addChild(root_1, stream_varDim.nextTree());

                }
                stream_varDim.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, varArraySpec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArraySpec"


    public static class varDim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDim"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1019:1: varDim : ( expr | -> NIL );
    public final pollenParser.varDim_return varDim() throws RecognitionException {
        pollenParser.varDim_return retval = new pollenParser.varDim_return();
        retval.start = input.LT(1);

        int varDim_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr452 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1020:2: ( expr | -> NIL )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( ((LA102_0 >= BIT_NOT && LA102_0 <= CHAR)||LA102_0==DEC||LA102_0==HEX_LIT||LA102_0==IDENT||(LA102_0 >= INC && LA102_0 <= INT_LIT)||LA102_0==LOG_NOT||LA102_0==MINUS||LA102_0==OCT_LIT||LA102_0==REAL_LIT||LA102_0==STRING||LA102_0==127||(LA102_0 >= 137 && LA102_0 <= 138)||LA102_0==159||(LA102_0 >= 172 && LA102_0 <= 173)||LA102_0==183) ) {
                alt102=1;
            }
            else if ( (LA102_0==139) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1020:5: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_varDim6355);
                    expr452=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr452.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1021:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1021:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, varDim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDim"


    public static class initializer_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1023:1: initializer : ( expr | '{' initializer_list ( ',' )? '}' -> initializer_list );
    public final pollenParser.initializer_return initializer() throws RecognitionException {
        pollenParser.initializer_return retval = new pollenParser.initializer_return();
        retval.start = input.LT(1);

        int initializer_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal454=null;
        Atom char_literal456=null;
        Atom char_literal457=null;
        pollenParser.expr_return expr453 =null;

        pollenParser.initializer_list_return initializer_list455 =null;


        BaseNode char_literal454_tree=null;
        BaseNode char_literal456_tree=null;
        BaseNode char_literal457_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_initializer_list=new RewriteRuleSubtreeStream(adaptor,"rule initializer_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1024:2: ( expr | '{' initializer_list ( ',' )? '}' -> initializer_list )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( ((LA104_0 >= BIT_NOT && LA104_0 <= CHAR)||LA104_0==DEC||LA104_0==HEX_LIT||LA104_0==IDENT||(LA104_0 >= INC && LA104_0 <= INT_LIT)||LA104_0==LOG_NOT||LA104_0==MINUS||LA104_0==OCT_LIT||LA104_0==REAL_LIT||LA104_0==STRING||LA104_0==127||(LA104_0 >= 137 && LA104_0 <= 138)||LA104_0==159||(LA104_0 >= 172 && LA104_0 <= 173)||LA104_0==183) ) {
                alt104=1;
            }
            else if ( (LA104_0==190) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1024:4: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_initializer6375);
                    expr453=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr453.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1025:4: '{' initializer_list ( ',' )? '}'
                    {
                    char_literal454=(Atom)match(input,190,FOLLOW_190_in_initializer6381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal454);


                    pushFollow(FOLLOW_initializer_list_in_initializer6383);
                    initializer_list455=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer_list.add(initializer_list455.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1025:25: ( ',' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==130) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1025:25: ','
                            {
                            char_literal456=(Atom)match(input,130,FOLLOW_130_in_initializer6385); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_130.add(char_literal456);


                            }
                            break;

                    }


                    char_literal457=(Atom)match(input,193,FOLLOW_193_in_initializer6388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(char_literal457);


                    // AST REWRITE
                    // elements: initializer_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1025:34: -> initializer_list
                    {
                        adaptor.addChild(root_0, stream_initializer_list.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer"


    public static class initializer_list_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer_list"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1027:1: initializer_list : initializer ( ',' initializer )* -> ^( LIST[\"LIST\"] ( initializer )+ ) ;
    public final pollenParser.initializer_list_return initializer_list() throws RecognitionException {
        pollenParser.initializer_list_return retval = new pollenParser.initializer_list_return();
        retval.start = input.LT(1);

        int initializer_list_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal459=null;
        pollenParser.initializer_return initializer458 =null;

        pollenParser.initializer_return initializer460 =null;


        BaseNode char_literal459_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:2: ( initializer ( ',' initializer )* -> ^( LIST[\"LIST\"] ( initializer )+ ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:4: initializer ( ',' initializer )*
            {
            pushFollow(FOLLOW_initializer_in_initializer_list6402);
            initializer458=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_initializer.add(initializer458.getTree());

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:16: ( ',' initializer )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==130) ) {
                    int LA105_1 = input.LA(2);

                    if ( (synpred181_pollen()) ) {
                        alt105=1;
                    }


                }


                switch (alt105) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:17: ',' initializer
            	    {
            	    char_literal459=(Atom)match(input,130,FOLLOW_130_in_initializer_list6405); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal459);


            	    pushFollow(FOLLOW_initializer_in_initializer_list6407);
            	    initializer460=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_initializer.add(initializer460.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            // AST REWRITE
            // elements: initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1028:35: -> ^( LIST[\"LIST\"] ( initializer )+ )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:38: ^( LIST[\"LIST\"] ( initializer )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_initializer.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer_list"


    public static class varDeclList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1030:1: varDeclList : ( varBuiltInType ! varInit2 ( ',' ! varInit2 )* | userTypeName ! varInit ( ',' ! varInit )* );
    public final pollenParser.varDeclList_return varDeclList() throws RecognitionException {
        pollenParser.varDeclList_return retval = new pollenParser.varDeclList_return();
        retval.start = input.LT(1);

        int varDeclList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal463=null;
        Atom char_literal467=null;
        pollenParser.varBuiltInType_return varBuiltInType461 =null;

        pollenParser.varInit2_return varInit2462 =null;

        pollenParser.varInit2_return varInit2464 =null;

        pollenParser.userTypeName_return userTypeName465 =null;

        pollenParser.varInit_return varInit466 =null;

        pollenParser.varInit_return varInit468 =null;


        BaseNode char_literal463_tree=null;
        BaseNode char_literal467_tree=null;


        	assert ((varDecl_scope)varDecl_stack.peek()).typ != null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1034:2: ( varBuiltInType ! varInit2 ( ',' ! varInit2 )* | userTypeName ! varInit ( ',' ! varInit )* )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==143||LA108_0==145||(LA108_0 >= 166 && LA108_0 <= 168)||LA108_0==181||(LA108_0 >= 185 && LA108_0 <= 187)) ) {
                alt108=1;
            }
            else if ( (LA108_0==IDENT) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1034:4: varBuiltInType ! varInit2 ( ',' ! varInit2 )*
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varBuiltInType_in_varDeclList6441);
                    varBuiltInType461=varBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (varBuiltInType461!=null?((BaseNode)varBuiltInType461.tree):null); }

                    pushFollow(FOLLOW_varInit2_in_varDeclList6446);
                    varInit2462=varInit2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2462.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1034:70: ( ',' ! varInit2 )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==130) ) {
                            int LA106_1 = input.LA(2);

                            if ( (synpred182_pollen()) ) {
                                alt106=1;
                            }


                        }


                        switch (alt106) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1034:71: ',' ! varInit2
                    	    {
                    	    char_literal463=(Atom)match(input,130,FOLLOW_130_in_varDeclList6449); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_varInit2_in_varDeclList6452);
                    	    varInit2464=varInit2();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2464.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:4: userTypeName ! varInit ( ',' ! varInit )*
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_varDeclList6459);
                    userTypeName465=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (userTypeName465!=null?((BaseNode)userTypeName465.tree):null); }

                    pushFollow(FOLLOW_varInit_in_varDeclList6464);
                    varInit466=varInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit466.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:65: ( ',' ! varInit )*
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==130) ) {
                            int LA107_1 = input.LA(2);

                            if ( (synpred184_pollen()) ) {
                                alt107=1;
                            }


                        }


                        switch (alt107) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:66: ',' ! varInit
                    	    {
                    	    char_literal467=(Atom)match(input,130,FOLLOW_130_in_varDeclList6467); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_varInit_in_varDeclList6470);
                    	    varInit468=varInit();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit468.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, varDeclList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclList"


    public static class varBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varBuiltInType"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1037:1: varBuiltInType : builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) ;
    public final pollenParser.varBuiltInType_return varBuiltInType() throws RecognitionException {
        pollenParser.varBuiltInType_return retval = new pollenParser.varBuiltInType_return();
        retval.start = input.LT(1);

        int varBuiltInType_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType469 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:2: ( builtinType -> ^( T_STD[\"T_STD\", atFlags] builtinType ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:4: builtinType
            {
            pushFollow(FOLLOW_builtinType_in_varBuiltInType6483);
            builtinType469=builtinType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtinType.add(builtinType469.getTree());

            // AST REWRITE
            // elements: builtinType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1038:16: -> ^( T_STD[\"T_STD\", atFlags] builtinType )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:19: ^( T_STD[\"T_STD\", atFlags] builtinType )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", atFlags)
                , root_1);

                adaptor.addChild(root_1, stream_builtinType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, varBuiltInType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varBuiltInType"


    public static class varInit2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit2"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1040:1: varInit2 : ( IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", atFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ) );
    public final pollenParser.varInit2_return varInit2() throws RecognitionException {
        pollenParser.varInit2_return retval = new pollenParser.varInit2_return();
        retval.start = input.LT(1);

        int varInit2_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT470=null;
        Atom ASSIGN471=null;
        Atom IDENT473=null;
        pollenParser.expr_return expr472 =null;


        BaseNode IDENT470_tree=null;
        BaseNode ASSIGN471_tree=null;
        BaseNode IDENT473_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1041:2: ( IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", atFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==IDENT) ) {
                int LA109_1 = input.LA(2);

                if ( (synpred185_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1041:4: IDENT ASSIGN expr
                    {
                    IDENT470=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit26509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT470);


                    ASSIGN471=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit26511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN471);


                    pushFollow(FOLLOW_expr_in_varInit26513);
                    expr472=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr472.getTree());

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1042:3: -> ^( D_VAR[\"D_VAR\", atFlags] IDENT expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1042:6: ^( D_VAR[\"D_VAR\", atFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1044:4: IDENT
                    {
                    IDENT473=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit26542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT473);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1045:3: -> ^( D_VAR[\"D_VAR\", atFlags] IDENT )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1045:6: ^( D_VAR[\"D_VAR\", atFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, varInit2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit2"


    public static class varInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1047:1: varInit : ( IDENT BIND expr -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ( expr )? ) | IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", atFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ) );
    public final pollenParser.varInit_return varInit() throws RecognitionException {
        pollenParser.varInit_return retval = new pollenParser.varInit_return();
        retval.start = input.LT(1);

        int varInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT474=null;
        Atom BIND475=null;
        Atom IDENT477=null;
        Atom ASSIGN478=null;
        Atom IDENT480=null;
        pollenParser.expr_return expr476 =null;

        pollenParser.expr_return expr479 =null;


        BaseNode IDENT474_tree=null;
        BaseNode BIND475_tree=null;
        BaseNode IDENT477_tree=null;
        BaseNode ASSIGN478_tree=null;
        BaseNode IDENT480_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1049:2: ( IDENT BIND expr -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ( expr )? ) | IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", atFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ) )
            int alt110=3;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==IDENT) ) {
                int LA110_1 = input.LA(2);

                if ( (synpred186_pollen()) ) {
                    alt110=1;
                }
                else if ( (synpred187_pollen()) ) {
                    alt110=2;
                }
                else if ( (true) ) {
                    alt110=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1049:5: IDENT BIND expr
                    {
                    IDENT474=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit6573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT474);


                    BIND475=(Atom)match(input,BIND,FOLLOW_BIND_in_varInit6575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND475);


                    pushFollow(FOLLOW_expr_in_varInit6577);
                    expr476=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr476.getTree());

                    if ( state.backtracking==0 ) { atFlags.add(Flags.PROTOCOL_MEMBER); }

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1050:3: -> ^( D_VAR[\"D_VAR\", atFlags] IDENT ( expr )? )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1050:6: ^( D_VAR[\"D_VAR\", atFlags] IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1050:76: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:4: IDENT ASSIGN expr
                    {
                    IDENT477=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit6606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT477);


                    ASSIGN478=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit6608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN478);


                    pushFollow(FOLLOW_expr_in_varInit6610);
                    expr479=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr479.getTree());

                    // AST REWRITE
                    // elements: IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1052:2: -> ^( D_VAR[\"D_VAR\", atFlags] IDENT expr )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1052:5: ^( D_VAR[\"D_VAR\", atFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1054:4: IDENT
                    {
                    IDENT480=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit6637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT480);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1055:2: -> ^( D_VAR[\"D_VAR\", atFlags] IDENT )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:5: ^( D_VAR[\"D_VAR\", atFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", atFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, varInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit"


    public static class builtinType_return extends ParserRuleReturnScope {
        public EnumSet<LitFlags> f;
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtinType"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1058:1: builtinType returns [EnumSet<LitFlags> f] : ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'string' | 'uint8' | 'uint16' | 'uint32' );
    public final pollenParser.builtinType_return builtinType() throws RecognitionException {
        pollenParser.builtinType_return retval = new pollenParser.builtinType_return();
        retval.start = input.LT(1);

        int builtinType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal481=null;
        Atom string_literal482=null;
        Atom string_literal483=null;
        Atom string_literal484=null;
        Atom string_literal485=null;
        Atom string_literal486=null;
        Atom string_literal487=null;
        Atom string_literal488=null;
        Atom string_literal489=null;

        BaseNode string_literal481_tree=null;
        BaseNode string_literal482_tree=null;
        BaseNode string_literal483_tree=null;
        BaseNode string_literal484_tree=null;
        BaseNode string_literal485_tree=null;
        BaseNode string_literal486_tree=null;
        BaseNode string_literal487_tree=null;
        BaseNode string_literal488_tree=null;
        BaseNode string_literal489_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1059:5: ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'string' | 'uint8' | 'uint16' | 'uint32' )
            int alt111=9;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt111=1;
                }
                break;
            case 145:
                {
                alt111=2;
                }
                break;
            case 168:
                {
                alt111=3;
                }
                break;
            case 166:
                {
                alt111=4;
                }
                break;
            case 167:
                {
                alt111=5;
                }
                break;
            case 181:
                {
                alt111=6;
                }
                break;
            case 187:
                {
                alt111=7;
                }
                break;
            case 185:
                {
                alt111=8;
                }
                break;
            case 186:
                {
                alt111=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1059:9: 'bool'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal481=(Atom)match(input,143,FOLLOW_143_in_builtinType6676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal481_tree = 
                    (BaseNode)adaptor.create(string_literal481)
                    ;
                    adaptor.addChild(root_0, string_literal481_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.BOOL);}

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1060:9: 'byte'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal482=(Atom)match(input,145,FOLLOW_145_in_builtinType6689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal482_tree = 
                    (BaseNode)adaptor.create(string_literal482)
                    ;
                    adaptor.addChild(root_0, string_literal482_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.CHR);}

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1061:9: 'int8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal483=(Atom)match(input,168,FOLLOW_168_in_builtinType6702); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal483_tree = 
                    (BaseNode)adaptor.create(string_literal483)
                    ;
                    adaptor.addChild(root_0, string_literal483_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1062:9: 'int16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal484=(Atom)match(input,166,FOLLOW_166_in_builtinType6715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal484_tree = 
                    (BaseNode)adaptor.create(string_literal484)
                    ;
                    adaptor.addChild(root_0, string_literal484_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1063:9: 'int32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal485=(Atom)match(input,167,FOLLOW_167_in_builtinType6727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal485_tree = 
                    (BaseNode)adaptor.create(string_literal485)
                    ;
                    adaptor.addChild(root_0, string_literal485_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 6 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1064:9: 'string'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal486=(Atom)match(input,181,FOLLOW_181_in_builtinType6741); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal486_tree = 
                    (BaseNode)adaptor.create(string_literal486)
                    ;
                    adaptor.addChild(root_0, string_literal486_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.STR);}

                    }
                    break;
                case 7 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1065:9: 'uint8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal487=(Atom)match(input,187,FOLLOW_187_in_builtinType6754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal487_tree = 
                    (BaseNode)adaptor.create(string_literal487)
                    ;
                    adaptor.addChild(root_0, string_literal487_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 8 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1066:9: 'uint16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal488=(Atom)match(input,185,FOLLOW_185_in_builtinType6766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal488_tree = 
                    (BaseNode)adaptor.create(string_literal488)
                    ;
                    adaptor.addChild(root_0, string_literal488_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 9 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1067:9: 'uint32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal489=(Atom)match(input,186,FOLLOW_186_in_builtinType6778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal489_tree = 
                    (BaseNode)adaptor.create(string_literal489)
                    ;
                    adaptor.addChild(root_0, string_literal489_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, builtinType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "builtinType"


    protected static class qualName_scope {
        String s;
    }
    protected Stack qualName_stack = new Stack();


    public static class qualName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualName"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1070:1: qualName : IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] ;
    public final pollenParser.qualName_return qualName() throws RecognitionException {
        qualName_stack.push(new qualName_scope());
        pollenParser.qualName_return retval = new pollenParser.qualName_return();
        retval.start = input.LT(1);

        int qualName_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT490=null;
        pollenParser.qualNameList_return qualNameList491 =null;


        BaseNode IDENT490_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualNameList");

        	((qualName_scope)qualName_stack.peek()).s = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:5: ( IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:10: IDENT ( ( qualNameList )? )
            {
            IDENT490=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualName6824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT490);


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:16: ( ( qualNameList )? )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:17: ( qualNameList )?
            {
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:17: ( qualNameList )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==131) ) {
                int LA112_1 = input.LA(2);

                if ( (synpred196_pollen()) ) {
                    alt112=1;
                }
            }
            switch (alt112) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:17: qualNameList
                    {
                    pushFollow(FOLLOW_qualNameList_in_qualName6827);
                    qualNameList491=qualNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualNameList.add(qualNameList491.getTree());

                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1080:33: -> IDENT[$IDENT.text + $qualName::s]
            {
                adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(IDENT, (IDENT490!=null?IDENT490.getText():null) + ((qualName_scope)qualName_stack.peek()).s)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	//System.out.println("Qual : "  + ((qualName_scope)qualName_stack.peek()).s);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, qualName_StartIndex); }

            qualName_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "qualName"


    public static class qualNameList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1083:1: qualNameList : ( '.' ! IDENT !)+ ;
    public final pollenParser.qualNameList_return qualNameList() throws RecognitionException {
        pollenParser.qualNameList_return retval = new pollenParser.qualNameList_return();
        retval.start = input.LT(1);

        int qualNameList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal492=null;
        Atom IDENT493=null;

        BaseNode char_literal492_tree=null;
        BaseNode IDENT493_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1084:2: ( ( '.' ! IDENT !)+ )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:2: ( '.' ! IDENT !)+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:2: ( '.' ! IDENT !)+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==131) ) {
                    int LA113_1 = input.LA(2);

                    if ( (synpred197_pollen()) ) {
                        alt113=1;
                    }


                }


                switch (alt113) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:6: '.' ! IDENT !
            	    {
            	    char_literal492=(Atom)match(input,131,FOLLOW_131_in_qualNameList6855); if (state.failed) return retval;

            	    IDENT493=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameList6871); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {((qualName_scope)qualName_stack.peek()).s += "." + (IDENT493!=null?IDENT493.getText():null);}

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, qualNameList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualNameList"


    public static class arrayLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1090:1: arrayLit : '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) ;
    public final pollenParser.arrayLit_return arrayLit() throws RecognitionException {
        pollenParser.arrayLit_return retval = new pollenParser.arrayLit_return();
        retval.start = input.LT(1);

        int arrayLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal494=null;
        Atom char_literal496=null;
        pollenParser.arrayLitList_return arrayLitList495 =null;


        BaseNode char_literal494_tree=null;
        BaseNode char_literal496_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_arrayLitList=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1091:2: ( '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1091:4: '[' arrayLitList ']'
            {
            char_literal494=(Atom)match(input,138,FOLLOW_138_in_arrayLit6903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(char_literal494);


            pushFollow(FOLLOW_arrayLitList_in_arrayLit6905);
            arrayLitList495=arrayLitList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayLitList.add(arrayLitList495.getTree());

            char_literal496=(Atom)match(input,139,FOLLOW_139_in_arrayLit6907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(char_literal496);


            // AST REWRITE
            // elements: arrayLitList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1091:25: -> ^( LIST[\"LIST\"] arrayLitList )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1091:28: ^( LIST[\"LIST\"] arrayLitList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_arrayLitList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, arrayLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLit"


    public static class arrayLitList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitList"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1093:1: arrayLitList : ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL );
    public final pollenParser.arrayLitList_return arrayLitList() throws RecognitionException {
        pollenParser.arrayLitList_return retval = new pollenParser.arrayLitList_return();
        retval.start = input.LT(1);

        int arrayLitList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal498=null;
        pollenParser.arrayLitElem_return arrayLitElem497 =null;

        pollenParser.arrayLitElem_return arrayLitElem499 =null;


        BaseNode char_literal498_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_arrayLitElem=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitElem");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:2: ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==CHAR||LA115_0==HEX_LIT||LA115_0==IDENT||LA115_0==INT_LIT||LA115_0==OCT_LIT||LA115_0==REAL_LIT||LA115_0==STRING||LA115_0==159||LA115_0==173||LA115_0==183) ) {
                alt115=1;
            }
            else if ( (LA115_0==139) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:4: arrayLitElem ( ',' arrayLitElem )*
                    {
                    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList6929);
                    arrayLitElem497=arrayLitElem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem497.getTree());

                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:17: ( ',' arrayLitElem )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==130) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:18: ',' arrayLitElem
                    	    {
                    	    char_literal498=(Atom)match(input,130,FOLLOW_130_in_arrayLitList6932); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal498);


                    	    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList6934);
                    	    arrayLitElem499=arrayLitElem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem499.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: arrayLitElem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1094:37: -> ( arrayLitElem )+
                    {
                        if ( !(stream_arrayLitElem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_arrayLitElem.hasNext() ) {
                            adaptor.addChild(root_0, stream_arrayLitElem.nextTree());

                        }
                        stream_arrayLitElem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1095:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1095:4: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, arrayLitList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitList"


    public static class arrayLitElem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitElem"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:1: arrayLitElem : ( primitiveLit | namedConstant );
    public final pollenParser.arrayLitElem_return arrayLitElem() throws RecognitionException {
        pollenParser.arrayLitElem_return retval = new pollenParser.arrayLitElem_return();
        retval.start = input.LT(1);

        int arrayLitElem_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit500 =null;

        pollenParser.namedConstant_return namedConstant501 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:2: ( primitiveLit | namedConstant )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==CHAR||LA116_0==HEX_LIT||LA116_0==INT_LIT||LA116_0==OCT_LIT||LA116_0==REAL_LIT||LA116_0==STRING||LA116_0==159||LA116_0==173||LA116_0==183) ) {
                alt116=1;
            }
            else if ( (LA116_0==IDENT) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:4: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_arrayLitElem6958);
                    primitiveLit500=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit500.getTree());

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:19: namedConstant
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_namedConstant_in_arrayLitElem6962);
                    namedConstant501=namedConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namedConstant501.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, arrayLitElem_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitElem"


    public static class namedConstant_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedConstant"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1100:1: namedConstant : qualName ;
    public final pollenParser.namedConstant_return namedConstant() throws RecognitionException {
        pollenParser.namedConstant_return retval = new pollenParser.namedConstant_return();
        retval.start = input.LT(1);

        int namedConstant_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName502 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1101:2: ( qualName )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1101:4: qualName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualName_in_namedConstant6972);
            qualName502=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualName502.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, namedConstant_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namedConstant"


    public static class boolLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1103:1: boolLit : ( 'true' | 'false' ) ;
    public final pollenParser.boolLit_return boolLit() throws RecognitionException {
        pollenParser.boolLit_return retval = new pollenParser.boolLit_return();
        retval.start = input.LT(1);

        int boolLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set503=null;

        BaseNode set503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1104:2: ( ( 'true' | 'false' ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1104:4: ( 'true' | 'false' )
            {
            root_0 = (BaseNode)adaptor.nil();


            set503=(Atom)input.LT(1);

            if ( input.LA(1)==159||input.LA(1)==183 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set503)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.BOOL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, boolLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolLit"


    public static class nullLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1106:1: nullLit : 'null' ;
    public final pollenParser.nullLit_return nullLit() throws RecognitionException {
        pollenParser.nullLit_return retval = new pollenParser.nullLit_return();
        retval.start = input.LT(1);

        int nullLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal504=null;

        BaseNode string_literal504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1107:2: ( 'null' )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1107:4: 'null'
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal504=(Atom)match(input,173,FOLLOW_173_in_nullLit7002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal504_tree = 
            (BaseNode)adaptor.create(string_literal504)
            ;
            adaptor.addChild(root_0, string_literal504_tree);
            }

            if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NULL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, nullLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nullLit"


    public static class numLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1109:1: numLit : ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT );
    public final pollenParser.numLit_return numLit() throws RecognitionException {
        pollenParser.numLit_return retval = new pollenParser.numLit_return();
        retval.start = input.LT(1);

        int numLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom INT_LIT505=null;
        Atom OCT_LIT506=null;
        Atom REAL_LIT507=null;
        Atom HEX_LIT508=null;

        BaseNode INT_LIT505_tree=null;
        BaseNode OCT_LIT506_tree=null;
        BaseNode REAL_LIT507_tree=null;
        BaseNode HEX_LIT508_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1113:2: ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT )
            int alt117=4;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt117=1;
                }
                break;
            case OCT_LIT:
                {
                alt117=2;
                }
                break;
            case REAL_LIT:
                {
                alt117=3;
                }
                break;
            case HEX_LIT:
                {
                alt117=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1113:4: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT505=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_numLit7019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT505_tree = 
                    (BaseNode)adaptor.create(INT_LIT505)
                    ;
                    adaptor.addChild(root_0, INT_LIT505_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.INT);}

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1114:5: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT506=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_numLit7028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT506_tree = 
                    (BaseNode)adaptor.create(OCT_LIT506)
                    ;
                    adaptor.addChild(root_0, OCT_LIT506_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.OCT);}

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1115:5: REAL_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    REAL_LIT507=(Atom)match(input,REAL_LIT,FOLLOW_REAL_LIT_in_numLit7037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REAL_LIT507_tree = 
                    (BaseNode)adaptor.create(REAL_LIT507)
                    ;
                    adaptor.addChild(root_0, REAL_LIT507_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.REAL);}

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1116:5: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT508=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_numLit7046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT508_tree = 
                    (BaseNode)adaptor.create(HEX_LIT508)
                    ;
                    adaptor.addChild(root_0, HEX_LIT508_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.HEX);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
            	((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NUM);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, numLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numLit"


    protected static class primitiveLit_scope {
        EnumSet<LitFlags> litFlags;
    }
    protected Stack primitiveLit_stack = new Stack();


    public static class primitiveLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveLit"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1119:1: primitiveLit : ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) );
    public final pollenParser.primitiveLit_return primitiveLit() throws RecognitionException {
        primitiveLit_stack.push(new primitiveLit_scope());
        pollenParser.primitiveLit_return retval = new pollenParser.primitiveLit_return();
        retval.start = input.LT(1);

        int primitiveLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom STRING512=null;
        Atom CHAR513=null;
        pollenParser.boolLit_return boolLit509 =null;

        pollenParser.numLit_return numLit510 =null;

        pollenParser.nullLit_return nullLit511 =null;


        BaseNode STRING512_tree=null;
        BaseNode CHAR513_tree=null;
        RewriteRuleTokenStream stream_CHAR=new RewriteRuleTokenStream(adaptor,"token CHAR");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleSubtreeStream stream_numLit=new RewriteRuleSubtreeStream(adaptor,"rule numLit");
        RewriteRuleSubtreeStream stream_nullLit=new RewriteRuleSubtreeStream(adaptor,"rule nullLit");
        RewriteRuleSubtreeStream stream_boolLit=new RewriteRuleSubtreeStream(adaptor,"rule boolLit");

        	((primitiveLit_scope)primitiveLit_stack.peek()).litFlags = EnumSet.noneOf(LitFlags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:2: ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) )
            int alt118=5;
            switch ( input.LA(1) ) {
            case 159:
            case 183:
                {
                alt118=1;
                }
                break;
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
                {
                alt118=2;
                }
                break;
            case 173:
                {
                alt118=3;
                }
                break;
            case STRING:
                {
                alt118=4;
                }
                break;
            case CHAR:
                {
                alt118=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }

            switch (alt118) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:4: boolLit
                    {
                    pushFollow(FOLLOW_boolLit_in_primitiveLit7071);
                    boolLit509=boolLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolLit.add(boolLit509.getTree());

                    // AST REWRITE
                    // elements: boolLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1126:12: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:15: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_boolLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:4: numLit
                    {
                    pushFollow(FOLLOW_numLit_in_primitiveLit7090);
                    numLit510=numLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numLit.add(numLit510.getTree());

                    // AST REWRITE
                    // elements: numLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1127:12: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:15: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_numLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1128:4: nullLit
                    {
                    pushFollow(FOLLOW_nullLit_in_primitiveLit7110);
                    nullLit511=nullLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullLit.add(nullLit511.getTree());

                    // AST REWRITE
                    // elements: nullLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1128:12: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1128:15: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_nullLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1129:4: STRING
                    {
                    STRING512=(Atom)match(input,STRING,FOLLOW_STRING_in_primitiveLit7129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(STRING512);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.STR);}

                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1130:5: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1130:8: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1131:4: CHAR
                    {
                    CHAR513=(Atom)match(input,CHAR,FOLLOW_CHAR_in_primitiveLit7157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR.add(CHAR513);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.CHR);}

                    // AST REWRITE
                    // elements: CHAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1132:6: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                    {
                        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1132:9: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, primitiveLit_StartIndex); }

            primitiveLit_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "primitiveLit"


    public static class stmtInjection_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjection"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1134:1: stmtInjection : c= INJECT ( NL )+ -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) ) ;
    public final pollenParser.stmtInjection_return stmtInjection() throws RecognitionException {
        pollenParser.stmtInjection_return retval = new pollenParser.stmtInjection_return();
        retval.start = input.LT(1);

        int stmtInjection_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;
        Atom NL514=null;

        BaseNode c_tree=null;
        BaseNode NL514_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1135:2: (c= INJECT ( NL )+ -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1135:4: c= INJECT ( NL )+
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_stmtInjection7192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        c.setText(getInject(c.getText()));
                    }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1138:2: ( NL )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==NL) ) {
                    int LA119_1 = input.LA(2);

                    if ( (synpred209_pollen()) ) {
                        alt119=1;
                    }


                }


                switch (alt119) {
            	case 1 :
            	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1138:2: NL
            	    {
            	    NL514=(Atom)match(input,NL,FOLLOW_NL_in_stmtInjection7198); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_NL.add(NL514);


            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);


            // AST REWRITE
            // elements: INJECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1139:2: -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1139:5: ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] INJECT ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Inject(S_INJ, "S_INJ")
                , root_1);

                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1139:40: ^( E_INJ[\"E_INJ\"] INJECT )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, 
                stream_INJECT.nextNode()
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, stmtInjection_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjection"


    public static class injectionCode_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionCode"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1141:1: injectionCode : c= INJECT -> ^( E_INJ[\"E_INJ\"] INJECT ) ;
    public final pollenParser.injectionCode_return injectionCode() throws RecognitionException {
        pollenParser.injectionCode_return retval = new pollenParser.injectionCode_return();
        retval.start = input.LT(1);

        int injectionCode_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1142:2: (c= INJECT -> ^( E_INJ[\"E_INJ\"] INJECT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1142:4: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_injectionCode7238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        c.setText(getInject(c.getText()));
                    }

            // AST REWRITE
            // elements: INJECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1145:2: -> ^( E_INJ[\"E_INJ\"] INJECT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1145:5: ^( E_INJ[\"E_INJ\"] INJECT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_1);

                adaptor.addChild(root_1, 
                stream_INJECT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, injectionCode_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionCode"


    public static class injectionDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionDecl"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1147:1: injectionDecl : c= INJECT -> ^( D_INJ[\"D_INJ\"] INJECT ) ;
    public final pollenParser.injectionDecl_return injectionDecl() throws RecognitionException {
        pollenParser.injectionDecl_return retval = new pollenParser.injectionDecl_return();
        retval.start = input.LT(1);

        int injectionDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1148:2: (c= INJECT -> ^( D_INJ[\"D_INJ\"] INJECT ) )
            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1148:4: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_injectionDecl7270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                        c.setText(getInject(c.getText()));
                    }

            // AST REWRITE
            // elements: INJECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1151:10: -> ^( D_INJ[\"D_INJ\"] INJECT )
            {
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1151:13: ^( D_INJ[\"D_INJ\"] INJECT )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Inject(D_INJ, "D_INJ")
                , root_1);

                adaptor.addChild(root_1, 
                stream_INJECT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, injectionDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionDecl"


    public static class delim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delim"
    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1153:1: delim : ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->);
    public final pollenParser.delim_return delim() throws RecognitionException {
        pollenParser.delim_return retval = new pollenParser.delim_return();
        retval.start = input.LT(1);

        int delim_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI515=null;
        Atom NL516=null;
        Atom NL517=null;
        Atom NL518=null;

        BaseNode SEMI515_tree=null;
        BaseNode NL516_tree=null;
        BaseNode NL517_tree=null;
        BaseNode NL518_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:2: ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->)
            int alt123=3;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:4: ( SEMI ) ( NL )*
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:4: ( SEMI )
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:5: SEMI
                    {
                    SEMI515=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim7308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI515);


                    }


                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:11: ( NL )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==NL) ) {
                            int LA120_1 = input.LA(2);

                            if ( (synpred210_pollen()) ) {
                                alt120=1;
                            }


                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:12: NL
                    	    {
                    	    NL516=(Atom)match(input,NL,FOLLOW_NL_in_delim7312); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL516);


                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1154:17: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:4: ( NL )+
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:4: ( NL )+
                    int cnt121=0;
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==NL) ) {
                            int LA121_1 = input.LA(2);

                            if ( (synpred212_pollen()) ) {
                                alt121=1;
                            }


                        }


                        switch (alt121) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:5: NL
                    	    {
                    	    NL517=(Atom)match(input,NL,FOLLOW_NL_in_delim7323); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL517);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt121 >= 1 ) break loop121;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(121, input);
                                throw eee;
                        }
                        cnt121++;
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1155:10: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:4: ( ( NL )* '}' )=> ( NL )*
                    {
                    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:20: ( NL )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==NL) ) {
                            int LA122_1 = input.LA(2);

                            if ( (synpred216_pollen()) ) {
                                alt122=1;
                            }


                        }


                        switch (alt122) {
                    	case 1 :
                    	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:20: NL
                    	    {
                    	    NL518=(Atom)match(input,NL,FOLLOW_NL_in_delim7347); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_NL.add(NL518);


                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1157:24: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, delim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delim"

    // $ANTLR start synpred1_pollen
    public final void synpred1_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:10: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:230:10: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred1_pollen675); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_pollen

    // $ANTLR start synpred4_pollen
    public final void synpred4_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:9: ( stmtExport )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:263:9: stmtExport
        {
        pushFollow(FOLLOW_stmtExport_in_synpred4_pollen884);
        stmtExport();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_pollen

    // $ANTLR start synpred6_pollen
    public final void synpred6_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:290:9: ( fcnDefinition )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:290:9: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred6_pollen1016);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_pollen

    // $ANTLR start synpred8_pollen
    public final void synpred8_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:292:9: ( varDeclaration )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:292:9: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred8_pollen1037);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_pollen

    // $ANTLR start synpred11_pollen
    public final void synpred11_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:308:6: ( fcnDefinition )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:308:6: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred11_pollen1169);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_pollen

    // $ANTLR start synpred12_pollen
    public final void synpred12_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:309:8: ( varDeclaration )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:309:8: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred12_pollen1178);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_pollen

    // $ANTLR start synpred16_pollen
    public final void synpred16_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:26: ( delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:26: delim
        {
        pushFollow(FOLLOW_delim_in_synpred16_pollen1310);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_pollen

    // $ANTLR start synpred17_pollen
    public final void synpred17_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:4: ( IDENT ASSIGN INT_LIT ( delim )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:4: IDENT ASSIGN INT_LIT ( delim )?
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred17_pollen1303); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred17_pollen1305); if (state.failed) return ;

        match(input,INT_LIT,FOLLOW_INT_LIT_in_synpred17_pollen1307); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:25: ( delim )?
        int alt124=2;
        int LA124_0 = input.LA(1);

        if ( (LA124_0==NL||LA124_0==SEMI) ) {
            alt124=1;
        }
        else if ( (LA124_0==EOF) ) {
            int LA124_3 = input.LA(2);

            if ( (synpred16_pollen()) ) {
                alt124=1;
            }
        }
        switch (alt124) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:337:26: delim
                {
                pushFollow(FOLLOW_delim_in_synpred17_pollen1310);
                delim();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred17_pollen

    // $ANTLR start synpred18_pollen
    public final void synpred18_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:11: ( delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:338:11: delim
        {
        pushFollow(FOLLOW_delim_in_synpred18_pollen1338);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_pollen

    // $ANTLR start synpred24_pollen
    public final void synpred24_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:7: ( fcnDefinitionHost )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:372:7: fcnDefinitionHost
        {
        pushFollow(FOLLOW_fcnDefinitionHost_in_synpred24_pollen1576);
        fcnDefinitionHost();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_pollen

    // $ANTLR start synpred26_pollen
    public final void synpred26_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:374:7: ( varDeclaration )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:374:7: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred26_pollen1592);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_pollen

    // $ANTLR start synpred27_pollen
    public final void synpred27_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:379:28: ( metaArguments )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:379:28: metaArguments
        {
        pushFollow(FOLLOW_metaArguments_in_synpred27_pollen1631);
        metaArguments();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_pollen

    // $ANTLR start synpred31_pollen
    public final void synpred31_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:407:4: ({...}? 'meta' importList ( braceOpen metaParmsInstantiate braceClose ) )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:407:4: {...}? 'meta' importList ( braceOpen metaParmsInstantiate braceClose )
        {
        if ( !((isMetaInstance)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred31_pollen", "isMetaInstance");
        }

        match(input,170,FOLLOW_170_in_synpred31_pollen1790); if (state.failed) return ;

        pushFollow(FOLLOW_importList_in_synpred31_pollen1805);
        importList();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:4: ( braceOpen metaParmsInstantiate braceClose )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:410:5: braceOpen metaParmsInstantiate braceClose
        {
        pushFollow(FOLLOW_braceOpen_in_synpred31_pollen1813);
        braceOpen();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_metaParmsInstantiate_in_synpred31_pollen1820);
        metaParmsInstantiate();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_braceClose_in_synpred31_pollen1826);
        braceClose();

        state._fsp--;
        if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred31_pollen

    // $ANTLR start synpred32_pollen
    public final void synpred32_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:413:4: ( 'meta' importList ( braceOpen formalParameters braceClose ) )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:413:4: 'meta' importList ( braceOpen formalParameters braceClose )
        {
        match(input,170,FOLLOW_170_in_synpred32_pollen1833); if (state.failed) return ;

        pushFollow(FOLLOW_importList_in_synpred32_pollen1843);
        importList();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:416:4: ( braceOpen formalParameters braceClose )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:416:5: braceOpen formalParameters braceClose
        {
        pushFollow(FOLLOW_braceOpen_in_synpred32_pollen1851);
        braceOpen();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameters_in_synpred32_pollen1853);
        formalParameters();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_braceClose_in_synpred32_pollen1855);
        braceClose();

        state._fsp--;
        if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred32_pollen

    // $ANTLR start synpred38_pollen
    public final void synpred38_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:7: ( '{' metaArgument ( ',' metaArgument )* '}' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:7: '{' metaArgument ( ',' metaArgument )* '}'
        {
        match(input,190,FOLLOW_190_in_synpred38_pollen2074); if (state.failed) return ;

        pushFollow(FOLLOW_metaArgument_in_synpred38_pollen2076);
        metaArgument();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:25: ( ',' metaArgument )*
        loop126:
        do {
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==130) ) {
                alt126=1;
            }


            switch (alt126) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:523:26: ',' metaArgument
        	    {
        	    match(input,130,FOLLOW_130_in_synpred38_pollen2080); if (state.failed) return ;

        	    pushFollow(FOLLOW_metaArgument_in_synpred38_pollen2082);
        	    metaArgument();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop126;
            }
        } while (true);


        match(input,193,FOLLOW_193_in_synpred38_pollen2086); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_pollen

    // $ANTLR start synpred41_pollen
    public final void synpred41_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:10: ( 'module' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:11: 'module'
        {
        match(input,171,FOLLOW_171_in_synpred41_pollen2271); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_pollen

    // $ANTLR start synpred42_pollen
    public final void synpred42_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:563:8: ( 'class' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:563:9: 'class'
        {
        match(input,147,FOLLOW_147_in_synpred42_pollen2291); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_pollen

    // $ANTLR start synpred43_pollen
    public final void synpred43_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:564:10: ( 'protocol' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:564:11: 'protocol'
        {
        match(input,177,FOLLOW_177_in_synpred43_pollen2309); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred43_pollen

    // $ANTLR start synpred44_pollen
    public final void synpred44_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:565:10: ( 'composition' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:565:11: 'composition'
        {
        match(input,148,FOLLOW_148_in_synpred44_pollen2327); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_pollen

    // $ANTLR start synpred45_pollen
    public final void synpred45_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:566:10: ( 'enum' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:566:11: 'enum'
        {
        match(input,155,FOLLOW_155_in_synpred45_pollen2345); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_pollen

    // $ANTLR start synpred49_pollen
    public final void synpred49_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:23: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred49_pollen2456); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred49_pollen

    // $ANTLR start synpred53_pollen
    public final void synpred53_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:23: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:588:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred53_pollen2523); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred53_pollen

    // $ANTLR start synpred72_pollen
    public final void synpred72_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:10: ( ',' expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:10: ',' expr
        {
        match(input,130,FOLLOW_130_in_synpred72_pollen2725); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred72_pollen2727);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred72_pollen

    // $ANTLR start synpred73_pollen
    public final void synpred73_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:4: ( expr ( ',' expr )* )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:4: expr ( ',' expr )*
        {
        pushFollow(FOLLOW_expr_in_synpred73_pollen2722);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:9: ( ',' expr )*
        loop127:
        do {
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==130) ) {
                alt127=1;
            }


            switch (alt127) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:618:10: ',' expr
        	    {
        	    match(input,130,FOLLOW_130_in_synpred73_pollen2725); if (state.failed) return ;

        	    pushFollow(FOLLOW_expr_in_synpred73_pollen2727);
        	    expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop127;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred73_pollen

    // $ANTLR start synpred74_pollen
    public final void synpred74_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:4: ( exprLogicalOr '?' expr ':' expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:4: exprLogicalOr '?' expr ':' expr
        {
        pushFollow(FOLLOW_exprLogicalOr_in_synpred74_pollen2766);
        exprLogicalOr();

        state._fsp--;
        if (state.failed) return ;

        match(input,136,FOLLOW_136_in_synpred74_pollen2768); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred74_pollen2770);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,133,FOLLOW_133_in_synpred74_pollen2772); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred74_pollen2774);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred74_pollen

    // $ANTLR start synpred75_pollen
    public final void synpred75_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:4: ( '||' exprLogicalAnd )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:4: '||' exprLogicalAnd
        {
        match(input,192,FOLLOW_192_in_synpred75_pollen2829); if (state.failed) return ;

        pushFollow(FOLLOW_exprLogicalAnd_in_synpred75_pollen2831);
        exprLogicalAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred75_pollen

    // $ANTLR start synpred76_pollen
    public final void synpred76_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:3: ( '&&' exprBitwiseOr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:3: '&&' exprBitwiseOr
        {
        match(input,125,FOLLOW_125_in_synpred76_pollen2882); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseOr_in_synpred76_pollen2884);
        exprBitwiseOr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred76_pollen

    // $ANTLR start synpred77_pollen
    public final void synpred77_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:643:3: ( '|' exprBitwiseXor )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:643:3: '|' exprBitwiseXor
        {
        match(input,191,FOLLOW_191_in_synpred77_pollen2933); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseXor_in_synpred77_pollen2935);
        exprBitwiseXor();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred77_pollen

    // $ANTLR start synpred78_pollen
    public final void synpred78_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:3: ( '^' exprBitwiseAnd )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:3: '^' exprBitwiseAnd
        {
        match(input,140,FOLLOW_140_in_synpred78_pollen2983); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseAnd_in_synpred78_pollen2985);
        exprBitwiseAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred78_pollen

    // $ANTLR start synpred79_pollen
    public final void synpred79_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:657:3: ( '&' exprEquality )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:657:3: '&' exprEquality
        {
        match(input,126,FOLLOW_126_in_synpred79_pollen3033); if (state.failed) return ;

        pushFollow(FOLLOW_exprEquality_in_synpred79_pollen3035);
        exprEquality();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred79_pollen

    // $ANTLR start synpred80_pollen
    public final void synpred80_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:664:3: ( equalityOp exprRelational )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:664:3: equalityOp exprRelational
        {
        pushFollow(FOLLOW_equalityOp_in_synpred80_pollen3084);
        equalityOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprRelational_in_synpred80_pollen3086);
        exprRelational();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred80_pollen

    // $ANTLR start synpred81_pollen
    public final void synpred81_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:3: ( relationalOp exprShift )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:3: relationalOp exprShift
        {
        pushFollow(FOLLOW_relationalOp_in_synpred81_pollen3135);
        relationalOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprShift_in_synpred81_pollen3137);
        exprShift();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred81_pollen

    // $ANTLR start synpred82_pollen
    public final void synpred82_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:3: ( shiftOp exprAddSub )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:3: shiftOp exprAddSub
        {
        pushFollow(FOLLOW_shiftOp_in_synpred82_pollen3187);
        shiftOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprAddSub_in_synpred82_pollen3190);
        exprAddSub();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred82_pollen

    // $ANTLR start synpred83_pollen
    public final void synpred83_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:685:3: ( addSubOp exprMultDiv )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:685:3: addSubOp exprMultDiv
        {
        pushFollow(FOLLOW_addSubOp_in_synpred83_pollen3239);
        addSubOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprMultDiv_in_synpred83_pollen3241);
        exprMultDiv();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred83_pollen

    // $ANTLR start synpred84_pollen
    public final void synpred84_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:3: ( multDivModOp exprUnary )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:3: multDivModOp exprUnary
        {
        pushFollow(FOLLOW_multDivModOp_in_synpred84_pollen3296);
        multDivModOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprUnary_in_synpred84_pollen3298);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred84_pollen

    // $ANTLR start synpred92_pollen
    public final void synpred92_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:4: ( varOrFcnOrArray incDecOp )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:4: varOrFcnOrArray incDecOp
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred92_pollen3496);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_incDecOp_in_synpred92_pollen3498);
        incDecOp();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred92_pollen

    // $ANTLR start synpred93_pollen
    public final void synpred93_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:708:4: ( varOrFcnOrArray )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:708:4: varOrFcnOrArray
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred93_pollen3519);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred93_pollen

    // $ANTLR start synpred103_pollen
    public final void synpred103_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:758:4: ( typeName qualName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:758:4: typeName qualName
        {
        pushFollow(FOLLOW_typeName_in_synpred103_pollen3821);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred103_pollen3823);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred103_pollen

    // $ANTLR start synpred104_pollen
    public final void synpred104_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:760:4: ({...}? typeName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:760:4: {...}? typeName
        {
        if ( !((input.LT(1).getText().equals(ti.getTypeName()) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred104_pollen", "input.LT(1).getText().equals(ti.getTypeName()) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred104_pollen3869);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred104_pollen

    // $ANTLR start synpred105_pollen
    public final void synpred105_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:762:4: ( qualName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:762:4: qualName
        {
        pushFollow(FOLLOW_qualName_in_synpred105_pollen3914);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred105_pollen

    // $ANTLR start synpred107_pollen
    public final void synpred107_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:4: ( '(' typeName ( ',' typeName )* ')' qualName )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:5: '(' typeName ( ',' typeName )* ')' qualName
        {
        match(input,127,FOLLOW_127_in_synpred107_pollen3983); if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred107_pollen3985);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:18: ( ',' typeName )*
        loop128:
        do {
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==130) ) {
                alt128=1;
            }


            switch (alt128) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:19: ',' typeName
        	    {
        	    match(input,130,FOLLOW_130_in_synpred107_pollen3988); if (state.failed) return ;

        	    pushFollow(FOLLOW_typeName_in_synpred107_pollen3990);
        	    typeName();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop128;
            }
        } while (true);


        match(input,128,FOLLOW_128_in_synpred107_pollen3994); if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred107_pollen3996);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred107_pollen

    // $ANTLR start synpred114_pollen
    public final void synpred114_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:35: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:35: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred114_pollen4285);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred114_pollen

    // $ANTLR start synpred116_pollen
    public final void synpred116_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:30: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:30: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred116_pollen4318);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred116_pollen

    // $ANTLR start synpred117_pollen
    public final void synpred117_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:4: ( '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:4: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
        {
        match(input,137,FOLLOW_137_in_synpred117_pollen4312); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred117_pollen4314); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred117_pollen4316);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:30: ( fieldOrArrayAccess )?
        int alt132=2;
        int LA132_0 = input.LA(1);

        if ( (LA132_0==131||LA132_0==138) ) {
            alt132=1;
        }
        switch (alt132) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:30: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred117_pollen4318);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred117_pollen

    // $ANTLR start synpred118_pollen
    public final void synpred118_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:14: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:14: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred118_pollen4374);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred118_pollen

    // $ANTLR start synpred119_pollen
    public final void synpred119_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:4: ( '@' IDENT ( fieldOrArrayAccess )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:4: '@' IDENT ( fieldOrArrayAccess )?
        {
        match(input,137,FOLLOW_137_in_synpred119_pollen4370); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred119_pollen4372); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:14: ( fieldOrArrayAccess )?
        int alt133=2;
        int LA133_0 = input.LA(1);

        if ( (LA133_0==131||LA133_0==138) ) {
            alt133=1;
        }
        switch (alt133) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:804:14: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred119_pollen4374);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred119_pollen

    // $ANTLR start synpred120_pollen
    public final void synpred120_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:4: ( '@' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:806:4: '@'
        {
        match(input,137,FOLLOW_137_in_synpred120_pollen4413); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred120_pollen

    // $ANTLR start synpred121_pollen
    public final void synpred121_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:29: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:29: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred121_pollen4437);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred121_pollen

    // $ANTLR start synpred122_pollen
    public final void synpred122_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:4: ( qualName fcnArgumentList ( fieldOrArrayAccess )? )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:4: qualName fcnArgumentList ( fieldOrArrayAccess )?
        {
        pushFollow(FOLLOW_qualName_in_synpred122_pollen4433);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred122_pollen4435);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:29: ( fieldOrArrayAccess )?
        int alt134=2;
        int LA134_0 = input.LA(1);

        if ( (LA134_0==131||LA134_0==138) ) {
            alt134=1;
        }
        switch (alt134) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:808:29: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred122_pollen4437);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred122_pollen

    // $ANTLR start synpred123_pollen
    public final void synpred123_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:13: ( fieldOrArrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:810:13: fieldOrArrayAccess
        {
        pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred123_pollen4477);
        fieldOrArrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred123_pollen

    // $ANTLR start synpred125_pollen
    public final void synpred125_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:20: ( arrayAccess )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:20: arrayAccess
        {
        pushFollow(FOLLOW_arrayAccess_in_synpred125_pollen4511);
        arrayAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred125_pollen

    // $ANTLR start synpred126_pollen
    public final void synpred126_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:4: ( '.' IDENT fcnArgumentList )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:4: '.' IDENT fcnArgumentList
        {
        match(input,131,FOLLOW_131_in_synpred126_pollen4525); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred126_pollen4527); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred126_pollen4529);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred126_pollen

    // $ANTLR start synpred127_pollen
    public final void synpred127_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:9: ( exprList )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:9: exprList
        {
        pushFollow(FOLLOW_exprList_in_synpred127_pollen4581);
        exprList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred127_pollen

    // $ANTLR start synpred128_pollen
    public final void synpred128_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:5: ( stmt )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:5: stmt
        {
        pushFollow(FOLLOW_stmt_in_synpred128_pollen4638);
        stmt();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred128_pollen

    // $ANTLR start synpred129_pollen
    public final void synpred129_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:4: ( ( stmt )+ )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:4: ( stmt )+
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:4: ( stmt )+
        int cnt135=0;
        loop135:
        do {
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( ((LA135_0 >= BIT_NOT && LA135_0 <= CHAR)||LA135_0==DEC||LA135_0==HEX_LIT||LA135_0==IDENT||(LA135_0 >= INC && LA135_0 <= INT_LIT)||LA135_0==LOG_NOT||LA135_0==MINUS||LA135_0==NL||LA135_0==OCT_LIT||LA135_0==REAL_LIT||LA135_0==STRING||LA135_0==127||(LA135_0 >= 137 && LA135_0 <= 138)||(LA135_0 >= 142 && LA135_0 <= 145)||(LA135_0 >= 149 && LA135_0 <= 150)||LA135_0==152||(LA135_0 >= 159 && LA135_0 <= 160)||(LA135_0 >= 162 && LA135_0 <= 163)||(LA135_0 >= 166 && LA135_0 <= 168)||(LA135_0 >= 172 && LA135_0 <= 173)||LA135_0==176||LA135_0==178||(LA135_0 >= 180 && LA135_0 <= 183)||(LA135_0 >= 185 && LA135_0 <= 190)) ) {
                alt135=1;
            }


            switch (alt135) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:830:5: stmt
        	    {
        	    pushFollow(FOLLOW_stmt_in_synpred129_pollen4638);
        	    stmt();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt135 >= 1 ) break loop135;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(135, input);
                    throw eee;
            }
            cnt135++;
        } while (true);


        }

    }
    // $ANTLR end synpred129_pollen

    // $ANTLR start synpred130_pollen
    public final void synpred130_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:5: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:831:5: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred130_pollen4660); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred130_pollen

    // $ANTLR start synpred131_pollen
    public final void synpred131_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:834:5: ( stmtDecl )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:834:5: stmtDecl
        {
        pushFollow(FOLLOW_stmtDecl_in_synpred131_pollen4681);
        stmtDecl();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred131_pollen

    // $ANTLR start synpred132_pollen
    public final void synpred132_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:835:5: ( stmtAssign )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:835:5: stmtAssign
        {
        pushFollow(FOLLOW_stmtAssign_in_synpred132_pollen4687);
        stmtAssign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred132_pollen

    // $ANTLR start synpred134_pollen
    public final void synpred134_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:837:4: ( stmtBind )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:837:4: stmtBind
        {
        pushFollow(FOLLOW_stmtBind_in_synpred134_pollen4697);
        stmtBind();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred134_pollen

    // $ANTLR start synpred146_pollen
    public final void synpred146_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:849:4: ( stmtInjection )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:849:4: stmtInjection
        {
        pushFollow(FOLLOW_stmtInjection_in_synpred146_pollen4761);
        stmtInjection();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred146_pollen

    // $ANTLR start synpred147_pollen
    public final void synpred147_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:853:4: ( varOrFcnOrArray ASSIGN expr delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:853:4: varOrFcnOrArray ASSIGN expr delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred147_pollen4792);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred147_pollen4794); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred147_pollen4796);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred147_pollen4798);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred147_pollen

    // $ANTLR start synpred148_pollen
    public final void synpred148_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:4: ( injectionCode ASSIGN expr delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:4: injectionCode ASSIGN expr delim
        {
        pushFollow(FOLLOW_injectionCode_in_synpred148_pollen4833);
        injectionCode();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred148_pollen4835); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred148_pollen4837);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred148_pollen4840);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred148_pollen

    // $ANTLR start synpred149_pollen
    public final void synpred149_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:4: ( varOrFcnOrArray assignOp expr delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:4: varOrFcnOrArray assignOp expr delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred149_pollen4875);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_assignOp_in_synpred149_pollen4877);
        assignOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred149_pollen4879);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred149_pollen4882);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred149_pollen

    // $ANTLR start synpred154_pollen
    public final void synpred154_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:4: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:4: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
        {
        match(input,180,FOLLOW_180_in_synpred154_pollen5108); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:13: ( '(' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:14: '('
        {
        match(input,127,FOLLOW_127_in_synpred154_pollen5111); if (state.failed) return ;

        }


        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:19: ( expr ( ',' expr )+ )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:20: expr ( ',' expr )+
        {
        pushFollow(FOLLOW_expr_in_synpred154_pollen5115);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:25: ( ',' expr )+
        int cnt136=0;
        loop136:
        do {
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==130) ) {
                alt136=1;
            }


            switch (alt136) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:26: ',' expr
        	    {
        	    match(input,130,FOLLOW_130_in_synpred154_pollen5118); if (state.failed) return ;

        	    pushFollow(FOLLOW_expr_in_synpred154_pollen5120);
        	    expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt136 >= 1 ) break loop136;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(136, input);
                    throw eee;
            }
            cnt136++;
        } while (true);


        }


        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:38: ( ')' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:39: ')'
        {
        match(input,128,FOLLOW_128_in_synpred154_pollen5126); if (state.failed) return ;

        }


        pushFollow(FOLLOW_delim_in_synpred154_pollen5129);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred154_pollen

    // $ANTLR start synpred157_pollen
    public final void synpred157_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:9: ( typeName IDENT '=' expr SEMI )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:9: typeName IDENT '=' expr SEMI
        {
        pushFollow(FOLLOW_typeName_in_synpred157_pollen5414);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred157_pollen5416); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred157_pollen5418); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred157_pollen5420);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,SEMI,FOLLOW_SEMI_in_synpred157_pollen5422); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred157_pollen

    // $ANTLR start synpred161_pollen
    public final void synpred161_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:18: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:18: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred161_pollen5619); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred161_pollen

    // $ANTLR start synpred162_pollen
    public final void synpred162_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:25: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:936:25: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred162_pollen5654); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred162_pollen

    // $ANTLR start synpred170_pollen
    public final void synpred170_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:4: ( typeName IDENT ( ASSIGN expr )? ',' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:5: typeName IDENT ( ASSIGN expr )? ','
        {
        pushFollow(FOLLOW_typeName_in_synpred170_pollen6041);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred170_pollen6043); if (state.failed) return ;

        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:20: ( ASSIGN expr )?
        int alt137=2;
        int LA137_0 = input.LA(1);

        if ( (LA137_0==ASSIGN) ) {
            alt137=1;
        }
        switch (alt137) {
            case 1 :
                // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:21: ASSIGN expr
                {
                match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred170_pollen6046); if (state.failed) return ;

                pushFollow(FOLLOW_expr_in_synpred170_pollen6048);
                expr();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,130,FOLLOW_130_in_synpred170_pollen6052); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred170_pollen

    // $ANTLR start synpred171_pollen
    public final void synpred171_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:992:5: ( typeName IDENT '[' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:992:6: typeName IDENT '['
        {
        pushFollow(FOLLOW_typeName_in_synpred171_pollen6065);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred171_pollen6067); if (state.failed) return ;

        match(input,138,FOLLOW_138_in_synpred171_pollen6069); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred171_pollen

    // $ANTLR start synpred172_pollen
    public final void synpred172_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:993:5: ( typeName '(' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:993:6: typeName '('
        {
        pushFollow(FOLLOW_typeName_in_synpred172_pollen6082);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,127,FOLLOW_127_in_synpred172_pollen6084); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred172_pollen

    // $ANTLR start synpred173_pollen
    public final void synpred173_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:994:6: ( typeName varInit )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:994:7: typeName varInit
        {
        pushFollow(FOLLOW_typeName_in_synpred173_pollen6099);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred173_pollen6101);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred173_pollen

    // $ANTLR start synpred177_pollen
    public final void synpred177_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:5: ( '[' varDim ']' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1017:5: '[' varDim ']'
        {
        match(input,138,FOLLOW_138_in_synpred177_pollen6323); if (state.failed) return ;

        pushFollow(FOLLOW_varDim_in_synpred177_pollen6325);
        varDim();

        state._fsp--;
        if (state.failed) return ;

        match(input,139,FOLLOW_139_in_synpred177_pollen6327); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred177_pollen

    // $ANTLR start synpred181_pollen
    public final void synpred181_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:17: ( ',' initializer )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:17: ',' initializer
        {
        match(input,130,FOLLOW_130_in_synpred181_pollen6405); if (state.failed) return ;

        pushFollow(FOLLOW_initializer_in_synpred181_pollen6407);
        initializer();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred181_pollen

    // $ANTLR start synpred182_pollen
    public final void synpred182_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1034:71: ( ',' varInit2 )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1034:71: ',' varInit2
        {
        match(input,130,FOLLOW_130_in_synpred182_pollen6449); if (state.failed) return ;

        pushFollow(FOLLOW_varInit2_in_synpred182_pollen6452);
        varInit2();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred182_pollen

    // $ANTLR start synpred184_pollen
    public final void synpred184_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:66: ( ',' varInit )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1035:66: ',' varInit
        {
        match(input,130,FOLLOW_130_in_synpred184_pollen6467); if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred184_pollen6470);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred184_pollen

    // $ANTLR start synpred185_pollen
    public final void synpred185_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1041:4: ( IDENT ASSIGN expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1041:4: IDENT ASSIGN expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred185_pollen6509); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred185_pollen6511); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred185_pollen6513);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred185_pollen

    // $ANTLR start synpred186_pollen
    public final void synpred186_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1049:5: ( IDENT BIND expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1049:5: IDENT BIND expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred186_pollen6573); if (state.failed) return ;

        match(input,BIND,FOLLOW_BIND_in_synpred186_pollen6575); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred186_pollen6577);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred186_pollen

    // $ANTLR start synpred187_pollen
    public final void synpred187_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:4: ( IDENT ASSIGN expr )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:4: IDENT ASSIGN expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred187_pollen6606); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred187_pollen6608); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred187_pollen6610);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred187_pollen

    // $ANTLR start synpred196_pollen
    public final void synpred196_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:17: ( qualNameList )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1080:17: qualNameList
        {
        pushFollow(FOLLOW_qualNameList_in_synpred196_pollen6827);
        qualNameList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred196_pollen

    // $ANTLR start synpred197_pollen
    public final void synpred197_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:6: ( '.' IDENT )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:6: '.' IDENT
        {
        match(input,131,FOLLOW_131_in_synpred197_pollen6855); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred197_pollen6871); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred197_pollen

    // $ANTLR start synpred209_pollen
    public final void synpred209_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1138:2: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1138:2: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred209_pollen7198); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred209_pollen

    // $ANTLR start synpred210_pollen
    public final void synpred210_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:12: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:12: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred210_pollen7312); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred210_pollen

    // $ANTLR start synpred211_pollen
    public final void synpred211_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:4: ( ( SEMI ) ( NL )* )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:4: ( SEMI ) ( NL )*
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:4: ( SEMI )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:5: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred211_pollen7308); if (state.failed) return ;

        }


        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:11: ( NL )*
        loop141:
        do {
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==NL) ) {
                alt141=1;
            }


            switch (alt141) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1154:12: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred211_pollen7312); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop141;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred211_pollen

    // $ANTLR start synpred212_pollen
    public final void synpred212_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:5: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:5: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred212_pollen7323); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred212_pollen

    // $ANTLR start synpred213_pollen
    public final void synpred213_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:4: ( ( NL )+ )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:4: ( NL )+
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:4: ( NL )+
        int cnt142=0;
        loop142:
        do {
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==NL) ) {
                alt142=1;
            }


            switch (alt142) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1155:5: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred213_pollen7323); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt142 >= 1 ) break loop142;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(142, input);
                    throw eee;
            }
            cnt142++;
        } while (true);


        }

    }
    // $ANTLR end synpred213_pollen

    // $ANTLR start synpred215_pollen
    public final void synpred215_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:4: ( ( NL )* '}' )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:5: ( NL )* '}'
        {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:5: ( NL )*
        loop143:
        do {
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==NL) ) {
                alt143=1;
            }


            switch (alt143) {
        	case 1 :
        	    // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:6: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred215_pollen7337); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop143;
            }
        } while (true);


        match(input,193,FOLLOW_193_in_synpred215_pollen7341); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred215_pollen

    // $ANTLR start synpred216_pollen
    public final void synpred216_pollen_fragment() throws RecognitionException {
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:20: ( NL )
        // /home/lucidbee/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1157:20: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred216_pollen7347); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred216_pollen

    // Delegated rules

    public final boolean synpred197_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA123 dfa123 = new DFA123(this);
    static final String DFA123_eotS =
        "\76\uffff";
    static final String DFA123_eofS =
        "\1\36\75\uffff";
    static final String DFA123_minS =
        "\1\12\2\0\73\uffff";
    static final String DFA123_maxS =
        "\1\u00c1\2\0\73\uffff";
    static final String DFA123_acceptS =
        "\3\uffff\71\3\1\1\1\2";
    static final String DFA123_specialS =
        "\1\0\1\1\1\2\73\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\71\1\66\1\uffff\1\73\57\uffff\1\63\2\uffff\1\31\4\uffff\1"+
            "\73\1\5\1\60\1\uffff\1\70\4\uffff\1\72\5\uffff\1\2\2\uffff\1"+
            "\61\2\uffff\1\62\1\uffff\1\1\1\uffff\1\65\40\uffff\1\32\2\uffff"+
            "\1\37\6\uffff\1\43\1\67\3\uffff\1\44\1\20\1\47\1\21\1\42\1\10"+
            "\1\12\1\33\1\50\1\41\1\53\2\uffff\1\13\1\uffff\1\15\1\uffff"+
            "\1\57\1\51\1\3\1\17\1\54\1\uffff\1\4\1\23\1\24\1\22\1\uffff"+
            "\1\6\1\7\1\35\1\64\2\uffff\1\45\1\11\1\55\1\16\1\46\1\25\1\52"+
            "\1\57\1\uffff\1\27\1\30\1\26\1\34\1\56\1\40\2\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "1153:1: delim : ( ( SEMI ) ( NL )* ->| ( NL )+ ->| ( ( NL )* '}' )=> ( NL )* ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_0 = input.LA(1);

                         
                        int index123_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA123_0==SEMI) ) {s = 1;}

                        else if ( (LA123_0==NL) ) {s = 2;}

                        else if ( (LA123_0==161) && (synpred215_pollen())) {s = 3;}

                        else if ( (LA123_0==165) && (synpred215_pollen())) {s = 4;}

                        else if ( (LA123_0==INJECT) && (synpred215_pollen())) {s = 5;}

                        else if ( (LA123_0==170) && (synpred215_pollen())) {s = 6;}

                        else if ( (LA123_0==171) && (synpred215_pollen())) {s = 7;}

                        else if ( (LA123_0==147) && (synpred215_pollen())) {s = 8;}

                        else if ( (LA123_0==177) && (synpred215_pollen())) {s = 9;}

                        else if ( (LA123_0==148) && (synpred215_pollen())) {s = 10;}

                        else if ( (LA123_0==155) && (synpred215_pollen())) {s = 11;}

                        else if ( (LA123_0==193) && (synpred215_pollen())) {s = 12;}

                        else if ( (LA123_0==157) && (synpred215_pollen())) {s = 13;}

                        else if ( (LA123_0==179) && (synpred215_pollen())) {s = 14;}

                        else if ( (LA123_0==162) && (synpred215_pollen())) {s = 15;}

                        else if ( (LA123_0==143) && (synpred215_pollen())) {s = 16;}

                        else if ( (LA123_0==145) && (synpred215_pollen())) {s = 17;}

                        else if ( (LA123_0==168) && (synpred215_pollen())) {s = 18;}

                        else if ( (LA123_0==166) && (synpred215_pollen())) {s = 19;}

                        else if ( (LA123_0==167) && (synpred215_pollen())) {s = 20;}

                        else if ( (LA123_0==181) && (synpred215_pollen())) {s = 21;}

                        else if ( (LA123_0==187) && (synpred215_pollen())) {s = 22;}

                        else if ( (LA123_0==185) && (synpred215_pollen())) {s = 23;}

                        else if ( (LA123_0==186) && (synpred215_pollen())) {s = 24;}

                        else if ( (LA123_0==IDENT) && (synpred215_pollen())) {s = 25;}

                        else if ( (LA123_0==127) && (synpred215_pollen())) {s = 26;}

                        else if ( (LA123_0==149) && (synpred215_pollen())) {s = 27;}

                        else if ( (LA123_0==188) && (synpred215_pollen())) {s = 28;}

                        else if ( (LA123_0==172) && (synpred215_pollen())) {s = 29;}

                        else if ( (LA123_0==EOF) && (synpred215_pollen())) {s = 30;}

                        else if ( (LA123_0==130) && (synpred215_pollen())) {s = 31;}

                        else if ( (LA123_0==190) && (synpred215_pollen())) {s = 32;}

                        else if ( (LA123_0==151) && (synpred215_pollen())) {s = 33;}

                        else if ( (LA123_0==146) && (synpred215_pollen())) {s = 34;}

                        else if ( (LA123_0==137) && (synpred215_pollen())) {s = 35;}

                        else if ( (LA123_0==142) && (synpred215_pollen())) {s = 36;}

                        else if ( (LA123_0==176) && (synpred215_pollen())) {s = 37;}

                        else if ( (LA123_0==180) && (synpred215_pollen())) {s = 38;}

                        else if ( (LA123_0==144) && (synpred215_pollen())) {s = 39;}

                        else if ( (LA123_0==150) && (synpred215_pollen())) {s = 40;}

                        else if ( (LA123_0==160) && (synpred215_pollen())) {s = 41;}

                        else if ( (LA123_0==182) && (synpred215_pollen())) {s = 42;}

                        else if ( (LA123_0==152) && (synpred215_pollen())) {s = 43;}

                        else if ( (LA123_0==163) && (synpred215_pollen())) {s = 44;}

                        else if ( (LA123_0==178) && (synpred215_pollen())) {s = 45;}

                        else if ( (LA123_0==189) && (synpred215_pollen())) {s = 46;}

                        else if ( (LA123_0==159||LA123_0==183) && (synpred215_pollen())) {s = 47;}

                        else if ( (LA123_0==INT_LIT) && (synpred215_pollen())) {s = 48;}

                        else if ( (LA123_0==OCT_LIT) && (synpred215_pollen())) {s = 49;}

                        else if ( (LA123_0==REAL_LIT) && (synpred215_pollen())) {s = 50;}

                        else if ( (LA123_0==HEX_LIT) && (synpred215_pollen())) {s = 51;}

                        else if ( (LA123_0==173) && (synpred215_pollen())) {s = 52;}

                        else if ( (LA123_0==STRING) && (synpred215_pollen())) {s = 53;}

                        else if ( (LA123_0==CHAR) && (synpred215_pollen())) {s = 54;}

                        else if ( (LA123_0==138) && (synpred215_pollen())) {s = 55;}

                        else if ( (LA123_0==LOG_NOT) && (synpred215_pollen())) {s = 56;}

                        else if ( (LA123_0==BIT_NOT) && (synpred215_pollen())) {s = 57;}

                        else if ( (LA123_0==MINUS) && (synpred215_pollen())) {s = 58;}

                        else if ( (LA123_0==DEC||LA123_0==INC) && (synpred215_pollen())) {s = 59;}

                         
                        input.seek(index123_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred211_pollen()) ) {s = 60;}

                        else if ( (synpred215_pollen()) ) {s = 59;}

                         
                        input.seek(index123_1);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred213_pollen()) ) {s = 61;}

                        else if ( (synpred215_pollen()) ) {s = 59;}

                         
                        input.seek(index123_2);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_NL_in_unit675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100040L,0x00028C2208180000L});
    public static final BitSet FOLLOW_unitPackage_in_unit679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPackage_in_unitPackage713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x00020C2208180000L});
    public static final BitSet FOLLOW_importList_in_unitPackage719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x00020C0008180000L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00020C0008180000L});
    public static final BitSet FOLLOW_unitTypeDefinition_in_unitPackage737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage745 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_pollenEOF_in_unitPackage753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_pollenEOF763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmtInjectionList781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_175_in_stmtPackage811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_stmtPackage813 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtPackage815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_stmtExport850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_stmtExport852 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtExport854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtExport_in_exportList884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_147_in_classDefinition929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_classDefinition931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000001000000000L});
    public static final BitSet FOLLOW_implementsClause_in_classDefinition940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_classDefinition945 = new BitSet(new long[]{0x0000000000000000L,0x8000000000100041L,0x1E2811C4082A8000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classFeatureList_in_classDefinition947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_classDefinition949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFeature_in_classFeatureList987 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000041L,0x1E2811C4082A8000L});
    public static final BitSet FOLLOW_fcnDefinition_in_classFeature1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_classFeature1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_classFeature1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_classFeature1047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_classFeature1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_moduleDefinition1075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_moduleDefinition1077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000001000000000L});
    public static final BitSet FOLLOW_implementsClause_in_moduleDefinition1092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_moduleDefinition1099 = new BitSet(new long[]{0x0000000000000000L,0x8000000000100041L,0x1E2811C4082A8000L,0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeatureList_in_moduleDefinition1101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_moduleDefinition1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeature_in_moduleFeatureList1143 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000041L,0x1E2811C4082A8000L});
    public static final BitSet FOLLOW_fcnDefinition_in_moduleFeature1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_moduleFeature1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_moduleFeature1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_moduleFeature1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_moduleFeature1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_enumDefinition1222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_enumDefinition1224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_enumDefinition1233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_enumList_in_enumDefinition1235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_enumDefinition1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList1273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_enumList1276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_enumElement_in_enumList1278 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_enumElement1303 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_enumElement1305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_INT_LIT_in_enumElement1307 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_enumElement1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement1335 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_enumElement1338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_protocolDefinition1358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_protocolDefinition1360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000040000000L});
    public static final BitSet FOLLOW_extendsClause_in_protocolDefinition1368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_protocolDefinition1372 = new BitSet(new long[]{0x0000000000000000L,0x8000000000100041L,0x0E2801C408028000L,0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeatureList_in_protocolDefinition1374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_protocolDefinition1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeature_in_protocolFeatureList1414 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000041L,0x0E2801C408028000L});
    public static final BitSet FOLLOW_enumDefinition_in_protocolFeature1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclaration_in_protocolFeature1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_protocolFeature1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_compositionDefinition1477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_compositionDefinition1479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000040000000L});
    public static final BitSet FOLLOW_extendsClause_in_compositionDefinition1487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_compositionDefinition1493 = new BitSet(new long[]{0x0000000000000000L,0x8000000000100041L,0x1E2811C428228000L,0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeatureList_in_compositionDefinition1495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_compositionDefinition1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeature_in_compositionFeatureList1542 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000041L,0x1E2811C428228000L});
    public static final BitSet FOLLOW_exportList_in_compositionFeature1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_compositionFeature1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_compositionFeature1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_compositionFeature1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_compositionFeature1599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importFrom_in_stmtImport1616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_stmtImport1626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_stmtImport1628 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L,0x4000000000002000L});
    public static final BitSet FOLLOW_metaArguments_in_stmtImport1631 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L,0x0000000000002000L});
    public static final BitSet FOLLOW_importAs_in_stmtImport1644 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtImport1646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_importFrom1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_importFrom1690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_importAs1719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_importAs1721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImport_in_importList1747 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_170_in_meta1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000002200000000L});
    public static final BitSet FOLLOW_importList_in_meta1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_meta1813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0F2001C000028000L});
    public static final BitSet FOLLOW_metaParmsInstantiate_in_meta1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_meta1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_meta1833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000002200000000L});
    public static final BitSet FOLLOW_importList_in_meta1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_meta1851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100001L,0x0F2001C000028000L,0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_meta1853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_meta1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaInstantiate_in_metaParmsInstantiate1908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_metaParmsInstantiate1915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0F2001C000028000L});
    public static final BitSet FOLLOW_metaInstantiate_in_metaParmsInstantiate1924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_184_in_metaInstantiate1956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_metaInstantiate1958 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaInstantiate1962 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_metaInstantiate1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_metaInstantiate2001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_metaInstantiate2005 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaInstantiate2008 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800080L,0x0080200080000000L});
    public static final BitSet FOLLOW_primitiveLit_in_metaInstantiate2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_metaArguments2074 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800081L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_metaArguments2076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_metaArguments2080 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800081L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_metaArguments2082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_metaArguments2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_metaArguments2106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_metaArguments2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_metaArgument2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_metaArgument2143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_typeName2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameScalar2170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_typeNameScalar2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeName2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_meta_in_unitTypeDefinition2246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002080008180000L});
    public static final BitSet FOLLOW_moduleDefinition_in_unitTypeDefinition2276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_unitTypeDefinition2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolDefinition_in_unitTypeDefinition2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionDefinition_in_unitTypeDefinition2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_unitTypeDefinition2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_extendsClause2375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_extendsClause2377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_implementsClause2411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_implementsClause2413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_braceClose2447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_braceClose2452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_braceClose2456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_braceCloseAtEOF2480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_braceCloseAtEOF2485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_braceCloseAtEOF2489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_braceOpen2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_braceOpen2519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_braceOpen2523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_LOG_NOT_in_logicalNotOp2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_NOT_in_bitwiseNotOp2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprList2722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_exprList2725 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprList2727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr2766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_expr2768 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_expr2770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_expr2772 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_expr2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr2815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_exprLogicalOr2829 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr2831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd2870 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_exprLogicalAnd2882 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd2884 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr2921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_exprBitwiseOr2933 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr2935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_exprBitwiseXor2983 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor2985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd3021 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_exprBitwiseAnd3033 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd3035 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality3071 = new BitSet(new long[]{0x0000004000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_equalityOp_in_exprEquality3084 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality3086 = new BitSet(new long[]{0x0000004000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational3122 = new BitSet(new long[]{0x0C00000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_relationalOp_in_exprRelational3135 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational3137 = new BitSet(new long[]{0x0C00000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift3174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_shiftOp_in_exprShift3187 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift3190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub3227 = new BitSet(new long[]{0x0000000000000002L,0x0000000001004000L});
    public static final BitSet FOLLOW_addSubOp_in_exprAddSub3239 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub3241 = new BitSet(new long[]{0x0000000000000002L,0x0000000001004000L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv3284 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_multDivModOp_in_exprMultDiv3296 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv3298 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_172_in_exprNew3333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_exprNew3335 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_exprNew3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_exprUnary3363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_exprUnary3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLit_in_exprUnary3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNotOp_in_exprUnary3397 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseNotOp_in_exprUnary3423 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_exprUnary3449 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_exprUnary3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_exprUnary3469 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_exprUnary3471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary3496 = new BitSet(new long[]{0x0000000000002000L,0x0000000000000020L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary3498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary3524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000100000000200L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary3526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_exprUnary3547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnDefinition3563 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000001L,0x0E2001C400028000L});
    public static final BitSet FOLLOW_162_in_fcnDefinition3574 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinition3584 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinition3586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinition3588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnDefinitionHost3626 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000001L,0x0E2001C400028000L});
    public static final BitSet FOLLOW_162_in_fcnDefinitionHost3631 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinitionHost3642 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinitionHost3645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinitionHost3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnAttr3691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_fcnAttr3702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpen_in_fcnBody3719 = new BitSet(new long[]{0x2000000000002C00L,0x80000000449042E1L,0x7EF531CD8163C600L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmts_in_fcnBody3722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_fcnBody3726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_fcnDeclaration3761 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000001L,0x0E2001C400028000L});
    public static final BitSet FOLLOW_162_in_fcnDeclaration3772 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDeclaration3782 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDeclaration3785 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_fcnDeclaration3788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName3821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName3914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_fcnTypes_fcnName4012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_fcnTypes_in_fcnTypes_fcnName4014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnTypes_fcnName4016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_fcnTypes_fcnName4018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes4039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_fcnTypes4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes4044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_127_in_formalParameterList4079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0F2001C000028001L});
    public static final BitSet FOLLOW_formalParameters_in_formalParameterList4081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_formalParameterList4083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters4097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_formalParameters4100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0F2001C000028000L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters4102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_184_in_formalParameter4150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter4152 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter4156 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_formalParameter4158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_formalParameter4206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter4208 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter4212 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_formalParameter4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_fcnArgumentList4250 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_fcnArguments_in_fcnArgumentList4252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnArgumentList4254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_fcnArguments4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_varOrFcnOrArray4279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_varOrFcnOrArray4281 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray4283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray4312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray4314 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray4316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray4370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray4372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_varOrFcnOrArray4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray4433 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray4435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray4475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldAccess_in_fieldOrArrayAccess4507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_arrayAccess_in_fieldOrArrayAccess4511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_131_in_fieldAccess4525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess4527 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldAccess4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_fieldAccess4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_arrayAccess4578 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000E00L});
    public static final BitSet FOLLOW_exprList_in_arrayAccess4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_arrayAccess4585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpen_in_stmtBlock4608 = new BitSet(new long[]{0x2000000000002C00L,0x80000000449042E1L,0x7EF531CD8163C600L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmts_in_stmtBlock4610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_stmtBlock4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_stmts4638 = new BitSet(new long[]{0x2000000000002C02L,0x80000000449042E1L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_stmts4660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_stmtDecl_in_stmt4681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmt4687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssert_in_stmt4692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_stmt4697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt4702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPrint_in_stmt4707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtReturn_in_stmt4712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBreak_in_stmt4717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtContinue_in_stmt4723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtFor_in_stmt4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtSwitch_in_stmt4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDoWhile_in_stmt4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtIf_in_stmt4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtProvided_in_stmt4750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtWhile_in_stmt4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmt4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmt4766 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmt4768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign4792 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign4794 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4796 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign4833 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign4835 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4837 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign4875 = new BitSet(new long[]{0x0000000000008390L,0x0000000088060400L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign4877 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4879 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign4917 = new BitSet(new long[]{0x0000000000008390L,0x0000000088060400L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign4919 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtAssign4921 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign4923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_stmtAssert4963 = new BitSet(new long[]{0x2000000000002C00L,0x80000000549042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprList_in_stmtAssert4965 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtAssert4967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtBind4985 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_stmtBind4987 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtBind4990 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtBind4993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_stmtPrint5026 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080720090000600L});
    public static final BitSet FOLLOW_stmtPrintTarget_in_stmtPrint5029 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprList_in_stmtPrint5034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_stmtPrintTarget5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_stmtPrintTarget5079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_stmtPrintTarget5088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_stmtReturn5108 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtReturn5111 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn5115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_stmtReturn5118 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_128_in_stmtReturn5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_stmtReturn5170 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtReturn5174 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn5178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_stmtBreak5223 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtBreak5225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_stmtContinue5247 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtContinue5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_stmtFor5276 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtFor5278 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000041L,0x0E2011C000028200L});
    public static final BitSet FOLLOW_stmtForInit_in_stmtFor5280 = new BitSet(new long[]{0x2000000000002C00L,0x80000000548042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_stmtForCond_in_stmtFor5282 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000601L});
    public static final BitSet FOLLOW_stmtForNext_in_stmtFor5284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtFor5286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtFor5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond5338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForCond5363 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_stmtForInit5414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_stmtForInit5416 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtForInit5418 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtForInit5420 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmtForInit5484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForNext5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_stmtSwitch5546 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtSwitch5548 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtSwitch5550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtSwitch5552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_stmtSwitch5554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000840000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmtsCase_in_stmtSwitch5556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000800000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDefault_in_stmtSwitch5558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_stmtSwitch5561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtCase_in_stmtsCase5591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_151_in_stmtDefault5615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_stmtDefault5617 = new BitSet(new long[]{0x2000000000002C00L,0x80000000449042E1L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_stmtDefault5619 = new BitSet(new long[]{0x2000000000002C00L,0x80000000449042E1L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_stmts_in_stmtDefault5622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_stmtCase5646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_INT_LIT_in_stmtCase5649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_stmtCase5652 = new BitSet(new long[]{0x2000000000002C00L,0x80000000449042E1L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_stmtCase5654 = new BitSet(new long[]{0x2000000000002C00L,0x80000000449042E1L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_stmts_in_stmtCase5657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_stmtDoWhile5683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtDoWhile5685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_stmtDoWhile5687 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtDoWhile5689 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtDoWhile5691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtDoWhile5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtDoWhile5695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_stmtIf5722 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtIf5724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_stmtsElif_in_stmtIf5726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtIf5728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_stmtIfBlock5758 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtIfBlock5760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtIfBlock5762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtIfBlock5764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtElif_in_stmtsElif5780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_stmtElif5800 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtElif5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_stmtElse5826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtElse5828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_stmtProvided5842 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtProvided5844 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtProvided5846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtProvided5848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtProvided5850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtProvided5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtWhile5886 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_stmtWhile5888 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_stmtWhile5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_stmtWhile5891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtWhile5893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_stmtDecl5927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2011C000028000L});
    public static final BitSet FOLLOW_varDecl_in_stmtDecl5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_stmtDecl5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_varDeclaration5969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2011C000028000L});
    public static final BitSet FOLLOW_varDecl_in_varDeclaration5971 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_varDeclaration5973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_varAttr5994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000400200000L});
    public static final BitSet FOLLOW_188_in_varAttr6003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000400200000L});
    public static final BitSet FOLLOW_162_in_varAttr6013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000400200000L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varArray_in_varDecl6074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef_in_varDecl6090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl6106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_varDecl6112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_varDecl6114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_varDecl6116 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varDecl6118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef6176 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef6178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef6180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_fcnRefTypeList6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028001L});
    public static final BitSet FOLLOW_fcnRefTypes_in_fcnRefTypeList6214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_fcnRefTypeList6216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes6230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_fcnRefTypes6233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes6235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeName_in_varArray6276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_varArray6278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varArraySpec_in_varArray6280 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varArray6283 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_in_varArray6285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_varArraySpec6323 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000E00L});
    public static final BitSet FOLLOW_varDim_in_varArraySpec6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_varArraySpec6327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_expr_in_varDim6355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_initializer6375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_initializer6381 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_list_in_initializer6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_initializer6385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_initializer6388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list6402 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_initializer_list6405 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_in_initializer_list6407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_varBuiltInType_in_varDeclList6441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit2_in_varDeclList6446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_varDeclList6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit2_in_varDeclList6452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_userTypeName_in_varDeclList6459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit_in_varDeclList6464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_varDeclList6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit_in_varDeclList6470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_builtinType_in_varBuiltInType6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit26509 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit26511 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_varInit26513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit26542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit6573 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_varInit6575 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_varInit6577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit6606 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit6608 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_varInit6610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit6637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_builtinType6676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_builtinType6689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_builtinType6702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_builtinType6715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_builtinType6727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_builtinType6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_builtinType6754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_builtinType6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_builtinType6778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualName6824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_qualNameList_in_qualName6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_qualNameList6855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_qualNameList6871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_138_in_arrayLit6903 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800081L,0x0080200080000800L});
    public static final BitSet FOLLOW_arrayLitList_in_arrayLit6905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_arrayLit6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList6929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_arrayLitList6932 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800081L,0x0080200080000000L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList6934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_primitiveLit_in_arrayLitElem6958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedConstant_in_arrayLitElem6962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_namedConstant6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_boolLit6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_nullLit7002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_numLit7019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_numLit7028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LIT_in_numLit7037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_numLit7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolLit_in_primitiveLit7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numLit_in_primitiveLit7090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullLit_in_primitiveLit7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_primitiveLit7129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_primitiveLit7157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_stmtInjection7192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_stmtInjection7198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_INJECT_in_injectionCode7238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_injectionDecl7270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_delim7308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_delim7312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_delim7323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_delim7347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_synpred1_pollen675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtExport_in_synpred4_pollen884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred6_pollen1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred8_pollen1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred11_pollen1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred12_pollen1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delim_in_synpred16_pollen1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred17_pollen1303 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred17_pollen1305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_INT_LIT_in_synpred17_pollen1307 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_synpred17_pollen1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delim_in_synpred18_pollen1338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_synpred24_pollen1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred26_pollen1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaArguments_in_synpred27_pollen1631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_synpred31_pollen1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000002200000000L});
    public static final BitSet FOLLOW_importList_in_synpred31_pollen1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_synpred31_pollen1813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0F2001C000028000L});
    public static final BitSet FOLLOW_metaParmsInstantiate_in_synpred31_pollen1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_synpred31_pollen1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_synpred32_pollen1833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000002200000000L});
    public static final BitSet FOLLOW_importList_in_synpred32_pollen1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x4000000000000000L});
    public static final BitSet FOLLOW_braceOpen_in_synpred32_pollen1851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100001L,0x0F2001C000028000L,0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_synpred32_pollen1853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_braceClose_in_synpred32_pollen1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred38_pollen2074 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800081L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_synpred38_pollen2076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred38_pollen2080 = new BitSet(new long[]{0x2000000000000800L,0x0000000044800081L,0x0EA021C080028000L});
    public static final BitSet FOLLOW_metaArgument_in_synpred38_pollen2082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred38_pollen2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_synpred41_pollen2271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_synpred42_pollen2291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred43_pollen2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_synpred44_pollen2327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_synpred45_pollen2345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred49_pollen2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred53_pollen2523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred72_pollen2725 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred72_pollen2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred73_pollen2722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred73_pollen2725 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred73_pollen2727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_exprLogicalOr_in_synpred74_pollen2766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred74_pollen2768 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred74_pollen2770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_synpred74_pollen2772 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred74_pollen2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_synpred75_pollen2829 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_synpred75_pollen2831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred76_pollen2882 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_synpred76_pollen2884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_synpred77_pollen2933 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_synpred77_pollen2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_synpred78_pollen2983 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_synpred78_pollen2985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_synpred79_pollen3033 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprEquality_in_synpred79_pollen3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityOp_in_synpred80_pollen3084 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprRelational_in_synpred80_pollen3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred81_pollen3135 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprShift_in_synpred81_pollen3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred82_pollen3187 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprAddSub_in_synpred82_pollen3190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addSubOp_in_synpred83_pollen3239 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprMultDiv_in_synpred83_pollen3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multDivModOp_in_synpred84_pollen3296 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_exprUnary_in_synpred84_pollen3298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred92_pollen3496 = new BitSet(new long[]{0x0000000000002000L,0x0000000000000020L});
    public static final BitSet FOLLOW_incDecOp_in_synpred92_pollen3498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred93_pollen3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred103_pollen3821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_synpred103_pollen3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred104_pollen3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred105_pollen3914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred107_pollen3983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_synpred107_pollen3985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_130_in_synpred107_pollen3988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0E2001C000028000L});
    public static final BitSet FOLLOW_typeName_in_synpred107_pollen3990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_128_in_synpred107_pollen3994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_qualName_in_synpred107_pollen3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred114_pollen4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred116_pollen4318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred117_pollen4312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred117_pollen4314 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred117_pollen4316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred117_pollen4318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred118_pollen4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred119_pollen4370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred119_pollen4372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred119_pollen4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_synpred120_pollen4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred121_pollen4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred122_pollen4433 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred122_pollen4435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred122_pollen4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred123_pollen4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_synpred125_pollen4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred126_pollen4525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred126_pollen4527 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred126_pollen4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_synpred127_pollen4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred128_pollen4638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_synpred129_pollen4638 = new BitSet(new long[]{0x2000000000002C02L,0x80000000449042E1L,0x7EF531CD8163C600L});
    public static final BitSet FOLLOW_NL_in_synpred130_pollen4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDecl_in_synpred131_pollen4681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_synpred132_pollen4687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_synpred134_pollen4697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_synpred146_pollen4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred147_pollen4792 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred147_pollen4794 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred147_pollen4796 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_synpred147_pollen4798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_synpred148_pollen4833 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred148_pollen4835 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred148_pollen4837 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_synpred148_pollen4840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred149_pollen4875 = new BitSet(new long[]{0x0000000000008390L,0x0000000088060400L});
    public static final BitSet FOLLOW_assignOp_in_synpred149_pollen4877 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred149_pollen4879 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_synpred149_pollen4882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred154_pollen5108 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred154_pollen5111 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred154_pollen5115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred154_pollen5118 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred154_pollen5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_128_in_synpred154_pollen5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000010100000L});
    public static final BitSet FOLLOW_delim_in_synpred154_pollen5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred157_pollen5414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred157_pollen5416 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred157_pollen5418 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred157_pollen5420 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred157_pollen5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred161_pollen5619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred162_pollen5654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred170_pollen6041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred170_pollen6043 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred170_pollen6046 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred170_pollen6048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred170_pollen6052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred171_pollen6065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred171_pollen6067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred171_pollen6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred172_pollen6082 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_synpred172_pollen6084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred173_pollen6099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit_in_synpred173_pollen6101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_synpred177_pollen6323 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000E00L});
    public static final BitSet FOLLOW_varDim_in_synpred177_pollen6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred177_pollen6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred181_pollen6405 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x4080300080000600L});
    public static final BitSet FOLLOW_initializer_in_synpred181_pollen6407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred182_pollen6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit2_in_synpred182_pollen6452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_synpred184_pollen6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varInit_in_synpred184_pollen6470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred185_pollen6509 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred185_pollen6511 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred185_pollen6513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred186_pollen6573 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_synpred186_pollen6575 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred186_pollen6577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred187_pollen6606 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred187_pollen6608 = new BitSet(new long[]{0x2000000000002C00L,0x80000000448042E1L,0x0080300080000600L});
    public static final BitSet FOLLOW_expr_in_synpred187_pollen6610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameList_in_synpred196_pollen6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred197_pollen6855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_synpred197_pollen6871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred209_pollen7198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred210_pollen7312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred211_pollen7308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_synpred211_pollen7312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_synpred212_pollen7323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred213_pollen7323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_NL_in_synpred215_pollen7337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred215_pollen7341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred216_pollen7347 = new BitSet(new long[]{0x0000000000000002L});

}