// $ANTLR 3.4 /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g 2014-12-19 02:21:58

    package com.amaret.pollen.parser;
    import java.util.EnumSet;
    import java.util.ArrayList;
    import java.lang.*;
    import java.io.*;
    import com.amaret.pollen.parser.*;
    import com.amaret.pollen.driver.ProcessUnits;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class pollenParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_EQ", "ASSIGN", "BIND", "BITAND_EQ", "BITOR_EQ", "BITXOR_EQ", "BIT_NOT", "BRACE_CL", "BRACE_OP", "CHAR", "COM", "D", "DEC", "DELIM", "DIV_EQ", "D_ARG", "D_ARR", "D_ARR_DIM", "D_CLASS", "D_COMPOSITION", "D_ENUM", "D_ENUMVAL", "D_FCN_CTOR", "D_FCN_DCL", "D_FCN_DEF", "D_FCN_REF", "D_FCN_TYP_NM", "D_FIELD", "D_FORMAL", "D_INJ", "D_INSTANCE", "D_META", "D_MODULE", "D_PROTOCOL", "D_VAR", "E", "EQ", "EXPORT", "E_ADDR", "E_BINARY", "E_CALL", "E_CONST", "E_EXPR", "E_HASH", "E_IDENT", "E_INDEX", "E_INJ", "E_NEW", "E_PAREN", "E_QUEST", "E_SELF", "E_TYP", "E_UNARY", "E_VEC", "FCNBODY", "GT", "GT_EQ", "H", "HEX_LIT", "HOST", "I", "IDENT", "IJ_BEG", "IJ_END", "ILLEGAL_CHARACTER", "IMPORT", "INC", "INJECT", "INT_LIT", "LIST", "LOG_NOT", "LSHFT_EQ", "LT", "LT_EQ", "LU", "MINUS", "ML_COMMENT", "MODULE", "MOD_EQ", "MULCOM", "MULCOM1", "MUL_EQ", "NEWLINE", "NIL", "NLL", "NOT_EQ", "O", "OCT_LIT", "PEG", "PLUS", "QNAME", "REAL_LIT", "RSHFT_EQ", "SEMI", "SLCOM1", "SLCOM2", "SLCOM3", "SL_COMMENT", "STRING", "SUB_EQ", "S_ASSIGN", "S_BIND", "S_BLOCK", "S_BREAK", "S_CASE", "S_CONTINUE", "S_DECL", "S_ELIF", "S_EXPR", "S_FOR", "S_FOREACH", "S_IF", "S_INJ", "S_PACKAGE", "S_PEG", "S_PRINT", "S_PROVIDED", "S_RETURN", "S_SWITCH", "S_WHILE", "THIS", "T_ARR", "T_LST", "T_STD", "T_USR", "UNIT", "VOID", "WS", "'%'", "'&&'", "'&'", "'('", "')'", "'*'", "','", "'.'", "'/'", "':'", "'<<'", "'>>'", "'?'", "'@'", "'['", "']'", "'^'", "'as'", "'bool'", "'break'", "'byte'", "'case'", "'class'", "'composition'", "'const'", "'continue'", "'default'", "'do'", "'elif'", "'else'", "'enum'", "'err'", "'export'", "'extends'", "'false'", "'for'", "'from'", "'host'", "'if'", "'implements'", "'import'", "'int16'", "'int32'", "'int8'", "'log'", "'meta'", "'module'", "'new'", "'null'", "'out'", "'package'", "'preset'", "'print'", "'protocol'", "'provided'", "'public'", "'real'", "'return'", "'string'", "'switch'", "'true'", "'type'", "'uint16'", "'uint32'", "'uint8'", "'volatile'", "'while'", "'|'", "'||'"
    };

    public static final int EOF=-1;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int ADD_EQ=4;
    public static final int ASSIGN=5;
    public static final int BIND=6;
    public static final int BITAND_EQ=7;
    public static final int BITOR_EQ=8;
    public static final int BITXOR_EQ=9;
    public static final int BIT_NOT=10;
    public static final int BRACE_CL=11;
    public static final int BRACE_OP=12;
    public static final int CHAR=13;
    public static final int COM=14;
    public static final int D=15;
    public static final int DEC=16;
    public static final int DELIM=17;
    public static final int DIV_EQ=18;
    public static final int D_ARG=19;
    public static final int D_ARR=20;
    public static final int D_ARR_DIM=21;
    public static final int D_CLASS=22;
    public static final int D_COMPOSITION=23;
    public static final int D_ENUM=24;
    public static final int D_ENUMVAL=25;
    public static final int D_FCN_CTOR=26;
    public static final int D_FCN_DCL=27;
    public static final int D_FCN_DEF=28;
    public static final int D_FCN_REF=29;
    public static final int D_FCN_TYP_NM=30;
    public static final int D_FIELD=31;
    public static final int D_FORMAL=32;
    public static final int D_INJ=33;
    public static final int D_INSTANCE=34;
    public static final int D_META=35;
    public static final int D_MODULE=36;
    public static final int D_PROTOCOL=37;
    public static final int D_VAR=38;
    public static final int E=39;
    public static final int EQ=40;
    public static final int EXPORT=41;
    public static final int E_ADDR=42;
    public static final int E_BINARY=43;
    public static final int E_CALL=44;
    public static final int E_CONST=45;
    public static final int E_EXPR=46;
    public static final int E_HASH=47;
    public static final int E_IDENT=48;
    public static final int E_INDEX=49;
    public static final int E_INJ=50;
    public static final int E_NEW=51;
    public static final int E_PAREN=52;
    public static final int E_QUEST=53;
    public static final int E_SELF=54;
    public static final int E_TYP=55;
    public static final int E_UNARY=56;
    public static final int E_VEC=57;
    public static final int FCNBODY=58;
    public static final int GT=59;
    public static final int GT_EQ=60;
    public static final int H=61;
    public static final int HEX_LIT=62;
    public static final int HOST=63;
    public static final int I=64;
    public static final int IDENT=65;
    public static final int IJ_BEG=66;
    public static final int IJ_END=67;
    public static final int ILLEGAL_CHARACTER=68;
    public static final int IMPORT=69;
    public static final int INC=70;
    public static final int INJECT=71;
    public static final int INT_LIT=72;
    public static final int LIST=73;
    public static final int LOG_NOT=74;
    public static final int LSHFT_EQ=75;
    public static final int LT=76;
    public static final int LT_EQ=77;
    public static final int LU=78;
    public static final int MINUS=79;
    public static final int ML_COMMENT=80;
    public static final int MODULE=81;
    public static final int MOD_EQ=82;
    public static final int MULCOM=83;
    public static final int MULCOM1=84;
    public static final int MUL_EQ=85;
    public static final int NEWLINE=86;
    public static final int NIL=87;
    public static final int NLL=88;
    public static final int NOT_EQ=89;
    public static final int O=90;
    public static final int OCT_LIT=91;
    public static final int PEG=92;
    public static final int PLUS=93;
    public static final int QNAME=94;
    public static final int REAL_LIT=95;
    public static final int RSHFT_EQ=96;
    public static final int SEMI=97;
    public static final int SLCOM1=98;
    public static final int SLCOM2=99;
    public static final int SLCOM3=100;
    public static final int SL_COMMENT=101;
    public static final int STRING=102;
    public static final int SUB_EQ=103;
    public static final int S_ASSIGN=104;
    public static final int S_BIND=105;
    public static final int S_BLOCK=106;
    public static final int S_BREAK=107;
    public static final int S_CASE=108;
    public static final int S_CONTINUE=109;
    public static final int S_DECL=110;
    public static final int S_ELIF=111;
    public static final int S_EXPR=112;
    public static final int S_FOR=113;
    public static final int S_FOREACH=114;
    public static final int S_IF=115;
    public static final int S_INJ=116;
    public static final int S_PACKAGE=117;
    public static final int S_PEG=118;
    public static final int S_PRINT=119;
    public static final int S_PROVIDED=120;
    public static final int S_RETURN=121;
    public static final int S_SWITCH=122;
    public static final int S_WHILE=123;
    public static final int THIS=124;
    public static final int T_ARR=125;
    public static final int T_LST=126;
    public static final int T_STD=127;
    public static final int T_USR=128;
    public static final int UNIT=129;
    public static final int VOID=130;
    public static final int WS=131;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public pollenParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public pollenParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[433+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return pollenParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g"; }



        private boolean isMetaInstance = false;
        private boolean isVoidInstance = false; // deferred instantiation: '{}'. No code gen.
        private boolean hasHostConstructor = false;  // constructors with 0 parms will by synthesized if not declared.
        private boolean hasTargetConstructor = false;
        private boolean instantiateToDefaults = false; // A meta type imported with no '{..}'
        private UnitNode client = null;
        private ImportNode clientImport = null;
        // Trigger meta instantiation via this constructor
        public pollenParser(TokenStream tokens, UnitNode cl, ImportNode cli) {
            this(tokens, new RecognizerSharedState());
            isMetaInstance = (cl != null && cli != null); 
            client = cl;
            clientImport = cli;
            isVoidInstance = (cli != null && cli.getMeta() != null && cli.getMeta().size() == 0);
            instantiateToDefaults = (cli != null && cli.getMeta() == null);
            ProcessUnits.setPollenPrintBindSeen(false);
        }
            
        EnumSet<Flags> featureFlags = EnumSet.noneOf(Flags.class); 
        EnumSet<Flags> metaFlags = EnumSet.noneOf(Flags.class); 
        EnumSet<Flags> stmtFlags = EnumSet.noneOf(Flags.class);
        EnumSet<Flags> typeMods = EnumSet.noneOf(Flags.class);
        
        private class TypeInfo {
            boolean hasHostCtor;
            boolean hasTargCtor;
            private EnumSet<Flags> uf = EnumSet.noneOf(Flags.class);
            private String tn = "";  
            public TypeInfo(boolean hostCtor, boolean targCtor) {
                    hasHostCtor = hostCtor;
                    hasTargCtor = targCtor;
            }
            public boolean getHostCtor() {
                return hasHostCtor;
            }
            public boolean getTargCtor() {
                return hasTargCtor;
            }
        
            public EnumSet<Flags> getUnitFlags() {
                if (tn.isEmpty()) // backtracking
                    return getParseUnitFlags();
                else
                    return uf;
            }    
            public void setUnitFlags(EnumSet<Flags> unitFlags) {
                uf.addAll(unitFlags);
            }    
            public String getTypeName() {
                if (tn.isEmpty()) // backtracking
                    return getParseUnitTypeName();
                else
                    return tn;
            }    
            public void setTypeName(String typeName) {
                this.tn = typeName;
            }    
        
        } // end private class TypeInfo    

        public String getParseUnitTypeName() {
             if (currType == null || typeInfoList.size() <= 0) {
                   ParseUnit.current().reportFailure("invalid request");
            }
            String n = typeInfoList.get(typeInfoList.size()-1).getTypeName();
            if (n.isEmpty())
                ParseUnit.current().reportFailure("invalid request");
            return  n;
                
        }
        /**
         *  Use this for DeclNode constructors. 
         */ 
        public EnumSet<Flags> getParseUnitFlags() {
            if (currType == null) {
                ParseUnit.current().reportFailure("invalid request");
            }
            if (typeInfoList.size() <= 0) {
            return EnumSet.noneOf(Flags.class);
            }
            // Get requested flags from type info list, not the current type info object,
            // as the latter can be accessed while backtracking giving invalid flags. 
            TypeInfo ti = typeInfoList.get(typeInfoList.size()-1);
            return ti.getUnitFlags();
        }
        
        private ArrayList<TypeInfo> typeInfoList = new ArrayList<TypeInfo>();
        private TypeInfo currType;

        // currType has info for the type encountered (including while backtracking)
        // but if backtracking don't push currType on the stack.
        // It turns out '@init' code is exec'd when backtracking but '@after' code is not.
        // so this keeps stack integrity. See 
        // http://www.antlr3.org/pipermail/antlr-interest/2010-April/038320.html
        // Perhaps I could avoid this gating if I called these routines in the
        // action not the @init code.
        
        private void pushType() {

          currType = new TypeInfo(hasHostConstructor, hasTargetConstructor);
          // Needs to be gated by backtracking state.
          // If backtracking state > 0 this could be exec'd
          // more than once for a single type.
          if ( state.backtracking==0 ) {
                typeInfoList.add(currType);        
                   currType.setUnitFlags(metaFlags); 
                   metaFlags = EnumSet.noneOf(Flags.class);        
          }
        }
        private void popType() {
            // currType is on the stack only when we are not backtracking.
            if (typeInfoList.size() <= 0) {
                ParseUnit.current().reportFailure("invalid request");
            }
            if ( state.backtracking==0 ) {
                       currType = typeInfoList.remove(typeInfoList.size()-1); // pop
                       hasHostConstructor = currType.getHostCtor();
                       hasTargetConstructor = currType.getTargCtor();
            }
            if (typeInfoList.size() > 0) {
            currType = typeInfoList.get(typeInfoList.size()-1);
            }
        }
        
        // decode text into literal value for enums. handles hex, octal, decimal, etc. 
        int decode(org.antlr.runtime.CommonToken t) {
                
            try {
                int i = Integer.decode(t.getText());
                if (i < 0)
                    ParseUnit.current().reportError(t, "enum values cannot be negative");
                else {
                    byte b = (byte) i;
                    if (b != i &&  i != 0x80)
                            ParseUnit.current().reportError(t, "enum values must fit in 8 bits");
                    }
                return (i & 0xFF);
            } catch (NumberFormatException e) {
                ParseUnit.current().reportError(t, "number format error for enum value " + t.getText());    
                return 0;
            }
        }    
           
        public int getParserTypeInfoListSize() {
            return typeInfoList.size();
        }
        
        String getInject(String text) {
            return text.substring(text.indexOf("+{")+2,text.lastIndexOf("}+"));
        }
        
        void handleIntrinsics(CommonTree t) {
            if (t.getText().indexOf('.') == -1) 
                return;
            char c = t.getText().charAt(0);
            switch (c) {
            case 'p':
                String s = t.getText();             
                if (s.substring(0, s.indexOf('.')).equals("pollen")) {
                    s = s.replaceFirst("\\.", "__");
                    t.getToken().setText(s);
                }       
                break;
            default:
                break;        
            }    
        }

        
        void DBG(String dbg) {
            System.out.println(dbg);
        }
            /**
             * Synthesize tree to handle qualified pollen names in injected text. 
        * @param root
        * @param inject
        * @return the root of the synthesized tree.
        */
        private BaseNode addInjectChild(BaseNode root, TypedInject inject) {

            root = (root == null) ? (BaseNode)adaptor.nil() : root;
            if (inject.isName()) {
                BaseNode id =  (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , (BaseNode) adaptor.nil());
                        adaptor.addChild(root, id);
                        adaptor.addChild(id, 
                        (BaseNode)adaptor.create(pollenParser.IDENT, (inject.getText())));
            }
            else {
                adaptor.addChild(root, 
                        (BaseNode)adaptor.create(INJECT, (inject.getText())));
            }
            root = (BaseNode)adaptor.rulePostProcessing(root);
            return root;
        }
        class TypedInject {
            private boolean isName = false;
            public boolean isName() {
                return isName;
        }
        public String getText() {
                return text;
        }
        private String text = "";
            public TypedInject(String str,boolean name) {
                text = str;
                isName = name;
            }
        }

                /**
                 * Split the text that was injected into a list of IDENT and INJECT nodes.
                 * The IDENTs will be emitted as pollen names formatted for output.
                 * @param root
                 * @param inject
                 * @return a BaseNode with child nodes for the injects or names in the order encountered.
                 */
                public BaseNode createInjectNodes(BaseNode root, String inject) {
                    final char BT = '`';
                    if (inject.indexOf(BT) == -1) {
                        return addInjectChild(root, new TypedInject(inject, false));
                        
                    }
                    List<TypedInject> l = new ArrayList<TypedInject>();
                    int startBT = 0;
                    int endBT = 0;
                    String name = "", data = "";
                    while (true) {
                        startBT = inject.indexOf(BT);
                        endBT = inject.indexOf(BT, startBT+1);

                        if (startBT > 0) { // data
                            l.add(new TypedInject(inject.substring(0, startBT), false));
                        } 
                        else if (startBT == -1) { // remaining inject is all data
                            endBT = -1;
                            l.add(new TypedInject(inject, false));
                        } 

                        if (endBT == -1)
                            break; 
                        l.add(new TypedInject(inject.substring(startBT+1, endBT), true));// a pollen name
                        inject = inject.substring(endBT+1);
                    }
                    
                    for (TypedInject t : l) {
                        addInjectChild(root, t);
                    }
                    return root;
                }

        // Override to extract PollenException message when present
        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
            String hdr = getErrorHeader(e);
            String msg = getErrorMessage(e, tokenNames);
            if ( e instanceof PollenException) {
                        msg = e.toString();
            }
            hdr = pollenLexer.getFileName()+ ", " + hdr;
            emitErrorMessage(hdr+" "+msg);       
            if (msg.matches(".*mismatched input.*"))
               ParseUnit.current().reportFailure("Illegal program");

            
        }

        String pkgName;
        void DBG_LT() {
          System.out.print("LT: "); 
            if (input.LT(0) != null) System.out.print(input.LT(0).getText() + ", "); 
            if (input.LT(1) != null) System.out.print(input.LT(1).getText() + ", "); 
            if (input.LT(2) != null) System.out.print(input.LT(2).getText() + ", "); 
            System.out.println();
        }
        /** A mismatched char or Token or tree node */
        public class PollenException extends RecognitionException {
            
            String msg;

            public PollenException(String m, IntStream input) {
                super(input);
                msg = m;
            }
            public String toString() {
                return "PollenException(" + msg + ")";
            }
        }
        public class PollenFatalException extends Exception {
            String msg;

            public PollenFatalException(String m) {
                msg = m;
            }
            public String toString() {
                return "PollenFatalException(" + msg + ")";
            }
        }
        public void reportFailure( Exception e )
        {
            ParseUnit.current().reportFailure(e);
        }


    public static class unit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:473:1: unit : ( NLL )? unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) ;
    public final pollenParser.unit_return unit() throws RecognitionException {
        pollenParser.unit_return retval = new pollenParser.unit_return();
        retval.start = input.LT(1);

        int unit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL1=null;
        pollenParser.unitPackage_return unitPackage2 =null;


        BaseNode NLL1_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_unitPackage=new RewriteRuleSubtreeStream(adaptor,"rule unitPackage");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:5: ( ( NLL )? unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:9: ( NLL )? unitPackage
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:9: ( NLL )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==NLL) ) {
                int LA1_1 = input.LA(2);

                if ( (synpred1_pollen()) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:10: NLL
                    {
                    NLL1=(Atom)match(input,NLL,FOLLOW_NLL_in_unit688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL1);


                    }
                    break;

            }


            pushFollow(FOLLOW_unitPackage_in_unit692);
            unitPackage2=unitPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitPackage.add(unitPackage2.getTree());

            // AST REWRITE
            // elements: unitPackage
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 474:30: -> ^( UNIT[\"UNIT\"] unitPackage )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:33: ^( UNIT[\"UNIT\"] unitPackage )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new UnitNode(UNIT, "UNIT")
                , root_1);

                adaptor.addChild(root_1, stream_unitPackage.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, unit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "unit"


    protected static class unitPackage_scope {
        Object unitImports;
    }
    protected Stack unitPackage_stack = new Stack();


    public static class unitPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitPackage"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:476:1: unitPackage : stmtPackage importList importIntrinsicPrint stmtInjectionList unitTypeDefinition stmtInjectionList ( NLL )? pollenEOF -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList ;
    public final pollenParser.unitPackage_return unitPackage() throws RecognitionException {
        unitPackage_stack.push(new unitPackage_scope());
        pollenParser.unitPackage_return retval = new pollenParser.unitPackage_return();
        retval.start = input.LT(1);

        int unitPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL9=null;
        pollenParser.stmtPackage_return stmtPackage3 =null;

        pollenParser.importList_return importList4 =null;

        pollenParser.importIntrinsicPrint_return importIntrinsicPrint5 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList6 =null;

        pollenParser.unitTypeDefinition_return unitTypeDefinition7 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList8 =null;

        pollenParser.pollenEOF_return pollenEOF10 =null;


        BaseNode NLL9_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtPackage=new RewriteRuleSubtreeStream(adaptor,"rule stmtPackage");
        RewriteRuleSubtreeStream stream_pollenEOF=new RewriteRuleSubtreeStream(adaptor,"rule pollenEOF");
        RewriteRuleSubtreeStream stream_stmtInjectionList=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjectionList");
        RewriteRuleSubtreeStream stream_importList=new RewriteRuleSubtreeStream(adaptor,"rule importList");
        RewriteRuleSubtreeStream stream_unitTypeDefinition=new RewriteRuleSubtreeStream(adaptor,"rule unitTypeDefinition");
        RewriteRuleSubtreeStream stream_importIntrinsicPrint=new RewriteRuleSubtreeStream(adaptor,"rule importIntrinsicPrint");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:480:5: ( stmtPackage importList importIntrinsicPrint stmtInjectionList unitTypeDefinition stmtInjectionList ( NLL )? pollenEOF -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:480:17: stmtPackage importList importIntrinsicPrint stmtInjectionList unitTypeDefinition stmtInjectionList ( NLL )? pollenEOF
            {
            pushFollow(FOLLOW_stmtPackage_in_unitPackage738);
            stmtPackage3=stmtPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtPackage.add(stmtPackage3.getTree());

            pushFollow(FOLLOW_importList_in_unitPackage756);
            importList4=importList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importList.add(importList4.getTree());

            if ( state.backtracking==0 ) {((unitPackage_scope)unitPackage_stack.peek()).unitImports = (importList4!=null?((BaseNode)importList4.tree):null);}

            pushFollow(FOLLOW_importIntrinsicPrint_in_unitPackage792);
            importIntrinsicPrint5=importIntrinsicPrint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importIntrinsicPrint.add(importIntrinsicPrint5.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage813);
            stmtInjectionList6=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtInjectionList.add(stmtInjectionList6.getTree());

            pushFollow(FOLLOW_unitTypeDefinition_in_unitPackage835);
            unitTypeDefinition7=unitTypeDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitTypeDefinition.add(unitTypeDefinition7.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage856);
            stmtInjectionList8=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtInjectionList.add(stmtInjectionList8.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:486:20: ( NLL )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==NLL) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:486:20: NLL
                    {
                    NLL9=(Atom)match(input,NLL,FOLLOW_NLL_in_unitPackage877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL9);


                    }
                    break;

            }


            pushFollow(FOLLOW_pollenEOF_in_unitPackage899);
            pollenEOF10=pollenEOF();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pollenEOF.add(pollenEOF10.getTree());

            // AST REWRITE
            // elements: stmtInjectionList, stmtInjectionList, stmtPackage, unitTypeDefinition, importList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 488:24: -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList
            {
                adaptor.addChild(root_0, stream_stmtPackage.nextTree());

                adaptor.addChild(root_0, stream_importList.nextTree());

                adaptor.addChild(root_0, stream_stmtInjectionList.nextTree());

                adaptor.addChild(root_0, stream_unitTypeDefinition.nextTree());

                adaptor.addChild(root_0, stream_stmtInjectionList.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, unitPackage_StartIndex); }

            unitPackage_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitPackage"


    public static class pollenEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pollenEOF"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:490:1: pollenEOF : EOF !;
    public final pollenParser.pollenEOF_return pollenEOF() throws RecognitionException {
        pollenParser.pollenEOF_return retval = new pollenParser.pollenEOF_return();
        retval.start = input.LT(1);

        int pollenEOF_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom EOF11=null;

        BaseNode EOF11_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:491:5: ( EOF !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:491:10: EOF !
            {
            root_0 = (BaseNode)adaptor.nil();


            EOF11=(Atom)match(input,EOF,FOLLOW_EOF_in_pollenEOF954); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (java.lang.ClassCastException e) {

                //ignore: antlr bug

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, pollenEOF_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "pollenEOF"


    public static class stmtInjectionList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjectionList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:496:1: stmtInjectionList : ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) ;
    public final pollenParser.stmtInjectionList_return stmtInjectionList() throws RecognitionException {
        pollenParser.stmtInjectionList_return retval = new pollenParser.stmtInjectionList_return();
        retval.start = input.LT(1);

        int stmtInjectionList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtInjection_return stmtInjection12 =null;


        RewriteRuleSubtreeStream stream_stmtInjection=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjection");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:5: ( ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:6: ( stmtInjection )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:6: ( stmtInjection )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==INJECT) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:7: stmtInjection
            	    {
            	    pushFollow(FOLLOW_stmtInjection_in_stmtInjectionList978);
            	    stmtInjection12=stmtInjection();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtInjection.add(stmtInjection12.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtInjection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 497:23: -> ^( LIST[\"LIST\"] ( stmtInjection )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:26: ^( LIST[\"LIST\"] ( stmtInjection )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:51: ( stmtInjection )*
                while ( stream_stmtInjection.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtInjection.nextTree());

                }
                stream_stmtInjection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, stmtInjectionList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjectionList"


    public static class stmtPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPackage"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:499:1: stmtPackage : ( 'package' qualName NLL -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) );
    public final pollenParser.stmtPackage_return stmtPackage() throws RecognitionException {
        pollenParser.stmtPackage_return retval = new pollenParser.stmtPackage_return();
        retval.start = input.LT(1);

        int stmtPackage_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal13=null;
        Atom NLL15=null;
        pollenParser.qualName_return qualName14 =null;


        BaseNode string_literal13_tree=null;
        BaseNode NLL15_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");

           String pkg = ParseUnit.mkPackageName(ParseUnit.current().getCurrPath());

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:5: ( 'package' qualName NLL -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==182) ) {
                alt4=1;
            }
            else if ( (LA4_0==EOF||LA4_0==INJECT||LA4_0==NLL||(LA4_0 >= 154 && LA4_0 <= 155)||LA4_0==162||LA4_0==168||LA4_0==172||(LA4_0 >= 177 && LA4_0 <= 178)||LA4_0==185) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:7: 'package' qualName NLL
                    {
                    string_literal13=(Atom)match(input,182,FOLLOW_182_in_stmtPackage1014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(string_literal13);


                    pushFollow(FOLLOW_qualName_in_stmtPackage1016);
                    qualName14=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName14.getTree());

                    NLL15=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtPackage1018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL15);


                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 503:33: -> ^( S_PACKAGE[pkg] qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:36: ^( S_PACKAGE[pkg] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:504:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 504:10: -> ^( S_PACKAGE[pkg] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:504:13: ^( S_PACKAGE[pkg] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, stmtPackage_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPackage"


    public static class stmtExport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtExport"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:506:1: stmtExport : 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) ;
    public final pollenParser.stmtExport_return stmtExport() throws RecognitionException {
        pollenParser.stmtExport_return retval = new pollenParser.stmtExport_return();
        retval.start = input.LT(1);

        int stmtExport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal16=null;
        pollenParser.qualName_return qualName17 =null;

        pollenParser.delim_return delim18 =null;


        BaseNode string_literal16_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:507:5: ( 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:507:9: 'export' qualName delim
            {
            string_literal16=(Atom)match(input,164,FOLLOW_164_in_stmtExport1065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal16);


            pushFollow(FOLLOW_qualName_in_stmtExport1067);
            qualName17=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName17.getTree());

            pushFollow(FOLLOW_delim_in_stmtExport1069);
            delim18=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim18.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 507:33: -> ^( EXPORT[\"EXPORT\"] qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:507:36: ^( EXPORT[\"EXPORT\"] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExportNode(EXPORT, "EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, stmtExport_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtExport"


    public static class classDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:509:1: classDefinition : 'class' IDENT extendsClause implementsClause braceOpen classFeatureList[name] ( NLL )? braceClose -> ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause ) ;
    public final pollenParser.classDefinition_return classDefinition() throws RecognitionException {
        pollenParser.classDefinition_return retval = new pollenParser.classDefinition_return();
        retval.start = input.LT(1);

        int classDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal19=null;
        Atom IDENT20=null;
        Atom NLL25=null;
        pollenParser.extendsClause_return extendsClause21 =null;

        pollenParser.implementsClause_return implementsClause22 =null;

        pollenParser.braceOpen_return braceOpen23 =null;

        pollenParser.classFeatureList_return classFeatureList24 =null;

        pollenParser.braceClose_return braceClose26 =null;


        BaseNode string_literal19_tree=null;
        BaseNode IDENT20_tree=null;
        BaseNode NLL25_tree=null;
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_classFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule classFeatureList");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";
                String name = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:518:5: ( 'class' IDENT extendsClause implementsClause braceOpen classFeatureList[name] ( NLL )? braceClose -> ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:518:10: 'class' IDENT extendsClause implementsClause braceOpen classFeatureList[name] ( NLL )? braceClose
            {
            string_literal19=(Atom)match(input,154,FOLLOW_154_in_classDefinition1110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal19);


            IDENT20=(Atom)match(input,IDENT,FOLLOW_IDENT_in_classDefinition1112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT20);


            if ( state.backtracking==0 ) { 
                              currType.setTypeName((IDENT20!=null?IDENT20.getText():null)); currType.setUnitFlags(EnumSet.of(Flags.CLASS));
                              if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                              // if there is an 'as' name in the instantiating context, qualify the unit name 
                              qual = clientImport.getAs().getText();
                          }
                          name = qual.isEmpty() ? currType.getTypeName() : qual;
                      }

            pushFollow(FOLLOW_extendsClause_in_classDefinition1135);
            extendsClause21=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause21.getTree());

            pushFollow(FOLLOW_implementsClause_in_classDefinition1145);
            implementsClause22=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause22.getTree());

            pushFollow(FOLLOW_braceOpen_in_classDefinition1155);
            braceOpen23=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen23.getTree());

            pushFollow(FOLLOW_classFeatureList_in_classDefinition1157);
            classFeatureList24=classFeatureList(name);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFeatureList.add(classFeatureList24.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:42: ( NLL )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==NLL) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:42: NLL
                    {
                    NLL25=(Atom)match(input,NLL,FOLLOW_NLL_in_classDefinition1160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL25);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_classDefinition1163);
            braceClose26=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose26.getTree());

            // AST REWRITE
            // elements: implementsClause, IDENT, extendsClause, classFeatureList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 530:9: -> ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:530:12: ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Class(D_CLASS, "D_CLASS", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_classFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, classDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classDefinition"


    public static class classFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:533:1: classFeatureList[String n] : ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy ) ;
    public final pollenParser.classFeatureList_return classFeatureList(String n) throws RecognitionException {
        pollenParser.classFeatureList_return retval = new pollenParser.classFeatureList_return();
        retval.start = input.LT(1);

        int classFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.classFeature_return classFeature27 =null;

        pollenParser.classHostCtor_return classHostCtor28 =null;

        pollenParser.classTargCtor_return classTargCtor29 =null;

        pollenParser.intrinsicUnitName_return intrinsicUnitName30 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy31 =null;


        RewriteRuleSubtreeStream stream_intrinsicUnitName=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicUnitName");
        RewriteRuleSubtreeStream stream_classTargCtor=new RewriteRuleSubtreeStream(adaptor,"rule classTargCtor");
        RewriteRuleSubtreeStream stream_classFeature=new RewriteRuleSubtreeStream(adaptor,"rule classFeature");
        RewriteRuleSubtreeStream stream_classHostCtor=new RewriteRuleSubtreeStream(adaptor,"rule classHostCtor");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");

          EnumSet<Flags> fh = EnumSet.noneOf(Flags.class);
          fh.add(Flags.CONSTRUCTOR); fh.add(Flags.HOST);
          EnumSet<Flags> ft = EnumSet.noneOf(Flags.class);
          ft.add(Flags.CONSTRUCTOR); 

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:5: ( ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:10: ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:10: ( classFeature )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==IDENT||LA6_0==INJECT||LA6_0==135||LA6_0==150||LA6_0==152||LA6_0==154||LA6_0==156||LA6_0==162||LA6_0==169||(LA6_0 >= 173 && LA6_0 <= 175)||LA6_0==179||LA6_0==183||(LA6_0 >= 187 && LA6_0 <= 188)||LA6_0==190||(LA6_0 >= 194 && LA6_0 <= 197)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:10: classFeature
            	    {
            	    pushFollow(FOLLOW_classFeature_in_classFeatureList1235);
            	    classFeature27=classFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFeature.add(classFeature27.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            pushFollow(FOLLOW_classHostCtor_in_classFeatureList1238);
            classHostCtor28=classHostCtor(fh);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classHostCtor.add(classHostCtor28.getTree());

            pushFollow(FOLLOW_classTargCtor_in_classFeatureList1241);
            classTargCtor29=classTargCtor(ft);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classTargCtor.add(classTargCtor29.getTree());

            pushFollow(FOLLOW_intrinsicUnitName_in_classFeatureList1248);
            intrinsicUnitName30=intrinsicUnitName(n);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicUnitName.add(intrinsicUnitName30.getTree());

            pushFollow(FOLLOW_intrinsicPrintProxy_in_classFeatureList1251);
            intrinsicPrintProxy31=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy31.getTree());

            // AST REWRITE
            // elements: intrinsicUnitName, classHostCtor, classTargCtor, classFeature, intrinsicPrintProxy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 541:13: -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:541:16: ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:542:33: ( classFeature )*
                while ( stream_classFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFeature.nextTree());

                }
                stream_classFeature.reset();

                adaptor.addChild(root_1, stream_classHostCtor.nextTree());

                adaptor.addChild(root_1, stream_classTargCtor.nextTree());

                adaptor.addChild(root_1, stream_intrinsicUnitName.nextTree());

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, classFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeatureList"


    public static class classFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:548:1: classFeature : ( fcnDefinition | enumDefinition | fieldDeclaration | classDefinition | injectionDecl );
    public final pollenParser.classFeature_return classFeature() throws RecognitionException {
        pollenParser.classFeature_return retval = new pollenParser.classFeature_return();
        retval.start = input.LT(1);

        int classFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition32 =null;

        pollenParser.enumDefinition_return enumDefinition33 =null;

        pollenParser.fieldDeclaration_return fieldDeclaration34 =null;

        pollenParser.classDefinition_return classDefinition35 =null;

        pollenParser.injectionDecl_return injectionDecl36 =null;




            featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:5: ( fcnDefinition | enumDefinition | fieldDeclaration | classDefinition | injectionDecl )
            int alt7=5;
            switch ( input.LA(1) ) {
            case 187:
                {
                int LA7_1 = input.LA(2);

                if ( (synpred7_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred8_pollen()) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
            case 135:
            case 150:
            case 152:
            case 169:
            case 173:
            case 174:
            case 175:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
                {
                int LA7_4 = input.LA(2);

                if ( (synpred7_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred9_pollen()) ) {
                    alt7=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 4, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                alt7=2;
                }
                break;
            case 183:
                {
                alt7=1;
                }
                break;
            case 156:
            case 179:
            case 197:
                {
                alt7=3;
                }
                break;
            case 154:
                {
                alt7=4;
                }
                break;
            case INJECT:
                {
                alt7=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:9: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_classFeature1471);
                    fcnDefinition32=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition32.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:553:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_classFeature1482);
                    enumDefinition33=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition33.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:554:9: fieldDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fieldDeclaration_in_classFeature1492);
                    fieldDeclaration34=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration34.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:555:9: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_classFeature1502);
                    classDefinition35=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition35.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:556:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_classFeature1512);
                    injectionDecl36=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl36.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, classFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classFeature"


    public static class classHostCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classHostCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:559:1: classHostCtor[EnumSet<Flags> fh] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.classHostCtor_return classHostCtor(EnumSet<Flags> fh) throws RecognitionException {
        pollenParser.classHostCtor_return retval = new pollenParser.classHostCtor_return();
        retval.start = input.LT(1);

        int classHostCtor_StartIndex = input.index();

        BaseNode root_0 = null;


            featureFlags = fh.clone();    
            if (!hasHostConstructor) {
                fh.add(Flags.PUBLIC);
                fh.add(Flags.CONSTRUCTOR);
            }
            

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==NLL) ) {
                int LA8_1 = input.LA(2);

                if ( ((((!hasHostConstructor )&&(!hasHostConstructor ))&&synpred11_pollen())) ) {
                    alt8=1;
                }
                else if ( (true) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA8_0==BRACE_CL) ) {
                int LA8_2 = input.LA(2);

                if ( ((((!hasHostConstructor )&&(!hasHostConstructor ))&&synpred11_pollen())) ) {
                    alt8=1;
                }
                else if ( (true) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:11: {...}?
                    {
                    if ( !((!hasHostConstructor )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "classHostCtor", "!hasHostConstructor ");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 568:35: -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:569:13: ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", fh)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:570:13: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:571:17: ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", fh)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:572:21: ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:572:46: ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_CLASS_HOST)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:574:13: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:575:13: ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", fh)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:17: ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:13: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:44: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:70: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:580:7: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 580:7: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, classHostCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classHostCtor"


    public static class classTargCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classTargCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:582:1: classTargCtor[EnumSet<Flags> ft] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.classTargCtor_return classTargCtor(EnumSet<Flags> ft) throws RecognitionException {
        pollenParser.classTargCtor_return retval = new pollenParser.classTargCtor_return();
        retval.start = input.LT(1);

        int classTargCtor_StartIndex = input.index();

        BaseNode root_0 = null;


            featureFlags = ft.clone();
            if (!hasTargetConstructor) {
                ft.add(Flags.PUBLIC);
                ft.add(Flags.CONSTRUCTOR);
            }

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:590:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==NLL) ) {
                int LA9_1 = input.LA(2);

                if ( (((synpred12_pollen()&&synpred12_pollen())&&(!hasTargetConstructor))) ) {
                    alt9=1;
                }
                else if ( (true) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA9_0==BRACE_CL) ) {
                int LA9_2 = input.LA(2);

                if ( (((synpred12_pollen()&&synpred12_pollen())&&(!hasTargetConstructor))) ) {
                    alt9=1;
                }
                else if ( (true) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:590:10: {...}?
                    {
                    if ( !((!hasTargetConstructor)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "classTargCtor", "!hasTargetConstructor");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 590:35: -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:591:17: ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", ft)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:592:17: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:593:21: ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", ft)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:594:25: ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:594:50: ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_CLASS_TARGET)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:596:17: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:597:17: ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", ft)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:598:21: ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:17: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:48: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:74: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:602:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 602:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, classTargCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classTargCtor"


    protected static class moduleDefinition_scope {
        Object moduleFeatureList;
    }
    protected Stack moduleDefinition_stack = new Stack();


    public static class moduleDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:611:1: moduleDefinition : 'module' IDENT extendsClause implementsClause ( NLL )? braceOpen moduleFeatureList[name] ( NLL )? braceClose -> ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause ) ;
    public final pollenParser.moduleDefinition_return moduleDefinition() throws RecognitionException {
        moduleDefinition_stack.push(new moduleDefinition_scope());
        pollenParser.moduleDefinition_return retval = new pollenParser.moduleDefinition_return();
        retval.start = input.LT(1);

        int moduleDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal37=null;
        Atom IDENT38=null;
        Atom NLL41=null;
        Atom NLL44=null;
        pollenParser.extendsClause_return extendsClause39 =null;

        pollenParser.implementsClause_return implementsClause40 =null;

        pollenParser.braceOpen_return braceOpen42 =null;

        pollenParser.moduleFeatureList_return moduleFeatureList43 =null;

        pollenParser.braceClose_return braceClose45 =null;


        BaseNode string_literal37_tree=null;
        BaseNode IDENT38_tree=null;
        BaseNode NLL41_tree=null;
        BaseNode NLL44_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_moduleFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeatureList");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";
                String name = "";
                hasHostConstructor = false;
                hasTargetConstructor = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:625:5: ( 'module' IDENT extendsClause implementsClause ( NLL )? braceOpen moduleFeatureList[name] ( NLL )? braceClose -> ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:625:10: 'module' IDENT extendsClause implementsClause ( NLL )? braceOpen moduleFeatureList[name] ( NLL )? braceClose
            {
            string_literal37=(Atom)match(input,178,FOLLOW_178_in_moduleDefinition2272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal37);


            IDENT38=(Atom)match(input,IDENT,FOLLOW_IDENT_in_moduleDefinition2274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT38);


            if ( state.backtracking==0 ) { 
                          currType.setTypeName((IDENT38!=null?IDENT38.getText():null)); currType.setUnitFlags(EnumSet.of(Flags.MODULE));
                          if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                              // if there is an 'as' name in the instantiating context, qualify the unit name 
                              qual = clientImport.getAs().getText();
                          }
                          name = qual.isEmpty() ? currType.getTypeName() : qual;
                      }

            pushFollow(FOLLOW_extendsClause_in_moduleDefinition2298);
            extendsClause39=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause39.getTree());

            pushFollow(FOLLOW_implementsClause_in_moduleDefinition2310);
            implementsClause40=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause40.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:13: ( NLL )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==NLL) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:14: NLL
                    {
                    NLL41=(Atom)match(input,NLL,FOLLOW_NLL_in_moduleDefinition2325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL41);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_moduleDefinition2329);
            braceOpen42=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen42.getTree());

            pushFollow(FOLLOW_moduleFeatureList_in_moduleDefinition2331);
            moduleFeatureList43=moduleFeatureList(name);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleFeatureList.add(moduleFeatureList43.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:54: ( NLL )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==NLL) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:636:55: NLL
                    {
                    NLL44=(Atom)match(input,NLL,FOLLOW_NLL_in_moduleDefinition2335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL44);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_moduleDefinition2339);
            braceClose45=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose45.getTree());

            // AST REWRITE
            // elements: implementsClause, IDENT, moduleFeatureList, extendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 637:13: -> ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:637:16: ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_MODULE, "D_MODULE", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_moduleFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, moduleDefinition_StartIndex); }

            moduleDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "moduleDefinition"


    public static class moduleFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:643:1: moduleFeatureList[String n] : ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy ) ;
    public final pollenParser.moduleFeatureList_return moduleFeatureList(String n) throws RecognitionException {
        pollenParser.moduleFeatureList_return retval = new pollenParser.moduleFeatureList_return();
        retval.start = input.LT(1);

        int moduleFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.moduleFeature_return moduleFeature46 =null;

        pollenParser.moduleHostCtor_return moduleHostCtor47 =null;

        pollenParser.moduleTargCtor_return moduleTargCtor48 =null;

        pollenParser.intrinsicUnitName_return intrinsicUnitName49 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy50 =null;


        RewriteRuleSubtreeStream stream_intrinsicUnitName=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicUnitName");
        RewriteRuleSubtreeStream stream_moduleHostCtor=new RewriteRuleSubtreeStream(adaptor,"rule moduleHostCtor");
        RewriteRuleSubtreeStream stream_moduleTargCtor=new RewriteRuleSubtreeStream(adaptor,"rule moduleTargCtor");
        RewriteRuleSubtreeStream stream_moduleFeature=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeature");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");

              EnumSet<Flags> fh = EnumSet.noneOf(Flags.class);
              fh.add(Flags.CONSTRUCTOR); fh.add(Flags.HOST);
              EnumSet<Flags> ft = EnumSet.noneOf(Flags.class);
              ft.add(Flags.CONSTRUCTOR); 

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:5: ( ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:10: ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:10: ( moduleFeature )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==IDENT||LA12_0==INJECT||LA12_0==135||LA12_0==150||LA12_0==152||LA12_0==154||LA12_0==156||LA12_0==162||LA12_0==169||(LA12_0 >= 173 && LA12_0 <= 175)||LA12_0==179||LA12_0==183||(LA12_0 >= 187 && LA12_0 <= 188)||LA12_0==190||(LA12_0 >= 194 && LA12_0 <= 197)) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:650:10: moduleFeature
            	    {
            	    pushFollow(FOLLOW_moduleFeature_in_moduleFeatureList2467);
            	    moduleFeature46=moduleFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_moduleFeature.add(moduleFeature46.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            pushFollow(FOLLOW_moduleHostCtor_in_moduleFeatureList2473);
            moduleHostCtor47=moduleHostCtor(fh);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleHostCtor.add(moduleHostCtor47.getTree());

            pushFollow(FOLLOW_moduleTargCtor_in_moduleFeatureList2476);
            moduleTargCtor48=moduleTargCtor(ft);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleTargCtor.add(moduleTargCtor48.getTree());

            pushFollow(FOLLOW_intrinsicUnitName_in_moduleFeatureList2479);
            intrinsicUnitName49=intrinsicUnitName(n);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicUnitName.add(intrinsicUnitName49.getTree());

            pushFollow(FOLLOW_intrinsicPrintProxy_in_moduleFeatureList2482);
            intrinsicPrintProxy50=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy50.getTree());

            // AST REWRITE
            // elements: intrinsicPrintProxy, moduleTargCtor, moduleHostCtor, moduleFeature, intrinsicUnitName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 651:13: -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:651:16: ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:652:17: ( moduleFeature )*
                while ( stream_moduleFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_moduleFeature.nextTree());

                }
                stream_moduleFeature.reset();

                adaptor.addChild(root_1, stream_moduleHostCtor.nextTree());

                adaptor.addChild(root_1, stream_moduleTargCtor.nextTree());

                adaptor.addChild(root_1, stream_intrinsicUnitName.nextTree());

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, moduleFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleFeatureList"


    public static class intrinsicPrintProxy_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicPrintProxy"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:659:1: intrinsicPrintProxy : ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) ) |{...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ) | -> NIL );
    public final pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy() throws RecognitionException {
        pollenParser.intrinsicPrintProxy_return retval = new pollenParser.intrinsicPrintProxy_return();
        retval.start = input.LT(1);

        int intrinsicPrintProxy_StartIndex = input.index();

        BaseNode root_0 = null;


          EnumSet flags;
          if (currType.getUnitFlags().contains(Flags.COMPOSITION)) 
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.HOST, Flags.PROTOCOL_MEMBER) ;
          else
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.PROTOCOL_MEMBER);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:5: ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) ) |{...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ) | -> NIL )
            int alt13=3;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==NLL) ) {
                int LA13_1 = input.LA(2);

                if ( (((synpred16_pollen()&&synpred16_pollen())&&(ProcessUnits.doEmitPrintProxyViaDashP()))) ) {
                    alt13=1;
                }
                else if ( (((synpred17_pollen()&&synpred17_pollen())&&(ProcessUnits.doEmitPrintProxyViaBind()))) ) {
                    alt13=2;
                }
                else if ( (true) ) {
                    alt13=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA13_0==BRACE_CL) ) {
                int LA13_2 = input.LA(2);

                if ( (((synpred16_pollen()&&synpred16_pollen())&&(ProcessUnits.doEmitPrintProxyViaDashP()))) ) {
                    alt13=1;
                }
                else if ( (((synpred17_pollen()&&synpred17_pollen())&&(ProcessUnits.doEmitPrintProxyViaBind()))) ) {
                    alt13=2;
                }
                else if ( (true) ) {
                    alt13=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:10: {...}?
                    {
                    if ( !((ProcessUnits.doEmitPrintProxyViaDashP())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicPrintProxy", "ProcessUnits.doEmitPrintProxyViaDashP()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 668:13: -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:668:16: ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER))
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:669:17: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROXY)
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:673:18: ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Typ(E_TYP, "E_TYP")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:674:22: ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenPrint()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.noneOf(Flags.class))
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenPrint())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:13: {...}?
                    {
                    if ( !((ProcessUnits.doEmitPrintProxyViaBind())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicPrintProxy", "ProcessUnits.doEmitPrintProxyViaBind()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 679:13: -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:679:16: ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:17: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROXY)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:685:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 685:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, intrinsicPrintProxy_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "intrinsicPrintProxy"


    public static class intrinsicUnitName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicUnitName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:691:1: intrinsicUnitName[String n] : ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) ) | -> NIL );
    public final pollenParser.intrinsicUnitName_return intrinsicUnitName(String n) throws RecognitionException {
        pollenParser.intrinsicUnitName_return retval = new pollenParser.intrinsicUnitName_return();
        retval.start = input.LT(1);

        int intrinsicUnitName_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:5: ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) ) | -> NIL )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NLL) ) {
                int LA14_1 = input.LA(2);

                if ( ((((true)&&(true))&&synpred18_pollen())) ) {
                    alt14=1;
                }
                else if ( (true) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA14_0==BRACE_CL) ) {
                int LA14_2 = input.LA(2);

                if ( ((((true)&&(true))&&synpred18_pollen())) ) {
                    alt14=1;
                }
                else if ( (true) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:10: {...}?
                    {
                    if ( !((true)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicUnitName", "true");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 692:18: -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:21: ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:693:21: ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(QNAME, "string")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_UNITVAR)
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:21: ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", EnumSet.of(LitFlags.STR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(STRING, "\"" + n + "\"")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:701:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 701:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, intrinsicUnitName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "intrinsicUnitName"


    public static class moduleHostCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleHostCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:703:1: moduleHostCtor[EnumSet<Flags> fh] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.moduleHostCtor_return moduleHostCtor(EnumSet<Flags> fh) throws RecognitionException {
        pollenParser.moduleHostCtor_return retval = new pollenParser.moduleHostCtor_return();
        retval.start = input.LT(1);

        int moduleHostCtor_StartIndex = input.index();

        BaseNode root_0 = null;


            featureFlags = fh.clone();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NLL) ) {
                int LA15_1 = input.LA(2);

                if ( ((((!hasHostConstructor )&&(!hasHostConstructor ))&&synpred19_pollen())) ) {
                    alt15=1;
                }
                else if ( (true) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA15_0==BRACE_CL) ) {
                int LA15_2 = input.LA(2);

                if ( ((((!hasHostConstructor )&&(!hasHostConstructor ))&&synpred19_pollen())) ) {
                    alt15=1;
                }
                else if ( (true) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:23: {...}?
                    {
                    if ( !((!hasHostConstructor )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "moduleHostCtor", "!hasHostConstructor ");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 707:47: -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:708:25: ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", fh)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:709:25: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:710:29: ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", fh)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:33: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:711:58: ^( T_STD[\"T_STD\", fh] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", fh)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_MODULE_HOST)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:713:25: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:714:25: ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", fh)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:715:29: ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:25: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:56: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:82: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:718:7: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 718:7: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, moduleHostCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleHostCtor"


    public static class moduleTargCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleTargCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:720:1: moduleTargCtor[EnumSet<Flags> ft] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.moduleTargCtor_return moduleTargCtor(EnumSet<Flags> ft) throws RecognitionException {
        pollenParser.moduleTargCtor_return retval = new pollenParser.moduleTargCtor_return();
        retval.start = input.LT(1);

        int moduleTargCtor_StartIndex = input.index();

        BaseNode root_0 = null;


            featureFlags = ft.clone();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==NLL) ) {
                int LA16_1 = input.LA(2);

                if ( (((synpred20_pollen()&&synpred20_pollen())&&(!hasTargetConstructor))) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA16_0==BRACE_CL) ) {
                int LA16_2 = input.LA(2);

                if ( (((synpred20_pollen()&&synpred20_pollen())&&(!hasTargetConstructor))) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:22: {...}?
                    {
                    if ( !((!hasTargetConstructor)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "moduleTargCtor", "!hasTargetConstructor");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 724:47: -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:725:26: ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", ft)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:25: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:727:29: ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", ft)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:728:33: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:728:58: ^( T_STD[\"T_STD\", ft] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", ft)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_MODULE_TARGET)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:730:25: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:731:25: ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", ft)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:732:29: ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:25: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:56: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:734:82: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:736:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 736:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, moduleTargCtor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "moduleTargCtor"


    protected static class moduleFeature_scope {
        boolean publicEnum;
    }
    protected Stack moduleFeature_stack = new Stack();


    public static class moduleFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:738:1: moduleFeature : ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl );
    public final pollenParser.moduleFeature_return moduleFeature() throws RecognitionException {
        moduleFeature_stack.push(new moduleFeature_scope());
        pollenParser.moduleFeature_return retval = new pollenParser.moduleFeature_return();
        retval.start = input.LT(1);

        int moduleFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnDefinition_return fcnDefinition51 =null;

        pollenParser.varDeclaration_return varDeclaration52 =null;

        pollenParser.enumDefinition_return enumDefinition53 =null;

        pollenParser.classDefinition_return classDefinition54 =null;

        pollenParser.injectionDecl_return injectionDecl55 =null;




            featureFlags = EnumSet.noneOf(Flags.class);    
            ((moduleFeature_scope)moduleFeature_stack.peek()).publicEnum = false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:746:5: ( fcnDefinition | varDeclaration | enumDefinition | classDefinition | injectionDecl )
            int alt17=5;
            switch ( input.LA(1) ) {
            case IDENT:
            case 135:
            case 150:
            case 152:
            case 169:
            case 173:
            case 174:
            case 175:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
                {
                int LA17_1 = input.LA(2);

                if ( (synpred21_pollen()) ) {
                    alt17=1;
                }
                else if ( (synpred22_pollen()) ) {
                    alt17=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA17_4 = input.LA(2);

                if ( (synpred21_pollen()) ) {
                    alt17=1;
                }
                else if ( (synpred23_pollen()) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 4, input);

                    throw nvae;

                }
                }
                break;
            case 156:
            case 179:
            case 197:
                {
                alt17=2;
                }
                break;
            case 183:
                {
                alt17=1;
                }
                break;
            case 162:
                {
                alt17=3;
                }
                break;
            case 154:
                {
                alt17=4;
                }
                break;
            case INJECT:
                {
                alt17=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }

            switch (alt17) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:746:9: fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_moduleFeature4394);
                    fcnDefinition51=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition51.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:12: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_moduleFeature4408);
                    varDeclaration52=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration52.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_moduleFeature4419);
                    enumDefinition53=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition53.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:749:9: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_moduleFeature4430);
                    classDefinition54=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition54.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:750:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_moduleFeature4441);
                    injectionDecl55=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl55.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, moduleFeature_StartIndex); }

            moduleFeature_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "moduleFeature"


    public static class enumUnitDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumUnitDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:753:2: enumUnitDefinition : 'enum' ! enumBodyDefinition ;
    public final pollenParser.enumUnitDefinition_return enumUnitDefinition() throws RecognitionException {
        pollenParser.enumUnitDefinition_return retval = new pollenParser.enumUnitDefinition_return();
        retval.start = input.LT(1);

        int enumUnitDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal56=null;
        pollenParser.enumBodyDefinition_return enumBodyDefinition57 =null;


        BaseNode string_literal56_tree=null;

            
             ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum = false;
         
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:6: ( 'enum' ! enumBodyDefinition )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:759:11: 'enum' ! enumBodyDefinition
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal56=(Atom)match(input,162,FOLLOW_162_in_enumUnitDefinition4526); if (state.failed) return retval;

            pushFollow(FOLLOW_enumBodyDefinition_in_enumUnitDefinition4529);
            enumBodyDefinition57=enumBodyDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDefinition57.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, enumUnitDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumUnitDefinition"


    public static class enumDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:761:1: enumDefinition : ( 'public' !)? 'enum' ! enumBodyDefinition ;
    public final pollenParser.enumDefinition_return enumDefinition() throws RecognitionException {
        pollenParser.enumDefinition_return retval = new pollenParser.enumDefinition_return();
        retval.start = input.LT(1);

        int enumDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal58=null;
        Atom string_literal59=null;
        pollenParser.enumBodyDefinition_return enumBodyDefinition60 =null;


        BaseNode string_literal58_tree=null;
        BaseNode string_literal59_tree=null;

            
             ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum = false;
         
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:5: ( ( 'public' !)? 'enum' ! enumBodyDefinition )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:10: ( 'public' !)? 'enum' ! enumBodyDefinition
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:10: ( 'public' !)?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==187) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:765:11: 'public' !
                    {
                    string_literal58=(Atom)match(input,187,FOLLOW_187_in_enumDefinition4554); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum = true; }

                    }
                    break;

            }


            string_literal59=(Atom)match(input,162,FOLLOW_162_in_enumDefinition4571); if (state.failed) return retval;

            pushFollow(FOLLOW_enumBodyDefinition_in_enumDefinition4582);
            enumBodyDefinition60=enumBodyDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDefinition60.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, enumDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumDefinition"


    protected static class enumBodyDefinition_scope {
        int val;
    }
    protected Stack enumBodyDefinition_stack = new Stack();


    public static class enumBodyDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumBodyDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:769:1: enumBodyDefinition : ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList ) ;
    public final pollenParser.enumBodyDefinition_return enumBodyDefinition() throws RecognitionException {
        enumBodyDefinition_stack.push(new enumBodyDefinition_scope());
        pollenParser.enumBodyDefinition_return retval = new pollenParser.enumBodyDefinition_return();
        retval.start = input.LT(1);

        int enumBodyDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT61=null;
        pollenParser.braceOpen_return braceOpen62 =null;

        pollenParser.enumList_return enumList63 =null;

        pollenParser.braceClose_return braceClose64 =null;


        BaseNode IDENT61_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_enumList=new RewriteRuleSubtreeStream(adaptor,"rule enumList");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");

                       ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = -1;
                pushType();
                String qual = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:781:5: ( ( IDENT braceOpen enumList braceClose ) -> ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:781:16: ( IDENT braceOpen enumList braceClose )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:781:16: ( IDENT braceOpen enumList braceClose )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:781:17: IDENT braceOpen enumList braceClose
            {
            IDENT61=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumBodyDefinition4620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT61);


            if ( state.backtracking==0 ) {           currType.setTypeName((IDENT61!=null?IDENT61.getText():null)); 
                                currType.setUnitFlags(EnumSet.of(Flags.ENUM));
                                if (typeInfoList.size() == 1 && !(currType.getUnitFlags().contains(Flags.PUBLIC))) {
                                    // not nested, must be public
                                    currType.setUnitFlags(EnumSet.of(Flags.PUBLIC));
                                }    
                                 if (((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum) {
                                    currType.setUnitFlags(EnumSet.of(Flags.PUBLIC));
                                }                                       
                        if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                                           // if there is an 'as' name in the instantiating context, qualify the unit name 
                                           qual = clientImport.getAs().getText();
                                         }
                    }

            pushFollow(FOLLOW_braceOpen_in_enumBodyDefinition4641);
            braceOpen62=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen62.getTree());

            pushFollow(FOLLOW_enumList_in_enumBodyDefinition4643);
            enumList63=enumList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumList.add(enumList63.getTree());

            pushFollow(FOLLOW_braceClose_in_enumBodyDefinition4645);
            braceClose64=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose64.getTree());

            }


            // AST REWRITE
            // elements: enumList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 797:9: -> ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:12: ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_ENUM, "D_ENUM", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_enumList.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, enumBodyDefinition_StartIndex); }

            enumBodyDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "enumBodyDefinition"


    public static class enumList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:800:1: enumList : enumElement ( ',' ( NLL )? enumElement )* ( NLL )? -> ^( LIST[\"LIST\"] ( enumElement )+ ) ;
    public final pollenParser.enumList_return enumList() throws RecognitionException {
        pollenParser.enumList_return retval = new pollenParser.enumList_return();
        retval.start = input.LT(1);

        int enumList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal66=null;
        Atom NLL67=null;
        Atom NLL69=null;
        pollenParser.enumElement_return enumElement65 =null;

        pollenParser.enumElement_return enumElement68 =null;


        BaseNode char_literal66_tree=null;
        BaseNode NLL67_tree=null;
        BaseNode NLL69_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_enumElement=new RewriteRuleSubtreeStream(adaptor,"rule enumElement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:5: ( enumElement ( ',' ( NLL )? enumElement )* ( NLL )? -> ^( LIST[\"LIST\"] ( enumElement )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:10: enumElement ( ',' ( NLL )? enumElement )* ( NLL )?
            {
            pushFollow(FOLLOW_enumElement_in_enumList4705);
            enumElement65=enumElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumElement.add(enumElement65.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:13: ( ',' ( NLL )? enumElement )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==138) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:14: ',' ( NLL )? enumElement
            	    {
            	    char_literal66=(Atom)match(input,138,FOLLOW_138_in_enumList4721); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal66);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:18: ( NLL )?
            	    int alt19=2;
            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==NLL) ) {
            	        alt19=1;
            	    }
            	    switch (alt19) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:19: NLL
            	            {
            	            NLL67=(Atom)match(input,NLL,FOLLOW_NLL_in_enumList4724); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NLL.add(NLL67);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_enumElement_in_enumList4728);
            	    enumElement68=enumElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumElement.add(enumElement68.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:39: ( NLL )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==NLL) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:39: NLL
                    {
                    NLL69=(Atom)match(input,NLL,FOLLOW_NLL_in_enumList4732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL69);


                    }
                    break;

            }


            // AST REWRITE
            // elements: enumElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 802:44: -> ^( LIST[\"LIST\"] ( enumElement )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:47: ^( LIST[\"LIST\"] ( enumElement )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_enumElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, enumList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumList"


    public static class enumElement_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumElement"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:807:1: enumElement : ( ( IDENT ASSIGN )=> IDENT ASSIGN enumVal -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal ) | IDENT -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] ) );
    public final pollenParser.enumElement_return enumElement() throws RecognitionException {
        pollenParser.enumElement_return retval = new pollenParser.enumElement_return();
        retval.start = input.LT(1);

        int enumElement_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT70=null;
        Atom ASSIGN71=null;
        Atom IDENT73=null;
        pollenParser.enumVal_return enumVal72 =null;


        BaseNode IDENT70_tree=null;
        BaseNode ASSIGN71_tree=null;
        BaseNode IDENT73_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_enumVal=new RewriteRuleSubtreeStream(adaptor,"rule enumVal");

            String ctext = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:811:5: ( ( IDENT ASSIGN )=> IDENT ASSIGN enumVal -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal ) | IDENT -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==IDENT) ) {
                int LA22_1 = input.LA(2);

                if ( (synpred29_pollen()) ) {
                    alt22=1;
                }
                else if ( (true) ) {
                    alt22=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:811:11: ( IDENT ASSIGN )=> IDENT ASSIGN enumVal
                    {
                    IDENT70=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement4782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT70);


                    ASSIGN71=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_enumElement4784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN71);


                    pushFollow(FOLLOW_enumVal_in_enumElement4786);
                    enumVal72=enumVal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumVal.add(enumVal72.getTree());

                    // AST REWRITE
                    // elements: IDENT, enumVal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 812:9: -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:812:12: ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", getParseUnitFlags())
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_enumVal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:813:10: IDENT
                    {
                    IDENT73=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement4821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT73);


                    if ( state.backtracking==0 ) { 
                                  if (((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val == -1) ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = 0; 
                                  ctext = Integer.toString(((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val++);
                                }

                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 818:13: -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:16: ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", getParseUnitFlags())
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(INT_LIT, ctext)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, enumElement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumElement"


    public static class enumVal_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumVal"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:820:1: enumVal : ( INT_LIT | OCT_LIT | HEX_LIT );
    public final pollenParser.enumVal_return enumVal() throws RecognitionException {
        pollenParser.enumVal_return retval = new pollenParser.enumVal_return();
        retval.start = input.LT(1);

        int enumVal_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom INT_LIT74=null;
        Atom OCT_LIT75=null;
        Atom HEX_LIT76=null;

        BaseNode INT_LIT74_tree=null;
        BaseNode OCT_LIT75_tree=null;
        BaseNode HEX_LIT76_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:824:5: ( INT_LIT | OCT_LIT | HEX_LIT )
            int alt23=3;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt23=1;
                }
                break;
            case OCT_LIT:
                {
                alt23=2;
                }
                break;
            case HEX_LIT:
                {
                alt23=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }

            switch (alt23) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:824:10: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT74=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_enumVal4892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT74_tree = 
                    (BaseNode)adaptor.create(INT_LIT74)
                    ;
                    adaptor.addChild(root_0, INT_LIT74_tree);
                    }

                    if ( state.backtracking==0 ) {   ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = decode(INT_LIT74);  }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:825:10: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT75=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_enumVal4907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT75_tree = 
                    (BaseNode)adaptor.create(OCT_LIT75)
                    ;
                    adaptor.addChild(root_0, OCT_LIT75_tree);
                    }

                    if ( state.backtracking==0 ) {   ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = decode(OCT_LIT75);  }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:826:10: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT76=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_enumVal4920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT76_tree = 
                    (BaseNode)adaptor.create(HEX_LIT76)
                    ;
                    adaptor.addChild(root_0, HEX_LIT76_tree);
                    }

                    if ( state.backtracking==0 ) {   ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = decode(HEX_LIT76);  }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val++; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, enumVal_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "enumVal"


    public static class protocolDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:828:1: protocolDefinition : 'protocol' IDENT extendsClause implementsClause ( NLL )? braceOpen protocolFeatureList ( NLL )? braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause ) ;
    public final pollenParser.protocolDefinition_return protocolDefinition() throws RecognitionException {
        pollenParser.protocolDefinition_return retval = new pollenParser.protocolDefinition_return();
        retval.start = input.LT(1);

        int protocolDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal77=null;
        Atom IDENT78=null;
        Atom NLL81=null;
        Atom NLL84=null;
        pollenParser.extendsClause_return extendsClause79 =null;

        pollenParser.implementsClause_return implementsClause80 =null;

        pollenParser.braceOpen_return braceOpen82 =null;

        pollenParser.protocolFeatureList_return protocolFeatureList83 =null;

        pollenParser.braceClose_return braceClose85 =null;


        BaseNode string_literal77_tree=null;
        BaseNode IDENT78_tree=null;
        BaseNode NLL81_tree=null;
        BaseNode NLL84_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_protocolFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeatureList");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:836:5: ( 'protocol' IDENT extendsClause implementsClause ( NLL )? braceOpen protocolFeatureList ( NLL )? braceClose -> ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:836:10: 'protocol' IDENT extendsClause implementsClause ( NLL )? braceOpen protocolFeatureList ( NLL )? braceClose
            {
            string_literal77=(Atom)match(input,185,FOLLOW_185_in_protocolDefinition4950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal77);


            IDENT78=(Atom)match(input,IDENT,FOLLOW_IDENT_in_protocolDefinition4952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT78);


            if ( state.backtracking==0 ) { currType.setTypeName((IDENT78!=null?IDENT78.getText():null)); currType.setUnitFlags(EnumSet.of(Flags.PROTOCOL));
                        if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                              // if there is an 'as' name in the instantiating context, qualify the unit name 
                                  qual = clientImport.getAs().getText();
                              }
                    }

            pushFollow(FOLLOW_extendsClause_in_protocolDefinition4972);
            extendsClause79=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause79.getTree());

            pushFollow(FOLLOW_implementsClause_in_protocolDefinition4982);
            implementsClause80=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause80.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:845:9: ( NLL )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==NLL) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:845:10: NLL
                    {
                    NLL81=(Atom)match(input,NLL,FOLLOW_NLL_in_protocolDefinition4993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL81);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_protocolDefinition4997);
            braceOpen82=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen82.getTree());

            pushFollow(FOLLOW_protocolFeatureList_in_protocolDefinition4999);
            protocolFeatureList83=protocolFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocolFeatureList.add(protocolFeatureList83.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:845:46: ( NLL )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==NLL) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:845:47: NLL
                    {
                    NLL84=(Atom)match(input,NLL,FOLLOW_NLL_in_protocolDefinition5002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL84);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_protocolDefinition5006);
            braceClose85=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose85.getTree());

            // AST REWRITE
            // elements: IDENT, protocolFeatureList, implementsClause, extendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 846:9: -> ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:846:12: ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_PROTOCOL, "D_PROTOCOL", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_protocolFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, protocolDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolDefinition"


    public static class protocolFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:849:1: protocolFeatureList : ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) ;
    public final pollenParser.protocolFeatureList_return protocolFeatureList() throws RecognitionException {
        pollenParser.protocolFeatureList_return retval = new pollenParser.protocolFeatureList_return();
        retval.start = input.LT(1);

        int protocolFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.protocolFeature_return protocolFeature86 =null;


        RewriteRuleSubtreeStream stream_protocolFeature=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeature");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:5: ( ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:10: ( protocolFeature )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:10: ( protocolFeature )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==IDENT||LA26_0==INJECT||LA26_0==135||LA26_0==150||LA26_0==152||LA26_0==162||LA26_0==169||(LA26_0 >= 173 && LA26_0 <= 175)||LA26_0==183||(LA26_0 >= 187 && LA26_0 <= 188)||LA26_0==190||(LA26_0 >= 194 && LA26_0 <= 196)) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:10: protocolFeature
            	    {
            	    pushFollow(FOLLOW_protocolFeature_in_protocolFeatureList5070);
            	    protocolFeature86=protocolFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protocolFeature.add(protocolFeature86.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // AST REWRITE
            // elements: protocolFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 850:30: -> ^( LIST[\"LIST\"] ( protocolFeature )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:33: ^( LIST[\"LIST\"] ( protocolFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:850:58: ( protocolFeature )*
                while ( stream_protocolFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_protocolFeature.nextTree());

                }
                stream_protocolFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, protocolFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeatureList"


    public static class protocolFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:852:1: protocolFeature : ( enumDefinition | fcnDeclaration | injectionDecl );
    public final pollenParser.protocolFeature_return protocolFeature() throws RecognitionException {
        pollenParser.protocolFeature_return retval = new pollenParser.protocolFeature_return();
        retval.start = input.LT(1);

        int protocolFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.enumDefinition_return enumDefinition87 =null;

        pollenParser.fcnDeclaration_return fcnDeclaration88 =null;

        pollenParser.injectionDecl_return injectionDecl89 =null;




            featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:5: ( enumDefinition | fcnDeclaration | injectionDecl )
            int alt27=3;
            switch ( input.LA(1) ) {
            case 187:
                {
                int LA27_1 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt27=1;
                }
                else if ( (synpred36_pollen()) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 1, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                alt27=1;
                }
                break;
            case IDENT:
            case 135:
            case 150:
            case 152:
            case 169:
            case 173:
            case 174:
            case 175:
            case 183:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
                {
                alt27=2;
                }
                break;
            case INJECT:
                {
                alt27=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }

            switch (alt27) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:9: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_protocolFeature5110);
                    enumDefinition87=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition87.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:9: fcnDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDeclaration_in_protocolFeature5120);
                    fcnDeclaration88=fcnDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDeclaration88.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:858:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_protocolFeature5131);
                    injectionDecl89=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl89.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, protocolFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "protocolFeature"


    public static class compositionDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:860:1: compositionDefinition : 'composition' IDENT extendsClause implementsClause ( NLL )? braceOpen compositionFeatureList ( NLL )? braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause ) ;
    public final pollenParser.compositionDefinition_return compositionDefinition() throws RecognitionException {
        pollenParser.compositionDefinition_return retval = new pollenParser.compositionDefinition_return();
        retval.start = input.LT(1);

        int compositionDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal90=null;
        Atom IDENT91=null;
        Atom NLL94=null;
        Atom NLL97=null;
        pollenParser.extendsClause_return extendsClause92 =null;

        pollenParser.implementsClause_return implementsClause93 =null;

        pollenParser.braceOpen_return braceOpen95 =null;

        pollenParser.compositionFeatureList_return compositionFeatureList96 =null;

        pollenParser.braceClose_return braceClose98 =null;


        BaseNode string_literal90_tree=null;
        BaseNode IDENT91_tree=null;
        BaseNode NLL94_tree=null;
        BaseNode NLL97_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        RewriteRuleSubtreeStream stream_compositionFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeatureList");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:868:5: ( 'composition' IDENT extendsClause implementsClause ( NLL )? braceOpen compositionFeatureList ( NLL )? braceClose -> ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:868:10: 'composition' IDENT extendsClause implementsClause ( NLL )? braceOpen compositionFeatureList ( NLL )? braceClose
            {
            string_literal90=(Atom)match(input,155,FOLLOW_155_in_compositionDefinition5158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal90);


            IDENT91=(Atom)match(input,IDENT,FOLLOW_IDENT_in_compositionDefinition5160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT91);


            if ( state.backtracking==0 ) { 
                      currType.setTypeName((IDENT91!=null?IDENT91.getText():null)); 
                      currType.setUnitFlags(EnumSet.of(Flags.COMPOSITION));
                      if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                          // if there is an 'as' name in the instantiating context, qualify the unit name 
                          qual = clientImport.getAs().getText();
                      }          
                    }

            pushFollow(FOLLOW_extendsClause_in_compositionDefinition5180);
            extendsClause92=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause92.getTree());

            pushFollow(FOLLOW_implementsClause_in_compositionDefinition5192);
            implementsClause93=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause93.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:879:9: ( NLL )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==NLL) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:879:10: NLL
                    {
                    NLL94=(Atom)match(input,NLL,FOLLOW_NLL_in_compositionDefinition5203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL94);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_compositionDefinition5207);
            braceOpen95=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen95.getTree());

            pushFollow(FOLLOW_compositionFeatureList_in_compositionDefinition5209);
            compositionFeatureList96=compositionFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compositionFeatureList.add(compositionFeatureList96.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:879:49: ( NLL )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==NLL) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:879:50: NLL
                    {
                    NLL97=(Atom)match(input,NLL,FOLLOW_NLL_in_compositionDefinition5212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL97);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_compositionDefinition5216);
            braceClose98=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose98.getTree());

            // AST REWRITE
            // elements: compositionFeatureList, extendsClause, implementsClause, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 880:13: -> ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:880:16: ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_COMPOSITION, "D_COMPOSITION", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_compositionFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, compositionDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionDefinition"


    public static class compositionFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:883:1: compositionFeatureList : ( compositionFeature )* intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy ) ;
    public final pollenParser.compositionFeatureList_return compositionFeatureList() throws RecognitionException {
        pollenParser.compositionFeatureList_return retval = new pollenParser.compositionFeatureList_return();
        retval.start = input.LT(1);

        int compositionFeatureList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.compositionFeature_return compositionFeature99 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy100 =null;


        RewriteRuleSubtreeStream stream_compositionFeature=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeature");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:884:5: ( ( compositionFeature )* intrinsicPrintProxy -> ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:884:10: ( compositionFeature )* intrinsicPrintProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:884:10: ( compositionFeature )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==IDENT||LA30_0==INJECT||LA30_0==135||LA30_0==150||LA30_0==152||LA30_0==156||LA30_0==162||LA30_0==164||LA30_0==169||(LA30_0 >= 173 && LA30_0 <= 175)||LA30_0==179||LA30_0==183||(LA30_0 >= 187 && LA30_0 <= 188)||LA30_0==190||(LA30_0 >= 194 && LA30_0 <= 197)) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:884:10: compositionFeature
            	    {
            	    pushFollow(FOLLOW_compositionFeature_in_compositionFeatureList5289);
            	    compositionFeature99=compositionFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compositionFeature.add(compositionFeature99.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            pushFollow(FOLLOW_intrinsicPrintProxy_in_compositionFeatureList5304);
            intrinsicPrintProxy100=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy100.getTree());

            // AST REWRITE
            // elements: intrinsicPrintProxy, compositionFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 886:9: -> ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:12: ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:37: ( compositionFeature )*
                while ( stream_compositionFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_compositionFeature.nextTree());

                }
                stream_compositionFeature.reset();

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, compositionFeatureList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeatureList"


    public static class compositionFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:888:1: compositionFeature : ( stmtExport | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl );
    public final pollenParser.compositionFeature_return compositionFeature() throws RecognitionException {
        pollenParser.compositionFeature_return retval = new pollenParser.compositionFeature_return();
        retval.start = input.LT(1);

        int compositionFeature_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtExport_return stmtExport101 =null;

        pollenParser.fcnDefinitionHost_return fcnDefinitionHost102 =null;

        pollenParser.enumDefinition_return enumDefinition103 =null;

        pollenParser.varDeclaration_return varDeclaration104 =null;

        pollenParser.injectionDecl_return injectionDecl105 =null;




            featureFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:6: ( stmtExport | fcnDefinitionHost | enumDefinition | varDeclaration | injectionDecl )
            int alt31=5;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt31=1;
                }
                break;
            case 187:
                {
                int LA31_2 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt31=2;
                }
                else if ( (synpred42_pollen()) ) {
                    alt31=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 31, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
            case 135:
            case 150:
            case 152:
            case 169:
            case 173:
            case 174:
            case 175:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
                {
                int LA31_5 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt31=2;
                }
                else if ( (synpred43_pollen()) ) {
                    alt31=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 31, 5, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                alt31=3;
                }
                break;
            case 183:
                {
                alt31=2;
                }
                break;
            case 156:
            case 179:
            case 197:
                {
                alt31=4;
                }
                break;
            case INJECT:
                {
                alt31=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }

            switch (alt31) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:9: stmtExport
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtExport_in_compositionFeature5350);
                    stmtExport101=stmtExport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtExport101.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:893:11: fcnDefinitionHost
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionHost_in_compositionFeature5367);
                    fcnDefinitionHost102=fcnDefinitionHost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionHost102.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:11: enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_compositionFeature5379);
                    enumDefinition103=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition103.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:895:11: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_compositionFeature5391);
                    varDeclaration104=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration104.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:896:11: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_compositionFeature5403);
                    injectionDecl105=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl105.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, compositionFeature_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compositionFeature"


    protected static class stmtImport_scope {
        String qpkg;
        String qimp;
        String asName;
        Object metaArgs;
    }
    protected Stack stmtImport_stack = new Stack();


    public static class stmtImport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImport"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:1: stmtImport : ( 'from' ! importFrom | ( 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) );
    public final pollenParser.stmtImport_return stmtImport() throws RecognitionException {
        stmtImport_stack.push(new stmtImport_scope());
        pollenParser.stmtImport_return retval = new pollenParser.stmtImport_return();
        retval.start = input.LT(1);

        int stmtImport_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal106=null;
        Atom string_literal108=null;
        pollenParser.importFrom_return importFrom107 =null;

        pollenParser.qualName_return qualName109 =null;

        pollenParser.metaArguments_return metaArguments110 =null;

        pollenParser.importAs_return importAs111 =null;

        pollenParser.delim_return delim112 =null;


        BaseNode string_literal106_tree=null;
        BaseNode string_literal108_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            String defaultPkg = "";
            String path = this.getTokenStream().getSourceName();
               int k = path.lastIndexOf(File.separator);
               int j = path.lastIndexOf(File.separator, k-1);
               j = j == -1 ? 0 : j+1;
                // the default package is the containing directory
                defaultPkg = path.substring(j, k);
                EnumSet<Flags> importFlags = EnumSet.noneOf(Flags.class);      

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:915:6: ( 'from' ! importFrom | ( 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==168) ) {
                alt33=1;
            }
            else if ( (LA33_0==172) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:915:11: 'from' ! importFrom
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal106=(Atom)match(input,168,FOLLOW_168_in_stmtImport5431); if (state.failed) return retval;

                    pushFollow(FOLLOW_importFrom_in_stmtImport5434);
                    importFrom107=importFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importFrom107.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:917:14: ( 'import' qualName ( metaArguments )? importAs delim )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:917:14: ( 'import' qualName ( metaArguments )? importAs delim )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:917:15: 'import' qualName ( metaArguments )? importAs delim
                    {
                    string_literal108=(Atom)match(input,172,FOLLOW_172_in_stmtImport5455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal108);


                    pushFollow(FOLLOW_qualName_in_stmtImport5457);
                    qualName109=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName109.getTree());

                    if ( state.backtracking==0 ) {    
                                    if ((qualName109!=null?input.toString(qualName109.start,qualName109.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) {
                                        ((stmtImport_scope)stmtImport_stack.peek()).qimp = ProcessUnits.getPollenEnv();
                                        defaultPkg = ProcessUnits.getPollenEnvPkg();
                                        importFlags.add(Flags.UNIT_USED);
                                        if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                                            throw new PollenException("Missing module specification for pollen.environment", input);
                                    }
                                    else if ((qualName109!=null?input.toString(qualName109.start,qualName109.stop):null).equals(ParseUnit.POLLEN_PRINT)) {
                                        ((stmtImport_scope)stmtImport_stack.peek()).qimp = ProcessUnits.getPollenPrint();
                                        defaultPkg = ProcessUnits.getPollenPrintPkg();
                                        importFlags.add(Flags.UNIT_USED);
                                        if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                                                throw new PollenException("Missing module specification for pollen.print", input);
                                    }
                                    else {
                                        ((stmtImport_scope)stmtImport_stack.peek()).qimp = (qualName109!=null?input.toString(qualName109.start,qualName109.stop):null);
                                    }
                                }

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:937:25: ( metaArguments )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==BRACE_OP) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:937:26: metaArguments
                            {
                            pushFollow(FOLLOW_metaArguments_in_stmtImport5501);
                            metaArguments110=metaArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments110.getTree());

                            if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).metaArgs =(metaArguments110!=null?((BaseNode)metaArguments110.tree):null); }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_importAs_in_stmtImport5531);
                    importAs111=importAs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importAs.add(importAs111.getTree());

                    pushFollow(FOLLOW_delim_in_stmtImport5558);
                    delim112=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim112.getTree());

                    }


                    if ( state.backtracking==0 ) {
                                                   ParseUnit.current().addToImportsMaps(((stmtImport_scope)stmtImport_stack.peek()).qimp, ((stmtImport_scope)stmtImport_stack.peek()).asName, defaultPkg, ((stmtImport_scope)stmtImport_stack.peek()).metaArgs);
                                             }

                    // AST REWRITE
                    // elements: metaArguments, importAs
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 943:10: -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:13: ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", importFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, defaultPkg)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qimp)
                        );

                        adaptor.addChild(root_1, stream_importAs.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:109: ( metaArguments )?
                        if ( stream_metaArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArguments.nextTree());

                        }
                        stream_metaArguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, stmtImport_StartIndex); }

            stmtImport_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "stmtImport"


    public static class importFrom_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importFrom"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:951:1: importFrom : (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) ;
    public final pollenParser.importFrom_return importFrom() throws RecognitionException {
        pollenParser.importFrom_return retval = new pollenParser.importFrom_return();
        retval.start = input.LT(1);

        int importFrom_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal113=null;
        pollenParser.qualName_return q1 =null;

        pollenParser.qualName_return q2 =null;

        pollenParser.metaArguments_return metaArguments114 =null;

        pollenParser.importAs_return importAs115 =null;

        pollenParser.delim_return delim116 =null;


        BaseNode string_literal113_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

               EnumSet<Flags> importFlags = EnumSet.noneOf(Flags.class);      

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:5: ( (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:13: (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:13: (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:14: q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim
            {
            pushFollow(FOLLOW_qualName_in_importFrom5661);
            q1=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(q1.getTree());

            if ( state.backtracking==0 ) {    
                            ((stmtImport_scope)stmtImport_stack.peek()).qpkg = ((q1!=null?input.toString(q1.start,q1.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) ? ProcessUnits.getPollenEnvPkg() : (q1!=null?input.toString(q1.start,q1.stop):null);
                            if ((q1!=null?input.toString(q1.start,q1.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) {
                                importFlags.add(Flags.UNIT_USED);
                            }
                            if (((stmtImport_scope)stmtImport_stack.peek()).qpkg.isEmpty())
                                throw new PollenException("Missing module specification for pollen.environment", input);
                        }

            string_literal113=(Atom)match(input,172,FOLLOW_172_in_importFrom5691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal113);


            pushFollow(FOLLOW_qualName_in_importFrom5708);
            q2=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(q2.getTree());

            if ( state.backtracking==0 ) {    
                            ((stmtImport_scope)stmtImport_stack.peek()).qimp = ((q2!=null?input.toString(q2.start,q2.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) ? ProcessUnits.getPollenEnv() : (q2!=null?input.toString(q2.start,q2.stop):null);
                            if ((q2!=null?input.toString(q2.start,q2.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) {
                                importFlags.add(Flags.UNIT_USED);
                            }
                            if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                                throw new PollenException("Missing module specification for pollen.environment", input);
                        }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:978:24: ( metaArguments )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BRACE_OP) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:978:25: metaArguments
                    {
                    pushFollow(FOLLOW_metaArguments_in_importFrom5751);
                    metaArguments114=metaArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments114.getTree());

                    if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).metaArgs =(metaArguments114!=null?((BaseNode)metaArguments114.tree):null); }

                    }
                    break;

            }


            pushFollow(FOLLOW_importAs_in_importFrom5781);
            importAs115=importAs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importAs.add(importAs115.getTree());

            pushFollow(FOLLOW_delim_in_importFrom5783);
            delim116=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim116.getTree());

            }


            if ( state.backtracking==0 ) {
                                         ParseUnit.current().addToImportsMaps(((stmtImport_scope)stmtImport_stack.peek()).qimp, ((stmtImport_scope)stmtImport_stack.peek()).asName, ((stmtImport_scope)stmtImport_stack.peek()).qpkg, ((stmtImport_scope)stmtImport_stack.peek()).metaArgs);
                                   }

            // AST REWRITE
            // elements: metaArguments, importAs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 983:10: -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:983:13: ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ImportNode(IMPORT, "IMPORT", importFlags)
                , root_1);

                adaptor.addChild(root_1, 
                (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qpkg)
                );

                adaptor.addChild(root_1, 
                (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qimp)
                );

                adaptor.addChild(root_1, stream_importAs.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:983:116: ( metaArguments )?
                if ( stream_metaArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaArguments.nextTree());

                }
                stream_metaArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                
             }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, importFrom_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importFrom"


    public static class importAs_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importAs"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:986:1: importAs : ( 'as' q1= qualName -> qualName | -> NIL );
    public final pollenParser.importAs_return importAs() throws RecognitionException {
        pollenParser.importAs_return retval = new pollenParser.importAs_return();
        retval.start = input.LT(1);

        int importAs_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal117=null;
        pollenParser.qualName_return q1 =null;


        BaseNode string_literal117_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:987:5: ( 'as' q1= qualName -> qualName | -> NIL )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==149) ) {
                alt35=1;
            }
            else if ( (LA35_0==NLL||LA35_0==SEMI) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:987:10: 'as' q1= qualName
                    {
                    string_literal117=(Atom)match(input,149,FOLLOW_149_in_importAs5864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_149.add(string_literal117);


                    pushFollow(FOLLOW_qualName_in_importAs5868);
                    q1=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(q1.getTree());

                    if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).asName = (q1!=null?input.toString(q1.start,q1.stop):null); }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 989:9: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 991:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, importAs_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importAs"


    public static class importList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:994:1: importList : stmtImports ;
    public final pollenParser.importList_return importList() throws RecognitionException {
        pollenParser.importList_return retval = new pollenParser.importList_return();
        retval.start = input.LT(1);

        int importList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtImports_return stmtImports118 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:995:5: ( stmtImports )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:995:12: stmtImports
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_stmtImports_in_importList5939);
            stmtImports118=stmtImports();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtImports118.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, importList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importList"


    public static class stmtImports_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImports"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:1: stmtImports : ( ( stmtImport )+ -> ^( LIST[\"LIST\"] ( stmtImport )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.stmtImports_return stmtImports() throws RecognitionException {
        pollenParser.stmtImports_return retval = new pollenParser.stmtImports_return();
        retval.start = input.LT(1);

        int stmtImports_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtImport_return stmtImport119 =null;


        RewriteRuleSubtreeStream stream_stmtImport=new RewriteRuleSubtreeStream(adaptor,"rule stmtImport");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:5: ( ( stmtImport )+ -> ^( LIST[\"LIST\"] ( stmtImport )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==168||LA37_0==172) ) {
                alt37=1;
            }
            else if ( (LA37_0==EOF||LA37_0==INJECT||LA37_0==NLL||(LA37_0 >= 154 && LA37_0 <= 155)||LA37_0==162||(LA37_0 >= 177 && LA37_0 <= 178)||LA37_0==185) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:10: ( stmtImport )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:10: ( stmtImport )+
                    int cnt36=0;
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( (LA36_0==168||LA36_0==172) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:10: stmtImport
                    	    {
                    	    pushFollow(FOLLOW_stmtImport_in_stmtImports5959);
                    	    stmtImport119=stmtImport();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmtImport.add(stmtImport119.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt36 >= 1 ) break loop36;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(36, input);
                                throw eee;
                        }
                        cnt36++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmtImport
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 998:23: -> ^( LIST[\"LIST\"] ( stmtImport )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:26: ^( LIST[\"LIST\"] ( stmtImport )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmtImport.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmtImport.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmtImport.nextTree());

                        }
                        stream_stmtImport.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 999:10: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:13: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, stmtImports_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtImports"


    protected static class importIntrinsicPrint_scope {
        List<Object> l;
    }
    protected Stack importIntrinsicPrint_stack = new Stack();


    public static class importIntrinsicPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importIntrinsicPrint"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1007:1: importIntrinsicPrint : m1= importPrintImpl m2= importPrintProtocol ;
    public final pollenParser.importIntrinsicPrint_return importIntrinsicPrint() throws RecognitionException {
        importIntrinsicPrint_stack.push(new importIntrinsicPrint_scope());
        pollenParser.importIntrinsicPrint_return retval = new pollenParser.importIntrinsicPrint_return();
        retval.start = input.LT(1);

        int importIntrinsicPrint_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.importPrintImpl_return m1 =null;

        pollenParser.importPrintProtocol_return m2 =null;




            ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l = new ArrayList<Object>();    

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1023:5: (m1= importPrintImpl m2= importPrintProtocol )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1023:11: m1= importPrintImpl m2= importPrintProtocol
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_importPrintImpl_in_importIntrinsicPrint6034);
            m1=importPrintImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m1.getTree());

            if ( state.backtracking==0 ) {  ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null));}

            pushFollow(FOLLOW_importPrintProtocol_in_importIntrinsicPrint6054);
            m2=importPrintProtocol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m2.getTree());

            if ( state.backtracking==0 ) {  ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null));}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                 for (Object o : ((importIntrinsicPrint_scope)importIntrinsicPrint_stack.peek()).l) {
                     if (o instanceof ImportNode) {
                         // add the instantiated import to unit imports
                         ((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);            
                     }
                 }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, importIntrinsicPrint_StartIndex); }

            importIntrinsicPrint_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "importIntrinsicPrint"


    public static class importPrintImpl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintImpl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1027:1: importPrintImpl : ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL ) | -> NIL );
    public final pollenParser.importPrintImpl_return importPrintImpl() throws RecognitionException {
        pollenParser.importPrintImpl_return retval = new pollenParser.importPrintImpl_return();
        retval.start = input.LT(1);

        int importPrintImpl_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:5: ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL ) | -> NIL )
            int alt38=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA38_1 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA38_2 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 2, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA38_3 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 3, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA38_4 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 4, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA38_5 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                int LA38_6 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA38_7 = input.LA(2);

                if ( (((synpred50_pollen()&&synpred50_pollen())&&(ProcessUnits.doImportPrintImpl()))) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }

            switch (alt38) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:10: {...}?
                    {
                    if ( !((ProcessUnits.doImportPrintImpl())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importPrintImpl", "ProcessUnits.doImportPrintImpl()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1029:12: -> ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1029:15: ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenPrintPkg()] IDENT[ProcessUnits.getPollenPrint()] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", EnumSet.of(Flags.UNIT_USED))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenPrintPkg())
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenPrint())
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1033:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1033:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, importPrintImpl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importPrintImpl"


    public static class importPrintProtocol_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintProtocol"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1037:1: importPrintProtocol : ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL ) | -> NIL );
    public final pollenParser.importPrintProtocol_return importPrintProtocol() throws RecognitionException {
        pollenParser.importPrintProtocol_return retval = new pollenParser.importPrintProtocol_return();
        retval.start = input.LT(1);

        int importPrintProtocol_StartIndex = input.index();

        BaseNode root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:5: ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL ) | -> NIL )
            int alt39=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA39_1 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA39_2 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA39_3 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 3, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA39_4 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 4, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA39_5 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                int LA39_6 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA39_7 = input.LA(2);

                if ( (((synpred51_pollen()&&synpred51_pollen())&&(ProcessUnits.doImportPrintProtocol()))) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:10: {...}?
                    {
                    if ( !((ProcessUnits.doImportPrintProtocol())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importPrintProtocol", "ProcessUnits.doImportPrintProtocol()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1039:12: -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1039:15: ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.INTRINSIC_PRINT_PROTOCOL] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", (EnumSet.of(Flags.UNIT_USED)))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_PRINTPKG)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1043:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1043:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, importPrintProtocol_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "importPrintProtocol"


    public static class meta_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "meta"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1045:1: meta : ({...}? => ( 'meta' ! ( ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose ) ) | -> LIST[\"LIST\"] );
    public final pollenParser.meta_return meta() throws RecognitionException {
        pollenParser.meta_return retval = new pollenParser.meta_return();
        retval.start = input.LT(1);

        int meta_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal120=null;
        Atom NLL121=null;
        Atom NLL124=null;
        pollenParser.braceOpen_return braceOpen122 =null;

        pollenParser.metaParmsGen_return metaParmsGen123 =null;

        pollenParser.braceClose_return braceClose125 =null;


        BaseNode string_literal120_tree=null;
        BaseNode NLL121_tree=null;
        BaseNode NLL124_tree=null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:5: ({...}? => ( 'meta' ! ( ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose ) ) | -> LIST[\"LIST\"] )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==177) && ((isMetaInstance))) {
                alt42=1;
            }
            else if ( ((LA42_0 >= 154 && LA42_0 <= 155)||LA42_0==162||LA42_0==178||LA42_0==185) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:10: {...}? => ( 'meta' ! ( ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose ) )
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    if ( !((isMetaInstance)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "meta", "isMetaInstance");
                    }

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1052:13: ( 'meta' ! ( ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose ) )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1053:13: 'meta' ! ( ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose )
                    {
                    string_literal120=(Atom)match(input,177,FOLLOW_177_in_meta6336); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { metaFlags.add(Flags.META);}

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:13: ( ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:14: ( NLL !)? braceOpen metaParmsGen ( NLL !)? braceClose
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:14: ( NLL !)?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==NLL) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:15: NLL !
                            {
                            NLL121=(Atom)match(input,NLL,FOLLOW_NLL_in_meta6373); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_braceOpen_in_meta6378);
                    braceOpen122=braceOpen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceOpen122.getTree());

                    pushFollow(FOLLOW_metaParmsGen_in_meta6397);
                    metaParmsGen123=metaParmsGen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaParmsGen123.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1057:15: ( NLL !)?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NLL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1057:16: NLL !
                            {
                            NLL124=(Atom)match(input,NLL,FOLLOW_NLL_in_meta6414); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_braceClose_in_meta6419);
                    braceClose125=braceClose();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceClose125.getTree());

                    }


                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1059:12: 
                    {
                    if ( state.backtracking==0 ) { isMetaInstance = false;}

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1059:39: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (FailedPredicateException fe) {
              
                    ParseUnit.current().reportFailure("Missing instantiation. Meta types must be instantiated via the import statement");
                
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, meta_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "meta"


    protected static class metaParmsGen_scope {
        int idx;
        List<Object> l;
    }
    protected Stack metaParmsGen_stack = new Stack();


    public static class metaParmsGen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmsGen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1064:1: metaParmsGen : m1= metaParmGen ( ',' ( NLL )? m2= metaParmGen )* -> ^( LIST[\"LIST\"] ( metaParmGen )+ ) ;
    public final pollenParser.metaParmsGen_return metaParmsGen() throws RecognitionException {
        metaParmsGen_stack.push(new metaParmsGen_scope());
        pollenParser.metaParmsGen_return retval = new pollenParser.metaParmsGen_return();
        retval.start = input.LT(1);

        int metaParmsGen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal126=null;
        Atom NLL127=null;
        pollenParser.metaParmGen_return m1 =null;

        pollenParser.metaParmGen_return m2 =null;


        BaseNode char_literal126_tree=null;
        BaseNode NLL127_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_metaParmGen=new RewriteRuleSubtreeStream(adaptor,"rule metaParmGen");

            ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx = 0;
            ((metaParmsGen_scope)metaParmsGen_stack.peek()).l = new ArrayList<Object>();    

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1081:5: (m1= metaParmGen ( ',' ( NLL )? m2= metaParmGen )* -> ^( LIST[\"LIST\"] ( metaParmGen )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1081:10: m1= metaParmGen ( ',' ( NLL )? m2= metaParmGen )*
            {
            pushFollow(FOLLOW_metaParmGen_in_metaParmsGen6551);
            m1=metaParmGen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaParmGen.add(m1.getTree());

            if ( state.backtracking==0 ) { ((metaParmsGen_scope)metaParmsGen_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null)); }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1082:9: ( ',' ( NLL )? m2= metaParmGen )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==138) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1082:11: ',' ( NLL )? m2= metaParmGen
            	    {
            	    char_literal126=(Atom)match(input,138,FOLLOW_138_in_metaParmsGen6566); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal126);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1083:12: ( NLL )?
            	    int alt43=2;
            	    int LA43_0 = input.LA(1);

            	    if ( (LA43_0==NLL) ) {
            	        alt43=1;
            	    }
            	    switch (alt43) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1083:13: NLL
            	            {
            	            NLL127=(Atom)match(input,NLL,FOLLOW_NLL_in_metaParmsGen6581); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NLL.add(NLL127);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_metaParmGen_in_metaParmsGen6601);
            	    m2=metaParmGen();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_metaParmGen.add(m2.getTree());

            	    if ( state.backtracking==0 ) { ((metaParmsGen_scope)metaParmsGen_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null)); }

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            // AST REWRITE
            // elements: metaParmGen
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1086:9: -> ^( LIST[\"LIST\"] ( metaParmGen )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1086:12: ^( LIST[\"LIST\"] ( metaParmGen )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_metaParmGen.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_metaParmGen.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaParmGen.nextTree());

                }
                stream_metaParmGen.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                 for (Object o : ((metaParmsGen_scope)metaParmsGen_stack.peek()).l) {
                     if (o instanceof ImportNode) {
                         // add the instantiated import to unit imports
                         ((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);            
                     }
                 }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, metaParmsGen_StartIndex); }

            metaParmsGen_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "metaParmsGen"


    protected static class metaParmGen_scope {
        Object  metaArgs;
    }
    protected Stack metaParmGen_stack = new Stack();


    public static class metaParmGen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmGen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1104:1: metaParmGen : ( 'type' IDENT ( '=' typeName )? -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( '=' primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) ) );
    public final pollenParser.metaParmGen_return metaParmGen() throws RecognitionException {
        metaParmGen_stack.push(new metaParmGen_scope());
        pollenParser.metaParmGen_return retval = new pollenParser.metaParmGen_return();
        retval.start = input.LT(1);

        int metaParmGen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom id=null;
        Atom string_literal128=null;
        Atom IDENT129=null;
        Atom char_literal130=null;
        Atom char_literal133=null;
        pollenParser.typeName_return typeName131 =null;

        pollenParser.builtinType_return builtinType132 =null;

        pollenParser.primitiveLit_return primitiveLit134 =null;


        BaseNode id_tree=null;
        BaseNode string_literal128_tree=null;
        BaseNode IDENT129_tree=null;
        BaseNode char_literal130_tree=null;
        BaseNode char_literal133_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_primitiveLit=new RewriteRuleSubtreeStream(adaptor,"rule primitiveLit");
        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");

            // for import stmt 
            String name = "";
            String as = "";
            String from = ""; 
            ExprNode.Const arg = null;    
            EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);        
            String ctext = "";
            EnumSet<LitFlags> lf = EnumSet.noneOf(LitFlags.class);
            if (isVoidInstance) {
                metaFlags.add(Flags.VOID_INSTANCE);
            }


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1129:5: ( 'type' IDENT ( '=' typeName )? -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( '=' primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) ) )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==193) ) {
                alt47=1;
            }
            else if ( (LA47_0==150||LA47_0==152||(LA47_0 >= 173 && LA47_0 <= 175)||LA47_0==188||LA47_0==190||(LA47_0 >= 194 && LA47_0 <= 196)) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1129:10: 'type' IDENT ( '=' typeName )?
                    {
                    string_literal128=(Atom)match(input,193,FOLLOW_193_in_metaParmGen6672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal128);


                    IDENT129=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaParmGen6674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT129);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1129:23: ( '=' typeName )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==ASSIGN) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1129:25: '=' typeName
                            {
                            char_literal130=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaParmGen6678); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal130);


                            pushFollow(FOLLOW_typeName_in_metaParmGen6680);
                            typeName131=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(typeName131.getTree());

                            if ( state.backtracking==0 ) {name = (typeName131!=null?input.toString(typeName131.start,typeName131.stop):null);}

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { 
                                   flags.add(Flags.TYPE_META_ARG); 
                                   // get 'as' name
                                   as = (IDENT129!=null?IDENT129.getText():null);
                                       // get 'from' pkg
                                         for (ImportNode imp: client.getImports()) {
                                        if (clientImport.getName().getText().equals(imp.getName().getText())) {
                                            from = imp.getFrom().getText();
                                            break;
                                        }
                                    }    
                                    // get import name
                                    if (instantiateToDefaults || isVoidInstance) {
                                        // instantiate to defaults
                                        if (name.isEmpty()) {
                                            if (isVoidInstance)
                                                throw new PollenException("Using \'{}\' to instantiate a meta type requires default values for all meta parameters", input);
                                            if (clientImport.getMeta() == null)
                                                throw new PollenException("Instantiating a meta type without parameters requires default values for all meta parameters", input);
                                        }
                                    }
                                    else {
                                    BaseNode b = (clientImport.getMeta() != null && clientImport.getMeta().size() >= ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx+1) 
                                            ? clientImport.getMeta().get(((metaParmsGen_scope)metaParmsGen_stack.peek()).idx) : null ;
                                    
                                      if (b != null && b.getType() != pollenParser.NIL) { // if false, will use default
                                          // get instantiation value
                                          
                                          if (b instanceof TypeNode.Usr) {
                                              name = ((TypeNode.Usr) b).getName().getText();    
                                               String handlerName = ""; 
                                                               int i = name.indexOf('.');
                                                               if (i != -1) { // type is a function ref: "HP.handler"
                                                                   // handler name ignored for now: look at this if we do it
                                                                handlerName = "." + name.substring(i+1);   // the fcn name, 'handler'  
                                                                name = name.substring(0, i);  // HP, the unit type                                                                                          
                                                                }
                                              // fixups
                                              String n = ParseUnit.current().getTypeName(client.getQualName(), name);
                                              String f = ParseUnit.current().getPackage(client.getQualName(),name);
                                              ((metaParmGen_scope)metaParmGen_stack.peek()).metaArgs = (Tree) ParseUnit.current().getMetaArgs(client.getQualName(), name);
                                              if (n != null) {
                                                  name = n;
                                                  from = f != null ? f : from;                              
                                              }        
                                          }
                                          else if (b instanceof TypeNode.Std) {
                                              name = ((TypeNode.Std) b).getIdent().getText();                        
                                          }
                                          else if (b.getType() == pollenLexer.VOID) // deferred instantiation
                                                         name = b.getText();
                                          else {
                                              throw new PollenFatalException("Meta type parameter requires type to instantiate");
                                          }
                                      }
                                      else {
                                         if (name.isEmpty()) { // no default supplied
                                               throw new PollenException("Missing actual parameter for meta type instantiation where no default value specified", input);
                                         }
                                    }                    
                                    }

                                }

                    // AST REWRITE
                    // elements: IDENT, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1193:7: -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1193:10: ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", flags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, from)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, name)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, as)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1196:10: builtinType id= IDENT ( '=' primitiveLit )?
                    {
                    pushFollow(FOLLOW_builtinType_in_metaParmGen6743);
                    builtinType132=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType132.getTree());

                    id=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaParmGen6747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1196:31: ( '=' primitiveLit )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==ASSIGN) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1196:32: '=' primitiveLit
                            {
                            char_literal133=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaParmGen6750); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal133);


                            pushFollow(FOLLOW_primitiveLit_in_metaParmGen6752);
                            primitiveLit134=primitiveLit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_primitiveLit.add(primitiveLit134.getTree());

                            if ( state.backtracking==0 ) { ctext = (primitiveLit134!=null?input.toString(primitiveLit134.start,primitiveLit134.stop):null); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                                 flags.add(Flags.META_ARG);
                                 if (instantiateToDefaults || isVoidInstance) {
                                        // instantiate to defaults
                                        if (ctext.isEmpty()) {
                                            if (isVoidInstance)
                                                throw new PollenException("Using \'{}\' to instantiate a meta type requires default values for all meta parameters", input);
                                            if (clientImport.getMeta() == null)
                                                throw new PollenException("Instantiating a meta type without parameters requires default values for all meta parameters", input);
                                        }
                                    }
                                    else {
                                      BaseNode b = (clientImport.getMeta() != null && clientImport.getMeta().size() >= ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx+1) 
                                            ? clientImport.getMeta().get(((metaParmsGen_scope)metaParmsGen_stack.peek()).idx) : null ;
                                            
                                      if (b != null && b.getType() != pollenParser.NIL) { // if false, will use default
                                         
                                           if (b.getType() != pollenLexer.VOID && !(b instanceof ExprNode.Const)) 
                                                throw new PollenFatalException("Invalid meta value parameter specification (must be a constant)");
                                             ctext = b.getText();
                                         
                                           lf = EnumSet.noneOf(LitFlags.class);
                                           if (b instanceof ExprNode.Const) {
                                               arg = (ExprNode.Const) b;
                                               ctext = arg.getValue().getText();
                                               EnumSet<LitFlags> formalType = (builtinType132!=null?builtinType132.f:null);
                                               lf = arg.getLitFlags();
                                               if (!(arg.getLitFlags().contains(LitFlags.NUM) && formalType.contains(LitFlags.NUM))) {
                                                   if (!(arg.getLitFlags().equals(formalType)))
                                                       throw new PollenException("Fomal and actual meta value parameters have inconsistent types", input);             
                                               }
                                           }
                                      }
                                      else {
                                         if (ctext.isEmpty()) { // no default supplied
                                               throw new PollenException("Missing actual parameter for meta type instantiation where no default value specified", input);
                                         }
                                      }
                                         }
                                 }

                    // AST REWRITE
                    // elements: IDENT, IDENT, builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1237:9: -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1237:12: ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1238:13: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:17: ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", lf)
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ctext)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx++;

                if (((metaParmGen_scope)metaParmGen_stack.peek()).metaArgs != null) {
                        ((CommonTree) ((BaseNode)retval.tree)).addChild(((CommonTree) ((metaParmGen_scope)metaParmGen_stack.peek()).metaArgs));                
                          }
            }
        }
        catch (PollenFatalException e) {

                ParseUnit.current().reportFailure(e);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, metaParmGen_StartIndex); }

            metaParmGen_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "metaParmGen"


    public static class metaArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArguments"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1245:1: metaArguments : brace_list_beg metaArgumentList brace_list_end ;
    public final pollenParser.metaArguments_return metaArguments() throws RecognitionException {
        pollenParser.metaArguments_return retval = new pollenParser.metaArguments_return();
        retval.start = input.LT(1);

        int metaArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.brace_list_beg_return brace_list_beg135 =null;

        pollenParser.metaArgumentList_return metaArgumentList136 =null;

        pollenParser.brace_list_end_return brace_list_end137 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1246:5: ( brace_list_beg metaArgumentList brace_list_end )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1246:7: brace_list_beg metaArgumentList brace_list_end
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_brace_list_beg_in_metaArguments6894);
            brace_list_beg135=brace_list_beg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_list_beg135.getTree());

            pushFollow(FOLLOW_metaArgumentList_in_metaArguments6896);
            metaArgumentList136=metaArgumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, metaArgumentList136.getTree());

            pushFollow(FOLLOW_brace_list_end_in_metaArguments6898);
            brace_list_end137=brace_list_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_list_end137.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, metaArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArguments"


    public static class metaArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgumentList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1248:5: metaArgumentList options {backtrack=true; } : ( metaArgument ( NLL )? ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )* -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.metaArgumentList_return metaArgumentList() throws RecognitionException {
        pollenParser.metaArgumentList_return retval = new pollenParser.metaArgumentList_return();
        retval.start = input.LT(1);

        int metaArgumentList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL139=null;
        Atom char_literal140=null;
        Atom NLL141=null;
        Atom NLL143=null;
        pollenParser.metaArgument_return metaArgument138 =null;

        pollenParser.metaArgument_return metaArgument142 =null;


        BaseNode NLL139_tree=null;
        BaseNode char_literal140_tree=null;
        BaseNode NLL141_tree=null;
        BaseNode NLL143_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_metaArgument=new RewriteRuleSubtreeStream(adaptor,"rule metaArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:4: ( metaArgument ( NLL )? ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )* -> ^( LIST[\"LIST\"] ( metaArgument )+ ) | -> LIST[\"LIST\"] )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==BRACE_CL||LA52_0==NLL) ) {
                int LA52_1 = input.LA(2);

                if ( (synpred64_pollen()) ) {
                    alt52=1;
                }
                else if ( (true) ) {
                    alt52=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA52_0==CHAR||LA52_0==HEX_LIT||LA52_0==IDENT||LA52_0==INT_LIT||LA52_0==OCT_LIT||LA52_0==REAL_LIT||LA52_0==STRING||LA52_0==138||LA52_0==150||LA52_0==152||LA52_0==166||(LA52_0 >= 173 && LA52_0 <= 175)||LA52_0==180||LA52_0==188||LA52_0==190||LA52_0==192||(LA52_0 >= 194 && LA52_0 <= 196)) ) {
                alt52=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:13: metaArgument ( NLL )? ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )*
                    {
                    pushFollow(FOLLOW_metaArgument_in_metaArgumentList6938);
                    metaArgument138=metaArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument138.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:26: ( NLL )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==NLL) ) {
                        int LA48_1 = input.LA(2);

                        if ( (synpred60_pollen()) ) {
                            alt48=1;
                        }
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:27: NLL
                            {
                            NLL139=(Atom)match(input,NLL,FOLLOW_NLL_in_metaArgumentList6941); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL139);


                            }
                            break;

                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:33: ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )*
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==138) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:34: ',' ( ( NLL )? ) metaArgument ( ( NLL )? )
                    	    {
                    	    char_literal140=(Atom)match(input,138,FOLLOW_138_in_metaArgumentList6946); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal140);


                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:38: ( ( NLL )? )
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: ( NLL )?
                    	    {
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: ( NLL )?
                    	    int alt49=2;
                    	    int LA49_0 = input.LA(1);

                    	    if ( (LA49_0==NLL) ) {
                    	        int LA49_1 = input.LA(2);

                    	        if ( (synpred61_pollen()) ) {
                    	            alt49=1;
                    	        }
                    	    }
                    	    switch (alt49) {
                    	        case 1 :
                    	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: NLL
                    	            {
                    	            NLL141=(Atom)match(input,NLL,FOLLOW_NLL_in_metaArgumentList6949); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NLL.add(NLL141);


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    pushFollow(FOLLOW_metaArgument_in_metaArgumentList6953);
                    	    metaArgument142=metaArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument142.getTree());

                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:58: ( ( NLL )? )
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: ( NLL )?
                    	    {
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: ( NLL )?
                    	    int alt50=2;
                    	    int LA50_0 = input.LA(1);

                    	    if ( (LA50_0==NLL) ) {
                    	        int LA50_1 = input.LA(2);

                    	        if ( (synpred62_pollen()) ) {
                    	            alt50=1;
                    	        }
                    	    }
                    	    switch (alt50) {
                    	        case 1 :
                    	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: NLL
                    	            {
                    	            NLL143=(Atom)match(input,NLL,FOLLOW_NLL_in_metaArgumentList6956); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NLL.add(NLL143);


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop51;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: metaArgument
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1250:6: -> ^( LIST[\"LIST\"] ( metaArgument )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1250:9: ^( LIST[\"LIST\"] ( metaArgument )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_metaArgument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_metaArgument.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArgument.nextTree());

                        }
                        stream_metaArgument.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1251:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1251:9: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, metaArgumentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArgumentList"


    public static class metaArgument_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgument"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1253:4: metaArgument : ( primitiveLit | typeNameScalar | -> NIL );
    public final pollenParser.metaArgument_return metaArgument() throws RecognitionException {
        pollenParser.metaArgument_return retval = new pollenParser.metaArgument_return();
        retval.start = input.LT(1);

        int metaArgument_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit144 =null;

        pollenParser.typeNameScalar_return typeNameScalar145 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1254:5: ( primitiveLit | typeNameScalar | -> NIL )
            int alt53=3;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 166:
            case 180:
            case 192:
                {
                alt53=1;
                }
                break;
            case IDENT:
            case 150:
            case 152:
            case 173:
            case 174:
            case 175:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
                {
                alt53=2;
                }
                break;
            case EOF:
            case BRACE_CL:
            case NLL:
            case 138:
                {
                alt53=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }

            switch (alt53) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1254:9: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_metaArgument7017);
                    primitiveLit144=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit144.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1255:9: typeNameScalar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_typeNameScalar_in_metaArgument7027);
                    typeNameScalar145=typeNameScalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar145.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1256:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1256:11: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, metaArgument_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "metaArgument"


    public static class typeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1291:1: typeName : typeNameScalar ;
    public final pollenParser.typeName_return typeName() throws RecognitionException {
        pollenParser.typeName_return retval = new pollenParser.typeName_return();
        retval.start = input.LT(1);

        int typeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeNameScalar_return typeNameScalar146 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1292:5: ( typeNameScalar )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1292:10: typeNameScalar
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeNameScalar_in_typeName7071);
            typeNameScalar146=typeNameScalar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar146.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, typeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeName"


    public static class typeNameScalar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameScalar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1294:1: typeNameScalar : ( builtinType -> ^( T_STD[\"T_STD\", typeMods] builtinType ) | userTypeName );
    public final pollenParser.typeNameScalar_return typeNameScalar() throws RecognitionException {
        pollenParser.typeNameScalar_return retval = new pollenParser.typeNameScalar_return();
        retval.start = input.LT(1);

        int typeNameScalar_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType147 =null;

        pollenParser.userTypeName_return userTypeName148 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1295:5: ( builtinType -> ^( T_STD[\"T_STD\", typeMods] builtinType ) | userTypeName )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==150||LA54_0==152||(LA54_0 >= 173 && LA54_0 <= 175)||LA54_0==188||LA54_0==190||(LA54_0 >= 194 && LA54_0 <= 196)) ) {
                alt54=1;
            }
            else if ( (LA54_0==IDENT) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1295:10: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameScalar7102);
                    builtinType147=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType147.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1295:25: -> ^( T_STD[\"T_STD\", typeMods] builtinType )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1295:28: ^( T_STD[\"T_STD\", typeMods] builtinType )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", typeMods)
                        , root_1);

                        adaptor.addChild(root_1, stream_builtinType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1296:10: userTypeName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_typeNameScalar7130);
                    userTypeName148=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeName148.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, typeNameScalar_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeNameScalar"


    public static class userTypeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1298:1: userTypeName : qualName -> ^( T_USR[\"T_USR\", typeMods] qualName ) ;
    public final pollenParser.userTypeName_return userTypeName() throws RecognitionException {
        pollenParser.userTypeName_return retval = new pollenParser.userTypeName_return();
        retval.start = input.LT(1);

        int userTypeName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName149 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1299:5: ( qualName -> ^( T_USR[\"T_USR\", typeMods] qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1299:10: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeName7149);
            qualName149=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName149.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1299:22: -> ^( T_USR[\"T_USR\", typeMods] qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1299:25: ^( T_USR[\"T_USR\", typeMods] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", typeMods)
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, userTypeName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "userTypeName"


    public static class typeNameArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1301:1: typeNameArray : ( builtinType -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) ) | userTypeNameArr );
    public final pollenParser.typeNameArray_return typeNameArray() throws RecognitionException {
        pollenParser.typeNameArray_return retval = new pollenParser.typeNameArray_return();
        retval.start = input.LT(1);

        int typeNameArray_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType150 =null;

        pollenParser.userTypeNameArr_return userTypeNameArr151 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1302:5: ( builtinType -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) ) | userTypeNameArr )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==150||LA55_0==152||(LA55_0 >= 173 && LA55_0 <= 175)||LA55_0==188||LA55_0==190||(LA55_0 >= 194 && LA55_0 <= 196)) ) {
                alt55=1;
            }
            else if ( (LA55_0==IDENT) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1302:10: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameArray7193);
                    builtinType150=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType150.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1302:25: -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1302:28: ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Arr(T_ARR, "T_ARR", typeMods)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1302:69: ^( T_STD[\"T_STD\", typeMods] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1303:10: userTypeNameArr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeNameArr_in_typeNameArray7231);
                    userTypeNameArr151=userTypeNameArr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeNameArr151.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, typeNameArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "typeNameArray"


    public static class userTypeNameArr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeNameArr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1305:1: userTypeNameArr : qualName -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) ) ;
    public final pollenParser.userTypeNameArr_return userTypeNameArr() throws RecognitionException {
        pollenParser.userTypeNameArr_return retval = new pollenParser.userTypeNameArr_return();
        retval.start = input.LT(1);

        int userTypeNameArr_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName152 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1306:5: ( qualName -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1306:10: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeNameArr7250);
            qualName152=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName152.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1306:22: -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1306:25: ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Arr(T_ARR, "T_ARR", typeMods)
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1306:66: ^( T_USR[\"T_USR\", typeMods] qualName )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", typeMods)
                , root_2);

                adaptor.addChild(root_2, stream_qualName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, userTypeNameArr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "userTypeNameArr"


    protected static class unitTypeDefinition_scope {
        Object meta;
        boolean publicEnum;
    }
    protected Stack unitTypeDefinition_stack = new Stack();


    public static class unitTypeDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitTypeDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1309:1: unitTypeDefinition : ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition ) ;
    public final pollenParser.unitTypeDefinition_return unitTypeDefinition() throws RecognitionException {
        unitTypeDefinition_stack.push(new unitTypeDefinition_scope());
        pollenParser.unitTypeDefinition_return retval = new pollenParser.unitTypeDefinition_return();
        retval.start = input.LT(1);

        int unitTypeDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.meta_return meta153 =null;

        pollenParser.moduleDefinition_return moduleDefinition154 =null;

        pollenParser.classDefinition_return classDefinition155 =null;

        pollenParser.protocolDefinition_return protocolDefinition156 =null;

        pollenParser.compositionDefinition_return compositionDefinition157 =null;

        pollenParser.enumUnitDefinition_return enumUnitDefinition158 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1319:4: ( ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1319:8: ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1319:8: ( meta !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1319:9: meta !
            {
            pushFollow(FOLLOW_meta_in_unitTypeDefinition7304);
            meta153=meta();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta = (meta153!=null?((BaseNode)meta153.tree):null); }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1323:6: ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition )
            int alt56=5;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==178) && (synpred69_pollen())) {
                alt56=1;
            }
            else if ( (LA56_0==154) && (synpred70_pollen())) {
                alt56=2;
            }
            else if ( (LA56_0==185) && (synpred71_pollen())) {
                alt56=3;
            }
            else if ( (LA56_0==155) && (synpred72_pollen())) {
                alt56=4;
            }
            else if ( (LA56_0==162) && (synpred73_pollen())) {
                alt56=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1324:20: ( 'module' )=> moduleDefinition
                    {
                    pushFollow(FOLLOW_moduleDefinition_in_unitTypeDefinition7364);
                    moduleDefinition154=moduleDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleDefinition154.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:11: ( 'class' )=> classDefinition
                    {
                    pushFollow(FOLLOW_classDefinition_in_unitTypeDefinition7394);
                    classDefinition155=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition155.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1326:14: ( 'protocol' )=> protocolDefinition
                    {
                    pushFollow(FOLLOW_protocolDefinition_in_unitTypeDefinition7415);
                    protocolDefinition156=protocolDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocolDefinition156.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1327:14: ( 'composition' )=> compositionDefinition
                    {
                    pushFollow(FOLLOW_compositionDefinition_in_unitTypeDefinition7437);
                    compositionDefinition157=compositionDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compositionDefinition157.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1328:14: ( 'enum' )=> enumUnitDefinition
                    {
                    pushFollow(FOLLOW_enumUnitDefinition_in_unitTypeDefinition7459);
                    enumUnitDefinition158=enumUnitDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumUnitDefinition158.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               // debug
               if (ParseUnit.isDebugMode())
                System.out.println("       " + currType.getTypeName() + ", " + currType.getUnitFlags().toString());
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, unitTypeDefinition_StartIndex); }

            unitTypeDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitTypeDefinition"


    public static class extendsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extendsClause"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1331:1: extendsClause : ( 'extends' qualName -> qualName | -> NIL );
    public final pollenParser.extendsClause_return extendsClause() throws RecognitionException {
        pollenParser.extendsClause_return retval = new pollenParser.extendsClause_return();
        retval.start = input.LT(1);

        int extendsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal159=null;
        pollenParser.qualName_return qualName160 =null;


        BaseNode string_literal159_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1332:5: ( 'extends' qualName -> qualName | -> NIL )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==165) ) {
                alt57=1;
            }
            else if ( (LA57_0==BRACE_OP||LA57_0==NLL||LA57_0==171) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }
            switch (alt57) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1332:9: 'extends' qualName
                    {
                    string_literal159=(Atom)match(input,165,FOLLOW_165_in_extendsClause7484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_165.add(string_literal159);


                    pushFollow(FOLLOW_qualName_in_extendsClause7486);
                    qualName160=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName160.getTree());

                    if ( state.backtracking==0 ) {
                            if (currType.getUnitFlags().contains(Flags.CLASS) || currType.getUnitFlags().contains(Flags.MODULE))
                                throw new PollenException("\'extends\' clause is not supported for classes or modules", input);
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1337:6: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1338:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1338:11: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, extendsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extendsClause"


    public static class implementsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementsClause"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1341:1: implementsClause : ( 'implements' qualName -> qualName | -> NIL );
    public final pollenParser.implementsClause_return implementsClause() throws RecognitionException {
        pollenParser.implementsClause_return retval = new pollenParser.implementsClause_return();
        retval.start = input.LT(1);

        int implementsClause_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal161=null;
        pollenParser.qualName_return qualName162 =null;


        BaseNode string_literal161_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1342:5: ( 'implements' qualName -> qualName | -> NIL )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==171) ) {
                alt58=1;
            }
            else if ( (LA58_0==BRACE_OP||LA58_0==NLL) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1342:9: 'implements' qualName
                    {
                    string_literal161=(Atom)match(input,171,FOLLOW_171_in_implementsClause7534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(string_literal161);


                    pushFollow(FOLLOW_qualName_in_implementsClause7536);
                    qualName162=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName162.getTree());

                    if ( state.backtracking==0 ) {
                            if (currType.getUnitFlags().contains(Flags.PROTOCOL))
                                throw new PollenException("\'implements\' clause is not supported for protocols", input);
                            
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1348:9: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1349:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1349:11: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, implementsClause_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "implementsClause"


    public static class braceClose_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceClose"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1351:1: braceClose : ( ( BRACE_CL NLL )=> BRACE_CL ! ( NLL !) | BRACE_CL !);
    public final pollenParser.braceClose_return braceClose() throws RecognitionException {
        pollenParser.braceClose_return retval = new pollenParser.braceClose_return();
        retval.start = input.LT(1);

        int braceClose_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BRACE_CL163=null;
        Atom NLL164=null;
        Atom BRACE_CL165=null;

        BaseNode BRACE_CL163_tree=null;
        BaseNode NLL164_tree=null;
        BaseNode BRACE_CL165_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1354:5: ( ( BRACE_CL NLL )=> BRACE_CL ! ( NLL !) | BRACE_CL !)
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==BRACE_CL) ) {
                int LA59_1 = input.LA(2);

                if ( (synpred76_pollen()) ) {
                    alt59=1;
                }
                else if ( (true) ) {
                    alt59=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1354:10: ( BRACE_CL NLL )=> BRACE_CL ! ( NLL !)
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_CL163=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_braceClose7599); if (state.failed) return retval;

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1354:38: ( NLL !)
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1354:39: NLL !
                    {
                    NLL164=(Atom)match(input,NLL,FOLLOW_NLL_in_braceClose7603); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1355:11: BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_CL165=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_braceClose7617); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (NoViableAltException ne) {
              
                    ParseUnit.current().reportFailure("Invalid token between '{'...'}'. Note newlines are only valid after comma in a list.");
                
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, braceClose_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceClose"


    public static class braceOpen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceOpen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1365:1: braceOpen : ( ( BRACE_OP NLL )=> BRACE_OP ! ( NLL !) | BRACE_OP !);
    public final pollenParser.braceOpen_return braceOpen() throws RecognitionException {
        pollenParser.braceOpen_return retval = new pollenParser.braceOpen_return();
        retval.start = input.LT(1);

        int braceOpen_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BRACE_OP166=null;
        Atom NLL167=null;
        Atom BRACE_OP168=null;

        BaseNode BRACE_OP166_tree=null;
        BaseNode NLL167_tree=null;
        BaseNode BRACE_OP168_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1368:5: ( ( BRACE_OP NLL )=> BRACE_OP ! ( NLL !) | BRACE_OP !)
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==BRACE_OP) ) {
                int LA60_1 = input.LA(2);

                if ( (synpred77_pollen()) ) {
                    alt60=1;
                }
                else if ( (true) ) {
                    alt60=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1368:8: ( BRACE_OP NLL )=> BRACE_OP ! ( NLL !)
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP166=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_braceOpen7656); if (state.failed) return retval;

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1368:36: ( NLL !)
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1368:37: NLL !
                    {
                    NLL167=(Atom)match(input,NLL,FOLLOW_NLL_in_braceOpen7660); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1369:10: BRACE_OP !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP168=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_braceOpen7673); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, braceOpen_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "braceOpen"


    public static class equalityOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1371:1: equalityOp : ( EQ | NOT_EQ );
    public final pollenParser.equalityOp_return equalityOp() throws RecognitionException {
        pollenParser.equalityOp_return retval = new pollenParser.equalityOp_return();
        retval.start = input.LT(1);

        int equalityOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set169=null;

        BaseNode set169_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1372:5: ( EQ | NOT_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set169=(Atom)input.LT(1);

            if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set169)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, equalityOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equalityOp"


    public static class relationalOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1374:1: relationalOp : ( LT | GT | LT_EQ | GT_EQ );
    public final pollenParser.relationalOp_return relationalOp() throws RecognitionException {
        pollenParser.relationalOp_return retval = new pollenParser.relationalOp_return();
        retval.start = input.LT(1);

        int relationalOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set170=null;

        BaseNode set170_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1375:5: ( LT | GT | LT_EQ | GT_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set170=(Atom)input.LT(1);

            if ( (input.LA(1) >= GT && input.LA(1) <= GT_EQ)||(input.LA(1) >= LT && input.LA(1) <= LT_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set170)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, relationalOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "relationalOp"


    public static class shiftOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1377:1: shiftOp : ( '<<' | '>>' );
    public final pollenParser.shiftOp_return shiftOp() throws RecognitionException {
        pollenParser.shiftOp_return retval = new pollenParser.shiftOp_return();
        retval.start = input.LT(1);

        int shiftOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set171=null;

        BaseNode set171_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1378:5: ( '<<' | '>>' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set171=(Atom)input.LT(1);

            if ( (input.LA(1) >= 142 && input.LA(1) <= 143) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set171)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, shiftOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "shiftOp"


    public static class incDecOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incDecOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1380:1: incDecOp : ( INC | DEC );
    public final pollenParser.incDecOp_return incDecOp() throws RecognitionException {
        pollenParser.incDecOp_return retval = new pollenParser.incDecOp_return();
        retval.start = input.LT(1);

        int incDecOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set172=null;

        BaseNode set172_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1381:5: ( INC | DEC )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set172=(Atom)input.LT(1);

            if ( input.LA(1)==DEC||input.LA(1)==INC ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set172)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, incDecOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "incDecOp"


    public static class addSubOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addSubOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1383:1: addSubOp : ( PLUS | MINUS );
    public final pollenParser.addSubOp_return addSubOp() throws RecognitionException {
        pollenParser.addSubOp_return retval = new pollenParser.addSubOp_return();
        retval.start = input.LT(1);

        int addSubOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set173=null;

        BaseNode set173_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1384:5: ( PLUS | MINUS )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set173=(Atom)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set173)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, addSubOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "addSubOp"


    public static class assignOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1386:1: assignOp : ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ );
    public final pollenParser.assignOp_return assignOp() throws RecognitionException {
        pollenParser.assignOp_return retval = new pollenParser.assignOp_return();
        retval.start = input.LT(1);

        int assignOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set174=null;

        BaseNode set174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1387:5: ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set174=(Atom)input.LT(1);

            if ( input.LA(1)==ADD_EQ||(input.LA(1) >= BITAND_EQ && input.LA(1) <= BITXOR_EQ)||input.LA(1)==DIV_EQ||input.LA(1)==LSHFT_EQ||input.LA(1)==MOD_EQ||input.LA(1)==MUL_EQ||input.LA(1)==RSHFT_EQ||input.LA(1)==SUB_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set174)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, assignOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignOp"


    public static class multDivModOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multDivModOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1389:1: multDivModOp : ( '*' | '/' | '%' );
    public final pollenParser.multDivModOp_return multDivModOp() throws RecognitionException {
        pollenParser.multDivModOp_return retval = new pollenParser.multDivModOp_return();
        retval.start = input.LT(1);

        int multDivModOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set175=null;

        BaseNode set175_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1390:5: ( '*' | '/' | '%' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set175=(Atom)input.LT(1);

            if ( input.LA(1)==132||input.LA(1)==137||input.LA(1)==140 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set175)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, multDivModOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multDivModOp"


    public static class logicalNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalNotOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1392:1: logicalNotOp : LOG_NOT ;
    public final pollenParser.logicalNotOp_return logicalNotOp() throws RecognitionException {
        pollenParser.logicalNotOp_return retval = new pollenParser.logicalNotOp_return();
        retval.start = input.LT(1);

        int logicalNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom LOG_NOT176=null;

        BaseNode LOG_NOT176_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1393:5: ( LOG_NOT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1393:11: LOG_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            LOG_NOT176=(Atom)match(input,LOG_NOT,FOLLOW_LOG_NOT_in_logicalNotOp7942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOG_NOT176_tree = 
            (BaseNode)adaptor.create(LOG_NOT176)
            ;
            adaptor.addChild(root_0, LOG_NOT176_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, logicalNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalNotOp"


    public static class bitwiseNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitwiseNotOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1395:1: bitwiseNotOp : BIT_NOT ;
    public final pollenParser.bitwiseNotOp_return bitwiseNotOp() throws RecognitionException {
        pollenParser.bitwiseNotOp_return retval = new pollenParser.bitwiseNotOp_return();
        retval.start = input.LT(1);

        int bitwiseNotOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIT_NOT177=null;

        BaseNode BIT_NOT177_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1396:5: ( BIT_NOT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1396:10: BIT_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            BIT_NOT177=(Atom)match(input,BIT_NOT,FOLLOW_BIT_NOT_in_bitwiseNotOp7965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIT_NOT177_tree = 
            (BaseNode)adaptor.create(BIT_NOT177)
            ;
            adaptor.addChild(root_0, BIT_NOT177_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, bitwiseNotOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitwiseNotOp"


    public static class exprList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1398:1: exprList : ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.exprList_return exprList() throws RecognitionException {
        pollenParser.exprList_return retval = new pollenParser.exprList_return();
        retval.start = input.LT(1);

        int exprList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal179=null;
        pollenParser.expr_return expr178 =null;

        pollenParser.expr_return expr180 =null;


        BaseNode char_literal179_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1399:5: ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==BIT_NOT||LA62_0==CHAR||LA62_0==DEC||LA62_0==HEX_LIT||LA62_0==IDENT||(LA62_0 >= INC && LA62_0 <= INT_LIT)||LA62_0==LOG_NOT||LA62_0==MINUS||LA62_0==OCT_LIT||LA62_0==REAL_LIT||LA62_0==STRING||LA62_0==135||(LA62_0 >= 145 && LA62_0 <= 146)||LA62_0==166||(LA62_0 >= 179 && LA62_0 <= 180)||LA62_0==192) ) {
                alt62=1;
            }
            else if ( (LA62_0==136||LA62_0==147) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1399:10: expr ( ',' expr )*
                    {
                    pushFollow(FOLLOW_expr_in_exprList7985);
                    expr178=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr178.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1399:15: ( ',' expr )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==138) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1399:16: ',' expr
                    	    {
                    	    char_literal179=(Atom)match(input,138,FOLLOW_138_in_exprList7988); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal179);


                    	    pushFollow(FOLLOW_expr_in_exprList7990);
                    	    expr180=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr180.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1400:9: -> ^( LIST[\"LIST\"] ( expr )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1400:12: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1401:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1401:10: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, exprList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprList"


    public static class expr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1403:1: expr : exprLogicalOr exprQuestOp[$exprLogicalOr.tree] !;
    public final pollenParser.expr_return expr() throws RecognitionException {
        pollenParser.expr_return retval = new pollenParser.expr_return();
        retval.start = input.LT(1);

        int expr_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprLogicalOr_return exprLogicalOr181 =null;

        pollenParser.exprQuestOp_return exprQuestOp182 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1404:4: ( exprLogicalOr exprQuestOp[$exprLogicalOr.tree] !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1404:9: exprLogicalOr exprQuestOp[$exprLogicalOr.tree] !
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprLogicalOr_in_expr8056);
            exprLogicalOr181=exprLogicalOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprLogicalOr181.getTree());

            pushFollow(FOLLOW_exprQuestOp_in_expr8058);
            exprQuestOp182=exprQuestOp((exprLogicalOr181!=null?((BaseNode)exprLogicalOr181.tree):null));

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, expr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class exprQuestOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprQuestOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1406:1: exprQuestOp[CommonTree expr] : ( '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] expr expr ) |);
    public final pollenParser.exprQuestOp_return exprQuestOp(CommonTree expr) throws RecognitionException {
        pollenParser.exprQuestOp_return retval = new pollenParser.exprQuestOp_return();
        retval.start = input.LT(1);

        int exprQuestOp_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal183=null;
        Atom char_literal185=null;
        pollenParser.expr_return expr184 =null;

        pollenParser.expr_return expr186 =null;


        BaseNode char_literal183_tree=null;
        BaseNode char_literal185_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:4: ( '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] expr expr ) |)
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==144) ) {
                int LA63_1 = input.LA(2);

                if ( (synpred98_pollen()) ) {
                    alt63=1;
                }
                else if ( (true) ) {
                    alt63=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA63_0==ASSIGN||LA63_0==BRACE_CL||LA63_0==EQ||(LA63_0 >= GT && LA63_0 <= GT_EQ)||(LA63_0 >= LT && LA63_0 <= LT_EQ)||LA63_0==MINUS||(LA63_0 >= NLL && LA63_0 <= NOT_EQ)||LA63_0==PLUS||LA63_0==SEMI||(LA63_0 >= 132 && LA63_0 <= 134)||(LA63_0 >= 136 && LA63_0 <= 138)||(LA63_0 >= 140 && LA63_0 <= 143)||(LA63_0 >= 147 && LA63_0 <= 148)||(LA63_0 >= 199 && LA63_0 <= 200)) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:8: '?' expr ':' expr
                    {
                    char_literal183=(Atom)match(input,144,FOLLOW_144_in_exprQuestOp8082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_144.add(char_literal183);


                    pushFollow(FOLLOW_expr_in_exprQuestOp8084);
                    expr184=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr184.getTree());

                    char_literal185=(Atom)match(input,141,FOLLOW_141_in_exprQuestOp8086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal185);


                    pushFollow(FOLLOW_expr_in_exprQuestOp8088);
                    expr186=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr186.getTree());

                    // AST REWRITE
                    // elements: expr, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1412:26: -> ^( E_QUEST[\"E_QUEST\"] expr expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:30: ^( E_QUEST[\"E_QUEST\"] expr expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Quest(E_QUEST, "E_QUEST")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1414:4: 
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                  if (((BaseNode)retval.tree)  != null) {
                       expr.addChild(((BaseNode)retval.tree));
                  }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, exprQuestOp_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprQuestOp"


    public static class exprLogicalOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalOr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1415:1: exprLogicalOr : ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* ;
    public final pollenParser.exprLogicalOr_return exprLogicalOr() throws RecognitionException {
        pollenParser.exprLogicalOr_return retval = new pollenParser.exprLogicalOr_return();
        retval.start = input.LT(1);

        int exprLogicalOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal188=null;
        pollenParser.exprLogicalAnd_return exprLogicalAnd187 =null;

        pollenParser.exprLogicalAnd_return exprLogicalAnd189 =null;


        BaseNode string_literal188_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleSubtreeStream stream_exprLogicalAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1416:5: ( ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1416:7: ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1416:7: ( exprLogicalAnd -> exprLogicalAnd )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1416:8: exprLogicalAnd
            {
            pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr8127);
            exprLogicalAnd187=exprLogicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd187.getTree());

            // AST REWRITE
            // elements: exprLogicalAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1416:23: -> exprLogicalAnd
            {
                adaptor.addChild(root_0, stream_exprLogicalAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1417:9: ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==200) ) {
                    int LA64_1 = input.LA(2);

                    if ( (synpred99_pollen()) ) {
                        alt64=1;
                    }


                }


                switch (alt64) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1418:13: '||' exprLogicalAnd
            	    {
            	    string_literal188=(Atom)match(input,200,FOLLOW_200_in_exprLogicalOr8156); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_200.add(string_literal188);


            	    pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr8158);
            	    exprLogicalAnd189=exprLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd189.getTree());

            	    // AST REWRITE
            	    // elements: exprLogicalAnd, 200, exprLogicalOr
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1419:17: -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:20: ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_200.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprLogicalAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, exprLogicalOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalOr"


    public static class exprLogicalAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalAnd"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1422:1: exprLogicalAnd : ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* ;
    public final pollenParser.exprLogicalAnd_return exprLogicalAnd() throws RecognitionException {
        pollenParser.exprLogicalAnd_return retval = new pollenParser.exprLogicalAnd_return();
        retval.start = input.LT(1);

        int exprLogicalAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal191=null;
        pollenParser.exprBitwiseOr_return exprBitwiseOr190 =null;

        pollenParser.exprBitwiseOr_return exprBitwiseOr192 =null;


        BaseNode string_literal191_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_exprBitwiseOr=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseOr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:5: ( ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:10: ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:10: ( exprBitwiseOr -> exprBitwiseOr )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:11: exprBitwiseOr
            {
            pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd8224);
            exprBitwiseOr190=exprBitwiseOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr190.getTree());

            // AST REWRITE
            // elements: exprBitwiseOr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1423:28: -> exprBitwiseOr
            {
                adaptor.addChild(root_0, stream_exprBitwiseOr.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1424:5: ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==133) ) {
                    int LA65_1 = input.LA(2);

                    if ( (synpred100_pollen()) ) {
                        alt65=1;
                    }


                }


                switch (alt65) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1425:9: '&&' exprBitwiseOr
            	    {
            	    string_literal191=(Atom)match(input,133,FOLLOW_133_in_exprLogicalAnd8248); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_133.add(string_literal191);


            	    pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd8250);
            	    exprBitwiseOr192=exprBitwiseOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr192.getTree());

            	    // AST REWRITE
            	    // elements: 133, exprLogicalAnd, exprBitwiseOr
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1426:13: -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1426:16: ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_133.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseOr.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, exprLogicalAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprLogicalAnd"


    public static class exprBitwiseOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseOr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1429:1: exprBitwiseOr : ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* ;
    public final pollenParser.exprBitwiseOr_return exprBitwiseOr() throws RecognitionException {
        pollenParser.exprBitwiseOr_return retval = new pollenParser.exprBitwiseOr_return();
        retval.start = input.LT(1);

        int exprBitwiseOr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal194=null;
        pollenParser.exprBitwiseXor_return exprBitwiseXor193 =null;

        pollenParser.exprBitwiseXor_return exprBitwiseXor195 =null;


        BaseNode char_literal194_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleSubtreeStream stream_exprBitwiseXor=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseXor");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:5: ( ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:10: ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:10: ( exprBitwiseXor -> exprBitwiseXor )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:11: exprBitwiseXor
            {
            pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr8308);
            exprBitwiseXor193=exprBitwiseXor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor193.getTree());

            // AST REWRITE
            // elements: exprBitwiseXor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1430:26: -> exprBitwiseXor
            {
                adaptor.addChild(root_0, stream_exprBitwiseXor.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1431:5: ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==199) ) {
                    int LA66_1 = input.LA(2);

                    if ( (synpred101_pollen()) ) {
                        alt66=1;
                    }


                }


                switch (alt66) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1432:9: '|' exprBitwiseXor
            	    {
            	    char_literal194=(Atom)match(input,199,FOLLOW_199_in_exprBitwiseOr8329); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_199.add(char_literal194);


            	    pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr8331);
            	    exprBitwiseXor195=exprBitwiseXor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor195.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseOr, 199, exprBitwiseXor
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1433:9: -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1433:12: ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_199.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseXor.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, exprBitwiseOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseOr"


    public static class exprBitwiseXor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseXor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1436:1: exprBitwiseXor : ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* ;
    public final pollenParser.exprBitwiseXor_return exprBitwiseXor() throws RecognitionException {
        pollenParser.exprBitwiseXor_return retval = new pollenParser.exprBitwiseXor_return();
        retval.start = input.LT(1);

        int exprBitwiseXor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal197=null;
        pollenParser.exprBitwiseAnd_return exprBitwiseAnd196 =null;

        pollenParser.exprBitwiseAnd_return exprBitwiseAnd198 =null;


        BaseNode char_literal197_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleSubtreeStream stream_exprBitwiseAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseAnd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1437:5: ( ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1437:10: ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1437:10: ( exprBitwiseAnd -> exprBitwiseAnd )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1437:11: exprBitwiseAnd
            {
            pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor8385);
            exprBitwiseAnd196=exprBitwiseAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd196.getTree());

            // AST REWRITE
            // elements: exprBitwiseAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1437:26: -> exprBitwiseAnd
            {
                adaptor.addChild(root_0, stream_exprBitwiseAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1438:5: ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==148) ) {
                    int LA67_1 = input.LA(2);

                    if ( (synpred102_pollen()) ) {
                        alt67=1;
                    }


                }


                switch (alt67) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1439:9: '^' exprBitwiseAnd
            	    {
            	    char_literal197=(Atom)match(input,148,FOLLOW_148_in_exprBitwiseXor8406); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_148.add(char_literal197);


            	    pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor8408);
            	    exprBitwiseAnd198=exprBitwiseAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd198.getTree());

            	    // AST REWRITE
            	    // elements: 148, exprBitwiseAnd, exprBitwiseXor
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1440:9: -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1440:12: ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_148.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 70, exprBitwiseXor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseXor"


    public static class exprBitwiseAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseAnd"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1443:1: exprBitwiseAnd : ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* ;
    public final pollenParser.exprBitwiseAnd_return exprBitwiseAnd() throws RecognitionException {
        pollenParser.exprBitwiseAnd_return retval = new pollenParser.exprBitwiseAnd_return();
        retval.start = input.LT(1);

        int exprBitwiseAnd_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal200=null;
        pollenParser.exprEquality_return exprEquality199 =null;

        pollenParser.exprEquality_return exprEquality201 =null;


        BaseNode char_literal200_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_exprEquality=new RewriteRuleSubtreeStream(adaptor,"rule exprEquality");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:5: ( ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:10: ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:10: ( exprEquality -> exprEquality )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:11: exprEquality
            {
            pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd8462);
            exprEquality199=exprEquality();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality199.getTree());

            // AST REWRITE
            // elements: exprEquality
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1444:24: -> exprEquality
            {
                adaptor.addChild(root_0, stream_exprEquality.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:5: ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==134) ) {
                    int LA68_1 = input.LA(2);

                    if ( (synpred103_pollen()) ) {
                        alt68=1;
                    }


                }


                switch (alt68) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1446:9: '&' exprEquality
            	    {
            	    char_literal200=(Atom)match(input,134,FOLLOW_134_in_exprBitwiseAnd8483); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_134.add(char_literal200);


            	    pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd8488);
            	    exprEquality201=exprEquality();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality201.getTree());

            	    // AST REWRITE
            	    // elements: exprEquality, exprBitwiseAnd, 134
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1447:9: -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1447:12: ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_134.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprEquality.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 71, exprBitwiseAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprBitwiseAnd"


    public static class exprEquality_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprEquality"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1450:1: exprEquality : ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* ;
    public final pollenParser.exprEquality_return exprEquality() throws RecognitionException {
        pollenParser.exprEquality_return retval = new pollenParser.exprEquality_return();
        retval.start = input.LT(1);

        int exprEquality_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprRelational_return exprRelational202 =null;

        pollenParser.equalityOp_return equalityOp203 =null;

        pollenParser.exprRelational_return exprRelational204 =null;


        RewriteRuleSubtreeStream stream_equalityOp=new RewriteRuleSubtreeStream(adaptor,"rule equalityOp");
        RewriteRuleSubtreeStream stream_exprRelational=new RewriteRuleSubtreeStream(adaptor,"rule exprRelational");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1451:5: ( ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1451:10: ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1451:10: ( exprRelational -> exprRelational )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1451:11: exprRelational
            {
            pushFollow(FOLLOW_exprRelational_in_exprEquality8542);
            exprRelational202=exprRelational();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational202.getTree());

            // AST REWRITE
            // elements: exprRelational
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1451:26: -> exprRelational
            {
                adaptor.addChild(root_0, stream_exprRelational.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1452:5: ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==EQ||LA69_0==NOT_EQ) ) {
                    int LA69_1 = input.LA(2);

                    if ( (synpred104_pollen()) ) {
                        alt69=1;
                    }


                }


                switch (alt69) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1453:9: equalityOp exprRelational
            	    {
            	    pushFollow(FOLLOW_equalityOp_in_exprEquality8564);
            	    equalityOp203=equalityOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityOp.add(equalityOp203.getTree());

            	    pushFollow(FOLLOW_exprRelational_in_exprEquality8566);
            	    exprRelational204=exprRelational();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational204.getTree());

            	    // AST REWRITE
            	    // elements: exprRelational, equalityOp, exprEquality
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1454:9: -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1454:12: ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_equalityOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprRelational.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 72, exprEquality_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprEquality"


    public static class exprRelational_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprRelational"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1457:1: exprRelational : ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* ;
    public final pollenParser.exprRelational_return exprRelational() throws RecognitionException {
        pollenParser.exprRelational_return retval = new pollenParser.exprRelational_return();
        retval.start = input.LT(1);

        int exprRelational_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprShift_return exprShift205 =null;

        pollenParser.relationalOp_return relationalOp206 =null;

        pollenParser.exprShift_return exprShift207 =null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_exprShift=new RewriteRuleSubtreeStream(adaptor,"rule exprShift");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:5: ( ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:10: ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:10: ( exprShift -> exprShift )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:11: exprShift
            {
            pushFollow(FOLLOW_exprShift_in_exprRelational8620);
            exprShift205=exprShift();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprShift.add(exprShift205.getTree());

            // AST REWRITE
            // elements: exprShift
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1458:21: -> exprShift
            {
                adaptor.addChild(root_0, stream_exprShift.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1459:5: ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( ((LA70_0 >= GT && LA70_0 <= GT_EQ)||(LA70_0 >= LT && LA70_0 <= LT_EQ)) ) {
                    int LA70_1 = input.LA(2);

                    if ( (synpred105_pollen()) ) {
                        alt70=1;
                    }


                }


                switch (alt70) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:9: relationalOp exprShift
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_exprRelational8642);
            	    relationalOp206=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relationalOp.add(relationalOp206.getTree());

            	    pushFollow(FOLLOW_exprShift_in_exprRelational8644);
            	    exprShift207=exprShift();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprShift.add(exprShift207.getTree());

            	    // AST REWRITE
            	    // elements: exprRelational, relationalOp, exprShift
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1461:9: -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:12: ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_relationalOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprShift.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 73, exprRelational_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprRelational"


    public static class exprShift_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprShift"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:1: exprShift : ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* ;
    public final pollenParser.exprShift_return exprShift() throws RecognitionException {
        pollenParser.exprShift_return retval = new pollenParser.exprShift_return();
        retval.start = input.LT(1);

        int exprShift_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprAddSub_return exprAddSub208 =null;

        pollenParser.shiftOp_return shiftOp209 =null;

        pollenParser.exprAddSub_return exprAddSub210 =null;


        RewriteRuleSubtreeStream stream_exprAddSub=new RewriteRuleSubtreeStream(adaptor,"rule exprAddSub");
        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:5: ( ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:10: ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:10: ( exprAddSub -> exprAddSub )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:11: exprAddSub
            {
            pushFollow(FOLLOW_exprAddSub_in_exprShift8699);
            exprAddSub208=exprAddSub();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub208.getTree());

            // AST REWRITE
            // elements: exprAddSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1465:22: -> exprAddSub
            {
                adaptor.addChild(root_0, stream_exprAddSub.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1466:5: ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( ((LA71_0 >= 142 && LA71_0 <= 143)) ) {
                    int LA71_1 = input.LA(2);

                    if ( (synpred106_pollen()) ) {
                        alt71=1;
                    }


                }


                switch (alt71) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1467:9: shiftOp exprAddSub
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_exprShift8721);
            	    shiftOp209=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftOp.add(shiftOp209.getTree());

            	    pushFollow(FOLLOW_exprAddSub_in_exprShift8724);
            	    exprAddSub210=exprAddSub();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub210.getTree());

            	    // AST REWRITE
            	    // elements: exprAddSub, exprShift, shiftOp
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1468:9: -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1468:12: ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_shiftOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprAddSub.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 74, exprShift_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprShift"


    public static class exprAddSub_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAddSub"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1471:1: exprAddSub : ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* ;
    public final pollenParser.exprAddSub_return exprAddSub() throws RecognitionException {
        pollenParser.exprAddSub_return retval = new pollenParser.exprAddSub_return();
        retval.start = input.LT(1);

        int exprAddSub_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprMultDiv_return exprMultDiv211 =null;

        pollenParser.addSubOp_return addSubOp212 =null;

        pollenParser.exprMultDiv_return exprMultDiv213 =null;


        RewriteRuleSubtreeStream stream_exprMultDiv=new RewriteRuleSubtreeStream(adaptor,"rule exprMultDiv");
        RewriteRuleSubtreeStream stream_addSubOp=new RewriteRuleSubtreeStream(adaptor,"rule addSubOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1472:5: ( ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1472:10: ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1472:10: ( exprMultDiv -> exprMultDiv )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1472:11: exprMultDiv
            {
            pushFollow(FOLLOW_exprMultDiv_in_exprAddSub8779);
            exprMultDiv211=exprMultDiv();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv211.getTree());

            // AST REWRITE
            // elements: exprMultDiv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1472:23: -> exprMultDiv
            {
                adaptor.addChild(root_0, stream_exprMultDiv.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1473:5: ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==MINUS||LA72_0==PLUS) ) {
                    int LA72_1 = input.LA(2);

                    if ( (synpred107_pollen()) ) {
                        alt72=1;
                    }


                }


                switch (alt72) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1474:9: addSubOp exprMultDiv
            	    {
            	    pushFollow(FOLLOW_addSubOp_in_exprAddSub8800);
            	    addSubOp212=addSubOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_addSubOp.add(addSubOp212.getTree());

            	    pushFollow(FOLLOW_exprMultDiv_in_exprAddSub8805);
            	    exprMultDiv213=exprMultDiv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv213.getTree());

            	    // AST REWRITE
            	    // elements: addSubOp, exprAddSub, exprMultDiv
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1475:9: -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1475:12: ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_addSubOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprMultDiv.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 75, exprAddSub_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprAddSub"


    public static class exprMultDiv_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprMultDiv"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1478:1: exprMultDiv : ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* ;
    public final pollenParser.exprMultDiv_return exprMultDiv() throws RecognitionException {
        pollenParser.exprMultDiv_return retval = new pollenParser.exprMultDiv_return();
        retval.start = input.LT(1);

        int exprMultDiv_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprUnary_return exprUnary214 =null;

        pollenParser.multDivModOp_return multDivModOp215 =null;

        pollenParser.exprUnary_return exprUnary216 =null;


        RewriteRuleSubtreeStream stream_multDivModOp=new RewriteRuleSubtreeStream(adaptor,"rule multDivModOp");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:5: ( ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:10: ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:10: ( exprUnary -> exprUnary )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:11: exprUnary
            {
            pushFollow(FOLLOW_exprUnary_in_exprMultDiv8863);
            exprUnary214=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary214.getTree());

            // AST REWRITE
            // elements: exprUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1479:21: -> exprUnary
            {
                adaptor.addChild(root_0, stream_exprUnary.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1480:5: ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==132||LA73_0==137||LA73_0==140) ) {
                    int LA73_1 = input.LA(2);

                    if ( (synpred108_pollen()) ) {
                        alt73=1;
                    }


                }


                switch (alt73) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1481:9: multDivModOp exprUnary
            	    {
            	    pushFollow(FOLLOW_multDivModOp_in_exprMultDiv8884);
            	    multDivModOp215=multDivModOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multDivModOp.add(multDivModOp215.getTree());

            	    pushFollow(FOLLOW_exprUnary_in_exprMultDiv8886);
            	    exprUnary216=exprUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary216.getTree());

            	    // AST REWRITE
            	    // elements: exprMultDiv, multDivModOp, exprUnary
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1482:9: -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1482:12: ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_multDivModOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprUnary.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 76, exprMultDiv_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprMultDiv"


    public static class exprNew_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprNew"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1485:1: exprNew : 'new' qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) ) ;
    public final pollenParser.exprNew_return exprNew() throws RecognitionException {
        pollenParser.exprNew_return retval = new pollenParser.exprNew_return();
        retval.start = input.LT(1);

        int exprNew_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal217=null;
        pollenParser.qualName_return qualName218 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList219 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess220 =null;


        BaseNode string_literal217_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");

            String ctor = (typeMods.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;
            if (!(typeMods.contains(Flags.HOST)))
                ctor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1492:5: ( 'new' qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1492:7: 'new' qualName fcnArgumentList ( fieldOrArrayAccess )?
            {
            string_literal217=(Atom)match(input,179,FOLLOW_179_in_exprNew8946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal217);


            pushFollow(FOLLOW_qualName_in_exprNew8948);
            qualName218=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName218.getTree());

            pushFollow(FOLLOW_fcnArgumentList_in_exprNew8950);
            fcnArgumentList219=fcnArgumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList219.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1492:38: ( fieldOrArrayAccess )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==139||LA74_0==146) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1492:38: fieldOrArrayAccess
                    {
                    pushFollow(FOLLOW_fieldOrArrayAccess_in_exprNew8952);
                    fieldOrArrayAccess220=fieldOrArrayAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess220.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: fieldOrArrayAccess, fcnArgumentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1493:5: -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1493:8: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.New(E_NEW, "E_NEW")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1494:13: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Call(E_CALL, "E_CALL")
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1495:13: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Ident(E_IDENT, "E_IDENT")
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, (qualName218!=null?input.toString(qualName218.start,qualName218.stop):null) + "." + ctor)
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1495:102: ( fieldOrArrayAccess )?
                if ( stream_fieldOrArrayAccess.hasNext() ) {
                    adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                }
                stream_fieldOrArrayAccess.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 77, exprNew_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprNew"


    public static class exprUnary_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprUnary"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1497:1: exprUnary : ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] expr MINUS ) | '(' expr ')' -> ^( E_PAREN[\"E_PAREN\"] expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew );
    public final pollenParser.exprUnary_return exprUnary() throws RecognitionException {
        pollenParser.exprUnary_return retval = new pollenParser.exprUnary_return();
        retval.start = input.LT(1);

        int exprUnary_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom MINUS228=null;
        Atom char_literal230=null;
        Atom char_literal232=null;
        pollenParser.primitiveLit_return primitiveLit221 =null;

        pollenParser.injectionCode_return injectionCode222 =null;

        pollenParser.arrayLit_return arrayLit223 =null;

        pollenParser.logicalNotOp_return logicalNotOp224 =null;

        pollenParser.expr_return expr225 =null;

        pollenParser.bitwiseNotOp_return bitwiseNotOp226 =null;

        pollenParser.expr_return expr227 =null;

        pollenParser.expr_return expr229 =null;

        pollenParser.expr_return expr231 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray233 =null;

        pollenParser.incDecOp_return incDecOp234 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray235 =null;

        pollenParser.incDecOp_return incDecOp236 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray237 =null;

        pollenParser.exprNew_return exprNew238 =null;


        BaseNode MINUS228_tree=null;
        BaseNode char_literal230_tree=null;
        BaseNode char_literal232_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arrayLit=new RewriteRuleSubtreeStream(adaptor,"rule arrayLit");
        RewriteRuleSubtreeStream stream_incDecOp=new RewriteRuleSubtreeStream(adaptor,"rule incDecOp");
        RewriteRuleSubtreeStream stream_bitwiseNotOp=new RewriteRuleSubtreeStream(adaptor,"rule bitwiseNotOp");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_logicalNotOp=new RewriteRuleSubtreeStream(adaptor,"rule logicalNotOp");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1498:5: ( primitiveLit | injectionCode | arrayLit -> ^( E_VEC[\"E_VEC\"] arrayLit ) | logicalNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp ) | bitwiseNotOp expr -> ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp ) | MINUS expr -> ^( E_UNARY[\"E_UNARY\"] expr MINUS ) | '(' expr ')' -> ^( E_PAREN[\"E_PAREN\"] expr ) | varOrFcnOrArray incDecOp -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp ) | varOrFcnOrArray | incDecOp varOrFcnOrArray -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp ) | exprNew )
            int alt75=11;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 166:
            case 180:
            case 192:
                {
                alt75=1;
                }
                break;
            case INJECT:
                {
                alt75=2;
                }
                break;
            case 146:
                {
                alt75=3;
                }
                break;
            case LOG_NOT:
                {
                alt75=4;
                }
                break;
            case BIT_NOT:
                {
                alt75=5;
                }
                break;
            case MINUS:
                {
                alt75=6;
                }
                break;
            case 135:
                {
                alt75=7;
                }
                break;
            case 179:
                {
                int LA75_8 = input.LA(2);

                if ( (synpred117_pollen()) ) {
                    alt75=8;
                }
                else if ( (synpred118_pollen()) ) {
                    alt75=9;
                }
                else if ( (true) ) {
                    alt75=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 8, input);

                    throw nvae;

                }
                }
                break;
            case DEC:
            case INC:
                {
                alt75=10;
                }
                break;
            case IDENT:
            case 145:
                {
                int LA75_13 = input.LA(2);

                if ( (synpred117_pollen()) ) {
                    alt75=8;
                }
                else if ( (synpred118_pollen()) ) {
                    alt75=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 13, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }

            switch (alt75) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1498:10: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_exprUnary9043);
                    primitiveLit221=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit221.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1499:10: injectionCode
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionCode_in_exprUnary9054);
                    injectionCode222=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionCode222.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1500:10: arrayLit
                    {
                    pushFollow(FOLLOW_arrayLit_in_exprUnary9065);
                    arrayLit223=arrayLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLit.add(arrayLit223.getTree());

                    // AST REWRITE
                    // elements: arrayLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1500:34: -> ^( E_VEC[\"E_VEC\"] arrayLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1500:37: ^( E_VEC[\"E_VEC\"] arrayLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_arrayLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1501:10: logicalNotOp expr
                    {
                    pushFollow(FOLLOW_logicalNotOp_in_exprUnary9105);
                    logicalNotOp224=logicalNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicalNotOp.add(logicalNotOp224.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary9107);
                    expr225=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr225.getTree());

                    // AST REWRITE
                    // elements: expr, logicalNotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1501:40: -> ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1501:43: ^( E_UNARY[\"E_UNARY\"] expr logicalNotOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_logicalNotOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:10: bitwiseNotOp expr
                    {
                    pushFollow(FOLLOW_bitwiseNotOp_in_exprUnary9147);
                    bitwiseNotOp226=bitwiseNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bitwiseNotOp.add(bitwiseNotOp226.getTree());

                    pushFollow(FOLLOW_expr_in_exprUnary9149);
                    expr227=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr227.getTree());

                    // AST REWRITE
                    // elements: expr, bitwiseNotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1502:41: -> ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:44: ^( E_UNARY[\"E_UNARY\"] expr bitwiseNotOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_bitwiseNotOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1503:10: MINUS expr
                    {
                    MINUS228=(Atom)match(input,MINUS,FOLLOW_MINUS_in_exprUnary9190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS228);


                    pushFollow(FOLLOW_expr_in_exprUnary9192);
                    expr229=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr229.getTree());

                    // AST REWRITE
                    // elements: expr, MINUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1503:36: -> ^( E_UNARY[\"E_UNARY\"] expr MINUS )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1503:39: ^( E_UNARY[\"E_UNARY\"] expr MINUS )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, 
                        stream_MINUS.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1504:10: '(' expr ')'
                    {
                    char_literal230=(Atom)match(input,135,FOLLOW_135_in_exprUnary9235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal230);


                    pushFollow(FOLLOW_expr_in_exprUnary9237);
                    expr231=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr231.getTree());

                    char_literal232=(Atom)match(input,136,FOLLOW_136_in_exprUnary9239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal232);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1504:38: -> ^( E_PAREN[\"E_PAREN\"] expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1504:41: ^( E_PAREN[\"E_PAREN\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Paren(E_PAREN, "E_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1505:10: varOrFcnOrArray incDecOp
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary9280);
                    varOrFcnOrArray233=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray233.getTree());

                    pushFollow(FOLLOW_incDecOp_in_exprUnary9282);
                    incDecOp234=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp234.getTree());

                    // AST REWRITE
                    // elements: incDecOp, varOrFcnOrArray
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1505:43: -> ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1505:46: ^( E_UNARY[\"E_UNARY\", true] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY", true)
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1506:10: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary9317);
                    varOrFcnOrArray235=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray235.getTree());

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1507:10: incDecOp varOrFcnOrArray
                    {
                    pushFollow(FOLLOW_incDecOp_in_exprUnary9328);
                    incDecOp236=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp236.getTree());

                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprUnary9330);
                    varOrFcnOrArray237=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray237.getTree());

                    // AST REWRITE
                    // elements: incDecOp, varOrFcnOrArray
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1507:43: -> ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1507:46: ^( E_UNARY[\"E_UNARY\"] varOrFcnOrArray incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1508:10: exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_exprUnary9365);
                    exprNew238=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 78, exprUnary_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprUnary"


    public static class fcnDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1510:1: fcnDefinition : fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) ;
    public final pollenParser.fcnDefinition_return fcnDefinition() throws RecognitionException {
        pollenParser.fcnDefinition_return retval = new pollenParser.fcnDefinition_return();
        retval.start = input.LT(1);

        int fcnDefinition_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr239 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName240 =null;

        pollenParser.formalParameterList_return formalParameterList241 =null;

        pollenParser.fcnBody_return fcnBody242 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1511:5: ( fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1511:7: fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDefinition9381);
            fcnAttr239=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr239.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinition9391);
            fcnType_fcnName240=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName240.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinition9393);
            formalParameterList241=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList241.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinition9395);
            fcnBody242=fcnBody((formalParameterList241!=null?((BaseNode)formalParameterList241.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody242.getTree());

            // AST REWRITE
            // elements: fcnType_fcnName, formalParameterList, fcnBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1513:9: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1513:12: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1516:13: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1517:17: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 79, fcnDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinition"


    public static class fcnDefinitionHost_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinitionHost"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1521:1: fcnDefinitionHost : fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) ;
    public final pollenParser.fcnDefinitionHost_return fcnDefinitionHost() throws RecognitionException {
        pollenParser.fcnDefinitionHost_return retval = new pollenParser.fcnDefinitionHost_return();
        retval.start = input.LT(1);

        int fcnDefinitionHost_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr243 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName244 =null;

        pollenParser.formalParameterList_return formalParameterList245 =null;

        pollenParser.fcnBody_return fcnBody246 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1523:5: ( fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1523:10: fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDefinitionHost9546);
            fcnAttr243=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr243.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinitionHost9559);
            fcnType_fcnName244=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName244.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinitionHost9562);
            formalParameterList245=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList245.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinitionHost9564);
            fcnBody246=fcnBody((formalParameterList245!=null?((BaseNode)formalParameterList245.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody246.getTree());

            if ( state.backtracking==0 ) {     featureFlags.add(Flags.PUBLIC); /* enforce */     
                        if (!featureFlags.contains(Flags.HOST))
                                   throw new PollenException("Composition features must be one of host functions, export statements, or enum definitions.", input);
                    }

            // AST REWRITE
            // elements: formalParameterList, fcnBody, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1529:9: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1529:12: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1533:17: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1534:21: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 80, fcnDefinitionHost_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDefinitionHost"


    public static class fcnAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1542:1: fcnAttr : ( 'public' | 'host' | 'preset' )* ;
    public final pollenParser.fcnAttr_return fcnAttr() throws RecognitionException {
        pollenParser.fcnAttr_return retval = new pollenParser.fcnAttr_return();
        retval.start = input.LT(1);

        int fcnAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal247=null;
        Atom string_literal248=null;
        Atom string_literal249=null;

        BaseNode string_literal247_tree=null;
        BaseNode string_literal248_tree=null;
        BaseNode string_literal249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:5: ( ( 'public' | 'host' | 'preset' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:10: ( 'public' | 'host' | 'preset' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:10: ( 'public' | 'host' | 'preset' )*
            loop76:
            do {
                int alt76=4;
                switch ( input.LA(1) ) {
                case 187:
                    {
                    alt76=1;
                    }
                    break;
                case 169:
                    {
                    alt76=2;
                    }
                    break;
                case 183:
                    {
                    alt76=3;
                    }
                    break;

                }

                switch (alt76) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1543:15: 'public'
            	    {
            	    string_literal247=(Atom)match(input,187,FOLLOW_187_in_fcnAttr9762); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal247_tree = 
            	    (BaseNode)adaptor.create(string_literal247)
            	    ;
            	    adaptor.addChild(root_0, string_literal247_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.PUBLIC); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1544:14: 'host'
            	    {
            	    string_literal248=(Atom)match(input,169,FOLLOW_169_in_fcnAttr9780); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal248_tree = 
            	    (BaseNode)adaptor.create(string_literal248)
            	    ;
            	    adaptor.addChild(root_0, string_literal248_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.HOST); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1545:14: 'preset'
            	    {
            	    string_literal249=(Atom)match(input,183,FOLLOW_183_in_fcnAttr9798); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal249_tree = 
            	    (BaseNode)adaptor.create(string_literal249)
            	    ;
            	    adaptor.addChild(root_0, string_literal249_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.PRESET); }

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 81, fcnAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnAttr"


    public static class fcnBody_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnBody"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1548:1: fcnBody[CommonTree formals] : ( NLL )? braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) ;
    public final pollenParser.fcnBody_return fcnBody(CommonTree formals) throws RecognitionException {
        pollenParser.fcnBody_return retval = new pollenParser.fcnBody_return();
        retval.start = input.LT(1);

        int fcnBody_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL250=null;
        pollenParser.braceOpen_return braceOpen251 =null;

        pollenParser.stmts_return stmts252 =null;

        pollenParser.braceClose_return braceClose253 =null;


        BaseNode NLL250_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:3: ( ( NLL )? braceOpen ( stmts ) braceClose -> ^( FCNBODY[\"FCNBODY\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:8: ( NLL )? braceOpen ( stmts ) braceClose
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:8: ( NLL )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==NLL) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:9: NLL
                    {
                    NLL250=(Atom)match(input,NLL,FOLLOW_NLL_in_fcnBody9831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL250);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_fcnBody9835);
            braceOpen251=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen251.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:25: ( stmts )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:26: stmts
            {
            pushFollow(FOLLOW_stmts_in_fcnBody9838);
            stmts252=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts252.getTree());

            }


            pushFollow(FOLLOW_braceClose_in_fcnBody9842);
            braceClose253=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose253.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1549:46: -> ^( FCNBODY[\"FCNBODY\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:49: ^( FCNBODY[\"FCNBODY\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new BodyNode(FCNBODY, "FCNBODY")
                , root_1);

                adaptor.addChild(root_1, formals);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 82, fcnBody_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnBody"


    public static class fcnDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1551:1: fcnDeclaration : fcnAttr fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ) ;
    public final pollenParser.fcnDeclaration_return fcnDeclaration() throws RecognitionException {
        pollenParser.fcnDeclaration_return retval = new pollenParser.fcnDeclaration_return();
        retval.start = input.LT(1);

        int fcnDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr254 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName255 =null;

        pollenParser.formalParameterList_return formalParameterList256 =null;

        pollenParser.delim_return delim257 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1552:4: ( fcnAttr fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1552:9: fcnAttr fcnType_fcnName ( formalParameterList ) delim
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDeclaration9874);
            fcnAttr254=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr254.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDeclaration9884);
            fcnType_fcnName255=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName255.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1553:25: ( formalParameterList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1553:26: formalParameterList
            {
            pushFollow(FOLLOW_formalParameterList_in_fcnDeclaration9887);
            formalParameterList256=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList256.getTree());

            }


            pushFollow(FOLLOW_delim_in_fcnDeclaration9890);
            delim257=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim257.getTree());

            if ( state.backtracking==0 ) {
                        if (currType.getUnitFlags().contains(Flags.PROTOCOL))
                            featureFlags.add(Flags.PUBLIC);
                    }

            // AST REWRITE
            // elements: formalParameterList, fcnType_fcnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1558:4: -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:7: ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DCL, "D_FCN_DCL", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1561:10: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1562:13: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 83, fcnDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnDeclaration"


    public static class fcnType_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnType_fcnName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1566:1: fcnType_fcnName : ( typeNameArray varArraySpec qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName ) | typeName qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] ) | qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName );
    public final pollenParser.fcnType_fcnName_return fcnType_fcnName() throws RecognitionException {
        pollenParser.fcnType_fcnName_return retval = new pollenParser.fcnType_fcnName_return();
        retval.start = input.LT(1);

        int fcnType_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeNameArray_return typeNameArray258 =null;

        pollenParser.varArraySpec_return varArraySpec259 =null;

        pollenParser.qualName_return qualName260 =null;

        pollenParser.typeName_return typeName261 =null;

        pollenParser.qualName_return qualName262 =null;

        pollenParser.typeName_return typeName263 =null;

        pollenParser.typeName_return typeName264 =null;

        pollenParser.typeName_return typeName265 =null;

        pollenParser.qualName_return qualName266 =null;

        pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName267 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");

            String modCtor = "";
            String clsCtor = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:5: ( typeNameArray varArraySpec qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName ) | typeName qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) |{...}? typeName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] ) |{...}? typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] ) | qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName ) | ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName )
            int alt78=7;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==150) ) {
                int LA78_1 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==152) ) {
                int LA78_2 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==175) ) {
                int LA78_3 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==173) ) {
                int LA78_4 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==174) ) {
                int LA78_5 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==188) ) {
                int LA78_6 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==190) ) {
                int LA78_7 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==196) ) {
                int LA78_8 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==194) ) {
                int LA78_9 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==195) ) {
                int LA78_10 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==IDENT) ) {
                int LA78_11 = input.LA(2);

                if ( (synpred124_pollen()) ) {
                    alt78=1;
                }
                else if ( (synpred125_pollen()) ) {
                    alt78=2;
                }
                else if ( (((synpred126_pollen()&&synpred126_pollen())&&((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=3;
                }
                else if ( (((synpred127_pollen()&&synpred127_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ))) ) {
                    alt78=4;
                }
                else if ( (((synpred128_pollen()&&synpred128_pollen())&&(input.LT(1).getText().equals(currType.getTypeName()) ))) ) {
                    alt78=5;
                }
                else if ( (synpred129_pollen()) ) {
                    alt78=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA78_0==135) && (synpred131_pollen())) {
                alt78=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:10: typeNameArray varArraySpec qualName
                    {
                    pushFollow(FOLLOW_typeNameArray_in_fcnType_fcnName10026);
                    typeNameArray258=typeNameArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray258.getTree());

                    pushFollow(FOLLOW_varArraySpec_in_fcnType_fcnName10028);
                    varArraySpec259=varArraySpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec259.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName10030);
                    qualName260=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName260.getTree());

                    // AST REWRITE
                    // elements: typeNameArray, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1575:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1575:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1576:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1577:17: ^( LIST[\"LIST\"] typeNameArray )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeNameArray.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:10: typeName qualName
                    {
                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName10134);
                    typeName261=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName261.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName10136);
                    qualName262=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName262.getTree());

                    // AST REWRITE
                    // elements: qualName, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1580:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1580:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1581:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1582:17: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1584:10: {...}? typeName
                    {
                    if ( !(((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "(featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName10256);
                    typeName263=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName263.getTree());

                    if ( state.backtracking==0 ) { 
                              String n;
                              featureFlags.remove(Flags.PUBLIC);
                              featureFlags.add(Flags.HOST);
                              if (!currType.getUnitFlags().contains(Flags.COMPOSITION)) {
                                  ParseUnit.current().reportError(currType.getTypeName(), "\'preset\' initializer only allowed in compositions: initializer ignored"); 
                                  featureFlags.remove(Flags.PRESET);
                                  n = "preset";
                              }
                              else {
                                  n = ParseUnit.PRESET_INIT;
                              }
                            }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1599:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1599:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1600:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1601:13: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1601:38: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.PRESET_INIT)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1603:10: {...}? typeName
                    {
                    if ( !((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName10405);
                    typeName264=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName264.getTree());

                    if ( state.backtracking==0 ) { 
                              featureFlags.add(Flags.CONSTRUCTOR); 
                              if (featureFlags.contains(Flags.HOST)) hasHostConstructor = true;
                              if (!featureFlags.contains(Flags.HOST)) hasTargetConstructor = true;
                              modCtor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_MODULE_HOST : ParseUnit.CTOR_MODULE_TARGET;
                            }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1611:9: -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1611:12: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1612:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1613:13: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1613:38: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, modCtor)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1615:10: {...}? typeName
                    {
                    if ( !((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType_fcnName", "input.LT(1).getText().equals(currType.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName10554);
                    typeName265=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName265.getTree());

                    if ( state.backtracking==0 ) { 
                              featureFlags.add(Flags.CONSTRUCTOR); 
                              if (featureFlags.contains(Flags.HOST)) hasHostConstructor = true;
                              if (!featureFlags.contains(Flags.HOST)) hasTargetConstructor = true;
                              clsCtor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;
                            }

                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1623:9: -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1623:12: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1624:58: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, clsCtor)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1625:10: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName10647);
                    qualName266=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName266.getTree());

                    if ( state.backtracking==0 ) { featureFlags.add(Flags.VOID_FCN); }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1627:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:60: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1628:17: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1628:42: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:10: ( '(' typeName ( ',' typeName )* ')' qualName )=> fcnTypes_fcnName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName10768);
                    fcnTypes_fcnName267=fcnTypes_fcnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnTypes_fcnName267.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 84, fcnType_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnType_fcnName"


    public static class fcnTypes_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes_fcnName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1631:1: fcnTypes_fcnName : '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName ) ;
    public final pollenParser.fcnTypes_fcnName_return fcnTypes_fcnName() throws RecognitionException {
        pollenParser.fcnTypes_fcnName_return retval = new pollenParser.fcnTypes_fcnName_return();
        retval.start = input.LT(1);

        int fcnTypes_fcnName_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal268=null;
        Atom char_literal270=null;
        pollenParser.fcnTypes_return fcnTypes269 =null;

        pollenParser.qualName_return qualName271 =null;


        BaseNode char_literal268_tree=null;
        BaseNode char_literal270_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fcnTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1632:5: ( '(' fcnTypes ')' qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1632:10: '(' fcnTypes ')' qualName
            {
            char_literal268=(Atom)match(input,135,FOLLOW_135_in_fcnTypes_fcnName10791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal268);


            pushFollow(FOLLOW_fcnTypes_in_fcnTypes_fcnName10793);
            fcnTypes269=fcnTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnTypes.add(fcnTypes269.getTree());

            char_literal270=(Atom)match(input,136,FOLLOW_136_in_fcnTypes_fcnName10795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal270);


            pushFollow(FOLLOW_qualName_in_fcnTypes_fcnName10797);
            qualName271=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName271.getTree());

            // AST REWRITE
            // elements: qualName, fcnTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1632:36: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1632:39: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] fcnTypes qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                , root_1);

                adaptor.addChild(root_1, stream_fcnTypes.nextTree());

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 85, fcnTypes_fcnName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes_fcnName"


    public static class fcnTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnTypes"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1634:1: fcnTypes : typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) ;
    public final pollenParser.fcnTypes_return fcnTypes() throws RecognitionException {
        pollenParser.fcnTypes_return retval = new pollenParser.fcnTypes_return();
        retval.start = input.LT(1);

        int fcnTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal273=null;
        pollenParser.typeName_return typeName272 =null;

        pollenParser.typeName_return typeName274 =null;


        BaseNode char_literal273_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:5: ( typeName ( ',' typeName )* -> ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:10: typeName ( ',' typeName )*
            {
            pushFollow(FOLLOW_typeName_in_fcnTypes10833);
            typeName272=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName272.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:19: ( ',' typeName )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==138) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:20: ',' typeName
            	    {
            	    char_literal273=(Atom)match(input,138,FOLLOW_138_in_fcnTypes10836); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal273);


            	    pushFollow(FOLLOW_typeName_in_fcnTypes10838);
            	    typeName274=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeName.add(typeName274.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            // AST REWRITE
            // elements: typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1635:35: -> ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:38: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ( typeName )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1635:83: ^( LIST[\"LIST\"] ( typeName )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_typeName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_typeName.nextTree());

                }
                stream_typeName.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 86, fcnTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnTypes"


    public static class formalParameterList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1637:1: formalParameterList : '(' formalParameters ')' -> formalParameters ;
    public final pollenParser.formalParameterList_return formalParameterList() throws RecognitionException {
        pollenParser.formalParameterList_return retval = new pollenParser.formalParameterList_return();
        retval.start = input.LT(1);

        int formalParameterList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal275=null;
        Atom char_literal277=null;
        pollenParser.formalParameters_return formalParameters276 =null;


        BaseNode char_literal275_tree=null;
        BaseNode char_literal277_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1638:5: ( '(' formalParameters ')' -> formalParameters )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1638:10: '(' formalParameters ')'
            {
            char_literal275=(Atom)match(input,135,FOLLOW_135_in_formalParameterList10882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal275);


            pushFollow(FOLLOW_formalParameters_in_formalParameterList10884);
            formalParameters276=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters276.getTree());

            char_literal277=(Atom)match(input,136,FOLLOW_136_in_formalParameterList10886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal277);


            // AST REWRITE
            // elements: formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1638:35: -> formalParameters
            {
                adaptor.addChild(root_0, stream_formalParameters.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 87, formalParameterList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterList"


    public static class formalParameters_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameters"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1645:1: formalParameters : ( formalParameter ( ',' formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.formalParameters_return formalParameters() throws RecognitionException {
        pollenParser.formalParameters_return retval = new pollenParser.formalParameters_return();
        retval.start = input.LT(1);

        int formalParameters_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal279=null;
        pollenParser.formalParameter_return formalParameter278 =null;

        pollenParser.formalParameter_return formalParameter280 =null;


        BaseNode char_literal279_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");


        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:5: ( formalParameter ( ',' formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==IDENT||LA81_0==150||LA81_0==152||(LA81_0 >= 173 && LA81_0 <= 175)||LA81_0==188||LA81_0==190||(LA81_0 >= 193 && LA81_0 <= 196)) ) {
                alt81=1;
            }
            else if ( (LA81_0==136) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:10: formalParameter ( ',' formalParameter )*
                    {
                    pushFollow(FOLLOW_formalParameter_in_formalParameters10919);
                    formalParameter278=formalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter278.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:26: ( ',' formalParameter )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==138) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:27: ',' formalParameter
                    	    {
                    	    char_literal279=(Atom)match(input,138,FOLLOW_138_in_formalParameters10922); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal279);


                    	    pushFollow(FOLLOW_formalParameter_in_formalParameters10924);
                    	    formalParameter280=formalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter280.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: formalParameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1649:9: -> ^( LIST[\"LIST\"] ( formalParameter )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1649:12: ^( LIST[\"LIST\"] ( formalParameter )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_formalParameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameter.nextTree());

                        }
                        stream_formalParameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1651:9: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:12: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 88, formalParameters_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameters"


    public static class formalParameter_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameter"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1654:1: formalParameter : ( 'type' IDENT ( '=' t= typeName )? -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? ) | ( typeName '[' )=> formalParameterArr | typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) );
    public final pollenParser.formalParameter_return formalParameter() throws RecognitionException {
        pollenParser.formalParameter_return retval = new pollenParser.formalParameter_return();
        retval.start = input.LT(1);

        int formalParameter_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal281=null;
        Atom IDENT282=null;
        Atom char_literal283=null;
        Atom IDENT286=null;
        Atom char_literal287=null;
        pollenParser.typeName_return t =null;

        pollenParser.formalParameterArr_return formalParameterArr284 =null;

        pollenParser.typeName_return typeName285 =null;

        pollenParser.expr_return expr288 =null;


        BaseNode string_literal281_tree=null;
        BaseNode IDENT282_tree=null;
        BaseNode char_literal283_tree=null;
        BaseNode IDENT286_tree=null;
        BaseNode char_literal287_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

            EnumSet<Flags> pFlags = EnumSet.noneOf(Flags.class);        

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:5: ( 'type' IDENT ( '=' t= typeName )? -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? ) | ( typeName '[' )=> formalParameterArr | typeName IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) )
            int alt84=3;
            switch ( input.LA(1) ) {
            case 193:
                {
                alt84=1;
                }
                break;
            case 150:
                {
                int LA84_2 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 2, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                int LA84_3 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 3, input);

                    throw nvae;

                }
                }
                break;
            case 175:
                {
                int LA84_4 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 4, input);

                    throw nvae;

                }
                }
                break;
            case 173:
                {
                int LA84_5 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 5, input);

                    throw nvae;

                }
                }
                break;
            case 174:
                {
                int LA84_6 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 6, input);

                    throw nvae;

                }
                }
                break;
            case 188:
                {
                int LA84_7 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 7, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA84_8 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 8, input);

                    throw nvae;

                }
                }
                break;
            case 196:
                {
                int LA84_9 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 9, input);

                    throw nvae;

                }
                }
                break;
            case 194:
                {
                int LA84_10 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 10, input);

                    throw nvae;

                }
                }
                break;
            case 195:
                {
                int LA84_11 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 11, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA84_12 = input.LA(2);

                if ( (synpred137_pollen()) ) {
                    alt84=2;
                }
                else if ( (true) ) {
                    alt84=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 12, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }

            switch (alt84) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:12: 'type' IDENT ( '=' t= typeName )?
                    {
                    string_literal281=(Atom)match(input,193,FOLLOW_193_in_formalParameter11004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal281);


                    IDENT282=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter11006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT282);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:25: ( '=' t= typeName )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==ASSIGN) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1658:27: '=' t= typeName
                            {
                            char_literal283=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter11010); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal283);


                            pushFollow(FOLLOW_typeName_in_formalParameter11014);
                            t=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(t.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { pFlags.add(Flags.TYPE_META_ARG); }

                    // AST REWRITE
                    // elements: IDENT, IDENT, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1660:13: -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1660:16: ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", pFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1661:17: ^( T_USR[\"T_USR\", pFlags] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", pFlags)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1662:23: ( ^( E_TYP[\"E_TYP\"] typeName ) )?
                        if ( stream_typeName.hasNext() ) {
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1662:23: ^( E_TYP[\"E_TYP\"] typeName )
                            {
                            BaseNode root_2 = (BaseNode)adaptor.nil();
                            root_2 = (BaseNode)adaptor.becomeRoot(
                            new ExprNode.Typ(E_TYP, "E_TYP")
                            , root_2);

                            adaptor.addChild(root_2, stream_typeName.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1663:12: ( typeName '[' )=> formalParameterArr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_formalParameterArr_in_formalParameter11138);
                    formalParameterArr284=formalParameterArr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterArr284.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1664:13: typeName IDENT ( '=' expr )?
                    {
                    pushFollow(FOLLOW_typeName_in_formalParameter11152);
                    typeName285=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName285.getTree());

                    IDENT286=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter11154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT286);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1664:28: ( '=' expr )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==ASSIGN) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1664:30: '=' expr
                            {
                            char_literal287=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter11158); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal287);


                            pushFollow(FOLLOW_expr_in_formalParameter11160);
                            expr288=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr288.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT, expr, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1665:13: -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1665:16: ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1665:71: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 89, formalParameter_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameter"


    public static class formalParameterArr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterArr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1668:1: formalParameterArr : typeNameArray '[' ']' IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? ) ;
    public final pollenParser.formalParameterArr_return formalParameterArr() throws RecognitionException {
        pollenParser.formalParameterArr_return retval = new pollenParser.formalParameterArr_return();
        retval.start = input.LT(1);

        int formalParameterArr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal290=null;
        Atom char_literal291=null;
        Atom IDENT292=null;
        Atom char_literal293=null;
        pollenParser.typeNameArray_return typeNameArray289 =null;

        pollenParser.expr_return expr294 =null;


        BaseNode char_literal290_tree=null;
        BaseNode char_literal291_tree=null;
        BaseNode IDENT292_tree=null;
        BaseNode char_literal293_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1669:5: ( typeNameArray '[' ']' IDENT ( '=' expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1669:10: typeNameArray '[' ']' IDENT ( '=' expr )?
            {
            pushFollow(FOLLOW_typeNameArray_in_formalParameterArr11215);
            typeNameArray289=typeNameArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray289.getTree());

            char_literal290=(Atom)match(input,146,FOLLOW_146_in_formalParameterArr11217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal290);


            char_literal291=(Atom)match(input,147,FOLLOW_147_in_formalParameterArr11219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal291);


            IDENT292=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameterArr11221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT292);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1669:38: ( '=' expr )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==ASSIGN) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1669:40: '=' expr
                    {
                    char_literal293=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameterArr11225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal293);


                    pushFollow(FOLLOW_expr_in_formalParameterArr11227);
                    expr294=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr294.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: IDENT, typeNameArray, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1670:13: -> ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1670:16: ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                , root_1);

                adaptor.addChild(root_1, stream_typeNameArray.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1670:76: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 90, formalParameterArr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "formalParameterArr"


    public static class fcnArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArgumentList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1672:1: fcnArgumentList : '(' fcnArguments ')' -> fcnArguments ;
    public final pollenParser.fcnArgumentList_return fcnArgumentList() throws RecognitionException {
        pollenParser.fcnArgumentList_return retval = new pollenParser.fcnArgumentList_return();
        retval.start = input.LT(1);

        int fcnArgumentList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal295=null;
        Atom char_literal297=null;
        pollenParser.fcnArguments_return fcnArguments296 =null;


        BaseNode char_literal295_tree=null;
        BaseNode char_literal297_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_fcnArguments=new RewriteRuleSubtreeStream(adaptor,"rule fcnArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1673:5: ( '(' fcnArguments ')' -> fcnArguments )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1673:10: '(' fcnArguments ')'
            {
            char_literal295=(Atom)match(input,135,FOLLOW_135_in_fcnArgumentList11281); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal295);


            pushFollow(FOLLOW_fcnArguments_in_fcnArgumentList11283);
            fcnArguments296=fcnArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArguments.add(fcnArguments296.getTree());

            char_literal297=(Atom)match(input,136,FOLLOW_136_in_fcnArgumentList11285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal297);


            // AST REWRITE
            // elements: fcnArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1673:34: -> fcnArguments
            {
                adaptor.addChild(root_0, stream_fcnArguments.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 91, fcnArgumentList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArgumentList"


    public static class fcnArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArguments"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1675:1: fcnArguments : exprList ;
    public final pollenParser.fcnArguments_return fcnArguments() throws RecognitionException {
        pollenParser.fcnArguments_return retval = new pollenParser.fcnArguments_return();
        retval.start = input.LT(1);

        int fcnArguments_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprList_return exprList298 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1676:5: ( exprList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1676:10: exprList
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprList_in_fcnArguments11312);
            exprList298=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprList298.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 92, fcnArguments_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnArguments"


    public static class varOrFcnOrArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrFcnOrArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1678:1: varOrFcnOrArray : ( exprNew | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) );
    public final pollenParser.varOrFcnOrArray_return varOrFcnOrArray() throws RecognitionException {
        pollenParser.varOrFcnOrArray_return retval = new pollenParser.varOrFcnOrArray_return();
        retval.start = input.LT(1);

        int varOrFcnOrArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal300=null;
        Atom IDENT301=null;
        Atom char_literal304=null;
        Atom IDENT305=null;
        Atom char_literal307=null;
        pollenParser.exprNew_return exprNew299 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList302 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess303 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess306 =null;

        pollenParser.qualName_return qualName308 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList309 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess310 =null;

        pollenParser.qualName_return qualName311 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess312 =null;


        BaseNode char_literal300_tree=null;
        BaseNode IDENT301_tree=null;
        BaseNode char_literal304_tree=null;
        BaseNode IDENT305_tree=null;
        BaseNode char_literal307_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1679:5: ( exprNew | '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) ) | qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | qualName ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? ) )
            int alt90=6;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt90=1;
                }
                break;
            case 145:
                {
                int LA90_2 = input.LA(2);

                if ( (synpred142_pollen()) ) {
                    alt90=2;
                }
                else if ( (synpred144_pollen()) ) {
                    alt90=3;
                }
                else if ( (synpred145_pollen()) ) {
                    alt90=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA90_6 = input.LA(2);

                if ( (synpred147_pollen()) ) {
                    alt90=5;
                }
                else if ( (true) ) {
                    alt90=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }

            switch (alt90) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1679:10: exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_varOrFcnOrArray11331);
                    exprNew299=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew299.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:10: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    char_literal300=(Atom)match(input,145,FOLLOW_145_in_varOrFcnOrArray11343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_145.add(char_literal300);


                    IDENT301=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray11345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT301);


                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray11347);
                    fcnArgumentList302=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList302.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:36: ( fieldOrArrayAccess )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==139||LA86_0==146) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:36: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11349);
                            fieldOrArrayAccess303=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess303.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: IDENT, fieldOrArrayAccess, fcnArgumentList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1681:9: -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1681:12: ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1682:13: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1682:47: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_3);

                        adaptor.addChild(root_3, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1682:107: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:10: '@' IDENT ( fieldOrArrayAccess )?
                    {
                    char_literal304=(Atom)match(input,145,FOLLOW_145_in_varOrFcnOrArray11422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_145.add(char_literal304);


                    IDENT305=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray11427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT305);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:23: ( fieldOrArrayAccess )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==139||LA87_0==146) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:23: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11429);
                            fieldOrArrayAccess306=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess306.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1684:9: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1684:12: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1684:46: ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1684:89: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:10: '@'
                    {
                    char_literal307=(Atom)match(input,145,FOLLOW_145_in_varOrFcnOrArray11483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_145.add(char_literal307);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1686:9: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1686:12: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1686:47: ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:10: qualName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray11533);
                    qualName308=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName308.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray11535);
                    fcnArgumentList309=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList309.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:35: ( fieldOrArrayAccess )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==139||LA88_0==146) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:35: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11537);
                            fieldOrArrayAccess310=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess310.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fcnArgumentList, fieldOrArrayAccess, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1688:9: -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1688:12: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1688:46: ^( E_IDENT[\"E_IDENT\"] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1688:109: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1689:10: qualName ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray11587);
                    qualName311=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName311.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1689:19: ( fieldOrArrayAccess )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==139||LA89_0==146) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1689:19: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11589);
                            fieldOrArrayAccess312=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess312.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: qualName, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1689:39: -> ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1689:42: ^( E_IDENT[\"E_IDENT\"] qualName ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1689:88: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 93, varOrFcnOrArray_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varOrFcnOrArray"


    public static class fieldOrArrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldOrArrayAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1691:1: fieldOrArrayAccess : ( fieldAccess | arrayAccess ( fcnArgumentList )? )+ ;
    public final pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess() throws RecognitionException {
        pollenParser.fieldOrArrayAccess_return retval = new pollenParser.fieldOrArrayAccess_return();
        retval.start = input.LT(1);

        int fieldOrArrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.fieldAccess_return fieldAccess313 =null;

        pollenParser.arrayAccess_return arrayAccess314 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList315 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:5: ( ( fieldAccess | arrayAccess ( fcnArgumentList )? )+ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:11: ( fieldAccess | arrayAccess ( fcnArgumentList )? )+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:11: ( fieldAccess | arrayAccess ( fcnArgumentList )? )+
            int cnt92=0;
            loop92:
            do {
                int alt92=3;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==139) ) {
                    alt92=1;
                }
                else if ( (LA92_0==146) ) {
                    alt92=2;
                }


                switch (alt92) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:12: fieldAccess
            	    {
            	    pushFollow(FOLLOW_fieldAccess_in_fieldOrArrayAccess11629);
            	    fieldAccess313=fieldAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldAccess313.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:26: arrayAccess ( fcnArgumentList )?
            	    {
            	    pushFollow(FOLLOW_arrayAccess_in_fieldOrArrayAccess11633);
            	    arrayAccess314=arrayAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess314.getTree());

            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:38: ( fcnArgumentList )?
            	    int alt91=2;
            	    int LA91_0 = input.LA(1);

            	    if ( (LA91_0==135) ) {
            	        alt91=1;
            	    }
            	    switch (alt91) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1693:38: fcnArgumentList
            	            {
            	            pushFollow(FOLLOW_fcnArgumentList_in_fieldOrArrayAccess11635);
            	            fcnArgumentList315=fcnArgumentList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnArgumentList315.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 94, fieldOrArrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldOrArrayAccess"


    public static class fieldAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1695:1: fieldAccess : ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) );
    public final pollenParser.fieldAccess_return fieldAccess() throws RecognitionException {
        pollenParser.fieldAccess_return retval = new pollenParser.fieldAccess_return();
        retval.start = input.LT(1);

        int fieldAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal316=null;
        Atom IDENT317=null;
        Atom char_literal319=null;
        Atom IDENT320=null;
        pollenParser.fcnArgumentList_return fcnArgumentList318 =null;


        BaseNode char_literal316_tree=null;
        BaseNode IDENT317_tree=null;
        BaseNode char_literal319_tree=null;
        BaseNode IDENT320_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1696:5: ( '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==139) ) {
                int LA93_1 = input.LA(2);

                if ( (synpred152_pollen()) ) {
                    alt93=1;
                }
                else if ( (true) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1696:10: '.' IDENT fcnArgumentList
                    {
                    char_literal316=(Atom)match(input,139,FOLLOW_139_in_fieldAccess11657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal316);


                    IDENT317=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess11662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT317);


                    pushFollow(FOLLOW_fcnArgumentList_in_fieldAccess11664);
                    fcnArgumentList318=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList318.getTree());

                    // AST REWRITE
                    // elements: IDENT, fcnArgumentList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1697:13: -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1697:16: ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL", true)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1698:14: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1699:10: '.' IDENT
                    {
                    char_literal319=(Atom)match(input,139,FOLLOW_139_in_fieldAccess11732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal319);


                    IDENT320=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess11737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT320);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1699:27: -> ^( E_IDENT[\"E_IDENT\", true] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1699:30: ^( E_IDENT[\"E_IDENT\", true] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 95, fieldAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldAccess"


    public static class arrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1701:1: arrayAccess : '[' ( exprList ) ']' -> ^( E_INDEX[\"E_INDEX\"] exprList ) ;
    public final pollenParser.arrayAccess_return arrayAccess() throws RecognitionException {
        pollenParser.arrayAccess_return retval = new pollenParser.arrayAccess_return();
        retval.start = input.LT(1);

        int arrayAccess_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal321=null;
        Atom char_literal323=null;
        pollenParser.exprList_return exprList322 =null;


        BaseNode char_literal321_tree=null;
        BaseNode char_literal323_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:5: ( '[' ( exprList ) ']' -> ^( E_INDEX[\"E_INDEX\"] exprList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:10: '[' ( exprList ) ']'
            {
            char_literal321=(Atom)match(input,146,FOLLOW_146_in_arrayAccess11774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal321);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:17: ( exprList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:18: exprList
            {
            pushFollow(FOLLOW_exprList_in_arrayAccess11780);
            exprList322=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprList.add(exprList322.getTree());

            }


            char_literal323=(Atom)match(input,147,FOLLOW_147_in_arrayAccess11786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal323);


            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1702:36: -> ^( E_INDEX[\"E_INDEX\"] exprList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:39: ^( E_INDEX[\"E_INDEX\"] exprList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Index(E_INDEX, "E_INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_exprList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 96, arrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayAccess"


    public static class stmtBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBlock"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1706:1: stmtBlock : braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) ;
    public final pollenParser.stmtBlock_return stmtBlock() throws RecognitionException {
        pollenParser.stmtBlock_return retval = new pollenParser.stmtBlock_return();
        retval.start = input.LT(1);

        int stmtBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.braceOpen_return braceOpen324 =null;

        pollenParser.stmts_return stmts325 =null;

        pollenParser.braceClose_return braceClose326 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1707:5: ( braceOpen stmts braceClose -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1707:21: braceOpen stmts braceClose
            {
            pushFollow(FOLLOW_braceOpen_in_stmtBlock11834);
            braceOpen324=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen324.getTree());

            pushFollow(FOLLOW_stmts_in_stmtBlock11836);
            stmts325=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts325.getTree());

            pushFollow(FOLLOW_braceClose_in_stmtBlock11838);
            braceClose326=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose326.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1707:52: -> ^( S_BLOCK[\"S_BLOCK\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1707:55: ^( S_BLOCK[\"S_BLOCK\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Block(S_BLOCK, "S_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 97, stmtBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBlock"


    public static class stmts_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmts"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1709:1: stmts : ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.stmts_return stmts() throws RecognitionException {
        pollenParser.stmts_return retval = new pollenParser.stmts_return();
        retval.start = input.LT(1);

        int stmts_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmt_return stmt327 =null;


        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1710:5: ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | -> LIST[\"LIST\"] )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==BIT_NOT||(LA95_0 >= BRACE_OP && LA95_0 <= CHAR)||LA95_0==DEC||LA95_0==HEX_LIT||LA95_0==IDENT||(LA95_0 >= INC && LA95_0 <= INT_LIT)||LA95_0==LOG_NOT||LA95_0==MINUS||LA95_0==OCT_LIT||LA95_0==REAL_LIT||LA95_0==STRING||LA95_0==135||(LA95_0 >= 145 && LA95_0 <= 146)||(LA95_0 >= 150 && LA95_0 <= 152)||(LA95_0 >= 156 && LA95_0 <= 157)||LA95_0==159||(LA95_0 >= 166 && LA95_0 <= 167)||(LA95_0 >= 169 && LA95_0 <= 170)||(LA95_0 >= 173 && LA95_0 <= 175)||(LA95_0 >= 179 && LA95_0 <= 180)||LA95_0==184||LA95_0==186||(LA95_0 >= 188 && LA95_0 <= 192)||(LA95_0 >= 194 && LA95_0 <= 198)) ) {
                alt95=1;
            }
            else if ( (LA95_0==EOF||LA95_0==BRACE_CL||LA95_0==153||LA95_0==158) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1710:10: ( stmt )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1710:10: ( stmt )+
                    int cnt94=0;
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==BIT_NOT||(LA94_0 >= BRACE_OP && LA94_0 <= CHAR)||LA94_0==DEC||LA94_0==HEX_LIT||LA94_0==IDENT||(LA94_0 >= INC && LA94_0 <= INT_LIT)||LA94_0==LOG_NOT||LA94_0==MINUS||LA94_0==OCT_LIT||LA94_0==REAL_LIT||LA94_0==STRING||LA94_0==135||(LA94_0 >= 145 && LA94_0 <= 146)||(LA94_0 >= 150 && LA94_0 <= 152)||(LA94_0 >= 156 && LA94_0 <= 157)||LA94_0==159||(LA94_0 >= 166 && LA94_0 <= 167)||(LA94_0 >= 169 && LA94_0 <= 170)||(LA94_0 >= 173 && LA94_0 <= 175)||(LA94_0 >= 179 && LA94_0 <= 180)||LA94_0==184||LA94_0==186||(LA94_0 >= 188 && LA94_0 <= 192)||(LA94_0 >= 194 && LA94_0 <= 198)) ) {
                            alt94=1;
                        }


                        switch (alt94) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1710:11: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_stmts11876);
                    	    stmt327=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmt.add(stmt327.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt94 >= 1 ) break loop94;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(94, input);
                                throw eee;
                        }
                        cnt94++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1710:18: -> ^( LIST[\"LIST\"] ( stmt )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1710:21: ^( LIST[\"LIST\"] ( stmt )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmt.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt.nextTree());

                        }
                        stream_stmt.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1711:22: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1711:22: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 98, stmts_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmts"


    public static class stmt_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1713:1: stmt : ( stmtDecl | stmtAssign | stmtBind | stmtBlock | stmtPrint | stmtPeg | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) );
    public final pollenParser.stmt_return stmt() throws RecognitionException {
        pollenParser.stmt_return retval = new pollenParser.stmt_return();
        retval.start = input.LT(1);

        int stmt_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtDecl_return stmtDecl328 =null;

        pollenParser.stmtAssign_return stmtAssign329 =null;

        pollenParser.stmtBind_return stmtBind330 =null;

        pollenParser.stmtBlock_return stmtBlock331 =null;

        pollenParser.stmtPrint_return stmtPrint332 =null;

        pollenParser.stmtPeg_return stmtPeg333 =null;

        pollenParser.stmtReturn_return stmtReturn334 =null;

        pollenParser.stmtBreak_return stmtBreak335 =null;

        pollenParser.stmtContinue_return stmtContinue336 =null;

        pollenParser.stmtFor_return stmtFor337 =null;

        pollenParser.stmtSwitch_return stmtSwitch338 =null;

        pollenParser.stmtDoWhile_return stmtDoWhile339 =null;

        pollenParser.stmtIf_return stmtIf340 =null;

        pollenParser.stmtProvided_return stmtProvided341 =null;

        pollenParser.stmtWhile_return stmtWhile342 =null;

        pollenParser.stmtInjection_return stmtInjection343 =null;

        pollenParser.expr_return expr344 =null;

        pollenParser.delim_return delim345 =null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1718:5: ( stmtDecl | stmtAssign | stmtBind | stmtBlock | stmtPrint | stmtPeg | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | stmtInjection | expr delim -> ^( S_EXPR[\"S_EXPR\"] expr ) )
            int alt96=17;
            switch ( input.LA(1) ) {
            case 150:
            case 152:
            case 156:
            case 169:
            case 173:
            case 174:
            case 175:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
            case 197:
                {
                alt96=1;
                }
                break;
            case IDENT:
                {
                int LA96_14 = input.LA(2);

                if ( (synpred155_pollen()) ) {
                    alt96=1;
                }
                else if ( (synpred156_pollen()) ) {
                    alt96=2;
                }
                else if ( (synpred157_pollen()) ) {
                    alt96=3;
                }
                else if ( (synpred160_pollen()) ) {
                    alt96=6;
                }
                else if ( (true) ) {
                    alt96=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 14, input);

                    throw nvae;

                }
                }
                break;
            case 135:
                {
                int LA96_15 = input.LA(2);

                if ( (synpred155_pollen()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 15, input);

                    throw nvae;

                }
                }
                break;
            case 179:
                {
                int LA96_16 = input.LA(2);

                if ( (synpred155_pollen()) ) {
                    alt96=1;
                }
                else if ( (synpred156_pollen()) ) {
                    alt96=2;
                }
                else if ( (synpred160_pollen()) ) {
                    alt96=6;
                }
                else if ( (true) ) {
                    alt96=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 16, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA96_17 = input.LA(2);

                if ( (synpred156_pollen()) ) {
                    alt96=2;
                }
                else if ( (synpred160_pollen()) ) {
                    alt96=6;
                }
                else if ( (true) ) {
                    alt96=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 17, input);

                    throw nvae;

                }
                }
                break;
            case INJECT:
                {
                int LA96_18 = input.LA(2);

                if ( (synpred156_pollen()) ) {
                    alt96=2;
                }
                else if ( (synpred170_pollen()) ) {
                    alt96=16;
                }
                else if ( (true) ) {
                    alt96=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 18, input);

                    throw nvae;

                }
                }
                break;
            case BRACE_OP:
                {
                alt96=4;
                }
                break;
            case 184:
                {
                alt96=5;
                }
                break;
            case 189:
                {
                alt96=7;
                }
                break;
            case 151:
                {
                alt96=8;
                }
                break;
            case 157:
                {
                alt96=9;
                }
                break;
            case 167:
                {
                alt96=10;
                }
                break;
            case 191:
                {
                alt96=11;
                }
                break;
            case 159:
                {
                alt96=12;
                }
                break;
            case 170:
                {
                alt96=13;
                }
                break;
            case 186:
                {
                alt96=14;
                }
                break;
            case 198:
                {
                alt96=15;
                }
                break;
            case BIT_NOT:
            case CHAR:
            case DEC:
            case HEX_LIT:
            case INC:
            case INT_LIT:
            case LOG_NOT:
            case MINUS:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 146:
            case 166:
            case 180:
            case 192:
                {
                alt96=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1718:10: stmtDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDecl_in_stmt11936);
                    stmtDecl328=stmtDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDecl328.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1719:10: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmt11947);
                    stmtAssign329=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign329.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1720:10: stmtBind
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBind_in_stmt11958);
                    stmtBind330=stmtBind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBind330.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1721:10: stmtBlock
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBlock_in_stmt11969);
                    stmtBlock331=stmtBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBlock331.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1722:10: stmtPrint
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPrint_in_stmt11980);
                    stmtPrint332=stmtPrint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPrint332.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1723:10: stmtPeg
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPeg_in_stmt11991);
                    stmtPeg333=stmtPeg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPeg333.getTree());

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1724:10: stmtReturn
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtReturn_in_stmt12002);
                    stmtReturn334=stmtReturn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtReturn334.getTree());

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1725:10: stmtBreak
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBreak_in_stmt12013);
                    stmtBreak335=stmtBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBreak335.getTree());

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1726:10: stmtContinue
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtContinue_in_stmt12024);
                    stmtContinue336=stmtContinue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtContinue336.getTree());

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1727:10: stmtFor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtFor_in_stmt12035);
                    stmtFor337=stmtFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtFor337.getTree());

                    }
                    break;
                case 11 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1728:10: stmtSwitch
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtSwitch_in_stmt12046);
                    stmtSwitch338=stmtSwitch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtSwitch338.getTree());

                    }
                    break;
                case 12 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1729:10: stmtDoWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDoWhile_in_stmt12057);
                    stmtDoWhile339=stmtDoWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDoWhile339.getTree());

                    }
                    break;
                case 13 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1730:10: stmtIf
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtIf_in_stmt12068);
                    stmtIf340=stmtIf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtIf340.getTree());

                    }
                    break;
                case 14 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1731:10: stmtProvided
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtProvided_in_stmt12079);
                    stmtProvided341=stmtProvided();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtProvided341.getTree());

                    }
                    break;
                case 15 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1732:10: stmtWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtWhile_in_stmt12090);
                    stmtWhile342=stmtWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtWhile342.getTree());

                    }
                    break;
                case 16 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:10: stmtInjection
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtInjection_in_stmt12102);
                    stmtInjection343=stmtInjection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjection343.getTree());

                    }
                    break;
                case 17 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1734:10: expr delim
                    {
                    pushFollow(FOLLOW_expr_in_stmt12113);
                    expr344=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr344.getTree());

                    pushFollow(FOLLOW_delim_in_stmt12115);
                    delim345=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim345.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1734:22: -> ^( S_EXPR[\"S_EXPR\"] expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1734:25: ^( S_EXPR[\"S_EXPR\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Expr(S_EXPR, "S_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 99, stmt_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class exprAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1737:1: exprAssign : ( ( exprUnary ASSIGN )=> exprChainedAssign | expr );
    public final pollenParser.exprAssign_return exprAssign() throws RecognitionException {
        pollenParser.exprAssign_return retval = new pollenParser.exprAssign_return();
        retval.start = input.LT(1);

        int exprAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.exprChainedAssign_return exprChainedAssign346 =null;

        pollenParser.expr_return expr347 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1738:5: ( ( exprUnary ASSIGN )=> exprChainedAssign | expr )
            int alt97=2;
            switch ( input.LA(1) ) {
            case 166:
            case 192:
                {
                int LA97_1 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
                }
                break;
            case INT_LIT:
                {
                int LA97_2 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;

                }
                }
                break;
            case OCT_LIT:
                {
                int LA97_3 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 3, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LIT:
                {
                int LA97_4 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 4, input);

                    throw nvae;

                }
                }
                break;
            case HEX_LIT:
                {
                int LA97_5 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 5, input);

                    throw nvae;

                }
                }
                break;
            case 180:
                {
                int LA97_6 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 6, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA97_7 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 7, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA97_8 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 8, input);

                    throw nvae;

                }
                }
                break;
            case INJECT:
                {
                int LA97_9 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 9, input);

                    throw nvae;

                }
                }
                break;
            case 146:
                {
                int LA97_10 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 10, input);

                    throw nvae;

                }
                }
                break;
            case LOG_NOT:
                {
                int LA97_11 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 11, input);

                    throw nvae;

                }
                }
                break;
            case BIT_NOT:
                {
                int LA97_12 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 12, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                int LA97_13 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 13, input);

                    throw nvae;

                }
                }
                break;
            case 135:
                {
                int LA97_14 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 14, input);

                    throw nvae;

                }
                }
                break;
            case 179:
                {
                int LA97_15 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 15, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA97_16 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 16, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA97_17 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 17, input);

                    throw nvae;

                }
                }
                break;
            case DEC:
            case INC:
                {
                int LA97_18 = input.LA(2);

                if ( (synpred171_pollen()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 18, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1739:5: ( exprUnary ASSIGN )=> exprChainedAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprChainedAssign_in_exprAssign12168);
                    exprChainedAssign346=exprChainedAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprChainedAssign346.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1741:7: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_exprAssign12177);
                    expr347=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr347.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 100, exprAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprAssign"


    public static class exprChainedAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprChainedAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1743:1: exprChainedAssign : ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) ) ;
    public final pollenParser.exprChainedAssign_return exprChainedAssign() throws RecognitionException {
        pollenParser.exprChainedAssign_return retval = new pollenParser.exprChainedAssign_return();
        retval.start = input.LT(1);

        int exprChainedAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom ASSIGN349=null;
        pollenParser.exprUnary_return exprUnary348 =null;

        pollenParser.exprAssign_return exprAssign350 =null;


        BaseNode ASSIGN349_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1744:5: ( ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1744:10: ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1744:10: ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1744:12: exprUnary ASSIGN exprAssign
            {
            pushFollow(FOLLOW_exprUnary_in_exprChainedAssign12198);
            exprUnary348=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary348.getTree());

            ASSIGN349=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_exprChainedAssign12200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN349);


            pushFollow(FOLLOW_exprAssign_in_exprChainedAssign12202);
            exprAssign350=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign350.getTree());

            // AST REWRITE
            // elements: exprUnary, ASSIGN, exprAssign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1745:9: -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1745:12: ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Binary(E_BINARY, "E_BINARY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ASSIGN.nextNode()
                );

                adaptor.addChild(root_1, stream_exprUnary.nextTree());

                adaptor.addChild(root_1, stream_exprAssign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 101, exprChainedAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "exprChainedAssign"


    public static class stmtAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1749:1: stmtAssign : ( varOrFcnOrArray ASSIGN exprAssign delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) );
    public final pollenParser.stmtAssign_return stmtAssign() throws RecognitionException {
        pollenParser.stmtAssign_return retval = new pollenParser.stmtAssign_return();
        retval.start = input.LT(1);

        int stmtAssign_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom ASSIGN352=null;
        Atom ASSIGN356=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray351 =null;

        pollenParser.exprAssign_return exprAssign353 =null;

        pollenParser.delim_return delim354 =null;

        pollenParser.injectionCode_return injectionCode355 =null;

        pollenParser.expr_return expr357 =null;

        pollenParser.delim_return delim358 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray359 =null;

        pollenParser.assignOp_return assignOp360 =null;

        pollenParser.expr_return expr361 =null;

        pollenParser.delim_return delim362 =null;

        pollenParser.injectionCode_return injectionCode363 =null;

        pollenParser.assignOp_return assignOp364 =null;

        pollenParser.expr_return expr365 =null;

        pollenParser.delim_return delim366 =null;


        BaseNode ASSIGN352_tree=null;
        BaseNode ASSIGN356_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_injectionCode=new RewriteRuleSubtreeStream(adaptor,"rule injectionCode");
        RewriteRuleSubtreeStream stream_assignOp=new RewriteRuleSubtreeStream(adaptor,"rule assignOp");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1750:5: ( varOrFcnOrArray ASSIGN exprAssign delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) ) | injectionCode ASSIGN expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) ) | varOrFcnOrArray assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) ) | injectionCode assignOp expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) ) )
            int alt98=4;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==IDENT||LA98_0==145||LA98_0==179) ) {
                int LA98_1 = input.LA(2);

                if ( (synpred172_pollen()) ) {
                    alt98=1;
                }
                else if ( (synpred174_pollen()) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA98_0==INJECT) ) {
                int LA98_4 = input.LA(2);

                if ( (synpred173_pollen()) ) {
                    alt98=2;
                }
                else if ( (true) ) {
                    alt98=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 4, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1750:10: varOrFcnOrArray ASSIGN exprAssign delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign12264);
                    varOrFcnOrArray351=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray351.getTree());

                    ASSIGN352=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign12266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN352);


                    pushFollow(FOLLOW_exprAssign_in_stmtAssign12268);
                    exprAssign353=exprAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign353.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign12270);
                    delim354=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim354.getTree());

                    // AST REWRITE
                    // elements: varOrFcnOrArray, ASSIGN, exprAssign
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1751:9: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1751:12: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1751:52: ^( E_BINARY[\"E_BINARY\", true] ASSIGN varOrFcnOrArray exprAssign )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_exprAssign.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1752:10: injectionCode ASSIGN expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign12317);
                    injectionCode355=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode355.getTree());

                    ASSIGN356=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtAssign12319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN356);


                    pushFollow(FOLLOW_expr_in_stmtAssign12321);
                    expr357=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr357.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign12323);
                    delim358=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim358.getTree());

                    // AST REWRITE
                    // elements: ASSIGN, injectionCode, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1753:9: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1753:12: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1753:52: ^( E_BINARY[\"E_BINARY\", true] ASSIGN injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_ASSIGN.nextNode()
                        );

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:10: varOrFcnOrArray assignOp expr delim
                    {
                    pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssign12370);
                    varOrFcnOrArray359=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray359.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign12372);
                    assignOp360=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp360.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign12374);
                    expr361=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr361.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign12377);
                    delim362=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim362.getTree());

                    // AST REWRITE
                    // elements: assignOp, expr, varOrFcnOrArray
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1755:9: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1755:12: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1755:52: ^( E_BINARY[\"E_BINARY\", true] assignOp varOrFcnOrArray expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1756:10: injectionCode assignOp expr delim
                    {
                    pushFollow(FOLLOW_injectionCode_in_stmtAssign12424);
                    injectionCode363=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode363.getTree());

                    pushFollow(FOLLOW_assignOp_in_stmtAssign12426);
                    assignOp364=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignOp.add(assignOp364.getTree());

                    pushFollow(FOLLOW_expr_in_stmtAssign12428);
                    expr365=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr365.getTree());

                    pushFollow(FOLLOW_delim_in_stmtAssign12433);
                    delim366=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim366.getTree());

                    // AST REWRITE
                    // elements: injectionCode, assignOp, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1757:9: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:12: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:52: ^( E_BINARY[\"E_BINARY\", true] assignOp injectionCode expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                        , root_2);

                        adaptor.addChild(root_2, stream_assignOp.nextTree());

                        adaptor.addChild(root_2, stream_injectionCode.nextTree());

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 102, stmtAssign_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtAssign"


    public static class stmtBind_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBind"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1759:1: stmtBind : qualName BIND userTypeName delim -> ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName ) ;
    public final pollenParser.stmtBind_return stmtBind() throws RecognitionException {
        pollenParser.stmtBind_return retval = new pollenParser.stmtBind_return();
        retval.start = input.LT(1);

        int stmtBind_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BIND368=null;
        pollenParser.qualName_return qualName367 =null;

        pollenParser.userTypeName_return userTypeName369 =null;

        pollenParser.delim_return delim370 =null;


        BaseNode BIND368_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_userTypeName=new RewriteRuleSubtreeStream(adaptor,"rule userTypeName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            String qn = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1763:5: ( qualName BIND userTypeName delim -> ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1763:10: qualName BIND userTypeName delim
            {
            pushFollow(FOLLOW_qualName_in_stmtBind12492);
            qualName367=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName367.getTree());

            BIND368=(Atom)match(input,BIND,FOLLOW_BIND_in_stmtBind12494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND368);


            pushFollow(FOLLOW_userTypeName_in_stmtBind12497);
            userTypeName369=userTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_userTypeName.add(userTypeName369.getTree());

            pushFollow(FOLLOW_delim_in_stmtBind12503);
            delim370=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim370.getTree());

            if ( state.backtracking==0 ) {

                        if ((qualName367!=null?input.toString(qualName367.start,qualName367.stop):null).equals(ParseUnit.POLLEN_PRINT_PROXY)) {
                        
                                   if (ProcessUnits.isDashPoption()) {
                                       ParseUnit.current().
                                       reportError(ParseUnit.POLLEN_PRINT_PROXY, 
                                       "Either the '-p' option to bind a print protocol can be used or a print protocol can be bound in code - but both cannot be used at once");
                                   }
                                   if (getParserTypeInfoListSize() > 1) {
                                       ParseUnit.current().reportError(ParseUnit.POLLEN_PRINT_PROXY, "Invalid bind of intrinsic print protocol member: not allowed in nested class");
                                   }
                                           
                            qn = ParseUnit.INTRINSIC_PRINT_PROXY;
                            ProcessUnits.setPollenPrintBindSeen(true); // causes the print protocol member to be created
                            ProcessUnits.setPollenPrint((userTypeName369!=null?input.toString(userTypeName369.start,userTypeName369.stop):null));
                            ProcessUnits.setPollenPrintProxyModule(ParseUnit.mkPackageName(ParseUnit.current().getCurrPath()) + "."  + currType.getTypeName());
                            
                        }
                        else
                            qn = (qualName367!=null?input.toString(qualName367.start,qualName367.stop):null);
                    }

            // AST REWRITE
            // elements: userTypeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1786:13: -> ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:16: ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Bind(S_BIND, "S_BIND")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:50: ^( E_IDENT[\"E_IDENT\"] IDENT[qn] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Ident(E_IDENT, "E_IDENT")
                , root_2);

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, qn)
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_userTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 103, stmtBind_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBind"


    public static class stmtPeg_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPeg"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1788:1: stmtPeg : varOrFcnOrArray PEG exprAssign delim -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign ) ;
    public final pollenParser.stmtPeg_return stmtPeg() throws RecognitionException {
        pollenParser.stmtPeg_return retval = new pollenParser.stmtPeg_return();
        retval.start = input.LT(1);

        int stmtPeg_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom PEG372=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray371 =null;

        pollenParser.exprAssign_return exprAssign373 =null;

        pollenParser.delim_return delim374 =null;


        BaseNode PEG372_tree=null;
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:5: ( varOrFcnOrArray PEG exprAssign delim -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:10: varOrFcnOrArray PEG exprAssign delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtPeg12581);
            varOrFcnOrArray371=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray371.getTree());

            PEG372=(Atom)match(input,PEG,FOLLOW_PEG_in_stmtPeg12583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PEG.add(PEG372);


            pushFollow(FOLLOW_exprAssign_in_stmtPeg12586);
            exprAssign373=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign373.getTree());

            pushFollow(FOLLOW_delim_in_stmtPeg12592);
            delim374=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim374.getTree());

            // AST REWRITE
            // elements: PEG, exprAssign, varOrFcnOrArray
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1789:52: -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1789:55: ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Peg(S_PEG, "S_PEG")
                , root_1);

                adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_1, 
                stream_PEG.nextNode()
                );

                adaptor.addChild(root_1, stream_exprAssign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 104, stmtPeg_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPeg"


    public static class printList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1791:1: printList : printItemList -> ^( LIST[\"LIST\"] printItemList ) ;
    public final pollenParser.printList_return printList() throws RecognitionException {
        pollenParser.printList_return retval = new pollenParser.printList_return();
        retval.start = input.LT(1);

        int printList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.printItemList_return printItemList375 =null;


        RewriteRuleSubtreeStream stream_printItemList=new RewriteRuleSubtreeStream(adaptor,"rule printItemList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:5: ( printItemList -> ^( LIST[\"LIST\"] printItemList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:14: printItemList
            {
            pushFollow(FOLLOW_printItemList_in_printList12642);
            printItemList375=printItemList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_printItemList.add(printItemList375.getTree());

            // AST REWRITE
            // elements: printItemList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1792:31: -> ^( LIST[\"LIST\"] printItemList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1792:34: ^( LIST[\"LIST\"] printItemList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_printItemList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 105, printList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "printList"


    public static class printItemList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printItemList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1794:1: printItemList : ( printItem ( '+' printItem )* -> ( printItem )+ | -> NIL );
    public final pollenParser.printItemList_return printItemList() throws RecognitionException {
        pollenParser.printItemList_return retval = new pollenParser.printItemList_return();
        retval.start = input.LT(1);

        int printItemList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal377=null;
        pollenParser.printItem_return printItem376 =null;

        pollenParser.printItem_return printItem378 =null;


        BaseNode char_literal377_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleSubtreeStream stream_printItem=new RewriteRuleSubtreeStream(adaptor,"rule printItem");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1795:5: ( printItem ( '+' printItem )* -> ( printItem )+ | -> NIL )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==CHAR||LA100_0==HEX_LIT||LA100_0==IDENT||LA100_0==INT_LIT||LA100_0==OCT_LIT||LA100_0==REAL_LIT||LA100_0==STRING||LA100_0==145||LA100_0==166||(LA100_0 >= 179 && LA100_0 <= 180)||LA100_0==192) ) {
                alt100=1;
            }
            else if ( (LA100_0==NLL||LA100_0==SEMI) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1795:10: printItem ( '+' printItem )*
                    {
                    pushFollow(FOLLOW_printItem_in_printItemList12676);
                    printItem376=printItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printItem.add(printItem376.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1795:23: ( '+' printItem )*
                    loop99:
                    do {
                        int alt99=2;
                        int LA99_0 = input.LA(1);

                        if ( (LA99_0==PLUS) ) {
                            alt99=1;
                        }


                        switch (alt99) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1795:25: '+' printItem
                    	    {
                    	    char_literal377=(Atom)match(input,PLUS,FOLLOW_PLUS_in_printItemList12683); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PLUS.add(char_literal377);


                    	    pushFollow(FOLLOW_printItem_in_printItemList12686);
                    	    printItem378=printItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_printItem.add(printItem378.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: printItem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1795:46: -> ( printItem )+
                    {
                        if ( !(stream_printItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_printItem.hasNext() ) {
                            adaptor.addChild(root_0, stream_printItem.nextTree());

                        }
                        stream_printItem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1796:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1796:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 106, printItemList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "printItemList"


    public static class printItem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printItem"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1798:1: printItem : ( primitiveLit | varOrFcnOrArray );
    public final pollenParser.printItem_return printItem() throws RecognitionException {
        pollenParser.printItem_return retval = new pollenParser.printItem_return();
        retval.start = input.LT(1);

        int printItem_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit379 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray380 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1799:5: ( primitiveLit | varOrFcnOrArray )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==CHAR||LA101_0==HEX_LIT||LA101_0==INT_LIT||LA101_0==OCT_LIT||LA101_0==REAL_LIT||LA101_0==STRING||LA101_0==166||LA101_0==180||LA101_0==192) ) {
                alt101=1;
            }
            else if ( (LA101_0==IDENT||LA101_0==145||LA101_0==179) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1799:10: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_printItem12729);
                    primitiveLit379=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit379.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1801:10: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_printItem12749);
                    varOrFcnOrArray380=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray380.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 107, printItem_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "printItem"


    public static class stmtPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrint"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1803:1: stmtPrint : ( 'print' printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) | 'print' ( stmtPrintTarget[flags] ) printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) );
    public final pollenParser.stmtPrint_return stmtPrint() throws RecognitionException {
        pollenParser.stmtPrint_return retval = new pollenParser.stmtPrint_return();
        retval.start = input.LT(1);

        int stmtPrint_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal381=null;
        Atom string_literal384=null;
        pollenParser.printList_return printList382 =null;

        pollenParser.delim_return delim383 =null;

        pollenParser.stmtPrintTarget_return stmtPrintTarget385 =null;

        pollenParser.printList_return printList386 =null;

        pollenParser.delim_return delim387 =null;


        BaseNode string_literal381_tree=null;
        BaseNode string_literal384_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_stmtPrintTarget=new RewriteRuleSubtreeStream(adaptor,"rule stmtPrintTarget");
        RewriteRuleSubtreeStream stream_printList=new RewriteRuleSubtreeStream(adaptor,"rule printList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1807:5: ( 'print' printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) | 'print' ( stmtPrintTarget[flags] ) printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==184) ) {
                int LA102_1 = input.LA(2);

                if ( (synpred178_pollen()) ) {
                    alt102=1;
                }
                else if ( (true) ) {
                    alt102=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1807:10: 'print' printList delim
                    {
                    string_literal381=(Atom)match(input,184,FOLLOW_184_in_stmtPrint12773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal381);


                    pushFollow(FOLLOW_printList_in_stmtPrint12775);
                    printList382=printList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printList.add(printList382.getTree());

                    if ( state.backtracking==0 ) {flags.add(Flags.OUT); }

                    pushFollow(FOLLOW_delim_in_stmtPrint12782);
                    delim383=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim383.getTree());

                    // AST REWRITE
                    // elements: printList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1808:9: -> ^( S_PRINT[\"S_PRINT\", flags] printList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1808:12: ^( S_PRINT[\"S_PRINT\", flags] printList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                        , root_1);

                        adaptor.addChild(root_1, stream_printList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1809:10: 'print' ( stmtPrintTarget[flags] ) printList delim
                    {
                    string_literal384=(Atom)match(input,184,FOLLOW_184_in_stmtPrint12816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal384);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1809:18: ( stmtPrintTarget[flags] )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1809:19: stmtPrintTarget[flags]
                    {
                    pushFollow(FOLLOW_stmtPrintTarget_in_stmtPrint12819);
                    stmtPrintTarget385=stmtPrintTarget(flags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtPrintTarget.add(stmtPrintTarget385.getTree());

                    }


                    pushFollow(FOLLOW_printList_in_stmtPrint12823);
                    printList386=printList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printList.add(printList386.getTree());

                    pushFollow(FOLLOW_delim_in_stmtPrint12825);
                    delim387=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim387.getTree());

                    // AST REWRITE
                    // elements: printList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1810:9: -> ^( S_PRINT[\"S_PRINT\", flags] printList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1810:12: ^( S_PRINT[\"S_PRINT\", flags] printList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                        , root_1);

                        adaptor.addChild(root_1, stream_printList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 108, stmtPrint_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrint"


    public static class stmtPrintTarget_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrintTarget"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1812:1: stmtPrintTarget[EnumSet<Flags> f] : ( 'log' | 'err' | 'out' ) ;
    public final pollenParser.stmtPrintTarget_return stmtPrintTarget(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.stmtPrintTarget_return retval = new pollenParser.stmtPrintTarget_return();
        retval.start = input.LT(1);

        int stmtPrintTarget_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal388=null;
        Atom string_literal389=null;
        Atom string_literal390=null;

        BaseNode string_literal388_tree=null;
        BaseNode string_literal389_tree=null;
        BaseNode string_literal390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1813:5: ( ( 'log' | 'err' | 'out' ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:9: ( 'log' | 'err' | 'out' )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:9: ( 'log' | 'err' | 'out' )
            int alt103=3;
            switch ( input.LA(1) ) {
            case 176:
                {
                alt103=1;
                }
                break;
            case 163:
                {
                alt103=2;
                }
                break;
            case 181:
                {
                alt103=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }

            switch (alt103) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:16: 'log'
                    {
                    string_literal388=(Atom)match(input,176,FOLLOW_176_in_stmtPrintTarget12884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal388_tree = 
                    (BaseNode)adaptor.create(string_literal388)
                    ;
                    adaptor.addChild(root_0, string_literal388_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.LOG); }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1815:15: 'err'
                    {
                    string_literal389=(Atom)match(input,163,FOLLOW_163_in_stmtPrintTarget12903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal389_tree = 
                    (BaseNode)adaptor.create(string_literal389)
                    ;
                    adaptor.addChild(root_0, string_literal389_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.ERR); }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1816:15: 'out'
                    {
                    string_literal390=(Atom)match(input,181,FOLLOW_181_in_stmtPrintTarget12924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal390_tree = 
                    (BaseNode)adaptor.create(string_literal390)
                    ;
                    adaptor.addChild(root_0, string_literal390_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.OUT); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 109, stmtPrintTarget_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtPrintTarget"


    public static class stmtReturn_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtReturn"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1819:1: stmtReturn : ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) | 'return' delim -> ^( S_RETURN[\"S_RETURN\"] ) );
    public final pollenParser.stmtReturn_return stmtReturn() throws RecognitionException {
        pollenParser.stmtReturn_return retval = new pollenParser.stmtReturn_return();
        retval.start = input.LT(1);

        int stmtReturn_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal391=null;
        Atom char_literal392=null;
        Atom char_literal394=null;
        Atom char_literal396=null;
        Atom string_literal398=null;
        Atom string_literal401=null;
        pollenParser.expr_return expr393 =null;

        pollenParser.expr_return expr395 =null;

        pollenParser.delim_return delim397 =null;

        pollenParser.expr_return expr399 =null;

        pollenParser.delim_return delim400 =null;

        pollenParser.delim_return delim402 =null;


        BaseNode string_literal391_tree=null;
        BaseNode char_literal392_tree=null;
        BaseNode char_literal394_tree=null;
        BaseNode char_literal396_tree=null;
        BaseNode string_literal398_tree=null;
        BaseNode string_literal401_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:5: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) ) | 'return' ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) | 'return' delim -> ^( S_RETURN[\"S_RETURN\"] ) )
            int alt105=3;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==189) ) {
                int LA105_1 = input.LA(2);

                if ( (synpred182_pollen()) ) {
                    alt105=1;
                }
                else if ( (synpred183_pollen()) ) {
                    alt105=2;
                }
                else if ( (true) ) {
                    alt105=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }
            switch (alt105) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:10: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
                    {
                    string_literal391=(Atom)match(input,189,FOLLOW_189_in_stmtReturn12959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal391);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:19: ( '(' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:20: '('
                    {
                    char_literal392=(Atom)match(input,135,FOLLOW_135_in_stmtReturn12962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal392);


                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:25: ( expr ( ',' expr )+ )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:26: expr ( ',' expr )+
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn12966);
                    expr393=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr393.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:31: ( ',' expr )+
                    int cnt104=0;
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==138) ) {
                            alt104=1;
                        }


                        switch (alt104) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:32: ',' expr
                    	    {
                    	    char_literal394=(Atom)match(input,138,FOLLOW_138_in_stmtReturn12969); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal394);


                    	    pushFollow(FOLLOW_expr_in_stmtReturn12971);
                    	    expr395=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr395.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt104 >= 1 ) break loop104;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(104, input);
                                throw eee;
                        }
                        cnt104++;
                    } while (true);


                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:44: ( ')' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:45: ')'
                    {
                    char_literal396=(Atom)match(input,136,FOLLOW_136_in_stmtReturn12977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal396);


                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn12980);
                    delim397=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim397.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1824:9: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:12: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:52: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( expr )+ ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:83: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_3, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:10: 'return' ( expr ) delim
                    {
                    string_literal398=(Atom)match(input,189,FOLLOW_189_in_stmtReturn13036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal398);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:20: ( expr )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:21: expr
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn13040);
                    expr399=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr399.getTree());

                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn13044);
                    delim400=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim400.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1826:9: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1826:12: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1826:52: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1826:83: ^( LIST[\"LIST\"] expr )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_expr.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1827:10: 'return' delim
                    {
                    string_literal401=(Atom)match(input,189,FOLLOW_189_in_stmtReturn13099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(string_literal401);


                    pushFollow(FOLLOW_delim_in_stmtReturn13102);
                    delim402=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim402.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1828:9: -> ^( S_RETURN[\"S_RETURN\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1828:12: ^( S_RETURN[\"S_RETURN\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 110, stmtReturn_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtReturn"


    public static class stmtBreak_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBreak"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1831:1: stmtBreak : 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) ;
    public final pollenParser.stmtBreak_return stmtBreak() throws RecognitionException {
        pollenParser.stmtBreak_return retval = new pollenParser.stmtBreak_return();
        retval.start = input.LT(1);

        int stmtBreak_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal403=null;
        pollenParser.delim_return delim404 =null;


        BaseNode string_literal403_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1832:5: ( 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1832:10: 'break' delim
            {
            string_literal403=(Atom)match(input,151,FOLLOW_151_in_stmtBreak13146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal403);


            pushFollow(FOLLOW_delim_in_stmtBreak13148);
            delim404=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim404.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1832:24: -> ^( S_BREAK[\"S_BREAK\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1832:27: ^( S_BREAK[\"S_BREAK\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Break(S_BREAK, "S_BREAK")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 111, stmtBreak_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtBreak"


    public static class stmtContinue_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtContinue"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1834:1: stmtContinue : 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) ;
    public final pollenParser.stmtContinue_return stmtContinue() throws RecognitionException {
        pollenParser.stmtContinue_return retval = new pollenParser.stmtContinue_return();
        retval.start = input.LT(1);

        int stmtContinue_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal405=null;
        pollenParser.delim_return delim406 =null;


        BaseNode string_literal405_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:5: ( 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:10: 'continue' delim
            {
            string_literal405=(Atom)match(input,157,FOLLOW_157_in_stmtContinue13179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal405);


            pushFollow(FOLLOW_delim_in_stmtContinue13181);
            delim406=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim406.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1835:27: -> ^( S_CONTINUE[\"S_CONTINUE\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:30: ^( S_CONTINUE[\"S_CONTINUE\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Continue(S_CONTINUE, "S_CONTINUE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 112, stmtContinue_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtContinue"


    public static class stmtFor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtFor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1837:1: stmtFor : 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' ( NLL )? stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar ) ;
    public final pollenParser.stmtFor_return stmtFor() throws RecognitionException {
        pollenParser.stmtFor_return retval = new pollenParser.stmtFor_return();
        retval.start = input.LT(1);

        int stmtFor_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal407=null;
        Atom char_literal412=null;
        Atom NLL413=null;
        pollenParser.defaultLoopVar_return defaultLoopVar408 =null;

        pollenParser.stmtForInit_return stmtForInit409 =null;

        pollenParser.stmtForCond_return stmtForCond410 =null;

        pollenParser.stmtForNext_return stmtForNext411 =null;

        pollenParser.stmtBlock_return stmtBlock414 =null;


        BaseNode string_literal407_tree=null;
        BaseNode char_literal412_tree=null;
        BaseNode NLL413_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtForCond=new RewriteRuleSubtreeStream(adaptor,"rule stmtForCond");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_stmtForInit=new RewriteRuleSubtreeStream(adaptor,"rule stmtForInit");
        RewriteRuleSubtreeStream stream_stmtForNext=new RewriteRuleSubtreeStream(adaptor,"rule stmtForNext");
        RewriteRuleSubtreeStream stream_defaultLoopVar=new RewriteRuleSubtreeStream(adaptor,"rule defaultLoopVar");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:5: ( 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' ( NLL )? stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:9: 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' ( NLL )? stmtBlock
            {
            string_literal407=(Atom)match(input,167,FOLLOW_167_in_stmtFor13211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal407);


            pushFollow(FOLLOW_defaultLoopVar_in_stmtFor13213);
            defaultLoopVar408=defaultLoopVar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defaultLoopVar.add(defaultLoopVar408.getTree());

            pushFollow(FOLLOW_stmtForInit_in_stmtFor13215);
            stmtForInit409=stmtForInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForInit.add(stmtForInit409.getTree());

            pushFollow(FOLLOW_stmtForCond_in_stmtFor13217);
            stmtForCond410=stmtForCond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForCond.add(stmtForCond410.getTree());

            pushFollow(FOLLOW_stmtForNext_in_stmtFor13219);
            stmtForNext411=stmtForNext();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForNext.add(stmtForNext411.getTree());

            char_literal412=(Atom)match(input,136,FOLLOW_136_in_stmtFor13221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal412);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:70: ( NLL )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==NLL) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:71: NLL
                    {
                    NLL413=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtFor13224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL413);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtFor13228);
            stmtBlock414=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock414.getTree());

            // AST REWRITE
            // elements: stmtBlock, stmtForCond, defaultLoopVar, stmtForInit, stmtForNext
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1839:13: -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1839:16: ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.For(S_FOR, "S_FOR")
                , root_1);

                adaptor.addChild(root_1, stream_stmtForInit.nextTree());

                adaptor.addChild(root_1, stream_stmtForCond.nextTree());

                adaptor.addChild(root_1, stream_stmtForNext.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_1, stream_defaultLoopVar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 113, stmtFor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtFor"


    public static class stmtForCond_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForCond"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1841:1: stmtForCond : ( SEMI -> NIL | expr SEMI -> expr );
    public final pollenParser.stmtForCond_return stmtForCond() throws RecognitionException {
        pollenParser.stmtForCond_return retval = new pollenParser.stmtForCond_return();
        retval.start = input.LT(1);

        int stmtForCond_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI415=null;
        Atom SEMI417=null;
        pollenParser.expr_return expr416 =null;


        BaseNode SEMI415_tree=null;
        BaseNode SEMI417_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1842:5: ( SEMI -> NIL | expr SEMI -> expr )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==SEMI) ) {
                alt107=1;
            }
            else if ( (LA107_0==BIT_NOT||LA107_0==CHAR||LA107_0==DEC||LA107_0==HEX_LIT||LA107_0==IDENT||(LA107_0 >= INC && LA107_0 <= INT_LIT)||LA107_0==LOG_NOT||LA107_0==MINUS||LA107_0==OCT_LIT||LA107_0==REAL_LIT||LA107_0==STRING||LA107_0==135||(LA107_0 >= 145 && LA107_0 <= 146)||LA107_0==166||(LA107_0 >= 179 && LA107_0 <= 180)||LA107_0==192) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1842:9: SEMI
                    {
                    SEMI415=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond13281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI415);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1843:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1844:9: expr SEMI
                    {
                    pushFollow(FOLLOW_expr_in_stmtForCond13306);
                    expr416=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr416.getTree());

                    SEMI417=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond13308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI417);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1844:19: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 114, stmtForCond_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForCond"


    public static class defaultLoopVar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultLoopVar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:1: defaultLoopVar : lv= '(' -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) ) ;
    public final pollenParser.defaultLoopVar_return defaultLoopVar() throws RecognitionException {
        pollenParser.defaultLoopVar_return retval = new pollenParser.defaultLoopVar_return();
        retval.start = input.LT(1);

        int defaultLoopVar_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom lv=null;

        BaseNode lv_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1847:5: (lv= '(' -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1847:10: lv= '('
            {
            lv=(Atom)match(input,135,FOLLOW_135_in_defaultLoopVar13336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(lv);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1847:17: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1847:20: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1848:18: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1849:22: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, lv, "uint32")
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, ParseUnit.DEFAULT_LOOPVAR)
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 115, defaultLoopVar_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "defaultLoopVar"


    public static class stmtForInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1853:1: stmtForInit : ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | stmtAssign );
    public final pollenParser.stmtForInit_return stmtForInit() throws RecognitionException {
        pollenParser.stmtForInit_return retval = new pollenParser.stmtForInit_return();
        retval.start = input.LT(1);

        int stmtForInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI418=null;
        Atom IDENT420=null;
        Atom char_literal421=null;
        Atom SEMI423=null;
        pollenParser.typeName_return typeName419 =null;

        pollenParser.expr_return expr422 =null;

        pollenParser.stmtAssign_return stmtAssign424 =null;


        BaseNode SEMI418_tree=null;
        BaseNode IDENT420_tree=null;
        BaseNode char_literal421_tree=null;
        BaseNode SEMI423_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1854:5: ( SEMI -> NIL | typeName IDENT '=' expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | stmtAssign )
            int alt108=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt108=1;
                }
                break;
            case IDENT:
                {
                int LA108_2 = input.LA(2);

                if ( (synpred187_pollen()) ) {
                    alt108=2;
                }
                else if ( (true) ) {
                    alt108=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 2, input);

                    throw nvae;

                }
                }
                break;
            case 150:
            case 152:
            case 173:
            case 174:
            case 175:
            case 188:
            case 190:
            case 194:
            case 195:
            case 196:
                {
                alt108=2;
                }
                break;
            case INJECT:
            case 145:
            case 179:
                {
                alt108=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }

            switch (alt108) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1854:9: SEMI
                    {
                    SEMI418=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit13457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI418);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1855:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:9: typeName IDENT '=' expr SEMI
                    {
                    pushFollow(FOLLOW_typeName_in_stmtForInit13483);
                    typeName419=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName419.getTree());

                    IDENT420=(Atom)match(input,IDENT,FOLLOW_IDENT_in_stmtForInit13485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT420);


                    char_literal421=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtForInit13487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal421);


                    pushFollow(FOLLOW_expr_in_stmtForInit13489);
                    expr422=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr422.getTree());

                    SEMI423=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit13491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI423);


                    // AST REWRITE
                    // elements: expr, IDENT, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1857:13: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1857:16: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Decl(S_DECL, "S_DECL")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:18: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_typeName.nextTree());

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1859:9: stmtAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssign_in_stmtForInit13559);
                    stmtAssign424=stmtAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssign424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 116, stmtForInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForInit"


    public static class stmtForNext_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForNext"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1861:1: stmtForNext : ( -> NIL | expr );
    public final pollenParser.stmtForNext_return stmtForNext() throws RecognitionException {
        pollenParser.stmtForNext_return retval = new pollenParser.stmtForNext_return();
        retval.start = input.LT(1);

        int stmtForNext_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr425 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1862:5: ( -> NIL | expr )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==136) ) {
                alt109=1;
            }
            else if ( (LA109_0==BIT_NOT||LA109_0==CHAR||LA109_0==DEC||LA109_0==HEX_LIT||LA109_0==IDENT||(LA109_0 >= INC && LA109_0 <= INT_LIT)||LA109_0==LOG_NOT||LA109_0==MINUS||LA109_0==OCT_LIT||LA109_0==REAL_LIT||LA109_0==STRING||LA109_0==135||(LA109_0 >= 145 && LA109_0 <= 146)||LA109_0==166||(LA109_0 >= 179 && LA109_0 <= 180)||LA109_0==192) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1863:13: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1863:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1864:9: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_stmtForNext13602);
                    expr425=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr425.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 117, stmtForNext_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtForNext"


    public static class stmtSwitch_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtSwitch"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1872:1: stmtSwitch : 'switch' '(' expr ')' ( NLL )? braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) ;
    public final pollenParser.stmtSwitch_return stmtSwitch() throws RecognitionException {
        pollenParser.stmtSwitch_return retval = new pollenParser.stmtSwitch_return();
        retval.start = input.LT(1);

        int stmtSwitch_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal426=null;
        Atom char_literal427=null;
        Atom char_literal429=null;
        Atom NLL430=null;
        pollenParser.expr_return expr428 =null;

        pollenParser.braceOpen_return braceOpen431 =null;

        pollenParser.stmtsCase_return stmtsCase432 =null;

        pollenParser.stmtDefault_return stmtDefault433 =null;

        pollenParser.braceClose_return braceClose434 =null;


        BaseNode string_literal426_tree=null;
        BaseNode char_literal427_tree=null;
        BaseNode char_literal429_tree=null;
        BaseNode NLL430_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtDefault=new RewriteRuleSubtreeStream(adaptor,"rule stmtDefault");
        RewriteRuleSubtreeStream stream_braceOpen=new RewriteRuleSubtreeStream(adaptor,"rule braceOpen");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_braceClose=new RewriteRuleSubtreeStream(adaptor,"rule braceClose");
        RewriteRuleSubtreeStream stream_stmtsCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtsCase");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:5: ( 'switch' '(' expr ')' ( NLL )? braceOpen stmtsCase ( stmtDefault )? braceClose -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:10: 'switch' '(' expr ')' ( NLL )? braceOpen stmtsCase ( stmtDefault )? braceClose
            {
            string_literal426=(Atom)match(input,191,FOLLOW_191_in_stmtSwitch13627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal426);


            char_literal427=(Atom)match(input,135,FOLLOW_135_in_stmtSwitch13629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal427);


            pushFollow(FOLLOW_expr_in_stmtSwitch13631);
            expr428=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr428.getTree());

            char_literal429=(Atom)match(input,136,FOLLOW_136_in_stmtSwitch13633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal429);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:32: ( NLL )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NLL) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:33: NLL
                    {
                    NLL430=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtSwitch13636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL430);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpen_in_stmtSwitch13640);
            braceOpen431=braceOpen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpen.add(braceOpen431.getTree());

            pushFollow(FOLLOW_stmtsCase_in_stmtSwitch13642);
            stmtsCase432=stmtsCase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsCase.add(stmtsCase432.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:59: ( stmtDefault )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==158) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:59: stmtDefault
                    {
                    pushFollow(FOLLOW_stmtDefault_in_stmtSwitch13644);
                    stmtDefault433=stmtDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtDefault.add(stmtDefault433.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceClose_in_stmtSwitch13647);
            braceClose434=braceClose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceClose.add(braceClose434.getTree());

            // AST REWRITE
            // elements: expr, stmtDefault, stmtsCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1873:86: -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:89: ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Switch(S_SWITCH, "S_SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtsCase.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1873:145: ( stmtDefault )?
                if ( stream_stmtDefault.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtDefault.nextTree());

                }
                stream_stmtDefault.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 118, stmtSwitch_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtSwitch"


    public static class stmtsCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsCase"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1875:1: stmtsCase : ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) ;
    public final pollenParser.stmtsCase_return stmtsCase() throws RecognitionException {
        pollenParser.stmtsCase_return retval = new pollenParser.stmtsCase_return();
        retval.start = input.LT(1);

        int stmtsCase_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtCase_return stmtCase435 =null;


        RewriteRuleSubtreeStream stream_stmtCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtCase");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:5: ( ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:10: ( stmtCase )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:10: ( stmtCase )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==153) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:10: stmtCase
            	    {
            	    pushFollow(FOLLOW_stmtCase_in_stmtsCase13689);
            	    stmtCase435=stmtCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtCase.add(stmtCase435.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1876:20: -> ^( LIST[\"LIST\"] ( stmtCase )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:23: ^( LIST[\"LIST\"] ( stmtCase )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:48: ( stmtCase )*
                while ( stream_stmtCase.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtCase.nextTree());

                }
                stream_stmtCase.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 119, stmtsCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsCase"


    public static class stmtDefault_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDefault"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1878:1: stmtDefault : 'default' ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ) ;
    public final pollenParser.stmtDefault_return stmtDefault() throws RecognitionException {
        pollenParser.stmtDefault_return retval = new pollenParser.stmtDefault_return();
        retval.start = input.LT(1);

        int stmtDefault_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal436=null;
        Atom char_literal437=null;
        Atom NLL438=null;
        pollenParser.stmts_return stmts439 =null;


        BaseNode string_literal436_tree=null;
        BaseNode char_literal437_tree=null;
        BaseNode NLL438_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1879:5: ( 'default' ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1879:10: 'default' ':' ( NLL )? stmts
            {
            string_literal436=(Atom)match(input,158,FOLLOW_158_in_stmtDefault13722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal436);


            char_literal437=(Atom)match(input,141,FOLLOW_141_in_stmtDefault13727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal437);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1879:27: ( NLL )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==NLL) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1879:28: NLL
                    {
                    NLL438=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtDefault13730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL438);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmts_in_stmtDefault13734);
            stmts439=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts439.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1879:43: -> ^( S_CASE[\"S_CASE\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1879:46: ^( S_CASE[\"S_CASE\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 120, stmtDefault_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDefault"


    public static class stmtCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtCase"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1881:1: stmtCase : ( ( 'case' INT_LIT )=> 'case' ( INT_LIT ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) ) | 'case' ( qualName ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) ) );
    public final pollenParser.stmtCase_return stmtCase() throws RecognitionException {
        pollenParser.stmtCase_return retval = new pollenParser.stmtCase_return();
        retval.start = input.LT(1);

        int stmtCase_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal440=null;
        Atom INT_LIT441=null;
        Atom char_literal442=null;
        Atom NLL443=null;
        Atom string_literal445=null;
        Atom char_literal447=null;
        Atom NLL448=null;
        pollenParser.stmts_return stmts444 =null;

        pollenParser.qualName_return qualName446 =null;

        pollenParser.stmts_return stmts449 =null;


        BaseNode string_literal440_tree=null;
        BaseNode INT_LIT441_tree=null;
        BaseNode char_literal442_tree=null;
        BaseNode NLL443_tree=null;
        BaseNode string_literal445_tree=null;
        BaseNode char_literal447_tree=null;
        BaseNode NLL448_tree=null;
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");

            EnumSet<LitFlags> litFlags = EnumSet.of(LitFlags.INT);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:5: ( ( 'case' INT_LIT )=> 'case' ( INT_LIT ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) ) | 'case' ( qualName ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) ) )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==153) ) {
                int LA116_1 = input.LA(2);

                if ( (synpred193_pollen()) ) {
                    alt116=1;
                }
                else if ( (true) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:10: ( 'case' INT_LIT )=> 'case' ( INT_LIT ) ':' ( NLL )? stmts
                    {
                    string_literal440=(Atom)match(input,153,FOLLOW_153_in_stmtCase13782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal440);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:36: ( INT_LIT )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:37: INT_LIT
                    {
                    INT_LIT441=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_stmtCase13785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT441);


                    }


                    char_literal442=(Atom)match(input,141,FOLLOW_141_in_stmtCase13791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal442);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:53: ( NLL )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==NLL) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:54: NLL
                            {
                            NLL443=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtCase13794); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL443);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_stmts_in_stmtCase13798);
                    stmts444=stmts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmts.add(stmts444.getTree());

                    // AST REWRITE
                    // elements: INT_LIT, stmts
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1885:69: -> ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:72: ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Case(S_CASE, "S_CASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_stmts.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1886:33: ^( E_CONST[\"E_CONST\", litFlags] INT_LIT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_INT_LIT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:10: 'case' ( qualName ) ':' ( NLL )? stmts
                    {
                    string_literal445=(Atom)match(input,153,FOLLOW_153_in_stmtCase13871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal445);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:17: ( qualName )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:18: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_stmtCase13874);
                    qualName446=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName446.getTree());

                    }


                    char_literal447=(Atom)match(input,141,FOLLOW_141_in_stmtCase13880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal447);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:35: ( NLL )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==NLL) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:36: NLL
                            {
                            NLL448=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtCase13883); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL448);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_stmts_in_stmtCase13887);
                    stmts449=stmts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmts.add(stmts449.getTree());

                    // AST REWRITE
                    // elements: stmts
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1887:51: -> ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:54: ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Case(S_CASE, "S_CASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_stmts.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1888:33: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, (qualName446!=null?input.toString(qualName446.start,qualName446.stop):null))
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 121, stmtCase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtCase"


    public static class stmtDoWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDoWhile"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1890:1: stmtDoWhile : 'do' ( NLL )? stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) ;
    public final pollenParser.stmtDoWhile_return stmtDoWhile() throws RecognitionException {
        pollenParser.stmtDoWhile_return retval = new pollenParser.stmtDoWhile_return();
        retval.start = input.LT(1);

        int stmtDoWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal450=null;
        Atom NLL451=null;
        Atom string_literal453=null;
        Atom char_literal454=null;
        Atom char_literal456=null;
        pollenParser.stmtBlock_return stmtBlock452 =null;

        pollenParser.expr_return expr455 =null;

        pollenParser.delim_return delim457 =null;


        BaseNode string_literal450_tree=null;
        BaseNode NLL451_tree=null;
        BaseNode string_literal453_tree=null;
        BaseNode char_literal454_tree=null;
        BaseNode char_literal456_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1891:5: ( 'do' ( NLL )? stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1891:10: 'do' ( NLL )? stmtBlock 'while' '(' expr ')' delim
            {
            string_literal450=(Atom)match(input,159,FOLLOW_159_in_stmtDoWhile13970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal450);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1891:15: ( NLL )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==NLL) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1891:16: NLL
                    {
                    NLL451=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtDoWhile13973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL451);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtDoWhile13977);
            stmtBlock452=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock452.getTree());

            string_literal453=(Atom)match(input,198,FOLLOW_198_in_stmtDoWhile13979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal453);


            char_literal454=(Atom)match(input,135,FOLLOW_135_in_stmtDoWhile13981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal454);


            pushFollow(FOLLOW_expr_in_stmtDoWhile13983);
            expr455=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr455.getTree());

            char_literal456=(Atom)match(input,136,FOLLOW_136_in_stmtDoWhile13985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal456);


            pushFollow(FOLLOW_delim_in_stmtDoWhile13987);
            delim457=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim457.getTree());

            // AST REWRITE
            // elements: stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1891:63: -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1891:66: ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE", true)
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 122, stmtDoWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDoWhile"


    public static class stmtIf_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIf"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1893:1: stmtIf : 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) ;
    public final pollenParser.stmtIf_return stmtIf() throws RecognitionException {
        pollenParser.stmtIf_return retval = new pollenParser.stmtIf_return();
        retval.start = input.LT(1);

        int stmtIf_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal458=null;
        pollenParser.stmtIfBlock_return stmtIfBlock459 =null;

        pollenParser.stmtsElif_return stmtsElif460 =null;

        pollenParser.stmtElse_return stmtElse461 =null;


        BaseNode string_literal458_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        RewriteRuleSubtreeStream stream_stmtsElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtsElif");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:5: ( 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:10: 'if' stmtIfBlock stmtsElif ( stmtElse )?
            {
            string_literal458=(Atom)match(input,170,FOLLOW_170_in_stmtIf14026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal458);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtIf14028);
            stmtIfBlock459=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock459.getTree());

            pushFollow(FOLLOW_stmtsElif_in_stmtIf14030);
            stmtsElif460=stmtsElif();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsElif.add(stmtsElif460.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:37: ( stmtElse )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==161) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:37: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtIf14032);
                    stmtElse461=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse461.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtsElif, stmtIfBlock, stmtElse
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1894:50: -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:53: ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.If(S_IF, "S_IF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_1, stream_stmtsElif.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:103: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 123, stmtIf_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIf"


    public static class stmtIfBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIfBlock"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1896:1: stmtIfBlock : '(' expr ')' ( NLL )? stmtBlock -> expr stmtBlock ;
    public final pollenParser.stmtIfBlock_return stmtIfBlock() throws RecognitionException {
        pollenParser.stmtIfBlock_return retval = new pollenParser.stmtIfBlock_return();
        retval.start = input.LT(1);

        int stmtIfBlock_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal462=null;
        Atom char_literal464=null;
        Atom NLL465=null;
        pollenParser.expr_return expr463 =null;

        pollenParser.stmtBlock_return stmtBlock466 =null;


        BaseNode char_literal462_tree=null;
        BaseNode char_literal464_tree=null;
        BaseNode NLL465_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1897:5: ( '(' expr ')' ( NLL )? stmtBlock -> expr stmtBlock )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1897:10: '(' expr ')' ( NLL )? stmtBlock
            {
            char_literal462=(Atom)match(input,135,FOLLOW_135_in_stmtIfBlock14074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal462);


            pushFollow(FOLLOW_expr_in_stmtIfBlock14076);
            expr463=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr463.getTree());

            char_literal464=(Atom)match(input,136,FOLLOW_136_in_stmtIfBlock14078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal464);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1897:23: ( NLL )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==NLL) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1897:24: NLL
                    {
                    NLL465=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtIfBlock14081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL465);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtIfBlock14085);
            stmtBlock466=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock466.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1897:40: -> expr stmtBlock
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 124, stmtIfBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtIfBlock"


    public static class stmtsElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsElif"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1899:1: stmtsElif : ( stmtElif )* -> ^( LIST[\"LIST\"] ( stmtElif )* ) ;
    public final pollenParser.stmtsElif_return stmtsElif() throws RecognitionException {
        pollenParser.stmtsElif_return retval = new pollenParser.stmtsElif_return();
        retval.start = input.LT(1);

        int stmtsElif_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtElif_return stmtElif467 =null;


        RewriteRuleSubtreeStream stream_stmtElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtElif");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:5: ( ( stmtElif )* -> ^( LIST[\"LIST\"] ( stmtElif )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:10: ( stmtElif )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:10: ( stmtElif )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==160) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:10: stmtElif
            	    {
            	    pushFollow(FOLLOW_stmtElif_in_stmtsElif14110);
            	    stmtElif467=stmtElif();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtElif.add(stmtElif467.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtElif
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1900:20: -> ^( LIST[\"LIST\"] ( stmtElif )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:23: ^( LIST[\"LIST\"] ( stmtElif )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:48: ( stmtElif )*
                while ( stream_stmtElif.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElif.nextTree());

                }
                stream_stmtElif.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 125, stmtsElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtsElif"


    public static class stmtElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElif"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1902:1: stmtElif : 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) ;
    public final pollenParser.stmtElif_return stmtElif() throws RecognitionException {
        pollenParser.stmtElif_return retval = new pollenParser.stmtElif_return();
        retval.start = input.LT(1);

        int stmtElif_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal468=null;
        pollenParser.stmtIfBlock_return stmtIfBlock469 =null;


        BaseNode string_literal468_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1903:5: ( 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1903:10: 'elif' stmtIfBlock
            {
            string_literal468=(Atom)match(input,160,FOLLOW_160_in_stmtElif14143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal468);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtElif14145);
            stmtIfBlock469=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock469.getTree());

            // AST REWRITE
            // elements: stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1903:29: -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1903:32: ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Elif(S_ELIF, "S_ELIF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 126, stmtElif_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElif"


    public static class stmtElse_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElse"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1905:1: stmtElse : 'else' ( NLL )? stmtBlock -> stmtBlock ;
    public final pollenParser.stmtElse_return stmtElse() throws RecognitionException {
        pollenParser.stmtElse_return retval = new pollenParser.stmtElse_return();
        retval.start = input.LT(1);

        int stmtElse_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal470=null;
        Atom NLL471=null;
        pollenParser.stmtBlock_return stmtBlock472 =null;


        BaseNode string_literal470_tree=null;
        BaseNode NLL471_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:5: ( 'else' ( NLL )? stmtBlock -> stmtBlock )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:10: 'else' ( NLL )? stmtBlock
            {
            string_literal470=(Atom)match(input,161,FOLLOW_161_in_stmtElse14178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal470);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:17: ( NLL )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==NLL) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:18: NLL
                    {
                    NLL471=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtElse14181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL471);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtElse14185);
            stmtBlock472=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock472.getTree());

            // AST REWRITE
            // elements: stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1906:34: -> stmtBlock
            {
                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 127, stmtElse_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtElse"


    public static class stmtProvided_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtProvided"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1908:1: stmtProvided : 'provided' '(' expr ')' ( NLL )? stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) ;
    public final pollenParser.stmtProvided_return stmtProvided() throws RecognitionException {
        pollenParser.stmtProvided_return retval = new pollenParser.stmtProvided_return();
        retval.start = input.LT(1);

        int stmtProvided_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal473=null;
        Atom char_literal474=null;
        Atom char_literal476=null;
        Atom NLL477=null;
        pollenParser.expr_return expr475 =null;

        pollenParser.stmtBlock_return stmtBlock478 =null;

        pollenParser.stmtElse_return stmtElse479 =null;


        BaseNode string_literal473_tree=null;
        BaseNode char_literal474_tree=null;
        BaseNode char_literal476_tree=null;
        BaseNode NLL477_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:5: ( 'provided' '(' expr ')' ( NLL )? stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:10: 'provided' '(' expr ')' ( NLL )? stmtBlock ( stmtElse )?
            {
            string_literal473=(Atom)match(input,186,FOLLOW_186_in_stmtProvided14208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal473);


            char_literal474=(Atom)match(input,135,FOLLOW_135_in_stmtProvided14210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal474);


            pushFollow(FOLLOW_expr_in_stmtProvided14212);
            expr475=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr475.getTree());

            char_literal476=(Atom)match(input,136,FOLLOW_136_in_stmtProvided14214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal476);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:34: ( NLL )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==NLL) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:35: NLL
                    {
                    NLL477=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtProvided14217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL477);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtProvided14221);
            stmtBlock478=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock478.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:51: ( stmtElse )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==161) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:52: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtProvided14224);
                    stmtElse479=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse479.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtBlock, stmtElse, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1910:9: -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:12: ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Provided(S_PROVIDED, "S_PROVIDED")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:73: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 128, stmtProvided_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtProvided"


    public static class stmtWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtWhile"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1912:1: stmtWhile : 'while' '(' expr ')' ( NLL )? stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) ;
    public final pollenParser.stmtWhile_return stmtWhile() throws RecognitionException {
        pollenParser.stmtWhile_return retval = new pollenParser.stmtWhile_return();
        retval.start = input.LT(1);

        int stmtWhile_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal480=null;
        Atom char_literal481=null;
        Atom char_literal483=null;
        Atom NLL484=null;
        pollenParser.expr_return expr482 =null;

        pollenParser.stmtBlock_return stmtBlock485 =null;


        BaseNode string_literal480_tree=null;
        BaseNode char_literal481_tree=null;
        BaseNode char_literal483_tree=null;
        BaseNode NLL484_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1913:5: ( 'while' '(' expr ')' ( NLL )? stmtBlock -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1913:10: 'while' '(' expr ')' ( NLL )? stmtBlock
            {
            string_literal480=(Atom)match(input,198,FOLLOW_198_in_stmtWhile14272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal480);


            char_literal481=(Atom)match(input,135,FOLLOW_135_in_stmtWhile14274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal481);


            pushFollow(FOLLOW_expr_in_stmtWhile14275);
            expr482=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr482.getTree());

            char_literal483=(Atom)match(input,136,FOLLOW_136_in_stmtWhile14276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal483);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1913:29: ( NLL )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==NLL) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1913:30: NLL
                    {
                    NLL484=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtWhile14279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL484);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtWhile14283);
            stmtBlock485=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock485.getTree());

            // AST REWRITE
            // elements: stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1913:46: -> ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1913:49: ^( S_WHILE[\"S_WHILE\"] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 129, stmtWhile_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtWhile"


    public static class stmtDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1915:1: stmtDecl : stmtDeclAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) ;
    public final pollenParser.stmtDecl_return stmtDecl() throws RecognitionException {
        pollenParser.stmtDecl_return retval = new pollenParser.stmtDecl_return();
        retval.start = input.LT(1);

        int stmtDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.stmtDeclAttr_return stmtDeclAttr486 =null;

        pollenParser.varDecl_return varDecl487 =null;

        pollenParser.delim_return delim488 =null;


        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_stmtDeclAttr=new RewriteRuleSubtreeStream(adaptor,"rule stmtDeclAttr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1916:4: ( stmtDeclAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1916:10: stmtDeclAttr varDecl delim
            {
            pushFollow(FOLLOW_stmtDeclAttr_in_stmtDecl14318);
            stmtDeclAttr486=stmtDeclAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtDeclAttr.add(stmtDeclAttr486.getTree());

            pushFollow(FOLLOW_varDecl_in_stmtDecl14320);
            varDecl487=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl487.getTree());

            pushFollow(FOLLOW_delim_in_stmtDecl14322);
            delim488=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim488.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1916:40: -> ^( S_DECL[\"S_DECL\"] varDecl )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1916:43: ^( S_DECL[\"S_DECL\"] varDecl )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_varDecl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 130, stmtDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDecl"


    public static class stmtDeclAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDeclAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1918:1: stmtDeclAttr : ( 'const' | 'volatile' |t= 'host' )* ;
    public final pollenParser.stmtDeclAttr_return stmtDeclAttr() throws RecognitionException {
        pollenParser.stmtDeclAttr_return retval = new pollenParser.stmtDeclAttr_return();
        retval.start = input.LT(1);

        int stmtDeclAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom t=null;
        Atom string_literal489=null;
        Atom string_literal490=null;

        BaseNode t_tree=null;
        BaseNode string_literal489_tree=null;
        BaseNode string_literal490_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:5: ( ( 'const' | 'volatile' |t= 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:10: ( 'const' | 'volatile' |t= 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:10: ( 'const' | 'volatile' |t= 'host' )*
            loop125:
            do {
                int alt125=4;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt125=1;
                    }
                    break;
                case 197:
                    {
                    alt125=2;
                    }
                    break;
                case 169:
                    {
                    alt125=3;
                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:16: 'const'
            	    {
            	    string_literal489=(Atom)match(input,156,FOLLOW_156_in_stmtDeclAttr14363); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal489_tree = 
            	    (BaseNode)adaptor.create(string_literal489)
            	    ;
            	    adaptor.addChild(root_0, string_literal489_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1920:15: 'volatile'
            	    {
            	    string_literal490=(Atom)match(input,197,FOLLOW_197_in_stmtDeclAttr14381); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal490_tree = 
            	    (BaseNode)adaptor.create(string_literal490)
            	    ;
            	    adaptor.addChild(root_0, string_literal490_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1921:18: t= 'host'
            	    {
            	    t=(Atom)match(input,169,FOLLOW_169_in_stmtDeclAttr14404); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    t_tree = 
            	    (BaseNode)adaptor.create(t)
            	    ;
            	    adaptor.addChild(root_0, t_tree);
            	    }

            	    if ( state.backtracking==0 ) { ParseUnit.current().reportError(t, "invalid function local variable attribute"); }

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 131, stmtDeclAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtDeclAttr"


    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1924:1: fieldDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        pollenParser.fieldDeclaration_return retval = new pollenParser.fieldDeclaration_return();
        retval.start = input.LT(1);

        int fieldDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr491 =null;

        pollenParser.varDecl_return varDecl492 =null;

        pollenParser.delim_return delim493 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            stmtFlags = EnumSet.noneOf(Flags.class);
            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags.add(Flags.FIELD);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1930:4: ( varAttr varDecl delim -> varDecl )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1930:10: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_fieldDeclaration14446);
            varAttr491=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr491.getTree());

            pushFollow(FOLLOW_varDecl_in_fieldDeclaration14448);
            varDecl492=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl492.getTree());

            pushFollow(FOLLOW_delim_in_fieldDeclaration14450);
            delim493=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim493.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1930:35: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 132, fieldDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"


    public static class varDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1932:1: varDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.varDeclaration_return varDeclaration() throws RecognitionException {
        pollenParser.varDeclaration_return retval = new pollenParser.varDeclaration_return();
        retval.start = input.LT(1);

        int varDeclaration_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr494 =null;

        pollenParser.varDecl_return varDecl495 =null;

        pollenParser.delim_return delim496 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags = EnumSet.noneOf(Flags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1940:4: ( varAttr varDecl delim -> varDecl )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1940:10: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_varDeclaration14488);
            varAttr494=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr494.getTree());

            pushFollow(FOLLOW_varDecl_in_varDeclaration14490);
            varDecl495=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl495.getTree());

            pushFollow(FOLLOW_delim_in_varDeclaration14492);
            delim496=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim496.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1940:35: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                typeMods = EnumSet.noneOf(Flags.class);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 133, varDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclaration"


    public static class varAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1942:1: varAttr : ( 'const' | 'volatile' | 'host' )* ;
    public final pollenParser.varAttr_return varAttr() throws RecognitionException {
        pollenParser.varAttr_return retval = new pollenParser.varAttr_return();
        retval.start = input.LT(1);

        int varAttr_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal497=null;
        Atom string_literal498=null;
        Atom string_literal499=null;

        BaseNode string_literal497_tree=null;
        BaseNode string_literal498_tree=null;
        BaseNode string_literal499_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1943:5: ( ( 'const' | 'volatile' | 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1943:10: ( 'const' | 'volatile' | 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1943:10: ( 'const' | 'volatile' | 'host' )*
            loop126:
            do {
                int alt126=4;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt126=1;
                    }
                    break;
                case 197:
                    {
                    alt126=2;
                    }
                    break;
                case 169:
                    {
                    alt126=3;
                    }
                    break;

                }

                switch (alt126) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1943:16: 'const'
            	    {
            	    string_literal497=(Atom)match(input,156,FOLLOW_156_in_varAttr14523); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal497_tree = 
            	    (BaseNode)adaptor.create(string_literal497)
            	    ;
            	    adaptor.addChild(root_0, string_literal497_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:15: 'volatile'
            	    {
            	    string_literal498=(Atom)match(input,197,FOLLOW_197_in_varAttr14541); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal498_tree = 
            	    (BaseNode)adaptor.create(string_literal498)
            	    ;
            	    adaptor.addChild(root_0, string_literal498_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1945:17: 'host'
            	    {
            	    string_literal499=(Atom)match(input,169,FOLLOW_169_in_varAttr14561); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal499_tree = 
            	    (BaseNode)adaptor.create(string_literal499)
            	    ;
            	    adaptor.addChild(root_0, string_literal499_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.HOST); }

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 134, varAttr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varAttr"


    protected static class varDecl_scope {
        Object typ;
    }
    protected Stack varDecl_stack = new Stack();


    public static class varDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1948:1: varDecl : ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( ( '(' )? typeName '(' )=> varFcnRef | ( ( '(' ) typeName typeName '(' )=> varFcnRef2 | ( typeName varInit )=> varDeclList | 'new' qualName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) );
    public final pollenParser.varDecl_return varDecl() throws RecognitionException {
        varDecl_stack.push(new varDecl_scope());
        pollenParser.varDecl_return retval = new pollenParser.varDecl_return();
        retval.start = input.LT(1);

        int varDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal505=null;
        Atom IDENT507=null;
        pollenParser.varDeclList_return varDeclList500 =null;

        pollenParser.varArray_return varArray501 =null;

        pollenParser.varFcnRef_return varFcnRef502 =null;

        pollenParser.varFcnRef2_return varFcnRef2503 =null;

        pollenParser.varDeclList_return varDeclList504 =null;

        pollenParser.qualName_return qualName506 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList508 =null;


        BaseNode string_literal505_tree=null;
        BaseNode IDENT507_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");

            ((varDecl_scope)varDecl_stack.peek()).typ = null;
            stmtFlags.addAll(typeMods);
            String ctor = (typeMods.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1959:5: ( ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( ( '(' )? typeName '(' )=> varFcnRef | ( ( '(' ) typeName typeName '(' )=> varFcnRef2 | ( typeName varInit )=> varDeclList | 'new' qualName IDENT fcnArgumentList -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) )
            int alt127=6;
            switch ( input.LA(1) ) {
            case 150:
                {
                int LA127_1 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                int LA127_2 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 2, input);

                    throw nvae;

                }
                }
                break;
            case 175:
                {
                int LA127_3 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 3, input);

                    throw nvae;

                }
                }
                break;
            case 173:
                {
                int LA127_4 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 4, input);

                    throw nvae;

                }
                }
                break;
            case 174:
                {
                int LA127_5 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 5, input);

                    throw nvae;

                }
                }
                break;
            case 188:
                {
                int LA127_6 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 6, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA127_7 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 7, input);

                    throw nvae;

                }
                }
                break;
            case 196:
                {
                int LA127_8 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 8, input);

                    throw nvae;

                }
                }
                break;
            case 194:
                {
                int LA127_9 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 9, input);

                    throw nvae;

                }
                }
                break;
            case 195:
                {
                int LA127_10 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 10, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA127_11 = input.LA(2);

                if ( (synpred211_pollen()) ) {
                    alt127=1;
                }
                else if ( (synpred212_pollen()) ) {
                    alt127=2;
                }
                else if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred216_pollen()) ) {
                    alt127=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 11, input);

                    throw nvae;

                }
                }
                break;
            case 135:
                {
                int LA127_12 = input.LA(2);

                if ( (synpred214_pollen()) ) {
                    alt127=3;
                }
                else if ( (synpred215_pollen()) ) {
                    alt127=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 12, input);

                    throw nvae;

                }
                }
                break;
            case 179:
                {
                alt127=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1959:10: ( typeName IDENT ( ASSIGN expr )? ',' )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl14620);
                    varDeclList500=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList500.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1960:12: ( typeName IDENT '[' )=> varArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varArray_in_varDecl14647);
                    varArray501=varArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varArray501.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1961:12: ( ( '(' )? typeName '(' )=> varFcnRef
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef_in_varDecl14675);
                    varFcnRef502=varFcnRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef502.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1962:12: ( ( '(' ) typeName typeName '(' )=> varFcnRef2
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef2_in_varDecl14705);
                    varFcnRef2503=varFcnRef2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef2503.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1963:13: ( typeName varInit )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl14727);
                    varDeclList504=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList504.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1964:11: 'new' qualName IDENT fcnArgumentList
                    {
                    string_literal505=(Atom)match(input,179,FOLLOW_179_in_varDecl14739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal505);


                    pushFollow(FOLLOW_qualName_in_varDecl14741);
                    qualName506=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName506.getTree());

                    IDENT507=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varDecl14743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT507);


                    pushFollow(FOLLOW_fcnArgumentList_in_varDecl14745);
                    fcnArgumentList508=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList508.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.NEW); }

                    // AST REWRITE
                    // elements: IDENT, fcnArgumentList, qualName, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1966:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1966:12: ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1966:62: ^( T_USR[\"T_USR\", typeMods] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1967:20: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1968:26: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1969:29: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(IDENT, (qualName506!=null?input.toString(qualName506.start,qualName506.stop):null) + "." + ctor)
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_3, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 135, varDecl_StartIndex); }

            varDecl_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varDecl"


    public static class varFcnRef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1974:1: varFcnRef : ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? ) -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? ) ;
    public final pollenParser.varFcnRef_return varFcnRef() throws RecognitionException {
        pollenParser.varFcnRef_return retval = new pollenParser.varFcnRef_return();
        retval.start = input.LT(1);

        int varFcnRef_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal509=null;
        Atom char_literal512=null;
        Atom IDENT513=null;
        Atom ASSIGN514=null;
        Atom IDENT518=null;
        Atom ASSIGN519=null;
        pollenParser.typeName_return typeName510 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList511 =null;

        pollenParser.expr_return expr515 =null;

        pollenParser.typeName_return typeName516 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList517 =null;

        pollenParser.expr_return expr520 =null;


        BaseNode char_literal509_tree=null;
        BaseNode char_literal512_tree=null;
        BaseNode IDENT513_tree=null;
        BaseNode ASSIGN514_tree=null;
        BaseNode IDENT518_tree=null;
        BaseNode ASSIGN519_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:5: ( ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? ) -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:11: ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:11: ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==135) ) {
                alt130=1;
            }
            else if ( (LA130_0==IDENT||LA130_0==150||LA130_0==152||(LA130_0 >= 173 && LA130_0 <= 175)||LA130_0==188||LA130_0==190||(LA130_0 >= 194 && LA130_0 <= 196)) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }
            switch (alt130) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:13: ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )?
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:13: ( '(' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:14: '('
                    {
                    char_literal509=(Atom)match(input,135,FOLLOW_135_in_varFcnRef14997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal509);


                    }


                    pushFollow(FOLLOW_typeName_in_varFcnRef15000);
                    typeName510=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName510.getTree());

                    pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef15002);
                    fcnRefTypeList511=fcnRefTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList511.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:43: ( ')' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:44: ')'
                    {
                    char_literal512=(Atom)match(input,136,FOLLOW_136_in_varFcnRef15005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal512);


                    }


                    IDENT513=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef15008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT513);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:55: ( ASSIGN expr )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==ASSIGN) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1975:56: ASSIGN expr
                            {
                            ASSIGN514=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varFcnRef15011); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN514);


                            pushFollow(FOLLOW_expr_in_varFcnRef15013);
                            expr515=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr515.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1976:16: typeName fcnRefTypeList IDENT ( ASSIGN expr )?
                    {
                    pushFollow(FOLLOW_typeName_in_varFcnRef15032);
                    typeName516=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName516.getTree());

                    pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef15034);
                    fcnRefTypeList517=fcnRefTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList517.getTree());

                    IDENT518=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef15037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT518);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1976:47: ( ASSIGN expr )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==ASSIGN) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1976:48: ASSIGN expr
                            {
                            ASSIGN519=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varFcnRef15040); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN519);


                            pushFollow(FOLLOW_expr_in_varFcnRef15042);
                            expr520=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr520.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: expr, fcnRefTypeList, typeName, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1977:9: -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1977:12: ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1977:95: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 136, varFcnRef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varFcnRef"


    public static class varFcnRef2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1979:1: varFcnRef2 : '(' rtnType typeName fcnRefTypeList ')' IDENT ( ASSIGN expr )? -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? ) ;
    public final pollenParser.varFcnRef2_return varFcnRef2() throws RecognitionException {
        pollenParser.varFcnRef2_return retval = new pollenParser.varFcnRef2_return();
        retval.start = input.LT(1);

        int varFcnRef2_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal521=null;
        Atom char_literal525=null;
        Atom IDENT526=null;
        Atom ASSIGN527=null;
        pollenParser.rtnType_return rtnType522 =null;

        pollenParser.typeName_return typeName523 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList524 =null;

        pollenParser.expr_return expr528 =null;


        BaseNode char_literal521_tree=null;
        BaseNode char_literal525_tree=null;
        BaseNode IDENT526_tree=null;
        BaseNode ASSIGN527_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_rtnType=new RewriteRuleSubtreeStream(adaptor,"rule rtnType");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1980:5: ( '(' rtnType typeName fcnRefTypeList ')' IDENT ( ASSIGN expr )? -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1980:11: '(' rtnType typeName fcnRefTypeList ')' IDENT ( ASSIGN expr )?
            {
            char_literal521=(Atom)match(input,135,FOLLOW_135_in_varFcnRef215096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal521);


            pushFollow(FOLLOW_rtnType_in_varFcnRef215098);
            rtnType522=rtnType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rtnType.add(rtnType522.getTree());

            pushFollow(FOLLOW_typeName_in_varFcnRef215100);
            typeName523=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName523.getTree());

            pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef215102);
            fcnRefTypeList524=fcnRefTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList524.getTree());

            char_literal525=(Atom)match(input,136,FOLLOW_136_in_varFcnRef215104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal525);


            IDENT526=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef215106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT526);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1980:57: ( ASSIGN expr )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ASSIGN) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1980:58: ASSIGN expr
                    {
                    ASSIGN527=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varFcnRef215109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN527);


                    pushFollow(FOLLOW_expr_in_varFcnRef215111);
                    expr528=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr528.getTree());

                    }
                    break;

            }


            if ( state.backtracking==0 ) { stmtFlags.add(Flags.FCN_REF_RTN); }

            // AST REWRITE
            // elements: IDENT, rtnType, fcnRefTypeList, expr, typeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1982:9: -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1982:12: ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_rtnType.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1982:103: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 137, varFcnRef2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varFcnRef2"


    public static class rtnType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rtnType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1984:1: rtnType : typeName ;
    public final pollenParser.rtnType_return rtnType() throws RecognitionException {
        pollenParser.rtnType_return retval = new pollenParser.rtnType_return();
        retval.start = input.LT(1);

        int rtnType_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.typeName_return typeName529 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1985:5: ( typeName )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1985:10: typeName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeName_in_rtnType15188);
            typeName529=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName529.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 138, rtnType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "rtnType"


    public static class fcnRefTypeList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypeList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1988:1: fcnRefTypeList : '(' fcnRefTypes ')' -> fcnRefTypes ;
    public final pollenParser.fcnRefTypeList_return fcnRefTypeList() throws RecognitionException {
        pollenParser.fcnRefTypeList_return retval = new pollenParser.fcnRefTypeList_return();
        retval.start = input.LT(1);

        int fcnRefTypeList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal530=null;
        Atom char_literal532=null;
        pollenParser.fcnRefTypes_return fcnRefTypes531 =null;


        BaseNode char_literal530_tree=null;
        BaseNode char_literal532_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_fcnRefTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypes");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1989:5: ( '(' fcnRefTypes ')' -> fcnRefTypes )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1989:11: '(' fcnRefTypes ')'
            {
            char_literal530=(Atom)match(input,135,FOLLOW_135_in_fcnRefTypeList15209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal530);


            pushFollow(FOLLOW_fcnRefTypes_in_fcnRefTypeList15211);
            fcnRefTypes531=fcnRefTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypes.add(fcnRefTypes531.getTree());

            char_literal532=(Atom)match(input,136,FOLLOW_136_in_fcnRefTypeList15213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal532);


            // AST REWRITE
            // elements: fcnRefTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1989:31: -> fcnRefTypes
            {
                adaptor.addChild(root_0, stream_fcnRefTypes.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 139, fcnRefTypeList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypeList"


    public static class fcnRefTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypes"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1991:1: fcnRefTypes : ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.fcnRefTypes_return fcnRefTypes() throws RecognitionException {
        pollenParser.fcnRefTypes_return retval = new pollenParser.fcnRefTypes_return();
        retval.start = input.LT(1);

        int fcnRefTypes_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal534=null;
        pollenParser.typeName_return typeName533 =null;

        pollenParser.typeName_return typeName535 =null;


        BaseNode char_literal534_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1992:5: ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==IDENT||LA133_0==150||LA133_0==152||(LA133_0 >= 173 && LA133_0 <= 175)||LA133_0==188||LA133_0==190||(LA133_0 >= 194 && LA133_0 <= 196)) ) {
                alt133=1;
            }
            else if ( (LA133_0==136) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1992:10: typeName ( ',' typeName )*
                    {
                    pushFollow(FOLLOW_typeName_in_fcnRefTypes15236);
                    typeName533=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName533.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1992:19: ( ',' typeName )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==138) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1992:20: ',' typeName
                    	    {
                    	    char_literal534=(Atom)match(input,138,FOLLOW_138_in_fcnRefTypes15239); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal534);


                    	    pushFollow(FOLLOW_typeName_in_fcnRefTypes15241);
                    	    typeName535=typeName();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeName.add(typeName535.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1993:9: -> ^( LIST[\"LIST\"] ( typeName )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1993:12: ^( LIST[\"LIST\"] ( typeName )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_typeName.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_typeName.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeName.nextTree());

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1994:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1994:10: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1994:13: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 140, fcnRefTypes_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fcnRefTypes"


    protected static class varArray_scope {
        Object varArrSpec;
        Object typArrSpec;
    }
    protected Stack varArray_stack = new Stack();


    public static class varArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1996:1: varArray : typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) ;
    public final pollenParser.varArray_return varArray() throws RecognitionException {
        varArray_stack.push(new varArray_scope());
        pollenParser.varArray_return retval = new pollenParser.varArray_return();
        retval.start = input.LT(1);

        int varArray_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT537=null;
        pollenParser.typeNameArray_return typeNameArray536 =null;

        pollenParser.varArraySpec_return varArraySpec538 =null;

        pollenParser.varArrayInit_return varArrayInit539 =null;


        BaseNode IDENT537_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_varArrayInit=new RewriteRuleSubtreeStream(adaptor,"rule varArrayInit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2004:5: ( typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2004:10: typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )?
            {
            pushFollow(FOLLOW_typeNameArray_in_varArray15311);
            typeNameArray536=typeNameArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray536.getTree());

            if ( state.backtracking==0 ) { ((varArray_scope)varArray_stack.peek()).typArrSpec = (typeNameArray536!=null?((BaseNode)typeNameArray536.tree):null); }

            IDENT537=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varArray15323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT537);


            pushFollow(FOLLOW_varArraySpec_in_varArray15334);
            varArraySpec538=varArraySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec538.getTree());

            if ( state.backtracking==0 ) { ((varArray_scope)varArray_stack.peek()).varArrSpec = (varArraySpec538!=null?((BaseNode)varArraySpec538.tree):null); }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2007:9: ( varArrayInit[stmtFlags] )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==ASSIGN||LA134_0==PEG) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2007:9: varArrayInit[stmtFlags]
                    {
                    pushFollow(FOLLOW_varArrayInit_in_varArray15347);
                    varArrayInit539=varArrayInit(stmtFlags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArrayInit.add(varArrayInit539.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: varArraySpec, varArrayInit, typeNameArray, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2008:13: -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2008:17: ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Arr(D_ARR, "D_ARR", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeNameArray.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_varArraySpec.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2010:36: ( varArrayInit )?
                if ( stream_varArrayInit.hasNext() ) {
                    adaptor.addChild(root_1, stream_varArrayInit.nextTree());

                }
                stream_varArrayInit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                     ((CommonTree) ((varArray_scope)varArray_stack.peek()).typArrSpec).addChild(((CommonTree) ((varArray_scope)varArray_stack.peek()).varArrSpec));                
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 141, varArray_StartIndex); }

            varArray_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varArray"


    public static class varArraySpec_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArraySpec"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2012:1: varArraySpec : ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) ;
    public final pollenParser.varArraySpec_return varArraySpec() throws RecognitionException {
        pollenParser.varArraySpec_return retval = new pollenParser.varArraySpec_return();
        retval.start = input.LT(1);

        int varArraySpec_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal540=null;
        Atom char_literal542=null;
        pollenParser.varDim_return varDim541 =null;


        BaseNode char_literal540_tree=null;
        BaseNode char_literal542_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_varDim=new RewriteRuleSubtreeStream(adaptor,"rule varDim");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2013:5: ( ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2013:10: ( '[' varDim ']' )+
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2013:10: ( '[' varDim ']' )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==146) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2013:11: '[' varDim ']'
            	    {
            	    char_literal540=(Atom)match(input,146,FOLLOW_146_in_varArraySpec15441); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_146.add(char_literal540);


            	    pushFollow(FOLLOW_varDim_in_varArraySpec15443);
            	    varDim541=varDim();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_varDim.add(varDim541.getTree());

            	    char_literal542=(Atom)match(input,147,FOLLOW_147_in_varArraySpec15445); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_147.add(char_literal542);


            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);


            // AST REWRITE
            // elements: varDim
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2013:31: -> ^( LIST[\"LIST\"] ( varDim )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2013:36: ^( LIST[\"LIST\"] ( varDim )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_varDim.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varDim.hasNext() ) {
                    adaptor.addChild(root_1, stream_varDim.nextTree());

                }
                stream_varDim.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 142, varArraySpec_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArraySpec"


    public static class varArrayInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArrayInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2015:1: varArrayInit[EnumSet<Flags> f] : ( ( '=' initializer ) -> initializer | ( PEG initializer ) -> initializer );
    public final pollenParser.varArrayInit_return varArrayInit(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.varArrayInit_return retval = new pollenParser.varArrayInit_return();
        retval.start = input.LT(1);

        int varArrayInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal543=null;
        Atom PEG545=null;
        pollenParser.initializer_return initializer544 =null;

        pollenParser.initializer_return initializer546 =null;


        BaseNode char_literal543_tree=null;
        BaseNode PEG545_tree=null;
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:5: ( ( '=' initializer ) -> initializer | ( PEG initializer ) -> initializer )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==ASSIGN) ) {
                alt136=1;
            }
            else if ( (LA136_0==PEG) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:10: ( '=' initializer )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:10: ( '=' initializer )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:11: '=' initializer
                    {
                    char_literal543=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varArrayInit15486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal543);


                    pushFollow(FOLLOW_initializer_in_varArrayInit15488);
                    initializer544=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer544.getTree());

                    }


                    // AST REWRITE
                    // elements: initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2016:44: -> initializer
                    {
                        adaptor.addChild(root_0, stream_initializer.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2017:10: ( PEG initializer )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2017:10: ( PEG initializer )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2017:11: PEG initializer
                    {
                    PEG545=(Atom)match(input,PEG,FOLLOW_PEG_in_varArrayInit15521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PEG.add(PEG545);


                    pushFollow(FOLLOW_initializer_in_varArrayInit15523);
                    initializer546=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer546.getTree());

                    }


                    if ( state.backtracking==0 ) {f.add(Flags.PEG);}

                    // AST REWRITE
                    // elements: initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2017:52: -> initializer
                    {
                        adaptor.addChild(root_0, stream_initializer.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 143, varArrayInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varArrayInit"


    public static class varDim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2019:1: varDim : ( expr | -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] ) );
    public final pollenParser.varDim_return varDim() throws RecognitionException {
        pollenParser.varDim_return retval = new pollenParser.varDim_return();
        retval.start = input.LT(1);

        int varDim_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr547 =null;




          EnumSet<LitFlags> fl = EnumSet.noneOf(LitFlags.class);
          fl.add(LitFlags.NUM); fl.add(LitFlags.INT);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2024:5: ( expr | -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] ) )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==BIT_NOT||LA137_0==CHAR||LA137_0==DEC||LA137_0==HEX_LIT||LA137_0==IDENT||(LA137_0 >= INC && LA137_0 <= INT_LIT)||LA137_0==LOG_NOT||LA137_0==MINUS||LA137_0==OCT_LIT||LA137_0==REAL_LIT||LA137_0==STRING||LA137_0==135||(LA137_0 >= 145 && LA137_0 <= 146)||LA137_0==166||(LA137_0 >= 179 && LA137_0 <= 180)||LA137_0==192) ) {
                alt137=1;
            }
            else if ( (LA137_0==147) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2024:12: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_varDim15560);
                    expr547=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr547.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2026:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2026:11: -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2026:14: ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", fl)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(INT_LIT, ParseUnit.ARRAY_WITHOUT_DIMENSION)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 144, varDim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDim"


    public static class initializer_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2029:1: initializer : ( expr | brace_list_beg initializer_list brace_list_end );
    public final pollenParser.initializer_return initializer() throws RecognitionException {
        pollenParser.initializer_return retval = new pollenParser.initializer_return();
        retval.start = input.LT(1);

        int initializer_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.expr_return expr548 =null;

        pollenParser.brace_list_beg_return brace_list_beg549 =null;

        pollenParser.initializer_list_return initializer_list550 =null;

        pollenParser.brace_list_end_return brace_list_end551 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2030:5: ( expr | brace_list_beg initializer_list brace_list_end )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==BIT_NOT||LA138_0==CHAR||LA138_0==DEC||LA138_0==HEX_LIT||LA138_0==IDENT||(LA138_0 >= INC && LA138_0 <= INT_LIT)||LA138_0==LOG_NOT||LA138_0==MINUS||LA138_0==OCT_LIT||LA138_0==REAL_LIT||LA138_0==STRING||LA138_0==135||(LA138_0 >= 145 && LA138_0 <= 146)||LA138_0==166||(LA138_0 >= 179 && LA138_0 <= 180)||LA138_0==192) ) {
                alt138=1;
            }
            else if ( (LA138_0==BRACE_OP) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2030:7: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_initializer15613);
                    expr548=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr548.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2031:7: brace_list_beg initializer_list brace_list_end
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_brace_list_beg_in_initializer15622);
                    brace_list_beg549=brace_list_beg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_list_beg549.getTree());

                    pushFollow(FOLLOW_initializer_list_in_initializer15624);
                    initializer_list550=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_list550.getTree());

                    pushFollow(FOLLOW_brace_list_end_in_initializer15626);
                    brace_list_end551=brace_list_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_list_end551.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (NoViableAltException ne) {
              
                    ParseUnit.current().reportFailure("Invalid token between '{'...'}'. Note newlines are only valid after comma in a list.");
                
        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 145, initializer_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer"


    public static class initializer_list_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer_list"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2036:1: initializer_list : initializer ( ',' ( NLL )? initializer )* -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) ) ;
    public final pollenParser.initializer_list_return initializer_list() throws RecognitionException {
        pollenParser.initializer_list_return retval = new pollenParser.initializer_list_return();
        retval.start = input.LT(1);

        int initializer_list_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal553=null;
        Atom NLL554=null;
        pollenParser.initializer_return initializer552 =null;

        pollenParser.initializer_return initializer555 =null;


        BaseNode char_literal553_tree=null;
        BaseNode NLL554_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:5: ( initializer ( ',' ( NLL )? initializer )* -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:10: initializer ( ',' ( NLL )? initializer )*
            {
            pushFollow(FOLLOW_initializer_in_initializer_list15653);
            initializer552=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_initializer.add(initializer552.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:22: ( ',' ( NLL )? initializer )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==138) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:23: ',' ( NLL )? initializer
            	    {
            	    char_literal553=(Atom)match(input,138,FOLLOW_138_in_initializer_list15656); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal553);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:27: ( NLL )?
            	    int alt139=2;
            	    int LA139_0 = input.LA(1);

            	    if ( (LA139_0==NLL) ) {
            	        alt139=1;
            	    }
            	    switch (alt139) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:27: NLL
            	            {
            	            NLL554=(Atom)match(input,NLL,FOLLOW_NLL_in_initializer_list15658); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NLL.add(NLL554);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_initializer_in_initializer_list15661);
            	    initializer555=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_initializer.add(initializer555.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            // AST REWRITE
            // elements: initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2037:48: -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:51: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Vec(E_VEC, "E_VEC")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2037:83: ^( LIST[\"LIST\"] ( initializer )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_initializer.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_2, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 146, initializer_list_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "initializer_list"


    public static class brace_list_beg_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "brace_list_beg"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2040:1: brace_list_beg : ( ( BRACE_OP ( NLL ) )=> BRACE_OP ! NLL !| BRACE_OP !);
    public final pollenParser.brace_list_beg_return brace_list_beg() throws RecognitionException {
        pollenParser.brace_list_beg_return retval = new pollenParser.brace_list_beg_return();
        retval.start = input.LT(1);

        int brace_list_beg_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom BRACE_OP556=null;
        Atom NLL557=null;
        Atom BRACE_OP558=null;

        BaseNode BRACE_OP556_tree=null;
        BaseNode NLL557_tree=null;
        BaseNode BRACE_OP558_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:5: ( ( BRACE_OP ( NLL ) )=> BRACE_OP ! NLL !| BRACE_OP !)
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==BRACE_OP) ) {
                int LA141_1 = input.LA(2);

                if ( (synpred230_pollen()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:8: ( BRACE_OP ( NLL ) )=> BRACE_OP ! NLL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP556=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_brace_list_beg15717); if (state.failed) return retval;

                    NLL557=(Atom)match(input,NLL,FOLLOW_NLL_in_brace_list_beg15720); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2042:8: BRACE_OP !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP558=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_brace_list_beg15731); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 147, brace_list_beg_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "brace_list_beg"


    public static class brace_list_end_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "brace_list_end"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2044:1: brace_list_end : ( ( NLL BRACE_CL )=> NLL ! BRACE_CL !| BRACE_CL !);
    public final pollenParser.brace_list_end_return brace_list_end() throws RecognitionException {
        pollenParser.brace_list_end_return retval = new pollenParser.brace_list_end_return();
        retval.start = input.LT(1);

        int brace_list_end_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL559=null;
        Atom BRACE_CL560=null;
        Atom BRACE_CL561=null;

        BaseNode NLL559_tree=null;
        BaseNode BRACE_CL560_tree=null;
        BaseNode BRACE_CL561_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2045:5: ( ( NLL BRACE_CL )=> NLL ! BRACE_CL !| BRACE_CL !)
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==NLL) && (synpred231_pollen())) {
                alt142=1;
            }
            else if ( (LA142_0==BRACE_CL) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2045:9: ( NLL BRACE_CL )=> NLL ! BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    NLL559=(Atom)match(input,NLL,FOLLOW_NLL_in_brace_list_end15758); if (state.failed) return retval;

                    BRACE_CL560=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_brace_list_end15761); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2046:9: BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_CL561=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_brace_list_end15772); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 148, brace_list_end_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "brace_list_end"


    public static class varDeclList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2057:1: varDeclList : ( varBuiltInType ! varListBuiltInType | userTypeName ! varListUserDefType );
    public final pollenParser.varDeclList_return varDeclList() throws RecognitionException {
        pollenParser.varDeclList_return retval = new pollenParser.varDeclList_return();
        retval.start = input.LT(1);

        int varDeclList_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.varBuiltInType_return varBuiltInType562 =null;

        pollenParser.varListBuiltInType_return varListBuiltInType563 =null;

        pollenParser.userTypeName_return userTypeName564 =null;

        pollenParser.varListUserDefType_return varListUserDefType565 =null;




            assert ((varDecl_scope)varDecl_stack.peek()).typ != null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2061:5: ( varBuiltInType ! varListBuiltInType | userTypeName ! varListUserDefType )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==150||LA143_0==152||(LA143_0 >= 173 && LA143_0 <= 175)||LA143_0==188||LA143_0==190||(LA143_0 >= 194 && LA143_0 <= 196)) ) {
                alt143=1;
            }
            else if ( (LA143_0==IDENT) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2061:10: varBuiltInType ! varListBuiltInType
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varBuiltInType_in_varDeclList15842);
                    varBuiltInType562=varBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (varBuiltInType562!=null?((BaseNode)varBuiltInType562.tree):null); }

                    pushFollow(FOLLOW_varListBuiltInType_in_varDeclList15847);
                    varListBuiltInType563=varListBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varListBuiltInType563.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2062:10: userTypeName ! varListUserDefType
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_varDeclList15858);
                    userTypeName564=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (userTypeName564!=null?((BaseNode)userTypeName564.tree):null); }

                    pushFollow(FOLLOW_varListUserDefType_in_varDeclList15863);
                    varListUserDefType565=varListUserDefType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varListUserDefType565.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 149, varDeclList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varDeclList"


    public static class varBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varBuiltInType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2064:1: varBuiltInType : builtinType -> ^( T_STD[\"T_STD\", stmtFlags] builtinType ) ;
    public final pollenParser.varBuiltInType_return varBuiltInType() throws RecognitionException {
        pollenParser.varBuiltInType_return retval = new pollenParser.varBuiltInType_return();
        retval.start = input.LT(1);

        int varBuiltInType_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType566 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2065:5: ( builtinType -> ^( T_STD[\"T_STD\", stmtFlags] builtinType ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2065:10: builtinType
            {
            pushFollow(FOLLOW_builtinType_in_varBuiltInType15886);
            builtinType566=builtinType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtinType.add(builtinType566.getTree());

            // AST REWRITE
            // elements: builtinType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2065:22: -> ^( T_STD[\"T_STD\", stmtFlags] builtinType )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2065:25: ^( T_STD[\"T_STD\", stmtFlags] builtinType )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_builtinType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 150, varBuiltInType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varBuiltInType"


    public static class varListBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varListBuiltInType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2067:1: varListBuiltInType : varInit2 ( ',' ! varInit2 )* ;
    public final pollenParser.varListBuiltInType_return varListBuiltInType() throws RecognitionException {
        pollenParser.varListBuiltInType_return retval = new pollenParser.varListBuiltInType_return();
        retval.start = input.LT(1);

        int varListBuiltInType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal568=null;
        pollenParser.varInit2_return varInit2567 =null;

        pollenParser.varInit2_return varInit2569 =null;


        BaseNode char_literal568_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2068:5: ( varInit2 ( ',' ! varInit2 )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2068:10: varInit2 ( ',' ! varInit2 )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_varInit2_in_varListBuiltInType15919);
            varInit2567=varInit2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2567.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2068:19: ( ',' ! varInit2 )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==138) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2068:20: ',' ! varInit2
            	    {
            	    char_literal568=(Atom)match(input,138,FOLLOW_138_in_varListBuiltInType15922); if (state.failed) return retval;

            	    pushFollow(FOLLOW_varInit2_in_varListBuiltInType15925);
            	    varInit2569=varInit2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2569.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 151, varListBuiltInType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varListBuiltInType"


    public static class varListUserDefType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varListUserDefType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2070:1: varListUserDefType : varInit ( ',' ! varInit )* ;
    public final pollenParser.varListUserDefType_return varListUserDefType() throws RecognitionException {
        pollenParser.varListUserDefType_return retval = new pollenParser.varListUserDefType_return();
        retval.start = input.LT(1);

        int varListUserDefType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal571=null;
        pollenParser.varInit_return varInit570 =null;

        pollenParser.varInit_return varInit572 =null;


        BaseNode char_literal571_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2071:5: ( varInit ( ',' ! varInit )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2071:10: varInit ( ',' ! varInit )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_varInit_in_varListUserDefType15951);
            varInit570=varInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit570.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2071:18: ( ',' ! varInit )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==138) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2071:19: ',' ! varInit
            	    {
            	    char_literal571=(Atom)match(input,138,FOLLOW_138_in_varListUserDefType15954); if (state.failed) return retval;

            	    pushFollow(FOLLOW_varInit_in_varListUserDefType15957);
            	    varInit572=varInit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit572.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 152, varListUserDefType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varListUserDefType"


    public static class varInit2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2073:1: varInit2 : ( IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) );
    public final pollenParser.varInit2_return varInit2() throws RecognitionException {
        pollenParser.varInit2_return retval = new pollenParser.varInit2_return();
        retval.start = input.LT(1);

        int varInit2_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT573=null;
        Atom ASSIGN574=null;
        Atom IDENT576=null;
        pollenParser.expr_return expr575 =null;


        BaseNode IDENT573_tree=null;
        BaseNode ASSIGN574_tree=null;
        BaseNode IDENT576_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2074:5: ( IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==IDENT) ) {
                int LA146_1 = input.LA(2);

                if ( (synpred235_pollen()) ) {
                    alt146=1;
                }
                else if ( (true) ) {
                    alt146=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2074:10: IDENT ASSIGN expr
                    {
                    IDENT573=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit215991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT573);


                    ASSIGN574=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit215993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN574);


                    pushFollow(FOLLOW_expr_in_varInit215995);
                    expr575=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr575.getTree());

                    // AST REWRITE
                    // elements: IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2075:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2075:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2077:11: IDENT
                    {
                    IDENT576=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit216046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT576);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2078:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 153, varInit2_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit2"


    public static class varInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2080:1: varInit : ( IDENT BIND userTypeName -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? ) | IDENT PEG expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? ) | IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) );
    public final pollenParser.varInit_return varInit() throws RecognitionException {
        pollenParser.varInit_return retval = new pollenParser.varInit_return();
        retval.start = input.LT(1);

        int varInit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT577=null;
        Atom BIND578=null;
        Atom IDENT580=null;
        Atom PEG581=null;
        Atom IDENT583=null;
        Atom ASSIGN584=null;
        Atom IDENT586=null;
        pollenParser.userTypeName_return userTypeName579 =null;

        pollenParser.expr_return expr582 =null;

        pollenParser.expr_return expr585 =null;


        BaseNode IDENT577_tree=null;
        BaseNode BIND578_tree=null;
        BaseNode IDENT580_tree=null;
        BaseNode PEG581_tree=null;
        BaseNode IDENT583_tree=null;
        BaseNode ASSIGN584_tree=null;
        BaseNode IDENT586_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_userTypeName=new RewriteRuleSubtreeStream(adaptor,"rule userTypeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:5: ( IDENT BIND userTypeName -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? ) | IDENT PEG expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? ) | IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) )
            int alt147=4;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==IDENT) ) {
                int LA147_1 = input.LA(2);

                if ( (synpred236_pollen()) ) {
                    alt147=1;
                }
                else if ( (synpred237_pollen()) ) {
                    alt147=2;
                }
                else if ( (synpred238_pollen()) ) {
                    alt147=3;
                }
                else if ( (true) ) {
                    alt147=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:11: IDENT BIND userTypeName
                    {
                    IDENT577=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit16098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT577);


                    BIND578=(Atom)match(input,BIND,FOLLOW_BIND_in_varInit16100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND578);


                    pushFollow(FOLLOW_userTypeName_in_varInit16102);
                    userTypeName579=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_userTypeName.add(userTypeName579.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.PROTOCOL_MEMBER);  stmtFlags.add(Flags.BIND); }

                    // AST REWRITE
                    // elements: userTypeName, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2082:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2082:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2082:84: ( ^( E_TYP[\"E_TYP\"] userTypeName ) )?
                        if ( stream_userTypeName.hasNext() ) {
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2082:84: ^( E_TYP[\"E_TYP\"] userTypeName )
                            {
                            BaseNode root_2 = (BaseNode)adaptor.nil();
                            root_2 = (BaseNode)adaptor.becomeRoot(
                            new ExprNode.Typ(E_TYP, "E_TYP")
                            , root_2);

                            adaptor.addChild(root_2, stream_userTypeName.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_userTypeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2083:10: IDENT PEG expr
                    {
                    IDENT580=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit16158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT580);


                    PEG581=(Atom)match(input,PEG,FOLLOW_PEG_in_varInit16160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PEG.add(PEG581);


                    pushFollow(FOLLOW_expr_in_varInit16162);
                    expr582=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr582.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.PEG); }

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2084:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:84: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2085:10: IDENT ASSIGN expr
                    {
                    IDENT583=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit16206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT583);


                    ASSIGN584=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit16208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN584);


                    pushFollow(FOLLOW_expr_in_varInit16210);
                    expr585=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr585.getTree());

                    // AST REWRITE
                    // elements: IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2086:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2086:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2088:10: IDENT
                    {
                    IDENT586=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit16260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT586);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2089:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2089:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 154, varInit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "varInit"


    public static class builtinType_return extends ParserRuleReturnScope {
        public EnumSet<LitFlags> f;
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtinType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:1: builtinType returns [EnumSet<LitFlags> f] : ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'real' | 'string' | 'uint8' | 'uint16' | 'uint32' );
    public final pollenParser.builtinType_return builtinType() throws RecognitionException {
        pollenParser.builtinType_return retval = new pollenParser.builtinType_return();
        retval.start = input.LT(1);

        int builtinType_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal587=null;
        Atom string_literal588=null;
        Atom string_literal589=null;
        Atom string_literal590=null;
        Atom string_literal591=null;
        Atom string_literal592=null;
        Atom string_literal593=null;
        Atom string_literal594=null;
        Atom string_literal595=null;
        Atom string_literal596=null;

        BaseNode string_literal587_tree=null;
        BaseNode string_literal588_tree=null;
        BaseNode string_literal589_tree=null;
        BaseNode string_literal590_tree=null;
        BaseNode string_literal591_tree=null;
        BaseNode string_literal592_tree=null;
        BaseNode string_literal593_tree=null;
        BaseNode string_literal594_tree=null;
        BaseNode string_literal595_tree=null;
        BaseNode string_literal596_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2093:5: ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'real' | 'string' | 'uint8' | 'uint16' | 'uint32' )
            int alt148=10;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt148=1;
                }
                break;
            case 152:
                {
                alt148=2;
                }
                break;
            case 175:
                {
                alt148=3;
                }
                break;
            case 173:
                {
                alt148=4;
                }
                break;
            case 174:
                {
                alt148=5;
                }
                break;
            case 188:
                {
                alt148=6;
                }
                break;
            case 190:
                {
                alt148=7;
                }
                break;
            case 196:
                {
                alt148=8;
                }
                break;
            case 194:
                {
                alt148=9;
                }
                break;
            case 195:
                {
                alt148=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }

            switch (alt148) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2093:9: 'bool'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal587=(Atom)match(input,150,FOLLOW_150_in_builtinType16309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal587_tree = 
                    (BaseNode)adaptor.create(string_literal587)
                    ;
                    adaptor.addChild(root_0, string_literal587_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.BOOL);}

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2094:9: 'byte'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal588=(Atom)match(input,152,FOLLOW_152_in_builtinType16328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal588_tree = 
                    (BaseNode)adaptor.create(string_literal588)
                    ;
                    adaptor.addChild(root_0, string_literal588_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.CHR);}

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2095:9: 'int8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal589=(Atom)match(input,175,FOLLOW_175_in_builtinType16347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal589_tree = 
                    (BaseNode)adaptor.create(string_literal589)
                    ;
                    adaptor.addChild(root_0, string_literal589_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2096:9: 'int16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal590=(Atom)match(input,173,FOLLOW_173_in_builtinType16366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal590_tree = 
                    (BaseNode)adaptor.create(string_literal590)
                    ;
                    adaptor.addChild(root_0, string_literal590_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2097:9: 'int32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal591=(Atom)match(input,174,FOLLOW_174_in_builtinType16385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal591_tree = 
                    (BaseNode)adaptor.create(string_literal591)
                    ;
                    adaptor.addChild(root_0, string_literal591_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2098:9: 'real'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal592=(Atom)match(input,188,FOLLOW_188_in_builtinType16407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal592_tree = 
                    (BaseNode)adaptor.create(string_literal592)
                    ;
                    adaptor.addChild(root_0, string_literal592_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:9: 'string'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal593=(Atom)match(input,190,FOLLOW_190_in_builtinType16428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal593_tree = 
                    (BaseNode)adaptor.create(string_literal593)
                    ;
                    adaptor.addChild(root_0, string_literal593_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.STR);}

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2100:9: 'uint8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal594=(Atom)match(input,196,FOLLOW_196_in_builtinType16449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal594_tree = 
                    (BaseNode)adaptor.create(string_literal594)
                    ;
                    adaptor.addChild(root_0, string_literal594_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2101:9: 'uint16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal595=(Atom)match(input,194,FOLLOW_194_in_builtinType16468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal595_tree = 
                    (BaseNode)adaptor.create(string_literal595)
                    ;
                    adaptor.addChild(root_0, string_literal595_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2102:9: 'uint32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal596=(Atom)match(input,195,FOLLOW_195_in_builtinType16487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal596_tree = 
                    (BaseNode)adaptor.create(string_literal596)
                    ;
                    adaptor.addChild(root_0, string_literal596_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 155, builtinType_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "builtinType"


    protected static class qualName_scope {
        Object qtree;
        String s;
    }
    protected Stack qualName_stack = new Stack();


    public static class qualName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:1: qualName : qualNameConcat ;
    public final pollenParser.qualName_return qualName() throws RecognitionException {
        qualName_stack.push(new qualName_scope());
        pollenParser.qualName_return retval = new pollenParser.qualName_return();
        retval.start = input.LT(1);

        int qualName_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualNameConcat_return qualNameConcat597 =null;




            ((qualName_scope)qualName_stack.peek()).qtree = null;
            ((qualName_scope)qualName_stack.peek()).s = "";

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2117:5: ( qualNameConcat )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2117:13: qualNameConcat
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualNameConcat_in_qualName16544);
            qualNameConcat597=qualNameConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualNameConcat597.getTree());

            if ( state.backtracking==0 ) { ((qualName_scope)qualName_stack.peek()).qtree = (qualNameConcat597!=null?((BaseNode)qualNameConcat597.tree):null); }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                handleIntrinsics((CommonTree) ((qualName_scope)qualName_stack.peek()).qtree);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 156, qualName_StartIndex); }

            qualName_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "qualName"


    public static class qualNameConcat_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameConcat"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2120:1: qualNameConcat : IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] ;
    public final pollenParser.qualNameConcat_return qualNameConcat() throws RecognitionException {
        pollenParser.qualNameConcat_return retval = new pollenParser.qualNameConcat_return();
        retval.start = input.LT(1);

        int qualNameConcat_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom IDENT598=null;
        pollenParser.qualNameList_return qualNameList599 =null;


        BaseNode IDENT598_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualNameList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:5: ( IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:10: IDENT ( ( qualNameList )? )
            {
            IDENT598=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameConcat16569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT598);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:16: ( ( qualNameList )? )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:17: ( qualNameList )?
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:17: ( qualNameList )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==139) ) {
                int LA149_1 = input.LA(2);

                if ( (synpred248_pollen()) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:17: qualNameList
                    {
                    pushFollow(FOLLOW_qualNameList_in_qualNameConcat16572);
                    qualNameList599=qualNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualNameList.add(qualNameList599.getTree());

                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2121:33: -> IDENT[$IDENT.text + $qualName::s]
            {
                adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(IDENT, (IDENT598!=null?IDENT598.getText():null) + ((qualName_scope)qualName_stack.peek()).s)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 157, qualNameConcat_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualNameConcat"


    public static class qualNameList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2124:1: qualNameList : ( '.' ! IDENT !)+ ;
    public final pollenParser.qualNameList_return qualNameList() throws RecognitionException {
        pollenParser.qualNameList_return retval = new pollenParser.qualNameList_return();
        retval.start = input.LT(1);

        int qualNameList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal600=null;
        Atom IDENT601=null;

        BaseNode char_literal600_tree=null;
        BaseNode IDENT601_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2125:5: ( ( '.' ! IDENT !)+ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2126:5: ( '.' ! IDENT !)+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2126:5: ( '.' ! IDENT !)+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==139) ) {
                    int LA150_1 = input.LA(2);

                    if ( (synpred249_pollen()) ) {
                        alt150=1;
                    }


                }


                switch (alt150) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2126:9: '.' ! IDENT !
            	    {
            	    char_literal600=(Atom)match(input,139,FOLLOW_139_in_qualNameList16610); if (state.failed) return retval;

            	    IDENT601=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameList16634); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {((qualName_scope)qualName_stack.peek()).s += "." + (IDENT601!=null?IDENT601.getText():null);}

            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 158, qualNameList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "qualNameList"


    public static class arrayLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2131:1: arrayLit : '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) ;
    public final pollenParser.arrayLit_return arrayLit() throws RecognitionException {
        pollenParser.arrayLit_return retval = new pollenParser.arrayLit_return();
        retval.start = input.LT(1);

        int arrayLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal602=null;
        Atom char_literal604=null;
        pollenParser.arrayLitList_return arrayLitList603 =null;


        BaseNode char_literal602_tree=null;
        BaseNode char_literal604_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_arrayLitList=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2132:5: ( '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2132:10: '[' arrayLitList ']'
            {
            char_literal602=(Atom)match(input,146,FOLLOW_146_in_arrayLit16694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal602);


            pushFollow(FOLLOW_arrayLitList_in_arrayLit16699);
            arrayLitList603=arrayLitList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayLitList.add(arrayLitList603.getTree());

            char_literal604=(Atom)match(input,147,FOLLOW_147_in_arrayLit16704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal604);


            // AST REWRITE
            // elements: arrayLitList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2132:40: -> ^( LIST[\"LIST\"] arrayLitList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2132:43: ^( LIST[\"LIST\"] arrayLitList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_arrayLitList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 159, arrayLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLit"


    public static class arrayLitList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2134:1: arrayLitList : ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL );
    public final pollenParser.arrayLitList_return arrayLitList() throws RecognitionException {
        pollenParser.arrayLitList_return retval = new pollenParser.arrayLitList_return();
        retval.start = input.LT(1);

        int arrayLitList_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom char_literal606=null;
        pollenParser.arrayLitElem_return arrayLitElem605 =null;

        pollenParser.arrayLitElem_return arrayLitElem607 =null;


        BaseNode char_literal606_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_arrayLitElem=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitElem");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2135:5: ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==CHAR||LA152_0==HEX_LIT||LA152_0==IDENT||LA152_0==INT_LIT||LA152_0==OCT_LIT||LA152_0==REAL_LIT||LA152_0==STRING||LA152_0==166||LA152_0==180||LA152_0==192) ) {
                alt152=1;
            }
            else if ( (LA152_0==147) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2135:10: arrayLitElem ( ',' arrayLitElem )*
                    {
                    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList16738);
                    arrayLitElem605=arrayLitElem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem605.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2135:26: ( ',' arrayLitElem )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==138) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2135:27: ',' arrayLitElem
                    	    {
                    	    char_literal606=(Atom)match(input,138,FOLLOW_138_in_arrayLitList16744); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal606);


                    	    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList16749);
                    	    arrayLitElem607=arrayLitElem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem607.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: arrayLitElem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2135:52: -> ( arrayLitElem )+
                    {
                        if ( !(stream_arrayLitElem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_arrayLitElem.hasNext() ) {
                            adaptor.addChild(root_0, stream_arrayLitElem.nextTree());

                        }
                        stream_arrayLitElem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2136:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2136:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 160, arrayLitList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitList"


    public static class arrayLitElem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitElem"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2138:1: arrayLitElem : ( primitiveLit | namedConstant );
    public final pollenParser.arrayLitElem_return arrayLitElem() throws RecognitionException {
        pollenParser.arrayLitElem_return retval = new pollenParser.arrayLitElem_return();
        retval.start = input.LT(1);

        int arrayLitElem_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit608 =null;

        pollenParser.namedConstant_return namedConstant609 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:5: ( primitiveLit | namedConstant )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==CHAR||LA153_0==HEX_LIT||LA153_0==INT_LIT||LA153_0==OCT_LIT||LA153_0==REAL_LIT||LA153_0==STRING||LA153_0==166||LA153_0==180||LA153_0==192) ) {
                alt153=1;
            }
            else if ( (LA153_0==IDENT) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }
            switch (alt153) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:10: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_arrayLitElem16791);
                    primitiveLit608=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit608.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:31: namedConstant
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_namedConstant_in_arrayLitElem16801);
                    namedConstant609=namedConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namedConstant609.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 161, arrayLitElem_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayLitElem"


    public static class namedConstant_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedConstant"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2141:1: namedConstant : qualName ;
    public final pollenParser.namedConstant_return namedConstant() throws RecognitionException {
        pollenParser.namedConstant_return retval = new pollenParser.namedConstant_return();
        retval.start = input.LT(1);

        int namedConstant_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.qualName_return qualName610 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2142:5: ( qualName )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2142:10: qualName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualName_in_namedConstant16820);
            qualName610=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualName610.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 162, namedConstant_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "namedConstant"


    public static class boolLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2144:1: boolLit : ( 'true' | 'false' ) ;
    public final pollenParser.boolLit_return boolLit() throws RecognitionException {
        pollenParser.boolLit_return retval = new pollenParser.boolLit_return();
        retval.start = input.LT(1);

        int boolLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom set611=null;

        BaseNode set611_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2145:5: ( ( 'true' | 'false' ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2145:7: ( 'true' | 'false' )
            {
            root_0 = (BaseNode)adaptor.nil();


            set611=(Atom)input.LT(1);

            if ( input.LA(1)==166||input.LA(1)==192 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set611)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.BOOL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 163, boolLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "boolLit"


    public static class nullLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2147:1: nullLit : 'null' ;
    public final pollenParser.nullLit_return nullLit() throws RecognitionException {
        pollenParser.nullLit_return retval = new pollenParser.nullLit_return();
        retval.start = input.LT(1);

        int nullLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom string_literal612=null;

        BaseNode string_literal612_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2148:5: ( 'null' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2148:10: 'null'
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal612=(Atom)match(input,180,FOLLOW_180_in_nullLit16871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = 
            (BaseNode)adaptor.create(string_literal612)
            ;
            adaptor.addChild(root_0, string_literal612_tree);
            }

            if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NULL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 164, nullLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nullLit"


    public static class numLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2150:1: numLit : ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT );
    public final pollenParser.numLit_return numLit() throws RecognitionException {
        pollenParser.numLit_return retval = new pollenParser.numLit_return();
        retval.start = input.LT(1);

        int numLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom INT_LIT613=null;
        Atom OCT_LIT614=null;
        Atom REAL_LIT615=null;
        Atom HEX_LIT616=null;

        BaseNode INT_LIT613_tree=null;
        BaseNode OCT_LIT614_tree=null;
        BaseNode REAL_LIT615_tree=null;
        BaseNode HEX_LIT616_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2154:5: ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT )
            int alt154=4;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt154=1;
                }
                break;
            case OCT_LIT:
                {
                alt154=2;
                }
                break;
            case REAL_LIT:
                {
                alt154=3;
                }
                break;
            case HEX_LIT:
                {
                alt154=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;

            }

            switch (alt154) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2154:10: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT613=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_numLit16897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT613_tree = 
                    (BaseNode)adaptor.create(INT_LIT613)
                    ;
                    adaptor.addChild(root_0, INT_LIT613_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.INT);}

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2155:11: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT614=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_numLit16915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT614_tree = 
                    (BaseNode)adaptor.create(OCT_LIT614)
                    ;
                    adaptor.addChild(root_0, OCT_LIT614_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.OCT);}

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2156:11: REAL_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    REAL_LIT615=(Atom)match(input,REAL_LIT,FOLLOW_REAL_LIT_in_numLit16933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REAL_LIT615_tree = 
                    (BaseNode)adaptor.create(REAL_LIT615)
                    ;
                    adaptor.addChild(root_0, REAL_LIT615_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.REAL);}

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2157:11: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT616=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_numLit16951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT616_tree = 
                    (BaseNode)adaptor.create(HEX_LIT616)
                    ;
                    adaptor.addChild(root_0, HEX_LIT616_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.HEX);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NUM);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 165, numLit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "numLit"


    protected static class primitiveLit_scope {
        EnumSet<LitFlags> litFlags;
    }
    protected Stack primitiveLit_stack = new Stack();


    public static class primitiveLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2160:1: primitiveLit : ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) );
    public final pollenParser.primitiveLit_return primitiveLit() throws RecognitionException {
        primitiveLit_stack.push(new primitiveLit_scope());
        pollenParser.primitiveLit_return retval = new pollenParser.primitiveLit_return();
        retval.start = input.LT(1);

        int primitiveLit_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom STRING620=null;
        Atom CHAR621=null;
        pollenParser.boolLit_return boolLit617 =null;

        pollenParser.numLit_return numLit618 =null;

        pollenParser.nullLit_return nullLit619 =null;


        BaseNode STRING620_tree=null;
        BaseNode CHAR621_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_CHAR=new RewriteRuleTokenStream(adaptor,"token CHAR");
        RewriteRuleSubtreeStream stream_boolLit=new RewriteRuleSubtreeStream(adaptor,"rule boolLit");
        RewriteRuleSubtreeStream stream_nullLit=new RewriteRuleSubtreeStream(adaptor,"rule nullLit");
        RewriteRuleSubtreeStream stream_numLit=new RewriteRuleSubtreeStream(adaptor,"rule numLit");

            ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags = EnumSet.noneOf(LitFlags.class);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2167:5: ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) )
            int alt155=5;
            switch ( input.LA(1) ) {
            case 166:
            case 192:
                {
                alt155=1;
                }
                break;
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
                {
                alt155=2;
                }
                break;
            case 180:
                {
                alt155=3;
                }
                break;
            case STRING:
                {
                alt155=4;
                }
                break;
            case CHAR:
                {
                alt155=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }

            switch (alt155) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2167:10: boolLit
                    {
                    pushFollow(FOLLOW_boolLit_in_primitiveLit16988);
                    boolLit617=boolLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolLit.add(boolLit617.getTree());

                    // AST REWRITE
                    // elements: boolLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2167:18: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2167:21: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_boolLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:10: numLit
                    {
                    pushFollow(FOLLOW_numLit_in_primitiveLit17013);
                    numLit618=numLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numLit.add(numLit618.getTree());

                    // AST REWRITE
                    // elements: numLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2168:18: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:21: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_numLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2169:10: nullLit
                    {
                    pushFollow(FOLLOW_nullLit_in_primitiveLit17039);
                    nullLit619=nullLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullLit.add(nullLit619.getTree());

                    // AST REWRITE
                    // elements: nullLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2169:18: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2169:21: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_nullLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2170:10: STRING
                    {
                    STRING620=(Atom)match(input,STRING,FOLLOW_STRING_in_primitiveLit17064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(STRING620);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.STR);}

                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2171:8: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2171:11: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2172:10: CHAR
                    {
                    CHAR621=(Atom)match(input,CHAR,FOLLOW_CHAR_in_primitiveLit17101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR.add(CHAR621);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.CHR);}

                    // AST REWRITE
                    // elements: CHAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2173:9: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2173:12: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 166, primitiveLit_StartIndex); }

            primitiveLit_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "primitiveLit"


    public static class stmtInjection_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjection"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2175:1: stmtInjection : inject NLL -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) ;
    public final pollenParser.stmtInjection_return stmtInjection() throws RecognitionException {
        pollenParser.stmtInjection_return retval = new pollenParser.stmtInjection_return();
        retval.start = input.LT(1);

        int stmtInjection_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL623=null;
        pollenParser.inject_return inject622 =null;


        BaseNode NLL623_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2176:5: ( inject NLL -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2176:10: inject NLL
            {
            pushFollow(FOLLOW_inject_in_stmtInjection17146);
            inject622=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject622.getTree());

            NLL623=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtInjection17156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NLL.add(NLL623);


            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2178:9: -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2178:12: ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Inject(S_INJ, "S_INJ")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2178:47: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, stream_inject.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 167, stmtInjection_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "stmtInjection"


    public static class inject_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inject"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2182:1: inject : c= INJECT -> ^( LIST[\"LIST\"] ) ;
    public final pollenParser.inject_return inject() throws RecognitionException {
        pollenParser.inject_return retval = new pollenParser.inject_return();
        retval.start = input.LT(1);

        int inject_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");


            BaseNode r = (BaseNode)adaptor.nil();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2186:5: (c= INJECT -> ^( LIST[\"LIST\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2186:10: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_inject17221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                                c.setText(getInject(c.getText()));
                                   createInjectNodes(r, c.getText());           
                            }

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2190:9: -> ^( LIST[\"LIST\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2190:12: ^( LIST[\"LIST\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, r);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 168, inject_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "inject"


    public static class injectionCode_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionCode"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2192:1: injectionCode : inject -> ^( E_INJ[\"E_INJ\"] inject ) ;
    public final pollenParser.injectionCode_return injectionCode() throws RecognitionException {
        pollenParser.injectionCode_return retval = new pollenParser.injectionCode_return();
        retval.start = input.LT(1);

        int injectionCode_StartIndex = input.index();

        BaseNode root_0 = null;

        pollenParser.inject_return inject624 =null;


        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2193:5: ( inject -> ^( E_INJ[\"E_INJ\"] inject ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2193:10: inject
            {
            pushFollow(FOLLOW_inject_in_injectionCode17263);
            inject624=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject624.getTree());

            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2194:9: -> ^( E_INJ[\"E_INJ\"] inject )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2194:12: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_1);

                adaptor.addChild(root_1, stream_inject.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 169, injectionCode_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionCode"


    public static class injectionDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2196:1: injectionDecl : inject ( NLL ) -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) ;
    public final pollenParser.injectionDecl_return injectionDecl() throws RecognitionException {
        pollenParser.injectionDecl_return retval = new pollenParser.injectionDecl_return();
        retval.start = input.LT(1);

        int injectionDecl_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom NLL626=null;
        pollenParser.inject_return inject625 =null;


        BaseNode NLL626_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2197:5: ( inject ( NLL ) -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2197:10: inject ( NLL )
            {
            pushFollow(FOLLOW_inject_in_injectionDecl17306);
            inject625=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject625.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2198:17: ( NLL )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2198:18: NLL
            {
            NLL626=(Atom)match(input,NLL,FOLLOW_NLL_in_injectionDecl17325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NLL.add(NLL626);


            }


            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2199:18: -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2199:21: ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Inject(D_INJ, "D_INJ")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2199:55: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, stream_inject.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 170, injectionDecl_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "injectionDecl"


    public static class delim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2201:1: delim : ( ( SEMI NLL )=> SEMI NLL ->| ( SEMI ) ->| ( NLL ) ->);
    public final pollenParser.delim_return delim() throws RecognitionException {
        pollenParser.delim_return retval = new pollenParser.delim_return();
        retval.start = input.LT(1);

        int delim_StartIndex = input.index();

        BaseNode root_0 = null;

        Atom SEMI627=null;
        Atom NLL628=null;
        Atom SEMI629=null;
        Atom NLL630=null;

        BaseNode SEMI627_tree=null;
        BaseNode NLL628_tree=null;
        BaseNode SEMI629_tree=null;
        BaseNode NLL630_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2202:5: ( ( SEMI NLL )=> SEMI NLL ->| ( SEMI ) ->| ( NLL ) ->)
            int alt156=3;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==SEMI) ) {
                int LA156_1 = input.LA(2);

                if ( (synpred261_pollen()) ) {
                    alt156=1;
                }
                else if ( (synpred262_pollen()) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA156_0==NLL) ) {
                alt156=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2202:10: ( SEMI NLL )=> SEMI NLL
                    {
                    SEMI627=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim17394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI627);


                    NLL628=(Atom)match(input,NLL,FOLLOW_NLL_in_delim17396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL628);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2202:34: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:10: ( SEMI )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:10: ( SEMI )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:11: SEMI
                    {
                    SEMI629=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim17412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI629);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2203:17: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2204:10: ( NLL )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2204:10: ( NLL )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2204:11: NLL
                    {
                    NLL630=(Atom)match(input,NLL,FOLLOW_NLL_in_delim17427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL630);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2204:18: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 171, delim_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "delim"

    // $ANTLR start synpred1_pollen
    public final void synpred1_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:10: ( NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:474:10: NLL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred1_pollen688); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_pollen

    // $ANTLR start synpred7_pollen
    public final void synpred7_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:9: ( fcnDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:9: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred7_pollen1471);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_pollen

    // $ANTLR start synpred8_pollen
    public final void synpred8_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:553:9: ( enumDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:553:9: enumDefinition
        {
        pushFollow(FOLLOW_enumDefinition_in_synpred8_pollen1482);
        enumDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_pollen

    // $ANTLR start synpred9_pollen
    public final void synpred9_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:554:9: ( fieldDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:554:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred9_pollen1492);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_pollen

    // $ANTLR start synpred11_pollen
    public final void synpred11_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:11: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:568:11: {...}?
        {
        if ( !((!hasHostConstructor )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred11_pollen", "!hasHostConstructor ");
        }

        }

    }
    // $ANTLR end synpred11_pollen

    // $ANTLR start synpred12_pollen
    public final void synpred12_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:590:10: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:590:10: {...}?
        {
        if ( !((!hasTargetConstructor)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred12_pollen", "!hasTargetConstructor");
        }

        }

    }
    // $ANTLR end synpred12_pollen

    // $ANTLR start synpred16_pollen
    public final void synpred16_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:10: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:667:10: {...}?
        {
        if ( !((ProcessUnits.doEmitPrintProxyViaDashP())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred16_pollen", "ProcessUnits.doEmitPrintProxyViaDashP()");
        }

        }

    }
    // $ANTLR end synpred16_pollen

    // $ANTLR start synpred17_pollen
    public final void synpred17_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:13: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:13: {...}?
        {
        if ( !((ProcessUnits.doEmitPrintProxyViaBind())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17_pollen", "ProcessUnits.doEmitPrintProxyViaBind()");
        }

        }

    }
    // $ANTLR end synpred17_pollen

    // $ANTLR start synpred18_pollen
    public final void synpred18_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:10: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:692:10: {...}?
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred18_pollen", "true");
        }

        }

    }
    // $ANTLR end synpred18_pollen

    // $ANTLR start synpred19_pollen
    public final void synpred19_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:23: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:23: {...}?
        {
        if ( !((!hasHostConstructor )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred19_pollen", "!hasHostConstructor ");
        }

        }

    }
    // $ANTLR end synpred19_pollen

    // $ANTLR start synpred20_pollen
    public final void synpred20_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:22: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:22: {...}?
        {
        if ( !((!hasTargetConstructor)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred20_pollen", "!hasTargetConstructor");
        }

        }

    }
    // $ANTLR end synpred20_pollen

    // $ANTLR start synpred21_pollen
    public final void synpred21_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:746:9: ( fcnDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:746:9: fcnDefinition
        {
        pushFollow(FOLLOW_fcnDefinition_in_synpred21_pollen4394);
        fcnDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_pollen

    // $ANTLR start synpred22_pollen
    public final void synpred22_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:12: ( varDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:747:12: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred22_pollen4408);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_pollen

    // $ANTLR start synpred23_pollen
    public final void synpred23_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:9: ( enumDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:9: enumDefinition
        {
        pushFollow(FOLLOW_enumDefinition_in_synpred23_pollen4419);
        enumDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_pollen

    // $ANTLR start synpred29_pollen
    public final void synpred29_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:811:11: ( IDENT ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:811:12: IDENT ASSIGN
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred29_pollen4776); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred29_pollen4778); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_pollen

    // $ANTLR start synpred35_pollen
    public final void synpred35_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:9: ( enumDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:856:9: enumDefinition
        {
        pushFollow(FOLLOW_enumDefinition_in_synpred35_pollen5110);
        enumDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_pollen

    // $ANTLR start synpred36_pollen
    public final void synpred36_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:9: ( fcnDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:857:9: fcnDeclaration
        {
        pushFollow(FOLLOW_fcnDeclaration_in_synpred36_pollen5120);
        fcnDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_pollen

    // $ANTLR start synpred41_pollen
    public final void synpred41_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:893:11: ( fcnDefinitionHost )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:893:11: fcnDefinitionHost
        {
        pushFollow(FOLLOW_fcnDefinitionHost_in_synpred41_pollen5367);
        fcnDefinitionHost();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_pollen

    // $ANTLR start synpred42_pollen
    public final void synpred42_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:11: ( enumDefinition )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:11: enumDefinition
        {
        pushFollow(FOLLOW_enumDefinition_in_synpred42_pollen5379);
        enumDefinition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_pollen

    // $ANTLR start synpred43_pollen
    public final void synpred43_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:895:11: ( varDeclaration )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:895:11: varDeclaration
        {
        pushFollow(FOLLOW_varDeclaration_in_synpred43_pollen5391);
        varDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred43_pollen

    // $ANTLR start synpred50_pollen
    public final void synpred50_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:10: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1028:10: {...}?
        {
        if ( !((ProcessUnits.doImportPrintImpl())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred50_pollen", "ProcessUnits.doImportPrintImpl()");
        }

        }

    }
    // $ANTLR end synpred50_pollen

    // $ANTLR start synpred51_pollen
    public final void synpred51_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:10: ({...}?)
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1038:10: {...}?
        {
        if ( !((ProcessUnits.doImportPrintProtocol())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred51_pollen", "ProcessUnits.doImportPrintProtocol()");
        }

        }

    }
    // $ANTLR end synpred51_pollen

    // $ANTLR start synpred54_pollen
    public final void synpred54_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:10: ({...}? => ( 'meta' ( ( NLL )? braceOpen metaParmsGen ( NLL )? braceClose ) ) )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1051:10: {...}? => ( 'meta' ( ( NLL )? braceOpen metaParmsGen ( NLL )? braceClose ) )
        {
        if ( !((isMetaInstance)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred54_pollen", "isMetaInstance");
        }

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1052:13: ( 'meta' ( ( NLL )? braceOpen metaParmsGen ( NLL )? braceClose ) )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1053:13: 'meta' ( ( NLL )? braceOpen metaParmsGen ( NLL )? braceClose )
        {
        match(input,177,FOLLOW_177_in_synpred54_pollen6336); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:13: ( ( NLL )? braceOpen metaParmsGen ( NLL )? braceClose )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:14: ( NLL )? braceOpen metaParmsGen ( NLL )? braceClose
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:14: ( NLL )?
        int alt159=2;
        int LA159_0 = input.LA(1);

        if ( (LA159_0==NLL) ) {
            alt159=1;
        }
        switch (alt159) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1055:15: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred54_pollen6373); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_braceOpen_in_synpred54_pollen6378);
        braceOpen();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_metaParmsGen_in_synpred54_pollen6397);
        metaParmsGen();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1057:15: ( NLL )?
        int alt160=2;
        int LA160_0 = input.LA(1);

        if ( (LA160_0==NLL) ) {
            alt160=1;
        }
        switch (alt160) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1057:16: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred54_pollen6414); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_braceClose_in_synpred54_pollen6419);
        braceClose();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }

    }
    // $ANTLR end synpred54_pollen

    // $ANTLR start synpred60_pollen
    public final void synpred60_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:27: ( NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:27: NLL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred60_pollen6941); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred60_pollen

    // $ANTLR start synpred61_pollen
    public final void synpred61_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: ( NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: NLL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred61_pollen6949); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred61_pollen

    // $ANTLR start synpred62_pollen
    public final void synpred62_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: ( NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: NLL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred62_pollen6956); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred62_pollen

    // $ANTLR start synpred64_pollen
    public final void synpred64_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:13: ( metaArgument ( NLL )? ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )* )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:13: metaArgument ( NLL )? ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )*
        {
        pushFollow(FOLLOW_metaArgument_in_synpred64_pollen6938);
        metaArgument();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:26: ( NLL )?
        int alt165=2;
        int LA165_0 = input.LA(1);

        if ( (LA165_0==NLL) ) {
            alt165=1;
        }
        switch (alt165) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:27: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred64_pollen6941); if (state.failed) return ;

                }
                break;

        }


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:33: ( ',' ( ( NLL )? ) metaArgument ( ( NLL )? ) )*
        loop168:
        do {
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==138) ) {
                alt168=1;
            }


            switch (alt168) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:34: ',' ( ( NLL )? ) metaArgument ( ( NLL )? )
        	    {
        	    match(input,138,FOLLOW_138_in_synpred64_pollen6946); if (state.failed) return ;

        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:38: ( ( NLL )? )
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: ( NLL )?
        	    {
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: ( NLL )?
        	    int alt166=2;
        	    int LA166_0 = input.LA(1);

        	    if ( (LA166_0==NLL) ) {
        	        int LA166_1 = input.LA(2);

        	        if ( (synpred61_pollen()) ) {
        	            alt166=1;
        	        }
        	    }
        	    switch (alt166) {
        	        case 1 :
        	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:39: NLL
        	            {
        	            match(input,NLL,FOLLOW_NLL_in_synpred64_pollen6949); if (state.failed) return ;

        	            }
        	            break;

        	    }


        	    }


        	    pushFollow(FOLLOW_metaArgument_in_synpred64_pollen6953);
        	    metaArgument();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:58: ( ( NLL )? )
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: ( NLL )?
        	    {
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: ( NLL )?
        	    int alt167=2;
        	    int LA167_0 = input.LA(1);

        	    if ( (LA167_0==NLL) ) {
        	        alt167=1;
        	    }
        	    switch (alt167) {
        	        case 1 :
        	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1249:59: NLL
        	            {
        	            match(input,NLL,FOLLOW_NLL_in_synpred64_pollen6956); if (state.failed) return ;

        	            }
        	            break;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop168;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred64_pollen

    // $ANTLR start synpred69_pollen
    public final void synpred69_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1324:20: ( 'module' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1324:21: 'module'
        {
        match(input,178,FOLLOW_178_in_synpred69_pollen7359); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred69_pollen

    // $ANTLR start synpred70_pollen
    public final void synpred70_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:11: ( 'class' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1325:12: 'class'
        {
        match(input,154,FOLLOW_154_in_synpred70_pollen7388); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred70_pollen

    // $ANTLR start synpred71_pollen
    public final void synpred71_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1326:14: ( 'protocol' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1326:15: 'protocol'
        {
        match(input,185,FOLLOW_185_in_synpred71_pollen7410); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred71_pollen

    // $ANTLR start synpred72_pollen
    public final void synpred72_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1327:14: ( 'composition' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1327:15: 'composition'
        {
        match(input,155,FOLLOW_155_in_synpred72_pollen7432); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred72_pollen

    // $ANTLR start synpred73_pollen
    public final void synpred73_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1328:14: ( 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1328:15: 'enum'
        {
        match(input,162,FOLLOW_162_in_synpred73_pollen7454); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred73_pollen

    // $ANTLR start synpred76_pollen
    public final void synpred76_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1354:10: ( BRACE_CL NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1354:11: BRACE_CL NLL
        {
        match(input,BRACE_CL,FOLLOW_BRACE_CL_in_synpred76_pollen7592); if (state.failed) return ;

        match(input,NLL,FOLLOW_NLL_in_synpred76_pollen7594); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred76_pollen

    // $ANTLR start synpred77_pollen
    public final void synpred77_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1368:8: ( BRACE_OP NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1368:9: BRACE_OP NLL
        {
        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred77_pollen7649); if (state.failed) return ;

        match(input,NLL,FOLLOW_NLL_in_synpred77_pollen7651); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred77_pollen

    // $ANTLR start synpred98_pollen
    public final void synpred98_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:8: ( '?' expr ':' expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:8: '?' expr ':' expr
        {
        match(input,144,FOLLOW_144_in_synpred98_pollen8082); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred98_pollen8084);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,141,FOLLOW_141_in_synpred98_pollen8086); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred98_pollen8088);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred98_pollen

    // $ANTLR start synpred99_pollen
    public final void synpred99_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1418:13: ( '||' exprLogicalAnd )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1418:13: '||' exprLogicalAnd
        {
        match(input,200,FOLLOW_200_in_synpred99_pollen8156); if (state.failed) return ;

        pushFollow(FOLLOW_exprLogicalAnd_in_synpred99_pollen8158);
        exprLogicalAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred99_pollen

    // $ANTLR start synpred100_pollen
    public final void synpred100_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1425:9: ( '&&' exprBitwiseOr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1425:9: '&&' exprBitwiseOr
        {
        match(input,133,FOLLOW_133_in_synpred100_pollen8248); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseOr_in_synpred100_pollen8250);
        exprBitwiseOr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred100_pollen

    // $ANTLR start synpred101_pollen
    public final void synpred101_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1432:9: ( '|' exprBitwiseXor )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1432:9: '|' exprBitwiseXor
        {
        match(input,199,FOLLOW_199_in_synpred101_pollen8329); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseXor_in_synpred101_pollen8331);
        exprBitwiseXor();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred101_pollen

    // $ANTLR start synpred102_pollen
    public final void synpred102_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1439:9: ( '^' exprBitwiseAnd )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1439:9: '^' exprBitwiseAnd
        {
        match(input,148,FOLLOW_148_in_synpred102_pollen8406); if (state.failed) return ;

        pushFollow(FOLLOW_exprBitwiseAnd_in_synpred102_pollen8408);
        exprBitwiseAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred102_pollen

    // $ANTLR start synpred103_pollen
    public final void synpred103_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1446:9: ( '&' exprEquality )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1446:9: '&' exprEquality
        {
        match(input,134,FOLLOW_134_in_synpred103_pollen8483); if (state.failed) return ;

        pushFollow(FOLLOW_exprEquality_in_synpred103_pollen8488);
        exprEquality();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred103_pollen

    // $ANTLR start synpred104_pollen
    public final void synpred104_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1453:9: ( equalityOp exprRelational )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1453:9: equalityOp exprRelational
        {
        pushFollow(FOLLOW_equalityOp_in_synpred104_pollen8564);
        equalityOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprRelational_in_synpred104_pollen8566);
        exprRelational();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred104_pollen

    // $ANTLR start synpred105_pollen
    public final void synpred105_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:9: ( relationalOp exprShift )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:9: relationalOp exprShift
        {
        pushFollow(FOLLOW_relationalOp_in_synpred105_pollen8642);
        relationalOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprShift_in_synpred105_pollen8644);
        exprShift();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred105_pollen

    // $ANTLR start synpred106_pollen
    public final void synpred106_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1467:9: ( shiftOp exprAddSub )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1467:9: shiftOp exprAddSub
        {
        pushFollow(FOLLOW_shiftOp_in_synpred106_pollen8721);
        shiftOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprAddSub_in_synpred106_pollen8724);
        exprAddSub();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred106_pollen

    // $ANTLR start synpred107_pollen
    public final void synpred107_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1474:9: ( addSubOp exprMultDiv )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1474:9: addSubOp exprMultDiv
        {
        pushFollow(FOLLOW_addSubOp_in_synpred107_pollen8800);
        addSubOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprMultDiv_in_synpred107_pollen8805);
        exprMultDiv();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred107_pollen

    // $ANTLR start synpred108_pollen
    public final void synpred108_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1481:9: ( multDivModOp exprUnary )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1481:9: multDivModOp exprUnary
        {
        pushFollow(FOLLOW_multDivModOp_in_synpred108_pollen8884);
        multDivModOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_exprUnary_in_synpred108_pollen8886);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred108_pollen

    // $ANTLR start synpred117_pollen
    public final void synpred117_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1505:10: ( varOrFcnOrArray incDecOp )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1505:10: varOrFcnOrArray incDecOp
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred117_pollen9280);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_incDecOp_in_synpred117_pollen9282);
        incDecOp();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred117_pollen

    // $ANTLR start synpred118_pollen
    public final void synpred118_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1506:10: ( varOrFcnOrArray )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1506:10: varOrFcnOrArray
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred118_pollen9317);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred118_pollen

    // $ANTLR start synpred124_pollen
    public final void synpred124_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:10: ( typeNameArray varArraySpec qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:10: typeNameArray varArraySpec qualName
        {
        pushFollow(FOLLOW_typeNameArray_in_synpred124_pollen10026);
        typeNameArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varArraySpec_in_synpred124_pollen10028);
        varArraySpec();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred124_pollen10030);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred124_pollen

    // $ANTLR start synpred125_pollen
    public final void synpred125_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:10: ( typeName qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:10: typeName qualName
        {
        pushFollow(FOLLOW_typeName_in_synpred125_pollen10134);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred125_pollen10136);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred125_pollen

    // $ANTLR start synpred126_pollen
    public final void synpred126_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1584:10: ({...}? typeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1584:10: {...}? typeName
        {
        if ( !(((featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred126_pollen", "(featureFlags.contains(Flags.PRESET)) && input.LT(1).getText().equals(currType.getTypeName()) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred126_pollen10256);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred126_pollen

    // $ANTLR start synpred127_pollen
    public final void synpred127_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1603:10: ({...}? typeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1603:10: {...}? typeName
        {
        if ( !((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred127_pollen", "input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred127_pollen10405);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred127_pollen

    // $ANTLR start synpred128_pollen
    public final void synpred128_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1615:10: ({...}? typeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1615:10: {...}? typeName
        {
        if ( !((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred128_pollen", "input.LT(1).getText().equals(currType.getTypeName()) ");
        }

        pushFollow(FOLLOW_typeName_in_synpred128_pollen10554);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred128_pollen

    // $ANTLR start synpred129_pollen
    public final void synpred129_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1625:10: ( qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1625:10: qualName
        {
        pushFollow(FOLLOW_qualName_in_synpred129_pollen10647);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred129_pollen

    // $ANTLR start synpred131_pollen
    public final void synpred131_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:10: ( '(' typeName ( ',' typeName )* ')' qualName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:11: '(' typeName ( ',' typeName )* ')' qualName
        {
        match(input,135,FOLLOW_135_in_synpred131_pollen10750); if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred131_pollen10752);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:24: ( ',' typeName )*
        loop170:
        do {
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==138) ) {
                alt170=1;
            }


            switch (alt170) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:25: ',' typeName
        	    {
        	    match(input,138,FOLLOW_138_in_synpred131_pollen10755); if (state.failed) return ;

        	    pushFollow(FOLLOW_typeName_in_synpred131_pollen10757);
        	    typeName();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop170;
            }
        } while (true);


        match(input,136,FOLLOW_136_in_synpred131_pollen10761); if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred131_pollen10763);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred131_pollen

    // $ANTLR start synpred137_pollen
    public final void synpred137_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1663:12: ( typeName '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1663:13: typeName '['
        {
        pushFollow(FOLLOW_typeName_in_synpred137_pollen11130);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred137_pollen11133); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred137_pollen

    // $ANTLR start synpred142_pollen
    public final void synpred142_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:10: ( '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:10: '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
        {
        match(input,145,FOLLOW_145_in_synpred142_pollen11343); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred142_pollen11345); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred142_pollen11347);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:36: ( fieldOrArrayAccess )?
        int alt173=2;
        int LA173_0 = input.LA(1);

        if ( (LA173_0==139||LA173_0==146) ) {
            alt173=1;
        }
        switch (alt173) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1680:36: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred142_pollen11349);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred142_pollen

    // $ANTLR start synpred144_pollen
    public final void synpred144_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:10: ( '@' IDENT ( fieldOrArrayAccess )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:10: '@' IDENT ( fieldOrArrayAccess )?
        {
        match(input,145,FOLLOW_145_in_synpred144_pollen11422); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred144_pollen11427); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:23: ( fieldOrArrayAccess )?
        int alt174=2;
        int LA174_0 = input.LA(1);

        if ( (LA174_0==139||LA174_0==146) ) {
            alt174=1;
        }
        switch (alt174) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1683:23: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred144_pollen11429);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred144_pollen

    // $ANTLR start synpred145_pollen
    public final void synpred145_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:10: ( '@' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1685:10: '@'
        {
        match(input,145,FOLLOW_145_in_synpred145_pollen11483); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred145_pollen

    // $ANTLR start synpred147_pollen
    public final void synpred147_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:10: ( qualName fcnArgumentList ( fieldOrArrayAccess )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:10: qualName fcnArgumentList ( fieldOrArrayAccess )?
        {
        pushFollow(FOLLOW_qualName_in_synpred147_pollen11533);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred147_pollen11535);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:35: ( fieldOrArrayAccess )?
        int alt175=2;
        int LA175_0 = input.LA(1);

        if ( (LA175_0==139||LA175_0==146) ) {
            alt175=1;
        }
        switch (alt175) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1687:35: fieldOrArrayAccess
                {
                pushFollow(FOLLOW_fieldOrArrayAccess_in_synpred147_pollen11537);
                fieldOrArrayAccess();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred147_pollen

    // $ANTLR start synpred152_pollen
    public final void synpred152_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1696:10: ( '.' IDENT fcnArgumentList )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1696:10: '.' IDENT fcnArgumentList
        {
        match(input,139,FOLLOW_139_in_synpred152_pollen11657); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred152_pollen11662); if (state.failed) return ;

        pushFollow(FOLLOW_fcnArgumentList_in_synpred152_pollen11664);
        fcnArgumentList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred152_pollen

    // $ANTLR start synpred155_pollen
    public final void synpred155_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1718:10: ( stmtDecl )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1718:10: stmtDecl
        {
        pushFollow(FOLLOW_stmtDecl_in_synpred155_pollen11936);
        stmtDecl();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred155_pollen

    // $ANTLR start synpred156_pollen
    public final void synpred156_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1719:10: ( stmtAssign )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1719:10: stmtAssign
        {
        pushFollow(FOLLOW_stmtAssign_in_synpred156_pollen11947);
        stmtAssign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred156_pollen

    // $ANTLR start synpred157_pollen
    public final void synpred157_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1720:10: ( stmtBind )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1720:10: stmtBind
        {
        pushFollow(FOLLOW_stmtBind_in_synpred157_pollen11958);
        stmtBind();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred157_pollen

    // $ANTLR start synpred160_pollen
    public final void synpred160_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1723:10: ( stmtPeg )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1723:10: stmtPeg
        {
        pushFollow(FOLLOW_stmtPeg_in_synpred160_pollen11991);
        stmtPeg();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred160_pollen

    // $ANTLR start synpred170_pollen
    public final void synpred170_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:10: ( stmtInjection )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1733:10: stmtInjection
        {
        pushFollow(FOLLOW_stmtInjection_in_synpred170_pollen12102);
        stmtInjection();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred170_pollen

    // $ANTLR start synpred171_pollen
    public final void synpred171_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1739:5: ( exprUnary ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1739:6: exprUnary ASSIGN
        {
        pushFollow(FOLLOW_exprUnary_in_synpred171_pollen12160);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred171_pollen12162); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred171_pollen

    // $ANTLR start synpred172_pollen
    public final void synpred172_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1750:10: ( varOrFcnOrArray ASSIGN exprAssign delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1750:10: varOrFcnOrArray ASSIGN exprAssign delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred172_pollen12264);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred172_pollen12266); if (state.failed) return ;

        pushFollow(FOLLOW_exprAssign_in_synpred172_pollen12268);
        exprAssign();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred172_pollen12270);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred172_pollen

    // $ANTLR start synpred173_pollen
    public final void synpred173_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1752:10: ( injectionCode ASSIGN expr delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1752:10: injectionCode ASSIGN expr delim
        {
        pushFollow(FOLLOW_injectionCode_in_synpred173_pollen12317);
        injectionCode();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred173_pollen12319); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred173_pollen12321);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred173_pollen12323);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred173_pollen

    // $ANTLR start synpred174_pollen
    public final void synpred174_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:10: ( varOrFcnOrArray assignOp expr delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:10: varOrFcnOrArray assignOp expr delim
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred174_pollen12370);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_assignOp_in_synpred174_pollen12372);
        assignOp();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred174_pollen12374);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred174_pollen12377);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred174_pollen

    // $ANTLR start synpred178_pollen
    public final void synpred178_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1807:10: ( 'print' printList delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1807:10: 'print' printList delim
        {
        match(input,184,FOLLOW_184_in_synpred178_pollen12773); if (state.failed) return ;

        pushFollow(FOLLOW_printList_in_synpred178_pollen12775);
        printList();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred178_pollen12782);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred178_pollen

    // $ANTLR start synpred182_pollen
    public final void synpred182_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:10: ( 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:10: 'return' ( '(' ) ( expr ( ',' expr )+ ) ( ')' ) delim
        {
        match(input,189,FOLLOW_189_in_synpred182_pollen12959); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:19: ( '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:20: '('
        {
        match(input,135,FOLLOW_135_in_synpred182_pollen12962); if (state.failed) return ;

        }


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:25: ( expr ( ',' expr )+ )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:26: expr ( ',' expr )+
        {
        pushFollow(FOLLOW_expr_in_synpred182_pollen12966);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:31: ( ',' expr )+
        int cnt179=0;
        loop179:
        do {
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==138) ) {
                alt179=1;
            }


            switch (alt179) {
        	case 1 :
        	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:32: ',' expr
        	    {
        	    match(input,138,FOLLOW_138_in_synpred182_pollen12969); if (state.failed) return ;

        	    pushFollow(FOLLOW_expr_in_synpred182_pollen12971);
        	    expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt179 >= 1 ) break loop179;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(179, input);
                    throw eee;
            }
            cnt179++;
        } while (true);


        }


        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:44: ( ')' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1823:45: ')'
        {
        match(input,136,FOLLOW_136_in_synpred182_pollen12977); if (state.failed) return ;

        }


        pushFollow(FOLLOW_delim_in_synpred182_pollen12980);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred182_pollen

    // $ANTLR start synpred183_pollen
    public final void synpred183_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:10: ( 'return' ( expr ) delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:10: 'return' ( expr ) delim
        {
        match(input,189,FOLLOW_189_in_synpred183_pollen13036); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:20: ( expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1825:21: expr
        {
        pushFollow(FOLLOW_expr_in_synpred183_pollen13040);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }


        pushFollow(FOLLOW_delim_in_synpred183_pollen13044);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred183_pollen

    // $ANTLR start synpred187_pollen
    public final void synpred187_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:9: ( typeName IDENT '=' expr SEMI )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:9: typeName IDENT '=' expr SEMI
        {
        pushFollow(FOLLOW_typeName_in_synpred187_pollen13483);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred187_pollen13485); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred187_pollen13487); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred187_pollen13489);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,SEMI,FOLLOW_SEMI_in_synpred187_pollen13491); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred187_pollen

    // $ANTLR start synpred193_pollen
    public final void synpred193_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:10: ( 'case' INT_LIT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:11: 'case' INT_LIT
        {
        match(input,153,FOLLOW_153_in_synpred193_pollen13776); if (state.failed) return ;

        match(input,INT_LIT,FOLLOW_INT_LIT_in_synpred193_pollen13778); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred193_pollen

    // $ANTLR start synpred211_pollen
    public final void synpred211_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1959:10: ( typeName IDENT ( ASSIGN expr )? ',' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1959:11: typeName IDENT ( ASSIGN expr )? ','
        {
        pushFollow(FOLLOW_typeName_in_synpred211_pollen14604);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred211_pollen14606); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1959:26: ( ASSIGN expr )?
        int alt180=2;
        int LA180_0 = input.LA(1);

        if ( (LA180_0==ASSIGN) ) {
            alt180=1;
        }
        switch (alt180) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1959:27: ASSIGN expr
                {
                match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred211_pollen14609); if (state.failed) return ;

                pushFollow(FOLLOW_expr_in_synpred211_pollen14611);
                expr();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,138,FOLLOW_138_in_synpred211_pollen14615); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred211_pollen

    // $ANTLR start synpred212_pollen
    public final void synpred212_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1960:12: ( typeName IDENT '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1960:13: typeName IDENT '['
        {
        pushFollow(FOLLOW_typeName_in_synpred212_pollen14638);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred212_pollen14640); if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred212_pollen14642); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred212_pollen

    // $ANTLR start synpred214_pollen
    public final void synpred214_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1961:12: ( ( '(' )? typeName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1961:13: ( '(' )? typeName '('
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1961:13: ( '(' )?
        int alt181=2;
        int LA181_0 = input.LA(1);

        if ( (LA181_0==135) ) {
            alt181=1;
        }
        switch (alt181) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1961:14: '('
                {
                match(input,135,FOLLOW_135_in_synpred214_pollen14663); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_typeName_in_synpred214_pollen14667);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred214_pollen14669); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred214_pollen

    // $ANTLR start synpred215_pollen
    public final void synpred215_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1962:12: ( ( '(' ) typeName typeName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1962:14: ( '(' ) typeName typeName '('
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1962:14: ( '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1962:15: '('
        {
        match(input,135,FOLLOW_135_in_synpred215_pollen14692); if (state.failed) return ;

        }


        pushFollow(FOLLOW_typeName_in_synpred215_pollen14695);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred215_pollen14697);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred215_pollen14699); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred215_pollen

    // $ANTLR start synpred216_pollen
    public final void synpred216_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1963:13: ( typeName varInit )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1963:14: typeName varInit
        {
        pushFollow(FOLLOW_typeName_in_synpred216_pollen14720);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred216_pollen14722);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred216_pollen

    // $ANTLR start synpred230_pollen
    public final void synpred230_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:8: ( BRACE_OP ( NLL ) )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:9: BRACE_OP ( NLL )
        {
        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred230_pollen15708); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:18: ( NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:19: NLL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred230_pollen15711); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred230_pollen

    // $ANTLR start synpred231_pollen
    public final void synpred231_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2045:9: ( NLL BRACE_CL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2045:10: NLL BRACE_CL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred231_pollen15751); if (state.failed) return ;

        match(input,BRACE_CL,FOLLOW_BRACE_CL_in_synpred231_pollen15753); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred231_pollen

    // $ANTLR start synpred235_pollen
    public final void synpred235_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2074:10: ( IDENT ASSIGN expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2074:10: IDENT ASSIGN expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred235_pollen15991); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred235_pollen15993); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred235_pollen15995);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred235_pollen

    // $ANTLR start synpred236_pollen
    public final void synpred236_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:11: ( IDENT BIND userTypeName )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:11: IDENT BIND userTypeName
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred236_pollen16098); if (state.failed) return ;

        match(input,BIND,FOLLOW_BIND_in_synpred236_pollen16100); if (state.failed) return ;

        pushFollow(FOLLOW_userTypeName_in_synpred236_pollen16102);
        userTypeName();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred236_pollen

    // $ANTLR start synpred237_pollen
    public final void synpred237_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2083:10: ( IDENT PEG expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2083:10: IDENT PEG expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred237_pollen16158); if (state.failed) return ;

        match(input,PEG,FOLLOW_PEG_in_synpred237_pollen16160); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred237_pollen16162);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred237_pollen

    // $ANTLR start synpred238_pollen
    public final void synpred238_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2085:10: ( IDENT ASSIGN expr )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2085:10: IDENT ASSIGN expr
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred238_pollen16206); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred238_pollen16208); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred238_pollen16210);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred238_pollen

    // $ANTLR start synpred248_pollen
    public final void synpred248_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:17: ( qualNameList )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:17: qualNameList
        {
        pushFollow(FOLLOW_qualNameList_in_synpred248_pollen16572);
        qualNameList();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred248_pollen

    // $ANTLR start synpred249_pollen
    public final void synpred249_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2126:9: ( '.' IDENT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2126:9: '.' IDENT
        {
        match(input,139,FOLLOW_139_in_synpred249_pollen16610); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred249_pollen16634); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred249_pollen

    // $ANTLR start synpred261_pollen
    public final void synpred261_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2202:10: ( SEMI NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2202:11: SEMI NLL
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred261_pollen17387); if (state.failed) return ;

        match(input,NLL,FOLLOW_NLL_in_synpred261_pollen17389); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred261_pollen

    // $ANTLR start synpred262_pollen
    public final void synpred262_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:10: ( ( SEMI ) )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:10: ( SEMI )
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:10: ( SEMI )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:11: SEMI
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred262_pollen17412); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred262_pollen

    // Delegated rules

    public final boolean synpred124_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_NLL_in_unit688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040110000000000L});
    public static final BitSet FOLLOW_unitPackage_in_unit692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPackage_in_unitPackage738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_importList_in_unitPackage756 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importIntrinsicPrint_in_unitPackage792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x020600040C000000L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x020600040C000000L});
    public static final BitSet FOLLOW_unitTypeDefinition_in_unitPackage835 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage856 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_unitPackage877 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_pollenEOF_in_unitPackage899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_pollenEOF954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmtInjectionList978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_182_in_stmtPackage1014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtPackage1016 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtPackage1018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_stmtExport1065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtExport1067 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtExport1069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_classDefinition1110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classDefinition1112 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_classDefinition1135 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_classDefinition1145 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_classDefinition1155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5888E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_classFeatureList_in_classDefinition1157 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_classDefinition1160 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_classDefinition1163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFeature_in_classFeatureList1235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5888E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_classHostCtor_in_classFeatureList1238 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_classTargCtor_in_classFeatureList1241 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicUnitName_in_classFeatureList1248 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_classFeatureList1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_classFeature1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_classFeature1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classFeature1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_classFeature1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_classFeature1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_moduleDefinition2272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_moduleDefinition2274 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_moduleDefinition2298 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_moduleDefinition2310 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_moduleDefinition2325 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_moduleDefinition2329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5888E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_moduleFeatureList_in_moduleDefinition2331 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_moduleDefinition2335 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_moduleDefinition2339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeature_in_moduleFeatureList2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5888E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_moduleHostCtor_in_moduleFeatureList2473 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_moduleTargCtor_in_moduleFeatureList2476 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicUnitName_in_moduleFeatureList2479 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_moduleFeatureList2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_moduleFeature4394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_moduleFeature4408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_moduleFeature4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_moduleFeature4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_moduleFeature4441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_enumUnitDefinition4526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumBodyDefinition_in_enumUnitDefinition4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_enumDefinition4554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_enumDefinition4571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumBodyDefinition_in_enumDefinition4582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumBodyDefinition4620 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_enumBodyDefinition4641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumList_in_enumBodyDefinition4643 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_enumBodyDefinition4645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList4705 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_enumList4721 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_NLL_in_enumList4724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList4728 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_enumList4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement4782 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_enumElement4784 = new BitSet(new long[]{0x4000000000000000L,0x0000000008000100L});
    public static final BitSet FOLLOW_enumVal_in_enumElement4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement4821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_enumVal4892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_enumVal4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_enumVal4920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_protocolDefinition4950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_protocolDefinition4952 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_protocolDefinition4972 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_protocolDefinition4982 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_protocolDefinition4993 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_protocolDefinition4997 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000082L,0x5880E20401400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_protocolFeatureList_in_protocolDefinition4999 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_protocolDefinition5002 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_protocolDefinition5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeature_in_protocolFeatureList5070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L,0x5880E20401400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_enumDefinition_in_protocolFeature5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclaration_in_protocolFeature5120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_protocolFeature5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_compositionDefinition5158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_compositionDefinition5160 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_compositionDefinition5180 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_compositionDefinition5192 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_compositionDefinition5203 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_compositionDefinition5207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5888E21411400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_compositionFeatureList_in_compositionDefinition5209 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_compositionDefinition5212 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_compositionDefinition5216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeature_in_compositionFeatureList5289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5888E21411400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_compositionFeatureList5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtExport_in_compositionFeature5350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_compositionFeature5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_compositionFeature5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_compositionFeature5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_compositionFeature5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_stmtImport5431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_importFrom_in_stmtImport5434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_stmtImport5455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtImport5457 = new BitSet(new long[]{0x0000000000001000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_metaArguments_in_stmtImport5501 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_importAs_in_stmtImport5531 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtImport5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importFrom5661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_importFrom5691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importFrom5708 = new BitSet(new long[]{0x0000000000001000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_metaArguments_in_importFrom5751 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_importAs_in_importFrom5781 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_importFrom5783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_importAs5864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importAs5868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImports_in_importList5939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImport_in_stmtImports5959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_importPrintImpl_in_importIntrinsicPrint6034 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importPrintProtocol_in_importIntrinsicPrint6054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_meta6336 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_meta6373 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_meta6378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_metaParmsGen_in_meta6397 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_meta6414 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_meta6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaParmGen_in_metaParmsGen6551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_metaParmsGen6566 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_NLL_in_metaParmsGen6581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_metaParmGen_in_metaParmsGen6601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_193_in_metaParmGen6672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_metaParmGen6674 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaParmGen6678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_metaParmGen6680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_metaParmGen6743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_metaParmGen6747 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaParmGen6750 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000100L,0x0010004000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_primitiveLit_in_metaParmGen6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_list_beg_in_metaArguments6894 = new BitSet(new long[]{0x4000000000002000L,0x0000004089000102L,0x5010E04001400400L,0x000000000000001DL});
    public static final BitSet FOLLOW_metaArgumentList_in_metaArguments6896 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_brace_list_end_in_metaArguments6898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaArgument_in_metaArgumentList6938 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_metaArgumentList6941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_metaArgumentList6946 = new BitSet(new long[]{0x4000000000002000L,0x0000004089000102L,0x5010E04001400400L,0x000000000000001DL});
    public static final BitSet FOLLOW_NLL_in_metaArgumentList6949 = new BitSet(new long[]{0x4000000000002000L,0x0000004089000102L,0x5010E04001400400L,0x000000000000001DL});
    public static final BitSet FOLLOW_metaArgument_in_metaArgumentList6953 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_metaArgumentList6956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_primitiveLit_in_metaArgument7017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_metaArgument7027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_typeName7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameScalar7102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_typeNameScalar7130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeName7149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameArray7193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeNameArr_in_typeNameArray7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeNameArr7250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_meta_in_unitTypeDefinition7304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x020400040C000000L});
    public static final BitSet FOLLOW_moduleDefinition_in_unitTypeDefinition7364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_unitTypeDefinition7394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolDefinition_in_unitTypeDefinition7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionDefinition_in_unitTypeDefinition7437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumUnitDefinition_in_unitTypeDefinition7459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_extendsClause7484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_extendsClause7486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_implementsClause7534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_implementsClause7536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_braceClose7599 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_braceClose7603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_braceClose7617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_braceOpen7656 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_braceOpen7660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_braceOpen7673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOG_NOT_in_logicalNotOp7942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_NOT_in_bitwiseNotOp7965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprList7985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_exprList7988 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprList7990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr8056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_exprQuestOp_in_expr8058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_exprQuestOp8082 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprQuestOp8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_exprQuestOp8086 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprQuestOp8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr8127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_exprLogicalOr8156 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr8158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd8224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_exprLogicalAnd8248 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd8250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr8308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_exprBitwiseOr8329 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr8331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor8385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_exprBitwiseXor8406 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor8408 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd8462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_exprBitwiseAnd8483 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd8488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality8542 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_equalityOp_in_exprEquality8564 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality8566 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational8620 = new BitSet(new long[]{0x1800000000000002L,0x0000000000003000L});
    public static final BitSet FOLLOW_relationalOp_in_exprRelational8642 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational8644 = new BitSet(new long[]{0x1800000000000002L,0x0000000000003000L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift8699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_shiftOp_in_exprShift8721 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift8724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub8779 = new BitSet(new long[]{0x0000000000000002L,0x0000000020008000L});
    public static final BitSet FOLLOW_addSubOp_in_exprAddSub8800 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub8805 = new BitSet(new long[]{0x0000000000000002L,0x0000000020008000L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv8863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001210L});
    public static final BitSet FOLLOW_multDivModOp_in_exprMultDiv8884 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv8886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001210L});
    public static final BitSet FOLLOW_179_in_exprNew8946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_exprNew8948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_exprNew8950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_exprNew8952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_exprUnary9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_exprUnary9054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLit_in_exprUnary9065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNotOp_in_exprUnary9105 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprUnary9107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseNotOp_in_exprUnary9147 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprUnary9149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_exprUnary9190 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprUnary9192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_exprUnary9235 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprUnary9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_exprUnary9239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary9280 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000040L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary9282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary9317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary9328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0008000000020000L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprUnary9330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_exprUnary9365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDefinition9381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinition9391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinition9393 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinition9395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDefinitionHost9546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinitionHost9559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinitionHost9562 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinitionHost9564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_fcnAttr9762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0880020000000000L});
    public static final BitSet FOLLOW_169_in_fcnAttr9780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0880020000000000L});
    public static final BitSet FOLLOW_183_in_fcnAttr9798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0880020000000000L});
    public static final BitSet FOLLOW_NLL_in_fcnBody9831 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_fcnBody9835 = new BitSet(new long[]{0x4000000000013C00L,0x00000040880085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_fcnBody9838 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_fcnBody9842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDeclaration9874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDeclaration9884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDeclaration9887 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_fcnDeclaration9890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_fcnType_fcnName10026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_varArraySpec_in_fcnType_fcnName10028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName10030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName10134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName10136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName10256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName10405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName10554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName10647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnTypes_fcnName_in_fcnType_fcnName10768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_fcnTypes_fcnName10791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnTypes_in_fcnTypes_fcnName10793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_fcnTypes_fcnName10795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnTypes_fcnName10797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnTypes10833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_fcnTypes10836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_fcnTypes10838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_135_in_formalParameterList10882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400100L,0x000000000000001EL});
    public static final BitSet FOLLOW_formalParameters_in_formalParameterList10884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_formalParameterList10886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters10919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_formalParameters10922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters10924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_193_in_formalParameter11004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter11006 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter11010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_formalParameter11014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterArr_in_formalParameter11138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_formalParameter11152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter11154 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter11158 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_formalParameter11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_formalParameterArr11215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_formalParameterArr11217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_formalParameterArr11219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_formalParameterArr11221 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameterArr11225 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_formalParameterArr11227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_fcnArgumentList11281 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_fcnArguments_in_fcnArgumentList11283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_fcnArgumentList11285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_fcnArguments11312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_varOrFcnOrArray11331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_varOrFcnOrArray11343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray11345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray11347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_varOrFcnOrArray11422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray11427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_varOrFcnOrArray11483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray11533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray11535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray11587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray11589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldAccess_in_fieldOrArrayAccess11629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_arrayAccess_in_fieldOrArrayAccess11633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040880L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldOrArrayAccess11635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_139_in_fieldAccess11657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess11662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldAccess11664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_fieldAccess11732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess11737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_arrayAccess11774 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x00180040000E0080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprList_in_arrayAccess11780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_arrayAccess11786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpen_in_stmtBlock11834 = new BitSet(new long[]{0x4000000000013C00L,0x00000040880085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtBlock11836 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_stmtBlock11838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_stmts11876 = new BitSet(new long[]{0x4000000000013402L,0x00000040880085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmtDecl_in_stmt11936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmt11947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_stmt11958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt11969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPrint_in_stmt11980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPeg_in_stmt11991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtReturn_in_stmt12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBreak_in_stmt12013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtContinue_in_stmt12024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtFor_in_stmt12035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtSwitch_in_stmt12046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDoWhile_in_stmt12057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtIf_in_stmt12068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtProvided_in_stmt12079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtWhile_in_stmt12090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmt12102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmt12113 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmt12115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprChainedAssign_in_exprAssign12168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprAssign12177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_exprChainedAssign12198 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_exprChainedAssign12200 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_exprChainedAssign12202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign12264 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign12266 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_stmtAssign12268 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign12270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign12317 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtAssign12319 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtAssign12321 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign12323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssign12370 = new BitSet(new long[]{0x0000000000040390L,0x0000008100240800L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign12372 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtAssign12374 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign12377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssign12424 = new BitSet(new long[]{0x0000000000040390L,0x0000008100240800L});
    public static final BitSet FOLLOW_assignOp_in_stmtAssign12426 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtAssign12428 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtAssign12433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtBind12492 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_stmtBind12494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_stmtBind12497 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtBind12503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtPeg12581 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_stmtPeg12583 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_stmtPeg12586 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtPeg12592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItemList_in_printList12642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItem_in_printItemList12676 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_PLUS_in_printItemList12683 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0018004000020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_printItem_in_printItemList12686 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_primitiveLit_in_printItem12729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_printItem12749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_stmtPrint12773 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0018004000020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_printList_in_stmtPrint12775 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtPrint12782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_stmtPrint12816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0021000800000000L});
    public static final BitSet FOLLOW_stmtPrintTarget_in_stmtPrint12819 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0018004000020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_printList_in_stmtPrint12823 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtPrint12825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_stmtPrintTarget12884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_stmtPrintTarget12903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_stmtPrintTarget12924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtReturn12959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtReturn12962 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtReturn12966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_stmtReturn12969 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtReturn12971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_136_in_stmtReturn12977 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn12980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtReturn13036 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtReturn13040 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn13044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtReturn13099 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn13102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_stmtBreak13146 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtBreak13148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_stmtContinue13179 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtContinue13181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_stmtFor13211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_defaultLoopVar_in_stmtFor13213 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000082L,0x5008E00001420000L,0x000000000000001CL});
    public static final BitSet FOLLOW_stmtForInit_in_stmtFor13215 = new BitSet(new long[]{0x4000000000012400L,0x00000042880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_stmtForCond_in_stmtFor13217 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060180L,0x0000000000000001L});
    public static final BitSet FOLLOW_stmtForNext_in_stmtFor13219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtFor13221 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtFor13224 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtFor13228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond13281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForCond13306 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond13308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_defaultLoopVar13336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit13457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_stmtForInit13483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_stmtForInit13485 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtForInit13487 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtForInit13489 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit13491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_stmtForInit13559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForNext13602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_stmtSwitch13627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtSwitch13629 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtSwitch13631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtSwitch13633 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtSwitch13636 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_stmtSwitch13640 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000042000000L});
    public static final BitSet FOLLOW_stmtsCase_in_stmtSwitch13642 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_stmtDefault_in_stmtSwitch13644 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_stmtSwitch13647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtCase_in_stmtsCase13689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_158_in_stmtDefault13722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_stmtDefault13727 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_NLL_in_stmtDefault13730 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtDefault13734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_stmtCase13782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_INT_LIT_in_stmtCase13785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_stmtCase13791 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_NLL_in_stmtCase13794 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtCase13798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_stmtCase13871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtCase13874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_stmtCase13880 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_NLL_in_stmtCase13883 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0xF518E6C0B1C60080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtCase13887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_stmtDoWhile13970 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtDoWhile13973 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtDoWhile13977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_stmtDoWhile13979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtDoWhile13981 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtDoWhile13983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtDoWhile13985 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtDoWhile13987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_stmtIf14026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtIf14028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_stmtsElif_in_stmtIf14030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtIf14032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_stmtIfBlock14074 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtIfBlock14076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtIfBlock14078 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtIfBlock14081 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtIfBlock14085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtElif_in_stmtsElif14110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_stmtElif14143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtElif14145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_stmtElse14178 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtElse14181 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtElse14185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_stmtProvided14208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtProvided14210 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtProvided14212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtProvided14214 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtProvided14217 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtProvided14221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtProvided14224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_stmtWhile14272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtWhile14274 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtWhile14275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtWhile14276 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtWhile14279 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtWhile14283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDeclAttr_in_stmtDecl14318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5008E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_varDecl_in_stmtDecl14320 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtDecl14322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_stmtDeclAttr14363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_stmtDeclAttr14381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_169_in_stmtDeclAttr14404 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_varAttr_in_fieldDeclaration14446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5008E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_varDecl_in_fieldDeclaration14448 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_fieldDeclaration14450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_varDeclaration14488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5008E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_varDecl_in_varDeclaration14490 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_varDeclaration14492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_varAttr14523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_varAttr14541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_169_in_varAttr14561 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl14620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varArray_in_varDecl14647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef_in_varDecl14675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef2_in_varDecl14705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl14727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_varDecl14739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varDecl14741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varDecl14743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varDecl14745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_varFcnRef14997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_varFcnRef15000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef15002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_varFcnRef15005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef15008 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varFcnRef15011 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varFcnRef15013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef15032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef15034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef15037 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varFcnRef15040 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varFcnRef15042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_varFcnRef215096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_rtnType_in_varFcnRef215098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_varFcnRef215100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef215102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_varFcnRef215104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef215106 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varFcnRef215109 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varFcnRef215111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_rtnType15188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_fcnRefTypeList15209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400100L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnRefTypes_in_fcnRefTypeList15211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_fcnRefTypeList15213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes15236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_fcnRefTypes15239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes15241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_typeNameArray_in_varArray15311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varArray15323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_varArraySpec_in_varArray15334 = new BitSet(new long[]{0x0000000000000022L,0x0000000010000000L});
    public static final BitSet FOLLOW_varArrayInit_in_varArray15347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_varArraySpec15441 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x00180040000E0080L,0x0000000000000001L});
    public static final BitSet FOLLOW_varDim_in_varArraySpec15443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_varArraySpec15445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ASSIGN_in_varArrayInit15486 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_in_varArrayInit15488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PEG_in_varArrayInit15521 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_in_varArrayInit15523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_varDim15560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_initializer15613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_list_beg_in_initializer15622 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_list_in_initializer15624 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_brace_list_end_in_initializer15626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list15653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_initializer_list15656 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_NLL_in_initializer_list15658 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_in_initializer_list15661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_BRACE_OP_in_brace_list_beg15717 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_brace_list_beg15720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_brace_list_beg15731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_brace_list_end15758 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_brace_list_end15761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_brace_list_end15772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varBuiltInType_in_varDeclList15842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varListBuiltInType_in_varDeclList15847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_varDeclList15858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varListUserDefType_in_varDeclList15863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_varBuiltInType15886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varInit2_in_varListBuiltInType15919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_varListBuiltInType15922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varInit2_in_varListBuiltInType15925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varInit_in_varListUserDefType15951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_varListUserDefType15954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varInit_in_varListUserDefType15957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_varInit215991 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit215993 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varInit215995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit216046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit16098 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_varInit16100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_varInit16102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit16158 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_varInit16160 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varInit16162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit16206 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit16208 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varInit16210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit16260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_builtinType16309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_builtinType16328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_builtinType16347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_builtinType16366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_builtinType16385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_builtinType16407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_builtinType16428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_builtinType16449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_builtinType16468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_builtinType16487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameConcat_in_qualName16544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualNameConcat16569 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_qualNameList_in_qualNameConcat16572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_qualNameList16610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualNameList16634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_146_in_arrayLit16694 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000080000L,0x0000000000000001L});
    public static final BitSet FOLLOW_arrayLitList_in_arrayLit16699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_arrayLit16704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList16738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_arrayLitList16744 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList16749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_primitiveLit_in_arrayLitElem16791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedConstant_in_arrayLitElem16801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_namedConstant16820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_boolLit16844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_nullLit16871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_numLit16897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_numLit16915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LIT_in_numLit16933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_numLit16951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolLit_in_primitiveLit16988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numLit_in_primitiveLit17013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullLit_in_primitiveLit17039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_primitiveLit17064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_primitiveLit17101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_stmtInjection17146 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtInjection17156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_inject17221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_injectionCode17263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_injectionDecl17306 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_injectionDecl17325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_delim17394 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_delim17396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_delim17412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_delim17427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_synpred1_pollen688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred7_pollen1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_synpred8_pollen1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred9_pollen1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_synpred21_pollen4394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred22_pollen4408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_synpred23_pollen4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred29_pollen4776 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred29_pollen4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_synpred35_pollen5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclaration_in_synpred36_pollen5120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionHost_in_synpred41_pollen5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_synpred42_pollen5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred43_pollen5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_synpred54_pollen6336 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred54_pollen6373 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpen_in_synpred54_pollen6378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_metaParmsGen_in_synpred54_pollen6397 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred54_pollen6414 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceClose_in_synpred54_pollen6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_synpred60_pollen6941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_synpred61_pollen6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_synpred62_pollen6956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaArgument_in_synpred64_pollen6938 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_synpred64_pollen6941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred64_pollen6946 = new BitSet(new long[]{0x4000000000002000L,0x0000004089000102L,0x5010E04001400400L,0x000000000000001DL});
    public static final BitSet FOLLOW_NLL_in_synpred64_pollen6949 = new BitSet(new long[]{0x4000000000002000L,0x0000004089000102L,0x5010E04001400400L,0x000000000000001DL});
    public static final BitSet FOLLOW_metaArgument_in_synpred64_pollen6953 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_synpred64_pollen6956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_178_in_synpred69_pollen7359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_synpred70_pollen7388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_synpred71_pollen7410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_synpred72_pollen7432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_synpred73_pollen7454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_synpred76_pollen7592 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred76_pollen7594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred77_pollen7649 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred77_pollen7651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_synpred98_pollen8082 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred98_pollen8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_synpred98_pollen8086 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred98_pollen8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred99_pollen8156 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_synpred99_pollen8158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_synpred100_pollen8248 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_synpred100_pollen8250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_synpred101_pollen8329 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_synpred101_pollen8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_synpred102_pollen8406 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_synpred102_pollen8408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_synpred103_pollen8483 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprEquality_in_synpred103_pollen8488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityOp_in_synpred104_pollen8564 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprRelational_in_synpred104_pollen8566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred105_pollen8642 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprShift_in_synpred105_pollen8644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred106_pollen8721 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAddSub_in_synpred106_pollen8724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addSubOp_in_synpred107_pollen8800 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprMultDiv_in_synpred107_pollen8805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multDivModOp_in_synpred108_pollen8884 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprUnary_in_synpred108_pollen8886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred117_pollen9280 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000040L});
    public static final BitSet FOLLOW_incDecOp_in_synpred117_pollen9282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred118_pollen9317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_synpred124_pollen10026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_varArraySpec_in_synpred124_pollen10028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred124_pollen10030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred125_pollen10134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred125_pollen10136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred126_pollen10256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred127_pollen10405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred128_pollen10554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred129_pollen10647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred131_pollen10750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred131_pollen10752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_138_in_synpred131_pollen10755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred131_pollen10757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_136_in_synpred131_pollen10761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred131_pollen10763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred137_pollen11130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred137_pollen11133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_synpred142_pollen11343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred142_pollen11345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred142_pollen11347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred142_pollen11349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_synpred144_pollen11422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred144_pollen11427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred144_pollen11429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_synpred145_pollen11483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred147_pollen11533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred147_pollen11535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_synpred147_pollen11537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_synpred152_pollen11657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred152_pollen11662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_synpred152_pollen11664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDecl_in_synpred155_pollen11936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssign_in_synpred156_pollen11947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_synpred157_pollen11958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPeg_in_synpred160_pollen11991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_synpred170_pollen12102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_synpred171_pollen12160 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred171_pollen12162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred172_pollen12264 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred172_pollen12266 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_synpred172_pollen12268 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred172_pollen12270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_synpred173_pollen12317 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred173_pollen12319 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred173_pollen12321 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred173_pollen12323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred174_pollen12370 = new BitSet(new long[]{0x0000000000040390L,0x0000008100240800L});
    public static final BitSet FOLLOW_assignOp_in_synpred174_pollen12372 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred174_pollen12374 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred174_pollen12377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred178_pollen12773 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0018004000020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_printList_in_synpred178_pollen12775 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred178_pollen12782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_synpred182_pollen12959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred182_pollen12962 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred182_pollen12966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred182_pollen12969 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred182_pollen12971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_136_in_synpred182_pollen12977 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred182_pollen12980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_synpred183_pollen13036 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred183_pollen13040 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred183_pollen13044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred187_pollen13483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred187_pollen13485 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred187_pollen13487 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred187_pollen13489 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred187_pollen13491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_synpred193_pollen13776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_INT_LIT_in_synpred193_pollen13778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred211_pollen14604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred211_pollen14606 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred211_pollen14609 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred211_pollen14611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred211_pollen14615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred212_pollen14638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred212_pollen14640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred212_pollen14642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred214_pollen14663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred214_pollen14667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred214_pollen14669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred215_pollen14692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred215_pollen14695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred215_pollen14697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred215_pollen14699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred216_pollen14720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varInit_in_synpred216_pollen14722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred230_pollen15708 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred230_pollen15711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_synpred231_pollen15751 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_synpred231_pollen15753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred235_pollen15991 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred235_pollen15993 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred235_pollen15995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred236_pollen16098 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_synpred236_pollen16100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_synpred236_pollen16102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred237_pollen16158 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_synpred237_pollen16160 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred237_pollen16162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred238_pollen16206 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred238_pollen16208 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000060080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_synpred238_pollen16210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualNameList_in_synpred248_pollen16572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_synpred249_pollen16610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred249_pollen16634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred261_pollen17387 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred261_pollen17389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred262_pollen17412 = new BitSet(new long[]{0x0000000000000002L});

}