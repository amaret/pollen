// $ANTLR 3.4 /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g 2015-01-28 15:07:21

    package com.amaret.pollen.parser;
    import java.io.File;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.Stack;

import org.antlr.runtime.BitSet;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.Tree;
import org.antlr.runtime.tree.TreeAdaptor;

import com.amaret.pollen.driver.ProcessUnits;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class pollenParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_EQ", "ASSIGN", "BIND", "BITAND_EQ", "BITOR_EQ", "BITXOR_EQ", "BIT_NOT", "BRACE_CL", "BRACE_OP", "CHAR", "COM", "D", "DEC", "DELIM", "DIV_EQ", "D_ARG", "D_ARR", "D_ARR_DIM", "D_CLASS", "D_COMPOSITION", "D_ENUM", "D_ENUMVAL", "D_FCN_CTOR", "D_FCN_DCL", "D_FCN_DEF", "D_FCN_REF", "D_FCN_TYP_NM", "D_FIELD", "D_FORMAL", "D_INJ", "D_INSTANCE", "D_META", "D_MODULE", "D_PROTOCOL", "D_VAR", "E", "EQ", "EXPORT", "E_ADDR", "E_BINARY", "E_CALL", "E_CONST", "E_EXPR", "E_HASH", "E_IDENT", "E_INDEX", "E_INJ", "E_NEW", "E_PAREN", "E_QUEST", "E_SELF", "E_TYP", "E_UNARY", "E_VEC", "FCNBODY", "GT", "GT_EQ", "H", "HEX_LIT", "HOST", "I", "IDENT", "IJ_BEG", "IJ_END", "ILLEGAL_CHARACTER", "IMPORT", "INC", "INJECT", "INT_LIT", "LIST", "LOG_NOT", "LSHFT_EQ", "LT", "LT_EQ", "LU", "MINUS", "ML_COMMENT", "MODULE", "MOD_EQ", "MULCOM", "MULCOM1", "MUL_EQ", "NEWLINE", "NIL", "NLL", "NOT_EQ", "O", "OCT_LIT", "PEG", "PLUS", "QNAME", "REAL_LIT", "RSHFT_EQ", "SEMI", "SLCOM1", "SLCOM2", "SLCOM3", "SL_COMMENT", "STRING", "SUB_EQ", "S_ASSIGN", "S_BIND", "S_BLOCK", "S_BREAK", "S_CASE", "S_CONTINUE", "S_DECL", "S_ELIF", "S_EXPR", "S_FOR", "S_FOREACH", "S_IF", "S_INJ", "S_PACKAGE", "S_PEG", "S_PRINT", "S_PROVIDED", "S_RETURN", "S_SWITCH", "S_WHILE", "THIS", "T_ARR", "T_LST", "T_STD", "T_USR", "UNIT", "VOID", "WS", "'%'", "'&&'", "'&'", "'('", "')'", "'*'", "','", "'.'", "'/'", "':'", "'<<'", "'>>'", "'?'", "'@'", "'['", "']'", "'^'", "'as'", "'bool'", "'break'", "'byte'", "'case'", "'class'", "'composition'", "'const'", "'continue'", "'default'", "'do'", "'elif'", "'else'", "'enum'", "'err'", "'export'", "'extends'", "'false'", "'for'", "'from'", "'host'", "'if'", "'implements'", "'import'", "'int16'", "'int32'", "'int8'", "'log'", "'meta'", "'module'", "'new'", "'null'", "'out'", "'package'", "'preset'", "'print'", "'protocol'", "'provided'", "'public'", "'real'", "'return'", "'string'", "'switch'", "'true'", "'type'", "'uint16'", "'uint32'", "'uint8'", "'volatile'", "'while'", "'|'", "'||'"
    };

    public static final int EOF=-1;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int ADD_EQ=4;
    public static final int ASSIGN=5;
    public static final int BIND=6;
    public static final int BITAND_EQ=7;
    public static final int BITOR_EQ=8;
    public static final int BITXOR_EQ=9;
    public static final int BIT_NOT=10;
    public static final int BRACE_CL=11;
    public static final int BRACE_OP=12;
    public static final int CHAR=13;
    public static final int COM=14;
    public static final int D=15;
    public static final int DEC=16;
    public static final int DELIM=17;
    public static final int DIV_EQ=18;
    public static final int D_ARG=19;
    public static final int D_ARR=20;
    public static final int D_ARR_DIM=21;
    public static final int D_CLASS=22;
    public static final int D_COMPOSITION=23;
    public static final int D_ENUM=24;
    public static final int D_ENUMVAL=25;
    public static final int D_FCN_CTOR=26;
    public static final int D_FCN_DCL=27;
    public static final int D_FCN_DEF=28;
    public static final int D_FCN_REF=29;
    public static final int D_FCN_TYP_NM=30;
    public static final int D_FIELD=31;
    public static final int D_FORMAL=32;
    public static final int D_INJ=33;
    public static final int D_INSTANCE=34;
    public static final int D_META=35;
    public static final int D_MODULE=36;
    public static final int D_PROTOCOL=37;
    public static final int D_VAR=38;
    public static final int E=39;
    public static final int EQ=40;
    public static final int EXPORT=41;
    public static final int E_ADDR=42;
    public static final int E_BINARY=43;
    public static final int E_CALL=44;
    public static final int E_CONST=45;
    public static final int E_EXPR=46;
    public static final int E_HASH=47;
    public static final int E_IDENT=48;
    public static final int E_INDEX=49;
    public static final int E_INJ=50;
    public static final int E_NEW=51;
    public static final int E_PAREN=52;
    public static final int E_QUEST=53;
    public static final int E_SELF=54;
    public static final int E_TYP=55;
    public static final int E_UNARY=56;
    public static final int E_VEC=57;
    public static final int FCNBODY=58;
    public static final int GT=59;
    public static final int GT_EQ=60;
    public static final int H=61;
    public static final int HEX_LIT=62;
    public static final int HOST=63;
    public static final int I=64;
    public static final int IDENT=65;
    public static final int IJ_BEG=66;
    public static final int IJ_END=67;
    public static final int ILLEGAL_CHARACTER=68;
    public static final int IMPORT=69;
    public static final int INC=70;
    public static final int INJECT=71;
    public static final int INT_LIT=72;
    public static final int LIST=73;
    public static final int LOG_NOT=74;
    public static final int LSHFT_EQ=75;
    public static final int LT=76;
    public static final int LT_EQ=77;
    public static final int LU=78;
    public static final int MINUS=79;
    public static final int ML_COMMENT=80;
    public static final int MODULE=81;
    public static final int MOD_EQ=82;
    public static final int MULCOM=83;
    public static final int MULCOM1=84;
    public static final int MUL_EQ=85;
    public static final int NEWLINE=86;
    public static final int NIL=87;
    public static final int NLL=88;
    public static final int NOT_EQ=89;
    public static final int O=90;
    public static final int OCT_LIT=91;
    public static final int PEG=92;
    public static final int PLUS=93;
    public static final int QNAME=94;
    public static final int REAL_LIT=95;
    public static final int RSHFT_EQ=96;
    public static final int SEMI=97;
    public static final int SLCOM1=98;
    public static final int SLCOM2=99;
    public static final int SLCOM3=100;
    public static final int SL_COMMENT=101;
    public static final int STRING=102;
    public static final int SUB_EQ=103;
    public static final int S_ASSIGN=104;
    public static final int S_BIND=105;
    public static final int S_BLOCK=106;
    public static final int S_BREAK=107;
    public static final int S_CASE=108;
    public static final int S_CONTINUE=109;
    public static final int S_DECL=110;
    public static final int S_ELIF=111;
    public static final int S_EXPR=112;
    public static final int S_FOR=113;
    public static final int S_FOREACH=114;
    public static final int S_IF=115;
    public static final int S_INJ=116;
    public static final int S_PACKAGE=117;
    public static final int S_PEG=118;
    public static final int S_PRINT=119;
    public static final int S_PROVIDED=120;
    public static final int S_RETURN=121;
    public static final int S_SWITCH=122;
    public static final int S_WHILE=123;
    public static final int THIS=124;
    public static final int T_ARR=125;
    public static final int T_LST=126;
    public static final int T_STD=127;
    public static final int T_USR=128;
    public static final int UNIT=129;
    public static final int VOID=130;
    public static final int WS=131;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public pollenParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public pollenParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return pollenParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g"; }



        private boolean isMetaInstance = false;
        private boolean isVoidInstance = false; // deferred instantiation: '{}'. No code gen.
        private boolean hasHostConstructor = false;  // constructors with 0 parms will by synthesized if not declared.
        private boolean hasTargetConstructor = false;
        private boolean instantiateToDefaults = false; // A meta type imported with no '{..}'
        private UnitNode client = null;
        private ImportNode clientImport = null;
        // Trigger meta instantiation via this constructor
        public pollenParser(TokenStream tokens, UnitNode cl, ImportNode cli) {
            this(tokens, new RecognizerSharedState());
            isMetaInstance = (cl != null && cli != null); 
            client = cl;
            clientImport = cli;
            isVoidInstance = (cli != null && cli.getMeta() != null && cli.getMeta().size() == 0);
            instantiateToDefaults = (cli != null && cli.getMeta() == null);
            ProcessUnits.setPollenProxyBindSeen(ProcessUnits.PollenProtocol.PRINT, false);
            ProcessUnits.setPollenProxyBindSeen(ProcessUnits.PollenProtocol.SLEEP_WAKE, false);
            ProcessUnits.setPollenProxyBindSeen(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY, false);
        }
            
        EnumSet<Flags> featureFlags = EnumSet.noneOf(Flags.class); 
        EnumSet<Flags> metaFlags = EnumSet.noneOf(Flags.class); 
        EnumSet<Flags> stmtFlags = EnumSet.noneOf(Flags.class);
        EnumSet<Flags> typeMods = EnumSet.noneOf(Flags.class);
        
        private class TypeInfo {
            boolean hasHostCtor;
            boolean hasTargCtor;
            private EnumSet<Flags> uf = EnumSet.noneOf(Flags.class);
            private String tn = "";  
            public TypeInfo(boolean hostCtor, boolean targCtor) {
                    hasHostCtor = hostCtor;
                    hasTargCtor = targCtor;
            }
            public boolean getHostCtor() {
                return hasHostCtor;
            }
            public boolean getTargCtor() {
                return hasTargCtor;
            }
        
            public EnumSet<Flags> getUnitFlags() {
                if (tn.isEmpty()) // backtracking
                    return getParseUnitFlags();
                else
                    return uf;
            }    
            public void setUnitFlags(EnumSet<Flags> unitFlags) {
                uf.addAll(unitFlags);
            }    
            public String getTypeName() {
                if (tn.isEmpty()) // backtracking
                    return getParseUnitTypeName();
                else
                    return tn;
            }    
            public void setTypeName(String typeName) {
                this.tn = typeName;
            }    
        
        } // end private class TypeInfo    

        public String getParseUnitTypeName() {
             if (currType == null || typeInfoList.size() <= 0) {
                   ParseUnit.current().reportFailure("invalid request");
            }
            String n = typeInfoList.get(typeInfoList.size()-1).getTypeName();
            if (n.isEmpty())
                ParseUnit.current().reportFailure("invalid request");
            return  n;
                
        }
        /**
         *  Use this for DeclNode constructors. 
         */ 
        public EnumSet<Flags> getParseUnitFlags() {
            if (currType == null) {
                ParseUnit.current().reportFailure("invalid request");
            }
            if (typeInfoList.size() <= 0) {
            return EnumSet.noneOf(Flags.class);
            }
            // Get requested flags from type info list, not the current type info object,
            // as the latter can be accessed while backtracking giving invalid flags. 
            TypeInfo ti = typeInfoList.get(typeInfoList.size()-1);
            return ti.getUnitFlags();
        }
        
        private ArrayList<TypeInfo> typeInfoList = new ArrayList<TypeInfo>();
        private TypeInfo currType;

        // currType has info for the type encountered (including while backtracking)
        // but if backtracking don't push currType on the stack.
        // It turns out '@init' code is exec'd when backtracking but '@after' code is not.
        // so this keeps stack integrity. See 
        // http://www.antlr3.org/pipermail/antlr-interest/2010-April/038320.html
        // Perhaps I could avoid this gating if I called these routines in the
        // action not the @init code.
        
        private void pushType() {

          currType = new TypeInfo(hasHostConstructor, hasTargetConstructor);
          // Needs to be gated by backtracking state.
          // If backtracking state > 0 this could be exec'd
          // more than once for a single type.
          if ( state.backtracking==0 ) {
                typeInfoList.add(currType);        
                   currType.setUnitFlags(metaFlags); 
                   metaFlags = EnumSet.noneOf(Flags.class);        
          }
        }
        private void popType() {
            // currType is on the stack only when we are not backtracking.
            if (typeInfoList.size() <= 0) {
                ParseUnit.current().reportFailure("invalid request");
            }
            if ( state.backtracking==0 ) {
                       currType = typeInfoList.remove(typeInfoList.size()-1); // pop
                       hasHostConstructor = currType.getHostCtor();
                       hasTargetConstructor = currType.getTargCtor();
            }
            if (typeInfoList.size() > 0) {
            currType = typeInfoList.get(typeInfoList.size()-1);
            }
        }
        
        // decode text into literal value for enums. handles hex, octal, decimal, etc. 
        int decode(org.antlr.runtime.CommonToken t) {
                
            try {
                int i = Integer.decode(t.getText());
                if (i < 0)
                    ParseUnit.current().reportError(t, "enum values cannot be negative");
                else {
                    byte b = (byte) i;
                    if (b != i &&  i != 0x80)
                            ParseUnit.current().reportError(t, "enum values must fit in 8 bits");
                    }
                return (i & 0xFF);
            } catch (NumberFormatException e) {
                ParseUnit.current().reportError(t, "number format error for enum value " + t.getText());    
                return 0;
            }
        }    
           
        public int getParserTypeInfoListSize() {
            return typeInfoList.size();
        }
        
        String getInject(String text) {
            return text.substring(text.indexOf("+{")+2,text.lastIndexOf("}+"));
        }
        
        void handleIntrinsics(CommonTree t) {
           if (t == null)
               return;
            if (t.getText().indexOf('.') == -1) 
                return;
            char c = t.getText().charAt(0);
            switch (c) {
            case 'p':
                String s = t.getText();             
                if (s.substring(0, s.indexOf('.')).equals("pollen")) {
                    s = s.replaceFirst("\\.", "__");
                    t.getToken().setText(s);
                }       
                break;
            default:
                break;        
            }    
        }

        
        void DBG(String dbg) {
            System.out.println(dbg);
        }
            /**
             * Synthesize tree to handle qualified pollen names in injected text. 
        * @param root
        * @param inject
        * @return the root of the synthesized tree.
        */
        private BaseNode addInjectChild(BaseNode root, TypedInject inject) {

            root = (root == null) ? (BaseNode)adaptor.nil() : root;
            if (inject.isName()) {
                BaseNode id =  (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , (BaseNode) adaptor.nil());
                adaptor.addChild(root, id);
                adaptor.addChild(id, 
                        (BaseNode)adaptor.create(pollenParser.IDENT, (inject.getText())));
            }
            else {
                adaptor.addChild(root, 
                        (BaseNode)adaptor.create(INJECT, (inject.getText())));
            }
            root = (BaseNode)adaptor.rulePostProcessing(root);
            return root;
        }
        class TypedInject {
            private boolean isName = false;
            public boolean isName() {
                return isName;
        }
        public String getText() {
                return text;
        }
        private String text = "";
            public TypedInject(String str,boolean name) {
                text = str;
                isName = name;
            }
        }

                /**
                 * Split the text that was injected into a list of IDENT and INJECT nodes.
                 * The IDENTs will be emitted as pollen names formatted for output.
                 * @param root
                 * @param inject
                 * @return a BaseNode with child nodes for the injects or names in the order encountered.
                 */
                public BaseNode createInjectNodes(BaseNode root, String inject) {
                    final char BT = '`';
                    if (inject.indexOf(BT) == -1) {
                        return addInjectChild(root, new TypedInject(inject, false));
                        
                    }
                    List<TypedInject> l = new ArrayList<TypedInject>();
                    int startBT = 0;
                    int endBT = 0;
                    String name = "", data = "";
                    while (true) {
                        startBT = inject.indexOf(BT);
                        endBT = inject.indexOf(BT, startBT+1);

                        if (startBT > 0) { // data
                            l.add(new TypedInject(inject.substring(0, startBT), false));
                        } 
                        else if (startBT == -1) { // remaining inject is all data
                            endBT = -1;
                            l.add(new TypedInject(inject, false));
                        } 

                        if (endBT == -1)
                            break; 
                        l.add(new TypedInject(inject.substring(startBT+1, endBT), true));// a pollen name
                        inject = inject.substring(endBT+1);
                    }
                    
                    for (TypedInject t : l) {
                        addInjectChild(root, t);
                    }
                    return root;
                }

        // Override to extract PollenException message when present
        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
            String hdr = getErrorHeader(e);
            String msg = getErrorMessage(e, tokenNames);
            if ( e instanceof PollenException) {
                        msg = e.toString();
            }
            hdr = pollenLexer.getFileName()+ ", " + hdr;
            emitErrorMessage(hdr+" "+msg);       
            if (msg.matches(".*mismatched input.*"))
               ParseUnit.current().reportFailure("Illegal program");

            
        }

        String pkgName;
        void DBG_LT() {
          System.out.print("LT: "); 
            if (input.LT(0) != null) System.out.print(input.LT(0).getText() + ", "); 
            if (input.LT(1) != null) System.out.print(input.LT(1).getText() + ", "); 
            if (input.LT(2) != null) System.out.print(input.LT(2).getText() + ", "); 
            System.out.println();
        }
        /** A mismatched char or Token or tree node */
        public class PollenException extends RecognitionException {
            
            String msg;

            public PollenException(String m, IntStream input) {
                super(input);
                msg = m;
            }
            public String toString() {
                return "PollenException(" + msg + ")";
            }
        }
        public class PollenFatalException extends Exception {
            String msg;

            public PollenFatalException(String m) {
                msg = m;
            }
            public String toString() {
                return "PollenFatalException(" + msg + ")";
            }
        }
        public void reportFailure( Exception e )
        {
            ParseUnit.current().reportFailure(e);
        }


    public static class unit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:477:1: unit : ( NLL )? unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) ;
    public final pollenParser.unit_return unit() throws RecognitionException {
        pollenParser.unit_return retval = new pollenParser.unit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL1=null;
        pollenParser.unitPackage_return unitPackage2 =null;


        BaseNode NLL1_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_unitPackage=new RewriteRuleSubtreeStream(adaptor,"rule unitPackage");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:5: ( ( NLL )? unitPackage -> ^( UNIT[\"UNIT\"] unitPackage ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:9: ( NLL )? unitPackage
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:9: ( NLL )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==NLL) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:10: NLL
                    {
                    NLL1=(Atom)match(input,NLL,FOLLOW_NLL_in_unit676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL1);


                    }
                    break;

            }


            pushFollow(FOLLOW_unitPackage_in_unit680);
            unitPackage2=unitPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitPackage.add(unitPackage2.getTree());

            // AST REWRITE
            // elements: unitPackage
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 478:30: -> ^( UNIT[\"UNIT\"] unitPackage )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:478:33: ^( UNIT[\"UNIT\"] unitPackage )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new UnitNode(UNIT, "UNIT")
                , root_1);

                adaptor.addChild(root_1, stream_unitPackage.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unit"


    protected static class unitPackage_scope {
        Object unitImports;
    }
    protected Stack unitPackage_stack = new Stack();


    public static class unitPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitPackage"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:480:1: unitPackage : stmtPackage importList importPrintIntrinsic importSleepWakeIntrinsic importDynamicMemoryIntrinsic stmtInjectionList unitTypeDefinition stmtInjectionList ( NLL )? pollenEOF -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList ;
    public final pollenParser.unitPackage_return unitPackage() throws RecognitionException {
        unitPackage_stack.push(new unitPackage_scope());
        pollenParser.unitPackage_return retval = new pollenParser.unitPackage_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL11=null;
        pollenParser.stmtPackage_return stmtPackage3 =null;

        pollenParser.importList_return importList4 =null;

        pollenParser.importPrintIntrinsic_return importPrintIntrinsic5 =null;

        pollenParser.importSleepWakeIntrinsic_return importSleepWakeIntrinsic6 =null;

        pollenParser.importDynamicMemoryIntrinsic_return importDynamicMemoryIntrinsic7 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList8 =null;

        pollenParser.unitTypeDefinition_return unitTypeDefinition9 =null;

        pollenParser.stmtInjectionList_return stmtInjectionList10 =null;

        pollenParser.pollenEOF_return pollenEOF12 =null;


        BaseNode NLL11_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtPackage=new RewriteRuleSubtreeStream(adaptor,"rule stmtPackage");
        RewriteRuleSubtreeStream stream_importSleepWakeIntrinsic=new RewriteRuleSubtreeStream(adaptor,"rule importSleepWakeIntrinsic");
        RewriteRuleSubtreeStream stream_pollenEOF=new RewriteRuleSubtreeStream(adaptor,"rule pollenEOF");
        RewriteRuleSubtreeStream stream_stmtInjectionList=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjectionList");
        RewriteRuleSubtreeStream stream_importPrintIntrinsic=new RewriteRuleSubtreeStream(adaptor,"rule importPrintIntrinsic");
        RewriteRuleSubtreeStream stream_importList=new RewriteRuleSubtreeStream(adaptor,"rule importList");
        RewriteRuleSubtreeStream stream_importDynamicMemoryIntrinsic=new RewriteRuleSubtreeStream(adaptor,"rule importDynamicMemoryIntrinsic");
        RewriteRuleSubtreeStream stream_unitTypeDefinition=new RewriteRuleSubtreeStream(adaptor,"rule unitTypeDefinition");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:484:5: ( stmtPackage importList importPrintIntrinsic importSleepWakeIntrinsic importDynamicMemoryIntrinsic stmtInjectionList unitTypeDefinition stmtInjectionList ( NLL )? pollenEOF -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:484:20: stmtPackage importList importPrintIntrinsic importSleepWakeIntrinsic importDynamicMemoryIntrinsic stmtInjectionList unitTypeDefinition stmtInjectionList ( NLL )? pollenEOF
            {
            pushFollow(FOLLOW_stmtPackage_in_unitPackage729);
            stmtPackage3=stmtPackage();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtPackage.add(stmtPackage3.getTree());

            pushFollow(FOLLOW_importList_in_unitPackage750);
            importList4=importList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importList.add(importList4.getTree());

            if ( state.backtracking==0 ) {((unitPackage_scope)unitPackage_stack.peek()).unitImports = (importList4!=null?((BaseNode)importList4.tree):null);}

            pushFollow(FOLLOW_importPrintIntrinsic_in_unitPackage789);
            importPrintIntrinsic5=importPrintIntrinsic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importPrintIntrinsic.add(importPrintIntrinsic5.getTree());

            pushFollow(FOLLOW_importSleepWakeIntrinsic_in_unitPackage810);
            importSleepWakeIntrinsic6=importSleepWakeIntrinsic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importSleepWakeIntrinsic.add(importSleepWakeIntrinsic6.getTree());

            pushFollow(FOLLOW_importDynamicMemoryIntrinsic_in_unitPackage831);
            importDynamicMemoryIntrinsic7=importDynamicMemoryIntrinsic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importDynamicMemoryIntrinsic.add(importDynamicMemoryIntrinsic7.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage852);
            stmtInjectionList8=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtInjectionList.add(stmtInjectionList8.getTree());

            pushFollow(FOLLOW_unitTypeDefinition_in_unitPackage874);
            unitTypeDefinition9=unitTypeDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unitTypeDefinition.add(unitTypeDefinition9.getTree());

            pushFollow(FOLLOW_stmtInjectionList_in_unitPackage895);
            stmtInjectionList10=stmtInjectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtInjectionList.add(stmtInjectionList10.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:492:20: ( NLL )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==NLL) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:492:20: NLL
                    {
                    NLL11=(Atom)match(input,NLL,FOLLOW_NLL_in_unitPackage916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL11);


                    }
                    break;

            }


            pushFollow(FOLLOW_pollenEOF_in_unitPackage938);
            pollenEOF12=pollenEOF();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pollenEOF.add(pollenEOF12.getTree());

            // AST REWRITE
            // elements: stmtPackage, importList, stmtInjectionList, unitTypeDefinition, stmtInjectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 494:24: -> stmtPackage importList stmtInjectionList unitTypeDefinition stmtInjectionList
            {
                adaptor.addChild(root_0, stream_stmtPackage.nextTree());

                adaptor.addChild(root_0, stream_importList.nextTree());

                adaptor.addChild(root_0, stream_stmtInjectionList.nextTree());

                adaptor.addChild(root_0, stream_unitTypeDefinition.nextTree());

                adaptor.addChild(root_0, stream_stmtInjectionList.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            unitPackage_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitPackage"


    public static class pollenEOF_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pollenEOF"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:496:1: pollenEOF : EOF !;
    public final pollenParser.pollenEOF_return pollenEOF() throws RecognitionException {
        pollenParser.pollenEOF_return retval = new pollenParser.pollenEOF_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom EOF13=null;

        BaseNode EOF13_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:5: ( EOF !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:497:10: EOF !
            {
            root_0 = (BaseNode)adaptor.nil();


            EOF13=(Atom)match(input,EOF,FOLLOW_EOF_in_pollenEOF993); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (java.lang.ClassCastException e) {

                //ignore: antlr bug

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pollenEOF"


    public static class stmtInjectionList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjectionList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:502:1: stmtInjectionList : ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) ;
    public final pollenParser.stmtInjectionList_return stmtInjectionList() throws RecognitionException {
        pollenParser.stmtInjectionList_return retval = new pollenParser.stmtInjectionList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtInjection_return stmtInjection14 =null;


        RewriteRuleSubtreeStream stream_stmtInjection=new RewriteRuleSubtreeStream(adaptor,"rule stmtInjection");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:5: ( ( stmtInjection )* -> ^( LIST[\"LIST\"] ( stmtInjection )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:6: ( stmtInjection )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:6: ( stmtInjection )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==INJECT) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:7: stmtInjection
            	    {
            	    pushFollow(FOLLOW_stmtInjection_in_stmtInjectionList1017);
            	    stmtInjection14=stmtInjection();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtInjection.add(stmtInjection14.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtInjection
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 503:23: -> ^( LIST[\"LIST\"] ( stmtInjection )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:26: ^( LIST[\"LIST\"] ( stmtInjection )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:503:51: ( stmtInjection )*
                while ( stream_stmtInjection.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtInjection.nextTree());

                }
                stream_stmtInjection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtInjectionList"


    public static class stmtPackage_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPackage"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:505:1: stmtPackage : ( 'package' qualName NLL -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) );
    public final pollenParser.stmtPackage_return stmtPackage() throws RecognitionException {
        pollenParser.stmtPackage_return retval = new pollenParser.stmtPackage_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal15=null;
        Atom NLL17=null;
        pollenParser.qualName_return qualName16 =null;


        BaseNode string_literal15_tree=null;
        BaseNode NLL17_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");

           String path = ParseUnit.current().getCurrPath();
           String pkg = ParseUnit.mkPackageName(path);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:510:5: ( 'package' qualName NLL -> ^( S_PACKAGE[pkg] qualName ) | -> ^( S_PACKAGE[pkg] ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==182) ) {
                alt4=1;
            }
            else if ( (LA4_0==EOF||LA4_0==INJECT||LA4_0==NLL||(LA4_0 >= 154 && LA4_0 <= 155)||LA4_0==162||LA4_0==168||LA4_0==172||(LA4_0 >= 177 && LA4_0 <= 178)||LA4_0==185) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:510:7: 'package' qualName NLL
                    {
                    string_literal15=(Atom)match(input,182,FOLLOW_182_in_stmtPackage1053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(string_literal15);


                    pushFollow(FOLLOW_qualName_in_stmtPackage1055);
                    qualName16=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName16.getTree());

                    NLL17=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtPackage1057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL17);


                    if ( state.backtracking==0 ) {
                        		int k = path.lastIndexOf(File.separator);
                    		int j = path.lastIndexOf(File.separator, k - 1);
                    		j = j == -1 ? 0 : j + 1;
                    		String qn = ((qualName16!=null?((BaseNode)qualName16.tree):null) != null) ? (qualName16!=null?((BaseNode)qualName16.tree):null).getText() : "";
                    		boolean isIntrinsic = qn.indexOf('_') != -1 ? qn.substring(0, qn.indexOf('_')).equals("pollen") : false;
                    		if (!isIntrinsic && !qn.equals(path.substring(j, k))) {
                    	                    CommonToken t = (CommonToken) ((BaseNode)(qualName16!=null?((BaseNode)qualName16.tree):null)).getToken();
                                        	        t.setLine(1);
                                                    ParseUnit.current().reportError(t, 
                    		         "The name in the package statement ('" + qn + "') must match the current directory name exactly ('"
                    		         + path.substring(j, k) + "')"); 
                    		}
                    		
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 525:11: -> ^( S_PACKAGE[pkg] qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:525:14: ^( S_PACKAGE[pkg] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:526:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 526:11: -> ^( S_PACKAGE[pkg] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:526:14: ^( S_PACKAGE[pkg] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        (BaseNode)adaptor.create(S_PACKAGE, pkg)
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtPackage"


    public static class stmtExport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtExport"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:528:1: stmtExport : 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) ;
    public final pollenParser.stmtExport_return stmtExport() throws RecognitionException {
        pollenParser.stmtExport_return retval = new pollenParser.stmtExport_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal18=null;
        pollenParser.qualName_return qualName19 =null;

        pollenParser.delim_return delim20 =null;


        BaseNode string_literal18_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:5: ( 'export' qualName delim -> ^( EXPORT[\"EXPORT\"] qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:9: 'export' qualName delim
            {
            string_literal18=(Atom)match(input,164,FOLLOW_164_in_stmtExport1114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal18);


            pushFollow(FOLLOW_qualName_in_stmtExport1116);
            qualName19=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName19.getTree());

            pushFollow(FOLLOW_delim_in_stmtExport1118);
            delim20=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim20.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 529:33: -> ^( EXPORT[\"EXPORT\"] qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:529:36: ^( EXPORT[\"EXPORT\"] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExportNode(EXPORT, "EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtExport"


    public static class classDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:531:1: classDefinition : 'class' IDENT extendsClause implementsClause braceOpenNLL classFeatureList[name] ( NLL )? braceCloseNLL -> ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause ) ;
    public final pollenParser.classDefinition_return classDefinition() throws RecognitionException {
        pollenParser.classDefinition_return retval = new pollenParser.classDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal21=null;
        Atom IDENT22=null;
        Atom NLL27=null;
        pollenParser.extendsClause_return extendsClause23 =null;

        pollenParser.implementsClause_return implementsClause24 =null;

        pollenParser.braceOpenNLL_return braceOpenNLL25 =null;

        pollenParser.classFeatureList_return classFeatureList26 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL28 =null;


        BaseNode string_literal21_tree=null;
        BaseNode IDENT22_tree=null;
        BaseNode NLL27_tree=null;
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_classFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule classFeatureList");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";
                String name = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:5: ( 'class' IDENT extendsClause implementsClause braceOpenNLL classFeatureList[name] ( NLL )? braceCloseNLL -> ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:540:10: 'class' IDENT extendsClause implementsClause braceOpenNLL classFeatureList[name] ( NLL )? braceCloseNLL
            {
            string_literal21=(Atom)match(input,154,FOLLOW_154_in_classDefinition1159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal21);


            IDENT22=(Atom)match(input,IDENT,FOLLOW_IDENT_in_classDefinition1161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT22);


            if ( state.backtracking==0 ) { 
                              currType.setTypeName((IDENT22!=null?IDENT22.getText():null)); currType.setUnitFlags(EnumSet.of(Flags.CLASS));
                              if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                              // if there is an 'as' name in the instantiating context, qualify the unit name 
                              qual = clientImport.getAs().getText();
                          }
                          name = qual.isEmpty() ? currType.getTypeName() : qual;
                      }

            pushFollow(FOLLOW_extendsClause_in_classDefinition1184);
            extendsClause23=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause23.getTree());

            pushFollow(FOLLOW_implementsClause_in_classDefinition1197);
            implementsClause24=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause24.getTree());

            pushFollow(FOLLOW_braceOpenNLL_in_classDefinition1210);
            braceOpenNLL25=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL25.getTree());

            pushFollow(FOLLOW_classFeatureList_in_classDefinition1212);
            classFeatureList26=classFeatureList(name);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFeatureList.add(classFeatureList26.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:551:48: ( NLL )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==NLL) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:551:48: NLL
                    {
                    NLL27=(Atom)match(input,NLL,FOLLOW_NLL_in_classDefinition1215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL27);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceCloseNLL_in_classDefinition1218);
            braceCloseNLL28=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL28.getTree());

            // AST REWRITE
            // elements: extendsClause, implementsClause, classFeatureList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 552:12: -> ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:552:15: ^( D_CLASS[\"D_CLASS\", getParseUnitFlags(), qual] IDENT classFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Class(D_CLASS, "D_CLASS", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_classFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                    popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classDefinition"


    public static class classFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:555:1: classFeatureList[String n] : ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy ) ;
    public final pollenParser.classFeatureList_return classFeatureList(String n) throws RecognitionException {
        pollenParser.classFeatureList_return retval = new pollenParser.classFeatureList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.classFeature_return classFeature29 =null;

        pollenParser.classHostCtor_return classHostCtor30 =null;

        pollenParser.classTargCtor_return classTargCtor31 =null;

        pollenParser.intrinsicUnitName_return intrinsicUnitName32 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy33 =null;

        pollenParser.intrinsicSleepWakeProxy_return intrinsicSleepWakeProxy34 =null;

        pollenParser.intrinsicDynamicMemoryProxy_return intrinsicDynamicMemoryProxy35 =null;


        RewriteRuleSubtreeStream stream_intrinsicUnitName=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicUnitName");
        RewriteRuleSubtreeStream stream_classTargCtor=new RewriteRuleSubtreeStream(adaptor,"rule classTargCtor");
        RewriteRuleSubtreeStream stream_intrinsicSleepWakeProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicSleepWakeProxy");
        RewriteRuleSubtreeStream stream_classFeature=new RewriteRuleSubtreeStream(adaptor,"rule classFeature");
        RewriteRuleSubtreeStream stream_intrinsicDynamicMemoryProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicDynamicMemoryProxy");
        RewriteRuleSubtreeStream stream_classHostCtor=new RewriteRuleSubtreeStream(adaptor,"rule classHostCtor");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");

          EnumSet<Flags> fh = EnumSet.noneOf(Flags.class);
          fh.add(Flags.CONSTRUCTOR); fh.add(Flags.HOST);
          EnumSet<Flags> ft = EnumSet.noneOf(Flags.class);
          ft.add(Flags.CONSTRUCTOR); 

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:5: ( ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:10: ( classFeature )* classHostCtor[fh] classTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:10: ( classFeature )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==IDENT||LA6_0==INJECT||LA6_0==135||LA6_0==150||LA6_0==152||LA6_0==154||LA6_0==156||LA6_0==162||LA6_0==169||(LA6_0 >= 173 && LA6_0 <= 175)||LA6_0==179||(LA6_0 >= 187 && LA6_0 <= 188)||LA6_0==190||(LA6_0 >= 194 && LA6_0 <= 197)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:562:10: classFeature
            	    {
            	    pushFollow(FOLLOW_classFeature_in_classFeatureList1293);
            	    classFeature29=classFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFeature.add(classFeature29.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            pushFollow(FOLLOW_classHostCtor_in_classFeatureList1296);
            classHostCtor30=classHostCtor(fh);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classHostCtor.add(classHostCtor30.getTree());

            pushFollow(FOLLOW_classTargCtor_in_classFeatureList1299);
            classTargCtor31=classTargCtor(ft);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classTargCtor.add(classTargCtor31.getTree());

            pushFollow(FOLLOW_intrinsicUnitName_in_classFeatureList1306);
            intrinsicUnitName32=intrinsicUnitName(n);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicUnitName.add(intrinsicUnitName32.getTree());

            pushFollow(FOLLOW_intrinsicPrintProxy_in_classFeatureList1309);
            intrinsicPrintProxy33=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy33.getTree());

            pushFollow(FOLLOW_intrinsicSleepWakeProxy_in_classFeatureList1311);
            intrinsicSleepWakeProxy34=intrinsicSleepWakeProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicSleepWakeProxy.add(intrinsicSleepWakeProxy34.getTree());

            pushFollow(FOLLOW_intrinsicDynamicMemoryProxy_in_classFeatureList1313);
            intrinsicDynamicMemoryProxy35=intrinsicDynamicMemoryProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicDynamicMemoryProxy.add(intrinsicDynamicMemoryProxy35.getTree());

            // AST REWRITE
            // elements: classFeature, intrinsicUnitName, intrinsicPrintProxy, classHostCtor, intrinsicDynamicMemoryProxy, classTargCtor, intrinsicSleepWakeProxy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 563:13: -> ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:563:16: ^( LIST[\"LIST\"] ( classFeature )* classHostCtor classTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:564:33: ( classFeature )*
                while ( stream_classFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFeature.nextTree());

                }
                stream_classFeature.reset();

                adaptor.addChild(root_1, stream_classHostCtor.nextTree());

                adaptor.addChild(root_1, stream_classTargCtor.nextTree());

                adaptor.addChild(root_1, stream_intrinsicUnitName.nextTree());

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_1, stream_intrinsicSleepWakeProxy.nextTree());

                adaptor.addChild(root_1, stream_intrinsicDynamicMemoryProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classFeatureList"


    public static class classFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:572:1: classFeature : ( ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor | ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition | ( ( 'public' )? 'enum' )=> enumDefinition | fieldDeclaration | classDefinition | injectionDecl );
    public final pollenParser.classFeature_return classFeature() throws RecognitionException {
        pollenParser.classFeature_return retval = new pollenParser.classFeature_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fcnDefinitionVoidOrCtor_return fcnDefinitionVoidOrCtor36 =null;

        pollenParser.fcnDefinition_return fcnDefinition37 =null;

        pollenParser.enumDefinition_return enumDefinition38 =null;

        pollenParser.fieldDeclaration_return fieldDeclaration39 =null;

        pollenParser.classDefinition_return classDefinition40 =null;

        pollenParser.injectionDecl_return injectionDecl41 =null;




            featureFlags = EnumSet.noneOf(Flags.class);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:5: ( ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor | ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition | ( ( 'public' )? 'enum' )=> enumDefinition | fieldDeclaration | classDefinition | injectionDecl )
            int alt7=6;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==187) ) {
                int LA7_1 = input.LA(2);

                if ( (synpred1_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (synpred3_pollen()) ) {
                    alt7=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==169) ) {
                int LA7_2 = input.LA(2);

                if ( (synpred1_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==150) ) {
                int LA7_3 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==152) ) {
                int LA7_4 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==175) ) {
                int LA7_5 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==173) ) {
                int LA7_6 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==174) ) {
                int LA7_7 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==188) ) {
                int LA7_8 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==190) ) {
                int LA7_9 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==196) ) {
                int LA7_10 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==194) ) {
                int LA7_11 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==195) ) {
                int LA7_12 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred1_pollen())) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==IDENT) ) {
                int LA7_13 = input.LA(2);

                if ( (synpred1_pollen()) ) {
                    alt7=1;
                }
                else if ( (synpred2_pollen()) ) {
                    alt7=2;
                }
                else if ( (true) ) {
                    alt7=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA7_0==162) && (synpred3_pollen())) {
                alt7=3;
            }
            else if ( (LA7_0==135||LA7_0==156||LA7_0==179||LA7_0==197) ) {
                alt7=4;
            }
            else if ( (LA7_0==154) ) {
                alt7=5;
            }
            else if ( (LA7_0==INJECT) ) {
                alt7=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:9: ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionVoidOrCtor_in_classFeature1615);
                    fcnDefinitionVoidOrCtor36=fcnDefinitionVoidOrCtor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionVoidOrCtor36.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:9: ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_classFeature1651);
                    fcnDefinition37=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition37.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:9: ( ( 'public' )? 'enum' )=> enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_classFeature1676);
                    enumDefinition38=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition38.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:579:9: fieldDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fieldDeclaration_in_classFeature1686);
                    fieldDeclaration39=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration39.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:580:9: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_classFeature1696);
                    classDefinition40=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition40.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:581:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_classFeature1706);
                    injectionDecl41=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl41.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classFeature"


    public static class classHostCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classHostCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:584:1: classHostCtor[EnumSet<Flags> fh] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.classHostCtor_return classHostCtor(EnumSet<Flags> fh) throws RecognitionException {
        pollenParser.classHostCtor_return retval = new pollenParser.classHostCtor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


            featureFlags = fh.clone();    
            if (!hasHostConstructor) {
                fh.add(Flags.PUBLIC);
                fh.add(Flags.CONSTRUCTOR);
            }
            

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:593:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==NLL) ) {
                int LA8_1 = input.LA(2);

                if ( ((!hasHostConstructor )) ) {
                    alt8=1;
                }
                else if ( (true) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA8_0==BRACE_CL) ) {
                int LA8_2 = input.LA(2);

                if ( ((!hasHostConstructor )) ) {
                    alt8=1;
                }
                else if ( (true) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:593:11: {...}?
                    {
                    if ( !((!hasHostConstructor )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "classHostCtor", "!hasHostConstructor ");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 593:35: -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:594:13: ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", fh)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:595:13: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_HOST] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:596:17: ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", fh)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:597:21: ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:597:46: ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_CLASS_HOST)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:599:13: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:600:13: ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", fh)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:601:17: ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:603:13: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:603:44: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:603:70: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:605:7: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 605:7: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (NoViableAltException ne) {

                          
                    	        if (ne.token.getText().equals("preset")) {
                    	        	ParseUnit.current().reportFailure("Preset initializers are only valid in compositions.");
                    	        }
                    	        else
                    	        	throw ne;
                    
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classHostCtor"


    public static class classTargCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classTargCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:615:1: classTargCtor[EnumSet<Flags> ft] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.classTargCtor_return classTargCtor(EnumSet<Flags> ft) throws RecognitionException {
        pollenParser.classTargCtor_return retval = new pollenParser.classTargCtor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


            featureFlags = ft.clone();
            if (!hasTargetConstructor) {
                ft.add(Flags.PUBLIC);
                ft.add(Flags.CONSTRUCTOR);
            }

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==NLL) ) {
                int LA9_1 = input.LA(2);

                if ( ((!hasTargetConstructor)) ) {
                    alt9=1;
                }
                else if ( (true) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA9_0==BRACE_CL) ) {
                int LA9_2 = input.LA(2);

                if ( ((!hasTargetConstructor)) ) {
                    alt9=1;
                }
                else if ( (true) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:623:10: {...}?
                    {
                    if ( !((!hasTargetConstructor)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "classTargCtor", "!hasTargetConstructor");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 623:35: -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:624:17: ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", ft)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:625:17: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) ) IDENT[ParseUnit.CTOR_CLASS_TARGET] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:626:21: ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", ft)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:25: ^( LIST[\"LIST\"] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:627:50: ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_CLASS_TARGET)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:629:17: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:630:17: ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", ft)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:631:21: ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:633:17: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:633:48: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:633:74: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:635:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 635:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classTargCtor"


    protected static class moduleDefinition_scope {
        Object moduleFeatureList;
    }
    protected Stack moduleDefinition_stack = new Stack();


    public static class moduleDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:638:1: moduleDefinition : 'module' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL moduleFeatureList[name] ( NLL )? braceCloseNLL -> ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause ) ;
    public final pollenParser.moduleDefinition_return moduleDefinition() throws RecognitionException {
        moduleDefinition_stack.push(new moduleDefinition_scope());
        pollenParser.moduleDefinition_return retval = new pollenParser.moduleDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal42=null;
        Atom IDENT43=null;
        Atom NLL46=null;
        Atom NLL49=null;
        pollenParser.extendsClause_return extendsClause44 =null;

        pollenParser.implementsClause_return implementsClause45 =null;

        pollenParser.braceOpenNLL_return braceOpenNLL47 =null;

        pollenParser.moduleFeatureList_return moduleFeatureList48 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL50 =null;


        BaseNode string_literal42_tree=null;
        BaseNode IDENT43_tree=null;
        BaseNode NLL46_tree=null;
        BaseNode NLL49_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_moduleFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeatureList");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";
                String name = "";
                hasHostConstructor = false;
                hasTargetConstructor = false;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:652:5: ( 'module' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL moduleFeatureList[name] ( NLL )? braceCloseNLL -> ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:652:10: 'module' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL moduleFeatureList[name] ( NLL )? braceCloseNLL
            {
            string_literal42=(Atom)match(input,178,FOLLOW_178_in_moduleDefinition2467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal42);


            IDENT43=(Atom)match(input,IDENT,FOLLOW_IDENT_in_moduleDefinition2469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT43);


            if ( state.backtracking==0 ) { 
                          currType.setTypeName((IDENT43!=null?IDENT43.getText():null)); currType.setUnitFlags(EnumSet.of(Flags.MODULE));
                          if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                              // if there is an 'as' name in the instantiating context, qualify the unit name 
                              qual = clientImport.getAs().getText();
                          }
                          name = qual.isEmpty() ? currType.getTypeName() : qual;
                      }

            pushFollow(FOLLOW_extendsClause_in_moduleDefinition2493);
            extendsClause44=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause44.getTree());

            pushFollow(FOLLOW_implementsClause_in_moduleDefinition2505);
            implementsClause45=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause45.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:13: ( NLL )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==NLL) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:14: NLL
                    {
                    NLL46=(Atom)match(input,NLL,FOLLOW_NLL_in_moduleDefinition2520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL46);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpenNLL_in_moduleDefinition2524);
            braceOpenNLL47=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL47.getTree());

            pushFollow(FOLLOW_moduleFeatureList_in_moduleDefinition2526);
            moduleFeatureList48=moduleFeatureList(name);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleFeatureList.add(moduleFeatureList48.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:57: ( NLL )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==NLL) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:663:58: NLL
                    {
                    NLL49=(Atom)match(input,NLL,FOLLOW_NLL_in_moduleDefinition2530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL49);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceCloseNLL_in_moduleDefinition2534);
            braceCloseNLL50=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL50.getTree());

            // AST REWRITE
            // elements: moduleFeatureList, implementsClause, IDENT, extendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 664:13: -> ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:664:16: ^( D_MODULE[\"D_MODULE\", getParseUnitFlags(), qual] IDENT moduleFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_MODULE, "D_MODULE", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_moduleFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            moduleDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "moduleDefinition"


    public static class moduleFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:671:1: moduleFeatureList[String n] : ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy ) ;
    public final pollenParser.moduleFeatureList_return moduleFeatureList(String n) throws RecognitionException {
        pollenParser.moduleFeatureList_return retval = new pollenParser.moduleFeatureList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.moduleFeature_return moduleFeature51 =null;

        pollenParser.moduleHostCtor_return moduleHostCtor52 =null;

        pollenParser.moduleTargCtor_return moduleTargCtor53 =null;

        pollenParser.intrinsicUnitName_return intrinsicUnitName54 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy55 =null;

        pollenParser.intrinsicSleepWakeProxy_return intrinsicSleepWakeProxy56 =null;

        pollenParser.intrinsicDynamicMemoryProxy_return intrinsicDynamicMemoryProxy57 =null;


        RewriteRuleSubtreeStream stream_intrinsicUnitName=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicUnitName");
        RewriteRuleSubtreeStream stream_moduleHostCtor=new RewriteRuleSubtreeStream(adaptor,"rule moduleHostCtor");
        RewriteRuleSubtreeStream stream_moduleTargCtor=new RewriteRuleSubtreeStream(adaptor,"rule moduleTargCtor");
        RewriteRuleSubtreeStream stream_intrinsicSleepWakeProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicSleepWakeProxy");
        RewriteRuleSubtreeStream stream_intrinsicDynamicMemoryProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicDynamicMemoryProxy");
        RewriteRuleSubtreeStream stream_moduleFeature=new RewriteRuleSubtreeStream(adaptor,"rule moduleFeature");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");

              EnumSet<Flags> fh = EnumSet.noneOf(Flags.class);
              fh.add(Flags.CONSTRUCTOR); fh.add(Flags.HOST);
              EnumSet<Flags> ft = EnumSet.noneOf(Flags.class);
              ft.add(Flags.CONSTRUCTOR); 

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:5: ( ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:10: ( moduleFeature )* moduleHostCtor[fh] moduleTargCtor[ft] intrinsicUnitName[n] intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:10: ( moduleFeature )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==IDENT||LA12_0==INJECT||LA12_0==135||LA12_0==150||LA12_0==152||LA12_0==154||LA12_0==156||LA12_0==162||LA12_0==169||(LA12_0 >= 173 && LA12_0 <= 175)||LA12_0==179||(LA12_0 >= 187 && LA12_0 <= 188)||LA12_0==190||(LA12_0 >= 194 && LA12_0 <= 197)) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:678:10: moduleFeature
            	    {
            	    pushFollow(FOLLOW_moduleFeature_in_moduleFeatureList2666);
            	    moduleFeature51=moduleFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_moduleFeature.add(moduleFeature51.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            pushFollow(FOLLOW_moduleHostCtor_in_moduleFeatureList2672);
            moduleHostCtor52=moduleHostCtor(fh);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleHostCtor.add(moduleHostCtor52.getTree());

            pushFollow(FOLLOW_moduleTargCtor_in_moduleFeatureList2675);
            moduleTargCtor53=moduleTargCtor(ft);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleTargCtor.add(moduleTargCtor53.getTree());

            pushFollow(FOLLOW_intrinsicUnitName_in_moduleFeatureList2678);
            intrinsicUnitName54=intrinsicUnitName(n);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicUnitName.add(intrinsicUnitName54.getTree());

            pushFollow(FOLLOW_intrinsicPrintProxy_in_moduleFeatureList2681);
            intrinsicPrintProxy55=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy55.getTree());

            pushFollow(FOLLOW_intrinsicSleepWakeProxy_in_moduleFeatureList2683);
            intrinsicSleepWakeProxy56=intrinsicSleepWakeProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicSleepWakeProxy.add(intrinsicSleepWakeProxy56.getTree());

            pushFollow(FOLLOW_intrinsicDynamicMemoryProxy_in_moduleFeatureList2685);
            intrinsicDynamicMemoryProxy57=intrinsicDynamicMemoryProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicDynamicMemoryProxy.add(intrinsicDynamicMemoryProxy57.getTree());

            // AST REWRITE
            // elements: intrinsicSleepWakeProxy, moduleTargCtor, moduleFeature, intrinsicUnitName, moduleHostCtor, intrinsicPrintProxy, intrinsicDynamicMemoryProxy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 679:13: -> ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:679:16: ^( LIST[\"LIST\"] ( moduleFeature )* moduleHostCtor moduleTargCtor intrinsicUnitName intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:680:17: ( moduleFeature )*
                while ( stream_moduleFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_moduleFeature.nextTree());

                }
                stream_moduleFeature.reset();

                adaptor.addChild(root_1, stream_moduleHostCtor.nextTree());

                adaptor.addChild(root_1, stream_moduleTargCtor.nextTree());

                adaptor.addChild(root_1, stream_intrinsicUnitName.nextTree());

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_1, stream_intrinsicSleepWakeProxy.nextTree());

                adaptor.addChild(root_1, stream_intrinsicDynamicMemoryProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "moduleFeatureList"


    public static class intrinsicPrintProxy_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicPrintProxy"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:688:1: intrinsicPrintProxy : ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] ) ) ) |{...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ) | -> NIL );
    public final pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy() throws RecognitionException {
        pollenParser.intrinsicPrintProxy_return retval = new pollenParser.intrinsicPrintProxy_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


          EnumSet flags;
          if (currType.getUnitFlags().contains(Flags.COMPOSITION)) 
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.HOST, Flags.PROTOCOL_MEMBER) ;
          else
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.PROTOCOL_MEMBER);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:5: ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] ) ) ) |{...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ) | -> NIL )
            int alt13=3;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==NLL) ) {
                int LA13_1 = input.LA(2);

                if ( ((ProcessUnits.doEmitPrintProxyViaDashP())) ) {
                    alt13=1;
                }
                else if ( ((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt13=2;
                }
                else if ( (true) ) {
                    alt13=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA13_0==BRACE_CL) ) {
                int LA13_2 = input.LA(2);

                if ( ((ProcessUnits.doEmitPrintProxyViaDashP())) ) {
                    alt13=1;
                }
                else if ( ((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt13=2;
                }
                else if ( (true) ) {
                    alt13=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:696:10: {...}?
                    {
                    if ( !((ProcessUnits.doEmitPrintProxyViaDashP())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicPrintProxy", "ProcessUnits.doEmitPrintProxyViaDashP()");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 697:13: -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:697:16: ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER)] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", EnumSet.of(Flags.INTRINSIC_VAR, Flags.BIND, Flags.PROTOCOL_MEMBER))
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:698:17: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROXY)
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:702:18: ^( E_TYP[\"E_TYP\"] ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Typ(E_TYP, "E_TYP")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:703:22: ^( T_USR[\"T_USR\", EnumSet.noneOf(Flags.class)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.noneOf(Flags.class))
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:707:13: {...}?
                    {
                    if ( !((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.PRINT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicPrintProxy", "ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.PRINT)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 708:13: -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:708:16: ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_PRINT_PROXY] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:709:17: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_PRINT_PROXY)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:714:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 714:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "intrinsicPrintProxy"


    public static class intrinsicSleepWakeProxy_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicSleepWakeProxy"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:716:1: intrinsicSleepWakeProxy : ({...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_SLEEP_WAKE_PROXY] ) | -> NIL );
    public final pollenParser.intrinsicSleepWakeProxy_return intrinsicSleepWakeProxy() throws RecognitionException {
        pollenParser.intrinsicSleepWakeProxy_return retval = new pollenParser.intrinsicSleepWakeProxy_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


          EnumSet flags;
          if (currType.getUnitFlags().contains(Flags.COMPOSITION)) 
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.HOST, Flags.PROTOCOL_MEMBER) ;
          else
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.PROTOCOL_MEMBER);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:5: ({...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_SLEEP_WAKE_PROXY] ) | -> NIL )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NLL) ) {
                int LA14_1 = input.LA(2);

                if ( ((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt14=1;
                }
                else if ( (true) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA14_0==BRACE_CL) ) {
                int LA14_2 = input.LA(2);

                if ( ((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt14=1;
                }
                else if ( (true) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:724:10: {...}?
                    {
                    if ( !((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicSleepWakeProxy", "ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.SLEEP_WAKE)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 725:13: -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_SLEEP_WAKE_PROXY] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:725:16: ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_SLEEP_WAKE_PROXY] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:726:17: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_SLEEP_WAKE_PROXY)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:731:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 731:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "intrinsicSleepWakeProxy"


    public static class intrinsicDynamicMemoryProxy_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicDynamicMemoryProxy"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:733:1: intrinsicDynamicMemoryProxy : ({...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_DYNAMIC_MEMORY_PROXY] ) | -> NIL );
    public final pollenParser.intrinsicDynamicMemoryProxy_return intrinsicDynamicMemoryProxy() throws RecognitionException {
        pollenParser.intrinsicDynamicMemoryProxy_return retval = new pollenParser.intrinsicDynamicMemoryProxy_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


          EnumSet flags;
          if (currType.getUnitFlags().contains(Flags.COMPOSITION)) 
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.HOST, Flags.PROTOCOL_MEMBER) ;
          else
              flags = EnumSet.of(Flags.INTRINSIC_VAR, Flags.PROTOCOL_MEMBER);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:741:5: ({...}? -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_DYNAMIC_MEMORY_PROXY] ) | -> NIL )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NLL) ) {
                int LA15_1 = input.LA(2);

                if ( ((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt15=1;
                }
                else if ( (true) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA15_0==BRACE_CL) ) {
                int LA15_2 = input.LA(2);

                if ( ((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt15=1;
                }
                else if ( (true) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:741:10: {...}?
                    {
                    if ( !((ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicDynamicMemoryProxy", "ProcessUnits.doEmitProxyViaBind(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 742:13: -> ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_DYNAMIC_MEMORY_PROXY] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:742:16: ^( D_VAR[\"D_VAR\", flags] ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] ) IDENT[ParseUnit.INTRINSIC_DYNAMIC_MEMORY_PROXY] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:743:17: ^( T_USR[\"T_USR\", EnumSet.of(Flags.INTRINSIC_VAR)] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_DYNAMIC_MEMORY_PROXY)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:748:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 748:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "intrinsicDynamicMemoryProxy"


    public static class intrinsicUnitName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intrinsicUnitName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:754:1: intrinsicUnitName[String n] : ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) ) | -> NIL );
    public final pollenParser.intrinsicUnitName_return intrinsicUnitName(String n) throws RecognitionException {
        pollenParser.intrinsicUnitName_return retval = new pollenParser.intrinsicUnitName_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:755:5: ({...}? -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) ) | -> NIL )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==NLL) ) {
                int LA16_1 = input.LA(2);

                if ( ((true)) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA16_0==BRACE_CL) ) {
                int LA16_2 = input.LA(2);

                if ( ((true)) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:755:10: {...}?
                    {
                    if ( !((true)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "intrinsicUnitName", "true");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 755:18: -> ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:755:21: ^( D_VAR[\"D_VAR\", EnumSet.of(Flags.INTRINSIC_VAR)] ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] ) IDENT[ParseUnit.INTRINSIC_UNITVAR] ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:756:21: ^( T_STD[\"T_STD\", EnumSet.of(Flags.INTRINSIC_VAR)] QNAME[\"string\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.of(Flags.INTRINSIC_VAR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(QNAME, "string")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.INTRINSIC_UNITVAR)
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:760:21: ^( E_CONST[\"E_CONST\", EnumSet.of(LitFlags.STR)] STRING[\"\\\"\" + n + \"\\\"\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", EnumSet.of(LitFlags.STR))
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(STRING, "\"" + n + "\"")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:764:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 764:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "intrinsicUnitName"


    public static class moduleHostCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleHostCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:766:1: moduleHostCtor[EnumSet<Flags> fh] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.moduleHostCtor_return moduleHostCtor(EnumSet<Flags> fh) throws RecognitionException {
        pollenParser.moduleHostCtor_return retval = new pollenParser.moduleHostCtor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


            featureFlags = fh.clone();

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:770:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==NLL) ) {
                int LA17_1 = input.LA(2);

                if ( ((!hasHostConstructor )) ) {
                    alt17=1;
                }
                else if ( (true) ) {
                    alt17=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA17_0==BRACE_CL) ) {
                int LA17_2 = input.LA(2);

                if ( ((!hasHostConstructor )) ) {
                    alt17=1;
                }
                else if ( (true) ) {
                    alt17=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:770:23: {...}?
                    {
                    if ( !((!hasHostConstructor )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "moduleHostCtor", "!hasHostConstructor ");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 770:47: -> ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:771:25: ^( D_FCN_DEF[\"D_FCN_DEF\", fh] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", fh)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:772:25: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_HOST] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:773:29: ^( T_LST[\"T_LST\", fh] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", fh)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:774:33: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", fh] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:774:58: ^( T_STD[\"T_STD\", fh] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", fh)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_MODULE_HOST)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:776:25: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:777:25: ^( D_FORMAL[\"D_FORMAL\", fh] ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", fh)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:778:29: ^( T_USR[\"T_USR\", fh] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", fh)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:25: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:56: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:779:82: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:781:7: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 781:7: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (NoViableAltException ne) {

                          
                    	        if (ne.token.getText().equals("preset")) {
                    	        	ParseUnit.current().reportFailure("Preset initializers are only valid in compositions.");
                    	        }
                    	        else
                    	        	throw ne;
                    
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "moduleHostCtor"


    public static class moduleTargCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleTargCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:791:1: moduleTargCtor[EnumSet<Flags> ft] : ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL );
    public final pollenParser.moduleTargCtor_return moduleTargCtor(EnumSet<Flags> ft) throws RecognitionException {
        pollenParser.moduleTargCtor_return retval = new pollenParser.moduleTargCtor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;


            featureFlags = ft.clone();

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:795:5: ({...}? -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) ) | -> NIL )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==NLL) ) {
                int LA18_1 = input.LA(2);

                if ( ((!hasTargetConstructor)) ) {
                    alt18=1;
                }
                else if ( (true) ) {
                    alt18=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 18, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA18_0==BRACE_CL) ) {
                int LA18_2 = input.LA(2);

                if ( ((!hasTargetConstructor)) ) {
                    alt18=1;
                }
                else if ( (true) ) {
                    alt18=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 18, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:795:22: {...}?
                    {
                    if ( !((!hasTargetConstructor)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "moduleTargCtor", "!hasTargetConstructor");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 795:47: -> ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:796:26: ^( D_FCN_DEF[\"D_FCN_DEF\", ft] ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] ) ^( LIST[\"LIST\"] ) ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", ft)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:797:25: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) ) IDENT[ParseUnit.CTOR_MODULE_TARGET] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:798:29: ^( T_LST[\"T_LST\", ft] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", ft)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:33: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", ft] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:799:58: ^( T_STD[\"T_STD\", ft] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", ft)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.CTOR_MODULE_TARGET)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:801:25: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:802:25: ^( D_FORMAL[\"D_FORMAL\", ft] ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", ft)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:803:29: ^( T_USR[\"T_USR\", ft] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", ft)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:25: ^( FCNBODY[\"FCNBODY\"] ^( LIST[\"LIST\"] ) ^( LIST[\"LIST\"] ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new BodyNode(FCNBODY, "FCNBODY")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:56: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:805:82: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:807:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 807:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "moduleTargCtor"


    protected static class moduleFeature_scope {
        boolean publicEnum;
    }
    protected Stack moduleFeature_stack = new Stack();


    public static class moduleFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "moduleFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:809:1: moduleFeature : ( ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor | ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition | ( 'new' | 'host' 'new' )=> varDeclarationNew | varDeclaration | ( ( 'public' )? 'enum' )=> enumDefinition | classDefinition | injectionDecl );
    public final pollenParser.moduleFeature_return moduleFeature() throws RecognitionException {
        moduleFeature_stack.push(new moduleFeature_scope());
        pollenParser.moduleFeature_return retval = new pollenParser.moduleFeature_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fcnDefinitionVoidOrCtor_return fcnDefinitionVoidOrCtor58 =null;

        pollenParser.fcnDefinition_return fcnDefinition59 =null;

        pollenParser.varDeclarationNew_return varDeclarationNew60 =null;

        pollenParser.varDeclaration_return varDeclaration61 =null;

        pollenParser.enumDefinition_return enumDefinition62 =null;

        pollenParser.classDefinition_return classDefinition63 =null;

        pollenParser.injectionDecl_return injectionDecl64 =null;




            featureFlags = EnumSet.noneOf(Flags.class);    
            ((moduleFeature_scope)moduleFeature_stack.peek()).publicEnum = false;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:8: ( ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor | ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition | ( 'new' | 'host' 'new' )=> varDeclarationNew | varDeclaration | ( ( 'public' )? 'enum' )=> enumDefinition | classDefinition | injectionDecl )
            int alt19=7;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==187) ) {
                int LA19_1 = input.LA(2);

                if ( (synpred4_pollen()) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (synpred7_pollen()) ) {
                    alt19=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==169) ) {
                int LA19_2 = input.LA(2);

                if ( (synpred4_pollen()) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (synpred6_pollen()) ) {
                    alt19=3;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==150) ) {
                int LA19_3 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==152) ) {
                int LA19_4 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==175) ) {
                int LA19_5 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==173) ) {
                int LA19_6 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==174) ) {
                int LA19_7 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==188) ) {
                int LA19_8 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==190) ) {
                int LA19_9 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==196) ) {
                int LA19_10 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==194) ) {
                int LA19_11 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==195) ) {
                int LA19_12 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred4_pollen())) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==IDENT) ) {
                int LA19_13 = input.LA(2);

                if ( (synpred4_pollen()) ) {
                    alt19=1;
                }
                else if ( (synpred5_pollen()) ) {
                    alt19=2;
                }
                else if ( (true) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==179) && (synpred6_pollen())) {
                alt19=3;
            }
            else if ( (LA19_0==135||LA19_0==156||LA19_0==197) ) {
                alt19=4;
            }
            else if ( (LA19_0==162) && (synpred7_pollen())) {
                alt19=5;
            }
            else if ( (LA19_0==154) ) {
                alt19=6;
            }
            else if ( (LA19_0==INJECT) ) {
                alt19=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:12: ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionVoidOrCtor_in_moduleFeature5066);
                    fcnDefinitionVoidOrCtor58=fcnDefinitionVoidOrCtor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionVoidOrCtor58.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:12: ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_moduleFeature5105);
                    fcnDefinition59=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition59.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:12: ( 'new' | 'host' 'new' )=> varDeclarationNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclarationNew_in_moduleFeature5130);
                    varDeclarationNew60=varDeclarationNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclarationNew60.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:820:12: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_moduleFeature5143);
                    varDeclaration61=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration61.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:12: ( ( 'public' )? 'enum' )=> enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_moduleFeature5168);
                    enumDefinition62=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition62.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:822:12: classDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_moduleFeature5181);
                    classDefinition63=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition63.getTree());

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:823:12: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_moduleFeature5195);
                    injectionDecl64=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl64.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            moduleFeature_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "moduleFeature"


    public static class enumUnitDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumUnitDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:827:2: enumUnitDefinition : 'enum' ! enumBodyDefinition ;
    public final pollenParser.enumUnitDefinition_return enumUnitDefinition() throws RecognitionException {
        pollenParser.enumUnitDefinition_return retval = new pollenParser.enumUnitDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal65=null;
        pollenParser.enumBodyDefinition_return enumBodyDefinition66 =null;


        BaseNode string_literal65_tree=null;

            
             ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum = false;
         
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:833:6: ( 'enum' ! enumBodyDefinition )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:833:11: 'enum' ! enumBodyDefinition
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal65=(Atom)match(input,162,FOLLOW_162_in_enumUnitDefinition5282); if (state.failed) return retval;

            pushFollow(FOLLOW_enumBodyDefinition_in_enumUnitDefinition5285);
            enumBodyDefinition66=enumBodyDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDefinition66.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enumUnitDefinition"


    public static class enumDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:835:1: enumDefinition : ( 'public' !)? 'enum' ! enumBodyDefinition ;
    public final pollenParser.enumDefinition_return enumDefinition() throws RecognitionException {
        pollenParser.enumDefinition_return retval = new pollenParser.enumDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal67=null;
        Atom string_literal68=null;
        pollenParser.enumBodyDefinition_return enumBodyDefinition69 =null;


        BaseNode string_literal67_tree=null;
        BaseNode string_literal68_tree=null;

            
             ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum = false;
         
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:5: ( ( 'public' !)? 'enum' ! enumBodyDefinition )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:10: ( 'public' !)? 'enum' ! enumBodyDefinition
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:10: ( 'public' !)?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==187) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:839:11: 'public' !
                    {
                    string_literal67=(Atom)match(input,187,FOLLOW_187_in_enumDefinition5310); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum = true; }

                    }
                    break;

            }


            string_literal68=(Atom)match(input,162,FOLLOW_162_in_enumDefinition5327); if (state.failed) return retval;

            pushFollow(FOLLOW_enumBodyDefinition_in_enumDefinition5338);
            enumBodyDefinition69=enumBodyDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDefinition69.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enumDefinition"


    protected static class enumBodyDefinition_scope {
        int val;
    }
    protected Stack enumBodyDefinition_stack = new Stack();


    public static class enumBodyDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumBodyDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:843:1: enumBodyDefinition : ( IDENT braceOpenNLL enumList braceCloseNLL ) -> ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList ) ;
    public final pollenParser.enumBodyDefinition_return enumBodyDefinition() throws RecognitionException {
        enumBodyDefinition_stack.push(new enumBodyDefinition_scope());
        pollenParser.enumBodyDefinition_return retval = new pollenParser.enumBodyDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT70=null;
        pollenParser.braceOpenNLL_return braceOpenNLL71 =null;

        pollenParser.enumList_return enumList72 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL73 =null;


        BaseNode IDENT70_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_enumList=new RewriteRuleSubtreeStream(adaptor,"rule enumList");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");

                ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = -1;
                pushType();
                String qual = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:5: ( ( IDENT braceOpenNLL enumList braceCloseNLL ) -> ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:16: ( IDENT braceOpenNLL enumList braceCloseNLL )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:16: ( IDENT braceOpenNLL enumList braceCloseNLL )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:855:17: IDENT braceOpenNLL enumList braceCloseNLL
            {
            IDENT70=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumBodyDefinition5376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT70);


            if ( state.backtracking==0 ) {           currType.setTypeName((IDENT70!=null?IDENT70.getText():null)); 
                                currType.setUnitFlags(EnumSet.of(Flags.ENUM));
                                if (typeInfoList.size() == 1 && !(currType.getUnitFlags().contains(Flags.PUBLIC))) {
                                    // not nested, must be public
                                    currType.setUnitFlags(EnumSet.of(Flags.PUBLIC));
                                }    
                                 if (((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).publicEnum) {
                                    currType.setUnitFlags(EnumSet.of(Flags.PUBLIC));
                                }                                       
                        if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                                           // if there is an 'as' name in the instantiating context, qualify the unit name 
                                           qual = clientImport.getAs().getText();
                                         }
                    }

            pushFollow(FOLLOW_braceOpenNLL_in_enumBodyDefinition5397);
            braceOpenNLL71=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL71.getTree());

            pushFollow(FOLLOW_enumList_in_enumBodyDefinition5399);
            enumList72=enumList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumList.add(enumList72.getTree());

            pushFollow(FOLLOW_braceCloseNLL_in_enumBodyDefinition5401);
            braceCloseNLL73=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL73.getTree());

            }


            // AST REWRITE
            // elements: IDENT, enumList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 871:9: -> ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:871:12: ^( D_ENUM[\"D_ENUM\", getParseUnitFlags(), qual] IDENT enumList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_ENUM, "D_ENUM", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_enumList.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            enumBodyDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "enumBodyDefinition"


    public static class enumList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:874:1: enumList : enumElement ( ',' ( NLL )? enumElement )* ( NLL )? -> ^( LIST[\"LIST\"] ( enumElement )+ ) ;
    public final pollenParser.enumList_return enumList() throws RecognitionException {
        pollenParser.enumList_return retval = new pollenParser.enumList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal75=null;
        Atom NLL76=null;
        Atom NLL78=null;
        pollenParser.enumElement_return enumElement74 =null;

        pollenParser.enumElement_return enumElement77 =null;


        BaseNode char_literal75_tree=null;
        BaseNode NLL76_tree=null;
        BaseNode NLL78_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_enumElement=new RewriteRuleSubtreeStream(adaptor,"rule enumElement");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:875:5: ( enumElement ( ',' ( NLL )? enumElement )* ( NLL )? -> ^( LIST[\"LIST\"] ( enumElement )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:875:10: enumElement ( ',' ( NLL )? enumElement )* ( NLL )?
            {
            pushFollow(FOLLOW_enumElement_in_enumList5461);
            enumElement74=enumElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumElement.add(enumElement74.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:13: ( ',' ( NLL )? enumElement )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==138) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:14: ',' ( NLL )? enumElement
            	    {
            	    char_literal75=(Atom)match(input,138,FOLLOW_138_in_enumList5477); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal75);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:18: ( NLL )?
            	    int alt21=2;
            	    int LA21_0 = input.LA(1);

            	    if ( (LA21_0==NLL) ) {
            	        alt21=1;
            	    }
            	    switch (alt21) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:19: NLL
            	            {
            	            NLL76=(Atom)match(input,NLL,FOLLOW_NLL_in_enumList5480); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NLL.add(NLL76);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_enumElement_in_enumList5484);
            	    enumElement77=enumElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumElement.add(enumElement77.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:39: ( NLL )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==NLL) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:39: NLL
                    {
                    NLL78=(Atom)match(input,NLL,FOLLOW_NLL_in_enumList5488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL78);


                    }
                    break;

            }


            // AST REWRITE
            // elements: enumElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 876:44: -> ^( LIST[\"LIST\"] ( enumElement )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:876:47: ^( LIST[\"LIST\"] ( enumElement )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_enumElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enumList"


    public static class enumElement_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumElement"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:881:1: enumElement : ( ( IDENT ASSIGN )=> IDENT ASSIGN enumVal -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal ) | IDENT -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] ) );
    public final pollenParser.enumElement_return enumElement() throws RecognitionException {
        pollenParser.enumElement_return retval = new pollenParser.enumElement_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT79=null;
        Atom ASSIGN80=null;
        Atom IDENT82=null;
        pollenParser.enumVal_return enumVal81 =null;


        BaseNode IDENT79_tree=null;
        BaseNode ASSIGN80_tree=null;
        BaseNode IDENT82_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_enumVal=new RewriteRuleSubtreeStream(adaptor,"rule enumVal");

            String ctext = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:885:5: ( ( IDENT ASSIGN )=> IDENT ASSIGN enumVal -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal ) | IDENT -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==IDENT) ) {
                int LA24_1 = input.LA(2);

                if ( (synpred8_pollen()) ) {
                    alt24=1;
                }
                else if ( (true) ) {
                    alt24=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:885:11: ( IDENT ASSIGN )=> IDENT ASSIGN enumVal
                    {
                    IDENT79=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement5538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT79);


                    ASSIGN80=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_enumElement5540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN80);


                    pushFollow(FOLLOW_enumVal_in_enumElement5542);
                    enumVal81=enumVal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumVal.add(enumVal81.getTree());

                    // AST REWRITE
                    // elements: IDENT, enumVal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 886:9: -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:886:12: ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT enumVal )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", getParseUnitFlags())
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_enumVal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:887:10: IDENT
                    {
                    IDENT82=(Atom)match(input,IDENT,FOLLOW_IDENT_in_enumElement5577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT82);


                    if ( state.backtracking==0 ) { 
                                  if (((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val == -1) ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = 0; 
                                  ctext = Integer.toString(((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val++);
                                }

                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 892:13: -> ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:892:16: ^( D_ENUMVAL[\"D_ENUMVAL\", getParseUnitFlags()] IDENT INT_LIT[ctext] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.EnumVal(D_ENUMVAL, "D_ENUMVAL", getParseUnitFlags())
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(INT_LIT, ctext)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enumElement"


    public static class enumVal_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enumVal"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:894:1: enumVal : ( INT_LIT | OCT_LIT | HEX_LIT );
    public final pollenParser.enumVal_return enumVal() throws RecognitionException {
        pollenParser.enumVal_return retval = new pollenParser.enumVal_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom INT_LIT83=null;
        Atom OCT_LIT84=null;
        Atom HEX_LIT85=null;

        BaseNode INT_LIT83_tree=null;
        BaseNode OCT_LIT84_tree=null;
        BaseNode HEX_LIT85_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:5: ( INT_LIT | OCT_LIT | HEX_LIT )
            int alt25=3;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt25=1;
                }
                break;
            case OCT_LIT:
                {
                alt25=2;
                }
                break;
            case HEX_LIT:
                {
                alt25=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }

            switch (alt25) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:898:10: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT83=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_enumVal5648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT83_tree = 
                    (BaseNode)adaptor.create(INT_LIT83)
                    ;
                    adaptor.addChild(root_0, INT_LIT83_tree);
                    }

                    if ( state.backtracking==0 ) {   ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = decode(INT_LIT83);  }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:899:10: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT84=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_enumVal5662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT84_tree = 
                    (BaseNode)adaptor.create(OCT_LIT84)
                    ;
                    adaptor.addChild(root_0, OCT_LIT84_tree);
                    }

                    if ( state.backtracking==0 ) {   ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = decode(OCT_LIT84);  }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:900:10: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT85=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_enumVal5676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT85_tree = 
                    (BaseNode)adaptor.create(HEX_LIT85)
                    ;
                    adaptor.addChild(root_0, HEX_LIT85_tree);
                    }

                    if ( state.backtracking==0 ) {   ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val = decode(HEX_LIT85);  }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                ((enumBodyDefinition_scope)enumBodyDefinition_stack.peek()).val++; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enumVal"


    public static class protocolDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:902:1: protocolDefinition : 'protocol' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL protocolFeatureList ( NLL )? braceCloseNLL -> ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause ) ;
    public final pollenParser.protocolDefinition_return protocolDefinition() throws RecognitionException {
        pollenParser.protocolDefinition_return retval = new pollenParser.protocolDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal86=null;
        Atom IDENT87=null;
        Atom NLL90=null;
        Atom NLL93=null;
        pollenParser.extendsClause_return extendsClause88 =null;

        pollenParser.implementsClause_return implementsClause89 =null;

        pollenParser.braceOpenNLL_return braceOpenNLL91 =null;

        pollenParser.protocolFeatureList_return protocolFeatureList92 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL94 =null;


        BaseNode string_literal86_tree=null;
        BaseNode IDENT87_tree=null;
        BaseNode NLL90_tree=null;
        BaseNode NLL93_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_protocolFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeatureList");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:5: ( 'protocol' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL protocolFeatureList ( NLL )? braceCloseNLL -> ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:910:10: 'protocol' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL protocolFeatureList ( NLL )? braceCloseNLL
            {
            string_literal86=(Atom)match(input,185,FOLLOW_185_in_protocolDefinition5706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal86);


            IDENT87=(Atom)match(input,IDENT,FOLLOW_IDENT_in_protocolDefinition5708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT87);


            if ( state.backtracking==0 ) { currType.setTypeName((IDENT87!=null?IDENT87.getText():null)); currType.setUnitFlags(EnumSet.of(Flags.PROTOCOL));
                        if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                              // if there is an 'as' name in the instantiating context, qualify the unit name 
                                  qual = clientImport.getAs().getText();
                              }
                    }

            pushFollow(FOLLOW_extendsClause_in_protocolDefinition5728);
            extendsClause88=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause88.getTree());

            pushFollow(FOLLOW_implementsClause_in_protocolDefinition5738);
            implementsClause89=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause89.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:919:9: ( NLL )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==NLL) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:919:10: NLL
                    {
                    NLL90=(Atom)match(input,NLL,FOLLOW_NLL_in_protocolDefinition5749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL90);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpenNLL_in_protocolDefinition5753);
            braceOpenNLL91=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL91.getTree());

            pushFollow(FOLLOW_protocolFeatureList_in_protocolDefinition5755);
            protocolFeatureList92=protocolFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocolFeatureList.add(protocolFeatureList92.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:919:49: ( NLL )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==NLL) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:919:50: NLL
                    {
                    NLL93=(Atom)match(input,NLL,FOLLOW_NLL_in_protocolDefinition5758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL93);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceCloseNLL_in_protocolDefinition5762);
            braceCloseNLL94=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL94.getTree());

            // AST REWRITE
            // elements: IDENT, protocolFeatureList, implementsClause, extendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 920:9: -> ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:920:12: ^( D_PROTOCOL[\"D_PROTOCOL\", getParseUnitFlags(), qual] IDENT protocolFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_PROTOCOL, "D_PROTOCOL", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_protocolFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocolDefinition"


    public static class protocolFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:923:1: protocolFeatureList : ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) ;
    public final pollenParser.protocolFeatureList_return protocolFeatureList() throws RecognitionException {
        pollenParser.protocolFeatureList_return retval = new pollenParser.protocolFeatureList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.protocolFeature_return protocolFeature95 =null;


        RewriteRuleSubtreeStream stream_protocolFeature=new RewriteRuleSubtreeStream(adaptor,"rule protocolFeature");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:924:5: ( ( protocolFeature )* -> ^( LIST[\"LIST\"] ( protocolFeature )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:924:10: ( protocolFeature )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:924:10: ( protocolFeature )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==IDENT||LA28_0==INJECT||LA28_0==150||LA28_0==152||LA28_0==162||LA28_0==169||(LA28_0 >= 173 && LA28_0 <= 175)||(LA28_0 >= 187 && LA28_0 <= 188)||LA28_0==190||(LA28_0 >= 194 && LA28_0 <= 196)) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:924:10: protocolFeature
            	    {
            	    pushFollow(FOLLOW_protocolFeature_in_protocolFeatureList5826);
            	    protocolFeature95=protocolFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protocolFeature.add(protocolFeature95.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // AST REWRITE
            // elements: protocolFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 924:30: -> ^( LIST[\"LIST\"] ( protocolFeature )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:924:33: ^( LIST[\"LIST\"] ( protocolFeature )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:924:58: ( protocolFeature )*
                while ( stream_protocolFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_protocolFeature.nextTree());

                }
                stream_protocolFeature.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocolFeatureList"


    public static class protocolFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocolFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:926:1: protocolFeature : ( ( ( 'public' )? 'enum' )=> enumDefinition | ( fcnAttr fcnType formalParameterList delim )=> fcnDeclarationVoidOrCtor | fcnDeclaration | injectionDecl );
    public final pollenParser.protocolFeature_return protocolFeature() throws RecognitionException {
        pollenParser.protocolFeature_return retval = new pollenParser.protocolFeature_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.enumDefinition_return enumDefinition96 =null;

        pollenParser.fcnDeclarationVoidOrCtor_return fcnDeclarationVoidOrCtor97 =null;

        pollenParser.fcnDeclaration_return fcnDeclaration98 =null;

        pollenParser.injectionDecl_return injectionDecl99 =null;




            featureFlags = EnumSet.noneOf(Flags.class);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:5: ( ( ( 'public' )? 'enum' )=> enumDefinition | ( fcnAttr fcnType formalParameterList delim )=> fcnDeclarationVoidOrCtor | fcnDeclaration | injectionDecl )
            int alt29=4;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==187) ) {
                int LA29_1 = input.LA(2);

                if ( (synpred9_pollen()) ) {
                    alt29=1;
                }
                else if ( (synpred10_pollen()) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==162) && (synpred9_pollen())) {
                alt29=1;
            }
            else if ( (LA29_0==169) ) {
                int LA29_3 = input.LA(2);

                if ( (synpred10_pollen()) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==150) ) {
                int LA29_4 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==152) ) {
                int LA29_5 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==175) ) {
                int LA29_6 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==173) ) {
                int LA29_7 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==174) ) {
                int LA29_8 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==188) ) {
                int LA29_9 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==190) ) {
                int LA29_10 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==196) ) {
                int LA29_11 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==194) ) {
                int LA29_12 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==195) ) {
                int LA29_13 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred10_pollen())) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==IDENT) ) {
                int LA29_14 = input.LA(2);

                if ( (synpred10_pollen()) ) {
                    alt29=2;
                }
                else if ( (true) ) {
                    alt29=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA29_0==INJECT) ) {
                alt29=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:9: ( ( 'public' )? 'enum' )=> enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_protocolFeature5877);
                    enumDefinition96=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition96.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:931:9: ( fcnAttr fcnType formalParameterList delim )=> fcnDeclarationVoidOrCtor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDeclarationVoidOrCtor_in_protocolFeature5899);
                    fcnDeclarationVoidOrCtor97=fcnDeclarationVoidOrCtor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDeclarationVoidOrCtor97.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:932:9: fcnDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDeclaration_in_protocolFeature5909);
                    fcnDeclaration98=fcnDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDeclaration98.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:933:9: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_protocolFeature5920);
                    injectionDecl99=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl99.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocolFeature"


    public static class compositionDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:935:1: compositionDefinition : 'composition' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL compositionFeatureList ( NLL )? braceCloseNLL -> ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause ) ;
    public final pollenParser.compositionDefinition_return compositionDefinition() throws RecognitionException {
        pollenParser.compositionDefinition_return retval = new pollenParser.compositionDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal100=null;
        Atom IDENT101=null;
        Atom NLL104=null;
        Atom NLL107=null;
        pollenParser.extendsClause_return extendsClause102 =null;

        pollenParser.implementsClause_return implementsClause103 =null;

        pollenParser.braceOpenNLL_return braceOpenNLL105 =null;

        pollenParser.compositionFeatureList_return compositionFeatureList106 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL108 =null;


        BaseNode string_literal100_tree=null;
        BaseNode IDENT101_tree=null;
        BaseNode NLL104_tree=null;
        BaseNode NLL107_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        RewriteRuleSubtreeStream stream_extendsClause=new RewriteRuleSubtreeStream(adaptor,"rule extendsClause");
        RewriteRuleSubtreeStream stream_compositionFeatureList=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeatureList");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");

                pushType();
                String qual = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:5: ( 'composition' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL compositionFeatureList ( NLL )? braceCloseNLL -> ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:943:10: 'composition' IDENT extendsClause implementsClause ( NLL )? braceOpenNLL compositionFeatureList ( NLL )? braceCloseNLL
            {
            string_literal100=(Atom)match(input,155,FOLLOW_155_in_compositionDefinition5947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal100);


            IDENT101=(Atom)match(input,IDENT,FOLLOW_IDENT_in_compositionDefinition5949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT101);


            if ( state.backtracking==0 ) { 
                      currType.setTypeName((IDENT101!=null?IDENT101.getText():null)); 
                      currType.setUnitFlags(EnumSet.of(Flags.COMPOSITION));
                      if (isMetaInstance && clientImport.getAs() != null && !clientImport.getAs().getText().equals("NIL")) {
                          // if there is an 'as' name in the instantiating context, qualify the unit name 
                          qual = clientImport.getAs().getText();
                      }          
                    }

            pushFollow(FOLLOW_extendsClause_in_compositionDefinition5969);
            extendsClause102=extendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extendsClause.add(extendsClause102.getTree());

            pushFollow(FOLLOW_implementsClause_in_compositionDefinition5981);
            implementsClause103=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause103.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:954:9: ( NLL )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==NLL) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:954:10: NLL
                    {
                    NLL104=(Atom)match(input,NLL,FOLLOW_NLL_in_compositionDefinition5992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL104);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpenNLL_in_compositionDefinition5996);
            braceOpenNLL105=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL105.getTree());

            pushFollow(FOLLOW_compositionFeatureList_in_compositionDefinition5998);
            compositionFeatureList106=compositionFeatureList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compositionFeatureList.add(compositionFeatureList106.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:954:52: ( NLL )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==NLL) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:954:53: NLL
                    {
                    NLL107=(Atom)match(input,NLL,FOLLOW_NLL_in_compositionDefinition6001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL107);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceCloseNLL_in_compositionDefinition6005);
            braceCloseNLL108=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL108.getTree());

            // AST REWRITE
            // elements: extendsClause, IDENT, implementsClause, compositionFeatureList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 955:13: -> ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:955:16: ^( D_COMPOSITION[\"D_COMPOSITION\", getParseUnitFlags(), qual] IDENT compositionFeatureList extendsClause implementsClause )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Usr(D_COMPOSITION, "D_COMPOSITION", getParseUnitFlags(), qual)
                , root_1);

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_compositionFeatureList.nextTree());

                adaptor.addChild(root_1, stream_extendsClause.nextTree());

                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                adaptor.addChild(root_1, ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                popType();
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compositionDefinition"


    public static class compositionFeatureList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeatureList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:958:1: compositionFeatureList : ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy -> ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy ) ;
    public final pollenParser.compositionFeatureList_return compositionFeatureList() throws RecognitionException {
        pollenParser.compositionFeatureList_return retval = new pollenParser.compositionFeatureList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.compositionFeature_return compositionFeature109 =null;

        pollenParser.intrinsicPrintProxy_return intrinsicPrintProxy110 =null;

        pollenParser.intrinsicSleepWakeProxy_return intrinsicSleepWakeProxy111 =null;

        pollenParser.intrinsicDynamicMemoryProxy_return intrinsicDynamicMemoryProxy112 =null;


        RewriteRuleSubtreeStream stream_compositionFeature=new RewriteRuleSubtreeStream(adaptor,"rule compositionFeature");
        RewriteRuleSubtreeStream stream_intrinsicSleepWakeProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicSleepWakeProxy");
        RewriteRuleSubtreeStream stream_intrinsicDynamicMemoryProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicDynamicMemoryProxy");
        RewriteRuleSubtreeStream stream_intrinsicPrintProxy=new RewriteRuleSubtreeStream(adaptor,"rule intrinsicPrintProxy");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:5: ( ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy -> ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:10: ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:10: ( compositionFeature )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==IDENT||LA32_0==INJECT||LA32_0==135||LA32_0==150||LA32_0==152||LA32_0==156||LA32_0==162||LA32_0==164||LA32_0==169||(LA32_0 >= 173 && LA32_0 <= 175)||LA32_0==183||(LA32_0 >= 187 && LA32_0 <= 188)||LA32_0==190||(LA32_0 >= 194 && LA32_0 <= 197)) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:959:10: compositionFeature
            	    {
            	    pushFollow(FOLLOW_compositionFeature_in_compositionFeatureList6078);
            	    compositionFeature109=compositionFeature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compositionFeature.add(compositionFeature109.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            pushFollow(FOLLOW_intrinsicPrintProxy_in_compositionFeatureList6093);
            intrinsicPrintProxy110=intrinsicPrintProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicPrintProxy.add(intrinsicPrintProxy110.getTree());

            pushFollow(FOLLOW_intrinsicSleepWakeProxy_in_compositionFeatureList6103);
            intrinsicSleepWakeProxy111=intrinsicSleepWakeProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicSleepWakeProxy.add(intrinsicSleepWakeProxy111.getTree());

            pushFollow(FOLLOW_intrinsicDynamicMemoryProxy_in_compositionFeatureList6113);
            intrinsicDynamicMemoryProxy112=intrinsicDynamicMemoryProxy();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_intrinsicDynamicMemoryProxy.add(intrinsicDynamicMemoryProxy112.getTree());

            // AST REWRITE
            // elements: intrinsicSleepWakeProxy, intrinsicPrintProxy, intrinsicDynamicMemoryProxy, compositionFeature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 963:9: -> ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:963:12: ^( LIST[\"LIST\"] ( compositionFeature )* intrinsicPrintProxy intrinsicSleepWakeProxy intrinsicDynamicMemoryProxy )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:963:37: ( compositionFeature )*
                while ( stream_compositionFeature.hasNext() ) {
                    adaptor.addChild(root_1, stream_compositionFeature.nextTree());

                }
                stream_compositionFeature.reset();

                adaptor.addChild(root_1, stream_intrinsicPrintProxy.nextTree());

                adaptor.addChild(root_1, stream_intrinsicSleepWakeProxy.nextTree());

                adaptor.addChild(root_1, stream_intrinsicDynamicMemoryProxy.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compositionFeatureList"


    public static class compositionFeature_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compositionFeature"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:965:1: compositionFeature : ( stmtExport | ( 'preset' )=> 'preset' typeName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) | ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor | ( fcnAttr typeName qualName ( '[' ']' )? formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition | ( ( 'public' )? 'enum' )=> enumDefinition | varDeclaration | injectionDecl );
    public final pollenParser.compositionFeature_return compositionFeature() throws RecognitionException {
        pollenParser.compositionFeature_return retval = new pollenParser.compositionFeature_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal114=null;
        pollenParser.stmtExport_return stmtExport113 =null;

        pollenParser.typeName_return typeName115 =null;

        pollenParser.formalParameterList_return formalParameterList116 =null;

        pollenParser.fcnBody_return fcnBody117 =null;

        pollenParser.fcnDefinitionVoidOrCtor_return fcnDefinitionVoidOrCtor118 =null;

        pollenParser.fcnDefinition_return fcnDefinition119 =null;

        pollenParser.enumDefinition_return enumDefinition120 =null;

        pollenParser.varDeclaration_return varDeclaration121 =null;

        pollenParser.injectionDecl_return injectionDecl122 =null;


        BaseNode string_literal114_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

            featureFlags = EnumSet.noneOf(Flags.class);
            String tn = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:970:8: ( stmtExport | ( 'preset' )=> 'preset' typeName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) | ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor | ( fcnAttr typeName qualName ( '[' ']' )? formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition | ( ( 'public' )? 'enum' )=> enumDefinition | varDeclaration | injectionDecl )
            int alt33=7;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==164) ) {
                alt33=1;
            }
            else if ( (LA33_0==183) && (synpred11_pollen())) {
                alt33=2;
            }
            else if ( (LA33_0==187) ) {
                int LA33_3 = input.LA(2);

                if ( (synpred12_pollen()) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (synpred14_pollen()) ) {
                    alt33=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==169) ) {
                int LA33_4 = input.LA(2);

                if ( (synpred12_pollen()) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==150) ) {
                int LA33_5 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==152) ) {
                int LA33_6 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==175) ) {
                int LA33_7 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==173) ) {
                int LA33_8 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==174) ) {
                int LA33_9 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==188) ) {
                int LA33_10 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==190) ) {
                int LA33_11 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==196) ) {
                int LA33_12 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==194) ) {
                int LA33_13 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==195) ) {
                int LA33_14 = input.LA(2);

                if ( (((((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) ))&&((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))&&synpred12_pollen())) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==IDENT) ) {
                int LA33_15 = input.LA(2);

                if ( (synpred12_pollen()) ) {
                    alt33=3;
                }
                else if ( (synpred13_pollen()) ) {
                    alt33=4;
                }
                else if ( (true) ) {
                    alt33=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA33_0==162) && (synpred14_pollen())) {
                alt33=5;
            }
            else if ( (LA33_0==135||LA33_0==156||LA33_0==197) ) {
                alt33=6;
            }
            else if ( (LA33_0==INJECT) ) {
                alt33=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:970:11: stmtExport
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtExport_in_compositionFeature6165);
                    stmtExport113=stmtExport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtExport113.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:971:11: ( 'preset' )=> 'preset' typeName formalParameterList fcnBody[$formalParameterList.tree]
                    {
                    string_literal114=(Atom)match(input,183,FOLLOW_183_in_compositionFeature6188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_183.add(string_literal114);


                    pushFollow(FOLLOW_typeName_in_compositionFeature6190);
                    typeName115=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName115.getTree());

                    if ( state.backtracking==0 ) {tn = input.LT(-1).getText();}

                    pushFollow(FOLLOW_formalParameterList_in_compositionFeature6195);
                    formalParameterList116=formalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList116.getTree());

                    pushFollow(FOLLOW_fcnBody_in_compositionFeature6197);
                    fcnBody117=fcnBody((formalParameterList116!=null?((BaseNode)formalParameterList116.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody117.getTree());

                    if ( state.backtracking==0 ) { 
                                      featureFlags.remove(Flags.PUBLIC);
                                      featureFlags.add(Flags.HOST);
                                      featureFlags.add(Flags.PRESET); 
                                      if (!(tn.equals(currType.getTypeName()))) {
                                          ParseUnit.current().reportError(currType.getTypeName(), "\'preset\' keyword must be followed by current type name "); 
                                      }
                                   }

                    // AST REWRITE
                    // elements: formalParameterList, fcnBody
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 980:9: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:980:12: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] ) formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:982:21: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[ParseUnit.PRESET_INIT] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:983:25: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:984:31: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_4);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:985:35: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_5 = (BaseNode)adaptor.nil();
                        root_5 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_5);

                        adaptor.addChild(root_5, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.PRESET_INIT)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:991:20: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:992:25: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                        , root_3);

                        adaptor.addChild(root_3, 
                        (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnBody.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:11: ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )=> fcnDefinitionVoidOrCtor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinitionVoidOrCtor_in_compositionFeature6799);
                    fcnDefinitionVoidOrCtor118=fcnDefinitionVoidOrCtor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinitionVoidOrCtor118.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:11: ( fcnAttr typeName qualName ( '[' ']' )? formalParameterList ( NLL )? BRACE_OP )=> fcnDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_fcnDefinition_in_compositionFeature6836);
                    fcnDefinition119=fcnDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnDefinition119.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:11: ( ( 'public' )? 'enum' )=> enumDefinition
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_enumDefinition_in_compositionFeature6864);
                    enumDefinition120=enumDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDefinition120.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1000:11: varDeclaration
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclaration_in_compositionFeature6876);
                    varDeclaration121=varDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclaration121.getTree());

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1001:11: injectionDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionDecl_in_compositionFeature6888);
                    injectionDecl122=injectionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionDecl122.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compositionFeature"


    protected static class stmtImport_scope {
        String qpkg;
        String qimp;
        String asName;
        Object metaArgs;
    }
    protected Stack stmtImport_stack = new Stack();


    public static class stmtImport_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImport"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1004:1: stmtImport : ( 'from' ! importFrom | ( 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) );
    public final pollenParser.stmtImport_return stmtImport() throws RecognitionException {
        stmtImport_stack.push(new stmtImport_scope());
        pollenParser.stmtImport_return retval = new pollenParser.stmtImport_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal123=null;
        Atom string_literal125=null;
        pollenParser.importFrom_return importFrom124 =null;

        pollenParser.qualName_return qualName126 =null;

        pollenParser.metaArguments_return metaArguments127 =null;

        pollenParser.importAs_return importAs128 =null;

        pollenParser.delim_return delim129 =null;


        BaseNode string_literal123_tree=null;
        BaseNode string_literal125_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            String defaultPkg = "";
            String path = this.getTokenStream().getSourceName();
               int k = path.lastIndexOf(File.separator);
               int j = path.lastIndexOf(File.separator, k-1);
               j = j == -1 ? 0 : j+1;
                // the default package is the containing directory
                defaultPkg = path.substring(j, k);
                EnumSet<Flags> importFlags = EnumSet.noneOf(Flags.class);      

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1021:6: ( 'from' ! importFrom | ( 'import' qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==168) ) {
                alt35=1;
            }
            else if ( (LA35_0==172) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1021:11: 'from' ! importFrom
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal123=(Atom)match(input,168,FOLLOW_168_in_stmtImport6918); if (state.failed) return retval;

                    pushFollow(FOLLOW_importFrom_in_stmtImport6921);
                    importFrom124=importFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importFrom124.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1023:14: ( 'import' qualName ( metaArguments )? importAs delim )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1023:14: ( 'import' qualName ( metaArguments )? importAs delim )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1023:15: 'import' qualName ( metaArguments )? importAs delim
                    {
                    string_literal125=(Atom)match(input,172,FOLLOW_172_in_stmtImport6942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal125);


                    pushFollow(FOLLOW_qualName_in_stmtImport6944);
                    qualName126=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName126.getTree());

                    if ( state.backtracking==0 ) {    
                                    if ((qualName126!=null?input.toString(qualName126.start,qualName126.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) {
                                        ((stmtImport_scope)stmtImport_stack.peek()).qimp = ProcessUnits.getPollenEnv();
                                        defaultPkg = ProcessUnits.getPollenEnvPkg();
                                        importFlags.add(Flags.UNIT_USED);
                                        if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                                            throw new PollenException("Missing module specification for pollen.environment", input);
                                    }
                                    else {
                                        ((stmtImport_scope)stmtImport_stack.peek()).qimp = (qualName126!=null?input.toString(qualName126.start,qualName126.stop):null);
                                    }
                                }

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1036:25: ( metaArguments )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==BRACE_OP) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1036:26: metaArguments
                            {
                            pushFollow(FOLLOW_metaArguments_in_stmtImport6988);
                            metaArguments127=metaArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments127.getTree());

                            if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).metaArgs =(metaArguments127!=null?((BaseNode)metaArguments127.tree):null); }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_importAs_in_stmtImport7018);
                    importAs128=importAs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importAs.add(importAs128.getTree());

                    pushFollow(FOLLOW_delim_in_stmtImport7045);
                    delim129=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim129.getTree());

                    }


                    if ( state.backtracking==0 ) {
                                                   ParseUnit.current().addToImportsMaps(((stmtImport_scope)stmtImport_stack.peek()).qimp, ((stmtImport_scope)stmtImport_stack.peek()).asName, defaultPkg, ((stmtImport_scope)stmtImport_stack.peek()).metaArgs);
                                             }

                    // AST REWRITE
                    // elements: importAs, metaArguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1042:10: -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1042:13: ^( IMPORT[\"IMPORT\", importFlags] IDENT[defaultPkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", importFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, defaultPkg)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qimp)
                        );

                        adaptor.addChild(root_1, stream_importAs.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1042:109: ( metaArguments )?
                        if ( stream_metaArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_metaArguments.nextTree());

                        }
                        stream_metaArguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
            stmtImport_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "stmtImport"


    public static class importFrom_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importFrom"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1050:1: importFrom : (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) ;
    public final pollenParser.importFrom_return importFrom() throws RecognitionException {
        pollenParser.importFrom_return retval = new pollenParser.importFrom_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal130=null;
        pollenParser.qualName_return q1 =null;

        pollenParser.qualName_return q2 =null;

        pollenParser.metaArguments_return metaArguments131 =null;

        pollenParser.importAs_return importAs132 =null;

        pollenParser.delim_return delim133 =null;


        BaseNode string_literal130_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_metaArguments=new RewriteRuleSubtreeStream(adaptor,"rule metaArguments");
        RewriteRuleSubtreeStream stream_importAs=new RewriteRuleSubtreeStream(adaptor,"rule importAs");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

               EnumSet<Flags> importFlags = EnumSet.noneOf(Flags.class);      

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1058:5: ( (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim ) -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1058:13: (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1058:13: (q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1058:14: q1= qualName 'import' q2= qualName ( metaArguments )? importAs delim
            {
            pushFollow(FOLLOW_qualName_in_importFrom7148);
            q1=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(q1.getTree());

            if ( state.backtracking==0 ) {    
                            ((stmtImport_scope)stmtImport_stack.peek()).qpkg = ((q1!=null?input.toString(q1.start,q1.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) ? ProcessUnits.getPollenEnvPkg() : (q1!=null?input.toString(q1.start,q1.stop):null);
                            if ((q1!=null?input.toString(q1.start,q1.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) {
                                importFlags.add(Flags.UNIT_USED);
                            }
                            if (((stmtImport_scope)stmtImport_stack.peek()).qpkg.isEmpty())
                                throw new PollenException("Missing module specification for pollen.environment", input);
                        }

            string_literal130=(Atom)match(input,172,FOLLOW_172_in_importFrom7178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal130);


            pushFollow(FOLLOW_qualName_in_importFrom7195);
            q2=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(q2.getTree());

            if ( state.backtracking==0 ) {    
                            ((stmtImport_scope)stmtImport_stack.peek()).qimp = ((q2!=null?input.toString(q2.start,q2.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) ? ProcessUnits.getPollenEnv() : (q2!=null?input.toString(q2.start,q2.stop):null);
                            if ((q2!=null?input.toString(q2.start,q2.stop):null).equals(ParseUnit.POLLEN_ENVIRONMENT)) {
                                importFlags.add(Flags.UNIT_USED);
                            }
                            if (((stmtImport_scope)stmtImport_stack.peek()).qimp.isEmpty())
                                throw new PollenException("Missing module specification for pollen.environment", input);
                        }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1077:24: ( metaArguments )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==BRACE_OP) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1077:25: metaArguments
                    {
                    pushFollow(FOLLOW_metaArguments_in_importFrom7238);
                    metaArguments131=metaArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_metaArguments.add(metaArguments131.getTree());

                    if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).metaArgs =(metaArguments131!=null?((BaseNode)metaArguments131.tree):null); }

                    }
                    break;

            }


            pushFollow(FOLLOW_importAs_in_importFrom7268);
            importAs132=importAs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importAs.add(importAs132.getTree());

            pushFollow(FOLLOW_delim_in_importFrom7270);
            delim133=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim133.getTree());

            }


            if ( state.backtracking==0 ) {
                                         ParseUnit.current().addToImportsMaps(((stmtImport_scope)stmtImport_stack.peek()).qimp, ((stmtImport_scope)stmtImport_stack.peek()).asName, ((stmtImport_scope)stmtImport_stack.peek()).qpkg, ((stmtImport_scope)stmtImport_stack.peek()).metaArgs);
                                   }

            // AST REWRITE
            // elements: importAs, metaArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1082:10: -> ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1082:13: ^( IMPORT[\"IMPORT\", importFlags] IDENT[$stmtImport::qpkg] IDENT[$stmtImport::qimp] importAs ( metaArguments )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ImportNode(IMPORT, "IMPORT", importFlags)
                , root_1);

                adaptor.addChild(root_1, 
                (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qpkg)
                );

                adaptor.addChild(root_1, 
                (BaseNode)adaptor.create(IDENT, ((stmtImport_scope)stmtImport_stack.peek()).qimp)
                );

                adaptor.addChild(root_1, stream_importAs.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1082:116: ( metaArguments )?
                if ( stream_metaArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaArguments.nextTree());

                }
                stream_metaArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                
             }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importFrom"


    public static class importAs_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importAs"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1085:1: importAs : ( 'as' q1= qualName -> qualName | -> NIL );
    public final pollenParser.importAs_return importAs() throws RecognitionException {
        pollenParser.importAs_return retval = new pollenParser.importAs_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal134=null;
        pollenParser.qualName_return q1 =null;


        BaseNode string_literal134_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1086:5: ( 'as' q1= qualName -> qualName | -> NIL )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==149) ) {
                alt37=1;
            }
            else if ( (LA37_0==NLL||LA37_0==SEMI) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1086:10: 'as' q1= qualName
                    {
                    string_literal134=(Atom)match(input,149,FOLLOW_149_in_importAs7351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_149.add(string_literal134);


                    pushFollow(FOLLOW_qualName_in_importAs7355);
                    q1=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(q1.getTree());

                    if ( state.backtracking==0 ) { ((stmtImport_scope)stmtImport_stack.peek()).asName = (q1!=null?input.toString(q1.start,q1.stop):null); }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1088:9: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1090:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1090:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importAs"


    public static class importList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1093:1: importList : stmtImports ;
    public final pollenParser.importList_return importList() throws RecognitionException {
        pollenParser.importList_return retval = new pollenParser.importList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtImports_return stmtImports135 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:5: ( stmtImports )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1094:12: stmtImports
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_stmtImports_in_importList7426);
            stmtImports135=stmtImports();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtImports135.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importList"


    public static class stmtImports_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtImports"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1096:1: stmtImports : ( ( stmtImport )+ -> ^( LIST[\"LIST\"] ( stmtImport )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.stmtImports_return stmtImports() throws RecognitionException {
        pollenParser.stmtImports_return retval = new pollenParser.stmtImports_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtImport_return stmtImport136 =null;


        RewriteRuleSubtreeStream stream_stmtImport=new RewriteRuleSubtreeStream(adaptor,"rule stmtImport");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:5: ( ( stmtImport )+ -> ^( LIST[\"LIST\"] ( stmtImport )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==168||LA39_0==172) ) {
                alt39=1;
            }
            else if ( (LA39_0==EOF||LA39_0==INJECT||LA39_0==NLL||(LA39_0 >= 154 && LA39_0 <= 155)||LA39_0==162||(LA39_0 >= 177 && LA39_0 <= 178)||LA39_0==185) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:10: ( stmtImport )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:10: ( stmtImport )+
                    int cnt38=0;
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==168||LA38_0==172) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:10: stmtImport
                    	    {
                    	    pushFollow(FOLLOW_stmtImport_in_stmtImports7446);
                    	    stmtImport136=stmtImport();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmtImport.add(stmtImport136.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt38 >= 1 ) break loop38;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(38, input);
                                throw eee;
                        }
                        cnt38++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmtImport
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1097:23: -> ^( LIST[\"LIST\"] ( stmtImport )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1097:26: ^( LIST[\"LIST\"] ( stmtImport )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmtImport.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmtImport.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmtImport.nextTree());

                        }
                        stream_stmtImport.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1098:10: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1098:13: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtImports"


    protected static class importPrintIntrinsic_scope {
        List<Object> l;
    }
    protected Stack importPrintIntrinsic_stack = new Stack();


    public static class importPrintIntrinsic_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintIntrinsic"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1106:1: importPrintIntrinsic : m1= importPrintImpl m2= importPrintProtocol ;
    public final pollenParser.importPrintIntrinsic_return importPrintIntrinsic() throws RecognitionException {
        importPrintIntrinsic_stack.push(new importPrintIntrinsic_scope());
        pollenParser.importPrintIntrinsic_return retval = new pollenParser.importPrintIntrinsic_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.importPrintImpl_return m1 =null;

        pollenParser.importPrintProtocol_return m2 =null;




            ((importPrintIntrinsic_scope)importPrintIntrinsic_stack.peek()).l = new ArrayList<Object>();    

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1122:5: (m1= importPrintImpl m2= importPrintProtocol )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1122:11: m1= importPrintImpl m2= importPrintProtocol
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_importPrintImpl_in_importPrintIntrinsic7521);
            m1=importPrintImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m1.getTree());

            if ( state.backtracking==0 ) {  ((importPrintIntrinsic_scope)importPrintIntrinsic_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null));}

            pushFollow(FOLLOW_importPrintProtocol_in_importPrintIntrinsic7541);
            m2=importPrintProtocol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m2.getTree());

            if ( state.backtracking==0 ) {  ((importPrintIntrinsic_scope)importPrintIntrinsic_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null));}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                 for (Object o : ((importPrintIntrinsic_scope)importPrintIntrinsic_stack.peek()).l) {
                     if (o instanceof ImportNode) {
                         // add the instantiated import to unit imports
                         ((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);            
                     }
                 }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            importPrintIntrinsic_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "importPrintIntrinsic"


    public static class importPrintImpl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintImpl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1126:1: importPrintImpl : ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenProtocolPkg(ProcessUnits.PollenProtocol.PRINT)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] NIL ) | -> NIL );
    public final pollenParser.importPrintImpl_return importPrintImpl() throws RecognitionException {
        pollenParser.importPrintImpl_return retval = new pollenParser.importPrintImpl_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:5: ({...}? -> ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenProtocolPkg(ProcessUnits.PollenProtocol.PRINT)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] NIL ) | -> NIL )
            int alt40=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA40_1 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA40_2 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 2, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA40_3 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 3, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA40_4 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 4, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA40_5 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                int LA40_6 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA40_7 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt40=1;
                }
                else if ( (true) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }

            switch (alt40) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1127:10: {...}?
                    {
                    if ( !((ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importPrintImpl", "ProcessUnits.doImportPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1128:12: -> ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenProtocolPkg(ProcessUnits.PollenProtocol.PRINT)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1128:15: ^( IMPORT[\"IMPORT\", EnumSet.of(Flags.UNIT_USED)] IDENT[ProcessUnits.getPollenProtocolPkg(ProcessUnits.PollenProtocol.PRINT)] IDENT[ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT)] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", EnumSet.of(Flags.UNIT_USED))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenProtocolPkg(ProcessUnits.PollenProtocol.PRINT))
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ProcessUnits.getPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT))
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1132:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1132:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importPrintImpl"


    public static class importPrintProtocol_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importPrintProtocol"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1136:1: importPrintProtocol : ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] NIL ) | -> NIL );
    public final pollenParser.importPrintProtocol_return importPrintProtocol() throws RecognitionException {
        pollenParser.importPrintProtocol_return retval = new pollenParser.importPrintProtocol_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1137:5: ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] NIL ) | -> NIL )
            int alt41=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA41_1 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA41_2 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 2, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA41_3 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 3, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA41_4 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 4, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA41_5 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                int LA41_6 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA41_7 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1137:10: {...}?
                    {
                    if ( !((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importPrintProtocol", "ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.PRINT)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1138:12: -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1138:15: ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_PRINTPKG] IDENT[ParseUnit.POLLEN_PRINT_PROTOCOL] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", (EnumSet.of(Flags.UNIT_USED)))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_PRINTPKG)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_PRINT_PROTOCOL)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1142:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1142:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importPrintProtocol"


    protected static class importSleepWakeIntrinsic_scope {
        List<Object> l;
    }
    protected Stack importSleepWakeIntrinsic_stack = new Stack();


    public static class importSleepWakeIntrinsic_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importSleepWakeIntrinsic"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1144:1: importSleepWakeIntrinsic : m1= importSleepWakeProtocol ;
    public final pollenParser.importSleepWakeIntrinsic_return importSleepWakeIntrinsic() throws RecognitionException {
        importSleepWakeIntrinsic_stack.push(new importSleepWakeIntrinsic_scope());
        pollenParser.importSleepWakeIntrinsic_return retval = new pollenParser.importSleepWakeIntrinsic_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.importSleepWakeProtocol_return m1 =null;




            ((importSleepWakeIntrinsic_scope)importSleepWakeIntrinsic_stack.peek()).l = new ArrayList<Object>();    

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1160:5: (m1= importSleepWakeProtocol )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1161:10: m1= importSleepWakeProtocol
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_importSleepWakeProtocol_in_importSleepWakeIntrinsic7812);
            m1=importSleepWakeProtocol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m1.getTree());

            if ( state.backtracking==0 ) {  ((importSleepWakeIntrinsic_scope)importSleepWakeIntrinsic_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null));}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                 for (Object o : ((importSleepWakeIntrinsic_scope)importSleepWakeIntrinsic_stack.peek()).l) {
                     if (o instanceof ImportNode) {
                         // add the instantiated import to unit imports
                         ((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);            
                     }
                 }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            importSleepWakeIntrinsic_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "importSleepWakeIntrinsic"


    public static class importSleepWakeProtocol_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importSleepWakeProtocol"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1165:1: importSleepWakeProtocol : ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PKG] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] NIL ) | -> NIL );
    public final pollenParser.importSleepWakeProtocol_return importSleepWakeProtocol() throws RecognitionException {
        pollenParser.importSleepWakeProtocol_return retval = new pollenParser.importSleepWakeProtocol_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1166:5: ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PKG] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] NIL ) | -> NIL )
            int alt42=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA42_1 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA42_2 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 2, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA42_3 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 3, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA42_4 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 4, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA42_5 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                int LA42_6 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA42_7 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }

            switch (alt42) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1166:10: {...}?
                    {
                    if ( !((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importSleepWakeProtocol", "ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.SLEEP_WAKE)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1167:12: -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PKG] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1167:15: ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PKG] IDENT[ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", (EnumSet.of(Flags.UNIT_USED)))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_SLEEP_WAKE_PKG)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_SLEEP_WAKE_PROTOCOL)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1171:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1171:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importSleepWakeProtocol"


    protected static class importDynamicMemoryIntrinsic_scope {
        List<Object> l;
    }
    protected Stack importDynamicMemoryIntrinsic_stack = new Stack();


    public static class importDynamicMemoryIntrinsic_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importDynamicMemoryIntrinsic"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1174:1: importDynamicMemoryIntrinsic : m1= importDynamicMemoryProtocol ;
    public final pollenParser.importDynamicMemoryIntrinsic_return importDynamicMemoryIntrinsic() throws RecognitionException {
        importDynamicMemoryIntrinsic_stack.push(new importDynamicMemoryIntrinsic_scope());
        pollenParser.importDynamicMemoryIntrinsic_return retval = new pollenParser.importDynamicMemoryIntrinsic_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.importDynamicMemoryProtocol_return m1 =null;




            ((importDynamicMemoryIntrinsic_scope)importDynamicMemoryIntrinsic_stack.peek()).l = new ArrayList<Object>();

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1190:5: (m1= importDynamicMemoryProtocol )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1191:10: m1= importDynamicMemoryProtocol
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_importDynamicMemoryProtocol_in_importDynamicMemoryIntrinsic7981);
            m1=importDynamicMemoryProtocol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, m1.getTree());

            if ( state.backtracking==0 ) {  ((importDynamicMemoryIntrinsic_scope)importDynamicMemoryIntrinsic_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null));}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                 for (Object o : ((importDynamicMemoryIntrinsic_scope)importDynamicMemoryIntrinsic_stack.peek()).l) {
                     if (o instanceof ImportNode) {
                         // add the instantiated import to unit imports
                         ((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);            
                     }
                 }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            importDynamicMemoryIntrinsic_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "importDynamicMemoryIntrinsic"


    public static class importDynamicMemoryProtocol_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importDynamicMemoryProtocol"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1195:1: importDynamicMemoryProtocol : ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PKG] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] NIL ) | -> NIL );
    public final pollenParser.importDynamicMemoryProtocol_return importDynamicMemoryProtocol() throws RecognitionException {
        pollenParser.importDynamicMemoryProtocol_return retval = new pollenParser.importDynamicMemoryProtocol_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1196:5: ({...}? -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PKG] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] NIL ) | -> NIL )
            int alt43=2;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                int LA43_1 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;

                }
                }
                break;
            case 177:
                {
                int LA43_2 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 2, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA43_3 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 3, input);

                    throw nvae;

                }
                }
                break;
            case 154:
                {
                int LA43_4 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 4, input);

                    throw nvae;

                }
                }
                break;
            case 185:
                {
                int LA43_5 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 5, input);

                    throw nvae;

                }
                }
                break;
            case 155:
                {
                int LA43_6 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 6, input);

                    throw nvae;

                }
                }
                break;
            case 162:
                {
                int LA43_7 = input.LA(2);

                if ( ((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 7, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }

            switch (alt43) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1196:10: {...}?
                    {
                    if ( !((ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "importDynamicMemoryProtocol", "ProcessUnits.doImportPollenProtocol(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY)");
                    }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1197:12: -> ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PKG] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1197:15: ^( IMPORT[\"IMPORT\", (EnumSet.of(Flags.UNIT_USED))] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PKG] IDENT[ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", (EnumSet.of(Flags.UNIT_USED)))
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_DYNAMIC_MEMORY_PKG)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, ParseUnit.POLLEN_DYNAMIC_MEMORY_PROTOCOL)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1201:12: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1201:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importDynamicMemoryProtocol"


    public static class meta_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "meta"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1204:1: meta : ({...}? => ( 'meta' ! ( ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL ) ) | -> LIST[\"LIST\"] );
    public final pollenParser.meta_return meta() throws RecognitionException {
        pollenParser.meta_return retval = new pollenParser.meta_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal137=null;
        Atom NLL138=null;
        Atom NLL141=null;
        pollenParser.braceOpenNLL_return braceOpenNLL139 =null;

        pollenParser.metaParmsGen_return metaParmsGen140 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL142 =null;


        BaseNode string_literal137_tree=null;
        BaseNode NLL138_tree=null;
        BaseNode NLL141_tree=null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1210:5: ({...}? => ( 'meta' ! ( ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL ) ) | -> LIST[\"LIST\"] )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==177) && ((isMetaInstance))) {
                alt46=1;
            }
            else if ( ((LA46_0 >= 154 && LA46_0 <= 155)||LA46_0==162||LA46_0==178||LA46_0==185) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1210:10: {...}? => ( 'meta' ! ( ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL ) )
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    if ( !((isMetaInstance)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "meta", "isMetaInstance");
                    }

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1211:13: ( 'meta' ! ( ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL ) )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1212:13: 'meta' ! ( ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL )
                    {
                    string_literal137=(Atom)match(input,177,FOLLOW_177_in_meta8156); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { metaFlags.add(Flags.META);}

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:13: ( ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:14: ( NLL !)? braceOpenNLL metaParmsGen ( NLL !)? braceCloseNLL
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:14: ( NLL !)?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==NLL) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1214:15: NLL !
                            {
                            NLL138=(Atom)match(input,NLL,FOLLOW_NLL_in_meta8193); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_braceOpenNLL_in_meta8198);
                    braceOpenNLL139=braceOpenNLL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceOpenNLL139.getTree());

                    pushFollow(FOLLOW_metaParmsGen_in_meta8217);
                    metaParmsGen140=metaParmsGen();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaParmsGen140.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1216:15: ( NLL !)?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==NLL) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1216:16: NLL !
                            {
                            NLL141=(Atom)match(input,NLL,FOLLOW_NLL_in_meta8234); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_braceCloseNLL_in_meta8239);
                    braceCloseNLL142=braceCloseNLL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceCloseNLL142.getTree());

                    }


                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1218:12: 
                    {
                    if ( state.backtracking==0 ) { isMetaInstance = false;}

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1218:39: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (FailedPredicateException fe) {
              
                    ParseUnit.current().reportFailure("Missing instantiation. Meta types must be instantiated via the import statement");
                
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "meta"


    protected static class metaParmsGen_scope {
        int idx;
        List<Object> l;
    }
    protected Stack metaParmsGen_stack = new Stack();


    public static class metaParmsGen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmsGen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1223:1: metaParmsGen : m1= metaParmGen ( ',' ( NLL )? m2= metaParmGen )* -> ^( LIST[\"LIST\"] ( metaParmGen )+ ) ;
    public final pollenParser.metaParmsGen_return metaParmsGen() throws RecognitionException {
        metaParmsGen_stack.push(new metaParmsGen_scope());
        pollenParser.metaParmsGen_return retval = new pollenParser.metaParmsGen_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal143=null;
        Atom NLL144=null;
        pollenParser.metaParmGen_return m1 =null;

        pollenParser.metaParmGen_return m2 =null;


        BaseNode char_literal143_tree=null;
        BaseNode NLL144_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_metaParmGen=new RewriteRuleSubtreeStream(adaptor,"rule metaParmGen");

            ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx = 0;
            ((metaParmsGen_scope)metaParmsGen_stack.peek()).l = new ArrayList<Object>();    

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:5: (m1= metaParmGen ( ',' ( NLL )? m2= metaParmGen )* -> ^( LIST[\"LIST\"] ( metaParmGen )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1240:10: m1= metaParmGen ( ',' ( NLL )? m2= metaParmGen )*
            {
            pushFollow(FOLLOW_metaParmGen_in_metaParmsGen8371);
            m1=metaParmGen();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaParmGen.add(m1.getTree());

            if ( state.backtracking==0 ) { ((metaParmsGen_scope)metaParmsGen_stack.peek()).l.add((m1!=null?((BaseNode)m1.tree):null)); }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1241:9: ( ',' ( NLL )? m2= metaParmGen )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==138) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1241:11: ',' ( NLL )? m2= metaParmGen
            	    {
            	    char_literal143=(Atom)match(input,138,FOLLOW_138_in_metaParmsGen8386); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal143);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1242:12: ( NLL )?
            	    int alt47=2;
            	    int LA47_0 = input.LA(1);

            	    if ( (LA47_0==NLL) ) {
            	        alt47=1;
            	    }
            	    switch (alt47) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1242:13: NLL
            	            {
            	            NLL144=(Atom)match(input,NLL,FOLLOW_NLL_in_metaParmsGen8401); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NLL.add(NLL144);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_metaParmGen_in_metaParmsGen8421);
            	    m2=metaParmGen();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_metaParmGen.add(m2.getTree());

            	    if ( state.backtracking==0 ) { ((metaParmsGen_scope)metaParmsGen_stack.peek()).l.add((m2!=null?((BaseNode)m2.tree):null)); }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            // AST REWRITE
            // elements: metaParmGen
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1245:9: -> ^( LIST[\"LIST\"] ( metaParmGen )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1245:12: ^( LIST[\"LIST\"] ( metaParmGen )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_metaParmGen.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_metaParmGen.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaParmGen.nextTree());

                }
                stream_metaParmGen.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                 for (Object o : ((metaParmsGen_scope)metaParmsGen_stack.peek()).l) {
                     if (o instanceof ImportNode) {
                         // add the instantiated import to unit imports
                         ((CommonTree) ((unitPackage_scope)unitPackage_stack.peek()).unitImports).addChild((ImportNode) o);            
                     }
                 }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            metaParmsGen_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "metaParmsGen"


    protected static class metaParmGen_scope {
        Object  metaArgs;
    }
    protected Stack metaParmGen_stack = new Stack();


    public static class metaParmGen_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaParmGen"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1263:1: metaParmGen : ( 'type' IDENT ( ASSIGN typeName )? -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( ASSIGN primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) ) );
    public final pollenParser.metaParmGen_return metaParmGen() throws RecognitionException {
        metaParmGen_stack.push(new metaParmGen_scope());
        pollenParser.metaParmGen_return retval = new pollenParser.metaParmGen_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom id=null;
        Atom string_literal145=null;
        Atom IDENT146=null;
        Atom ASSIGN147=null;
        Atom ASSIGN150=null;
        pollenParser.typeName_return typeName148 =null;

        pollenParser.builtinType_return builtinType149 =null;

        pollenParser.primitiveLit_return primitiveLit151 =null;


        BaseNode id_tree=null;
        BaseNode string_literal145_tree=null;
        BaseNode IDENT146_tree=null;
        BaseNode ASSIGN147_tree=null;
        BaseNode ASSIGN150_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_primitiveLit=new RewriteRuleSubtreeStream(adaptor,"rule primitiveLit");
        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");

            // for import stmt 
            String name = "";
            String as = "";
            String from = ""; 
            ExprNode.Const arg = null;    
            EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);        
            String ctext = "";
            EnumSet<LitFlags> lf = EnumSet.noneOf(LitFlags.class);
            if (isVoidInstance) {
                metaFlags.add(Flags.VOID_INSTANCE);
            }


        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:5: ( 'type' IDENT ( ASSIGN typeName )? -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] ) | builtinType id= IDENT ( ASSIGN primitiveLit )? -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) ) )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==193) ) {
                alt51=1;
            }
            else if ( (LA51_0==150||LA51_0==152||(LA51_0 >= 173 && LA51_0 <= 175)||LA51_0==188||LA51_0==190||(LA51_0 >= 194 && LA51_0 <= 196)) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:10: 'type' IDENT ( ASSIGN typeName )?
                    {
                    string_literal145=(Atom)match(input,193,FOLLOW_193_in_metaParmGen8492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal145);


                    IDENT146=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaParmGen8494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT146);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:23: ( ASSIGN typeName )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==ASSIGN) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1288:25: ASSIGN typeName
                            {
                            ASSIGN147=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaParmGen8498); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN147);


                            pushFollow(FOLLOW_typeName_in_metaParmGen8500);
                            typeName148=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(typeName148.getTree());

                            if ( state.backtracking==0 ) {name = (typeName148!=null?input.toString(typeName148.start,typeName148.stop):null);}

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { 
                                   flags.add(Flags.TYPE_META_ARG); 
                                   // get 'as' name
                                   as = (IDENT146!=null?IDENT146.getText():null);
                                       // get 'from' pkg
                                         for (ImportNode imp: client.getImports()) {
                                        if (clientImport.getName().getText().equals(imp.getName().getText())) {
                                            from = imp.getFrom().getText();
                                            break;
                                        }
                                    }    
                                    // get import name
                                    if (instantiateToDefaults || isVoidInstance) {
                                        // instantiate to defaults
                                        if (name.isEmpty()) {
                                            if (isVoidInstance)
                                                throw new PollenException("Missing default value. Using \'{}\' to instantiate a meta type requires that the meta type define default values for all meta parameters", input);
                                            if (clientImport.getMeta() == null)
                                                throw new PollenException("Missing default value. Instantiating a meta type without parameters requires that the meta type define default values for all meta parameters", input);
                                        }
                                    }
                                    else {
                                    BaseNode b = (clientImport.getMeta() != null && clientImport.getMeta().size() >= ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx+1) 
                                            ? clientImport.getMeta().get(((metaParmsGen_scope)metaParmsGen_stack.peek()).idx) : null ;
                                    
                                      if (b != null && b.getType() != pollenParser.NIL) { // if false, will use default
                                          // get instantiation value
                                          
                                          if (b instanceof TypeNode.Usr) {
                                              name = ((TypeNode.Usr) b).getName().getText();    
                                               String handlerName = ""; 
                                                               int i = name.indexOf('.');
                                                               if (i != -1) { // type is a function ref: "HP.handler"
                                                                   // handler name ignored for now: look at this if we do it
                                                                handlerName = "." + name.substring(i+1);   // the fcn name, 'handler'  
                                                                name = name.substring(0, i);  // HP, the unit type                                                                                          
                                                                }
                                              // fixups
                                              String n = ParseUnit.current().getTypeName(client.getQualName(), name);
                                              String f = ParseUnit.current().getPackage(client.getQualName(),name);
                                              ((metaParmGen_scope)metaParmGen_stack.peek()).metaArgs = (Tree) ParseUnit.current().getMetaArgs(client.getQualName(), name);
                                              if (n != null) {
                                                  name = n;
                                                  from = f != null ? f : from;                              
                                              }        
                                          }
                                          else if (b instanceof TypeNode.Std) {
                                              name = ((TypeNode.Std) b).getIdent().getText();                        
                                          }
                                          else if (b.getType() == pollenLexer.VOID) // deferred instantiation
                                                         name = b.getText();
                                          else {
                                              throw new PollenFatalException("Meta type parameter requires type to instantiate");
                                          }
                                      }
                                      else {
                                         if (name.isEmpty()) { // no default supplied
                                               throw new PollenException("Missing actual parameter for meta type instantiation where no default value specified", input);
                                         }
                                    }                    
                                    }

                                }

                    // AST REWRITE
                    // elements: IDENT, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1352:7: -> ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1352:10: ^( IMPORT[\"IMPORT\", flags] IDENT[from] IDENT[name] IDENT[as] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ImportNode(IMPORT, "IMPORT", flags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, from)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, name)
                        );

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, as)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1355:10: builtinType id= IDENT ( ASSIGN primitiveLit )?
                    {
                    pushFollow(FOLLOW_builtinType_in_metaParmGen8563);
                    builtinType149=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType149.getTree());

                    id=(Atom)match(input,IDENT,FOLLOW_IDENT_in_metaParmGen8567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(id);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1355:31: ( ASSIGN primitiveLit )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==ASSIGN) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1355:32: ASSIGN primitiveLit
                            {
                            ASSIGN150=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_metaParmGen8570); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN150);


                            pushFollow(FOLLOW_primitiveLit_in_metaParmGen8572);
                            primitiveLit151=primitiveLit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_primitiveLit.add(primitiveLit151.getTree());

                            if ( state.backtracking==0 ) { ctext = (primitiveLit151!=null?input.toString(primitiveLit151.start,primitiveLit151.stop):null); }

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                                 flags.add(Flags.META_ARG);
                                 if (instantiateToDefaults || isVoidInstance) {
                                        // instantiate to defaults
                                        if (ctext.isEmpty()) {
                                            if (isVoidInstance)
                                                throw new PollenException("Using \'{}\' to instantiate a meta type requires default values for all meta parameters", input);
                                            if (clientImport.getMeta() == null)
                                                throw new PollenException("Instantiating a meta type without parameters requires default values for all meta parameters", input);
                                        }
                                    }
                                    else {
                                      BaseNode b = (clientImport.getMeta() != null && clientImport.getMeta().size() >= ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx+1) 
                                            ? clientImport.getMeta().get(((metaParmsGen_scope)metaParmsGen_stack.peek()).idx) : null ;
                                            
                                      if (b != null && b.getType() != pollenParser.NIL) { // if false, will use default
                                         
                                           if (b.getType() != pollenLexer.VOID && !(b instanceof ExprNode.Const)) 
                                                throw new PollenFatalException("Invalid meta value parameter specification (must be a constant)");
                                             ctext = b.getText();
                                         
                                           lf = EnumSet.noneOf(LitFlags.class);
                                           if (b instanceof ExprNode.Const) {
                                               arg = (ExprNode.Const) b;
                                               ctext = arg.getValue().getText();
                                               EnumSet<LitFlags> formalType = (builtinType149!=null?builtinType149.f:null);
                                               lf = arg.getLitFlags();
                                               if (!(arg.getLitFlags().contains(LitFlags.NUM) && formalType.contains(LitFlags.NUM))) {
                                                   if (!(arg.getLitFlags().equals(formalType)))
                                                       throw new PollenException("Fomal and actual meta value parameters have inconsistent types", input);             
                                               }
                                           }
                                      }
                                      else {
                                         if (ctext.isEmpty()) { // no default supplied
                                               throw new PollenException("Missing actual parameter for meta type instantiation where no default value specified", input);
                                         }
                                      }
                                         }
                                 }

                    // AST REWRITE
                    // elements: IDENT, IDENT, builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1396:9: -> ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1396:12: ^( D_FORMAL[\"D_FORMAL\", flags] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType ) IDENT ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", flags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1397:13: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1399:17: ^( E_CONST[\"E_CONST\", lf] IDENT[ctext] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", lf)
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, ctext)
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                ((metaParmsGen_scope)metaParmsGen_stack.peek()).idx++;

                if (((metaParmGen_scope)metaParmGen_stack.peek()).metaArgs != null) {
                        ((CommonTree) ((BaseNode)retval.tree)).addChild(((CommonTree) ((metaParmGen_scope)metaParmGen_stack.peek()).metaArgs));                
                          }
            }
        }
        catch (PollenFatalException e) {

                ParseUnit.current().reportFailure(e);

        }

        finally {
        	// do for sure before leaving
            metaParmGen_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "metaParmGen"


    public static class metaArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArguments"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1404:1: metaArguments : ( ( BRACE_OP ( NLL )? BRACE_CL )=> BRACE_OP ( NLL )? BRACE_CL -> ^( LIST[\"LIST\"] NIL ) | BRACE_OP ! metaArgumentList BRACE_CL !);
    public final pollenParser.metaArguments_return metaArguments() throws RecognitionException {
        pollenParser.metaArguments_return retval = new pollenParser.metaArguments_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom BRACE_OP152=null;
        Atom NLL153=null;
        Atom BRACE_CL154=null;
        Atom BRACE_OP155=null;
        Atom BRACE_CL157=null;
        pollenParser.metaArgumentList_return metaArgumentList156 =null;


        BaseNode BRACE_OP152_tree=null;
        BaseNode NLL153_tree=null;
        BaseNode BRACE_CL154_tree=null;
        BaseNode BRACE_OP155_tree=null;
        BaseNode BRACE_CL157_tree=null;
        RewriteRuleTokenStream stream_BRACE_OP=new RewriteRuleTokenStream(adaptor,"token BRACE_OP");
        RewriteRuleTokenStream stream_BRACE_CL=new RewriteRuleTokenStream(adaptor,"token BRACE_CL");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:5: ( ( BRACE_OP ( NLL )? BRACE_CL )=> BRACE_OP ( NLL )? BRACE_CL -> ^( LIST[\"LIST\"] NIL ) | BRACE_OP ! metaArgumentList BRACE_CL !)
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==BRACE_OP) ) {
                int LA53_1 = input.LA(2);

                if ( (synpred15_pollen()) ) {
                    alt53=1;
                }
                else if ( (true) ) {
                    alt53=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:7: ( BRACE_OP ( NLL )? BRACE_CL )=> BRACE_OP ( NLL )? BRACE_CL
                    {
                    BRACE_OP152=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_metaArguments8725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BRACE_OP.add(BRACE_OP152);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:44: ( NLL )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==NLL) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:44: NLL
                            {
                            NLL153=(Atom)match(input,NLL,FOLLOW_NLL_in_metaArguments8727); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL153);


                            }
                            break;

                    }


                    BRACE_CL154=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_metaArguments8730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BRACE_CL.add(BRACE_CL154);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1405:61: -> ^( LIST[\"LIST\"] NIL )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:64: ^( LIST[\"LIST\"] NIL )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1406:8: BRACE_OP ! metaArgumentList BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP155=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_metaArguments8755); if (state.failed) return retval;

                    pushFollow(FOLLOW_metaArgumentList_in_metaArguments8759);
                    metaArgumentList156=metaArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaArgumentList156.getTree());

                    BRACE_CL157=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_metaArguments8762); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metaArguments"


    public static class metaArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgumentList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1410:1: metaArgumentList : metaFirstArg ( metaArgument )* -> ^( LIST[\"LIST\"] metaFirstArg ( metaArgument )* ) ;
    public final pollenParser.metaArgumentList_return metaArgumentList() throws RecognitionException {
        pollenParser.metaArgumentList_return retval = new pollenParser.metaArgumentList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.metaFirstArg_return metaFirstArg158 =null;

        pollenParser.metaArgument_return metaArgument159 =null;


        RewriteRuleSubtreeStream stream_metaFirstArg=new RewriteRuleSubtreeStream(adaptor,"rule metaFirstArg");
        RewriteRuleSubtreeStream stream_metaArgument=new RewriteRuleSubtreeStream(adaptor,"rule metaArgument");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:4: ( metaFirstArg ( metaArgument )* -> ^( LIST[\"LIST\"] metaFirstArg ( metaArgument )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:13: metaFirstArg ( metaArgument )*
            {
            pushFollow(FOLLOW_metaFirstArg_in_metaArgumentList8797);
            metaFirstArg158=metaFirstArg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_metaFirstArg.add(metaFirstArg158.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:26: ( metaArgument )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==138) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1411:27: metaArgument
            	    {
            	    pushFollow(FOLLOW_metaArgument_in_metaArgumentList8800);
            	    metaArgument159=metaArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_metaArgument.add(metaArgument159.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            // AST REWRITE
            // elements: metaFirstArg, metaArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1412:6: -> ^( LIST[\"LIST\"] metaFirstArg ( metaArgument )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:9: ^( LIST[\"LIST\"] metaFirstArg ( metaArgument )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_metaFirstArg.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1412:47: ( metaArgument )*
                while ( stream_metaArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_metaArgument.nextTree());

                }
                stream_metaArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metaArgumentList"


    public static class metaFirstArg_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaFirstArg"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1414:2: metaFirstArg : ( metaArg ( NLL !)? | -> NIL );
    public final pollenParser.metaFirstArg_return metaFirstArg() throws RecognitionException {
        pollenParser.metaFirstArg_return retval = new pollenParser.metaFirstArg_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL161=null;
        pollenParser.metaArg_return metaArg160 =null;


        BaseNode NLL161_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1415:5: ( metaArg ( NLL !)? | -> NIL )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==CHAR||LA56_0==HEX_LIT||LA56_0==IDENT||LA56_0==INT_LIT||LA56_0==OCT_LIT||LA56_0==REAL_LIT||LA56_0==STRING||LA56_0==150||LA56_0==152||LA56_0==166||(LA56_0 >= 173 && LA56_0 <= 175)||LA56_0==180||LA56_0==188||LA56_0==190||LA56_0==192||(LA56_0 >= 194 && LA56_0 <= 196)) ) {
                alt56=1;
            }
            else if ( (LA56_0==BRACE_CL||LA56_0==138) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1415:7: metaArg ( NLL !)?
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_metaArg_in_metaFirstArg8839);
                    metaArg160=metaArg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaArg160.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1415:18: ( NLL !)?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==NLL) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1415:18: NLL !
                            {
                            NLL161=(Atom)match(input,NLL,FOLLOW_NLL_in_metaFirstArg8841); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1416:14: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1416:14: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metaFirstArg"


    public static class metaArgument_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArgument"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1418:1: metaArgument : ( ( metaDelim metaArg )=> metaDelim metaArg ( NLL !)? | ( ',' ( NLL )? )=> ',' ( NLL )? -> NIL );
    public final pollenParser.metaArgument_return metaArgument() throws RecognitionException {
        pollenParser.metaArgument_return retval = new pollenParser.metaArgument_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL164=null;
        Atom char_literal165=null;
        Atom NLL166=null;
        pollenParser.metaDelim_return metaDelim162 =null;

        pollenParser.metaArg_return metaArg163 =null;


        BaseNode NLL164_tree=null;
        BaseNode char_literal165_tree=null;
        BaseNode NLL166_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:5: ( ( metaDelim metaArg )=> metaDelim metaArg ( NLL !)? | ( ',' ( NLL )? )=> ',' ( NLL )? -> NIL )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==138) ) {
                int LA59_1 = input.LA(2);

                if ( (synpred16_pollen()) ) {
                    alt59=1;
                }
                else if ( (synpred17_pollen()) ) {
                    alt59=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:11: ( metaDelim metaArg )=> metaDelim metaArg ( NLL !)?
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_metaDelim_in_metaArgument8907);
                    metaDelim162=metaDelim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaDelim162.getTree());

                    pushFollow(FOLLOW_metaArg_in_metaArgument8909);
                    metaArg163=metaArg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metaArg163.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:52: ( NLL !)?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==NLL) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:53: NLL !
                            {
                            NLL164=(Atom)match(input,NLL,FOLLOW_NLL_in_metaArgument8912); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:11: ( ',' ( NLL )? )=> ',' ( NLL )?
                    {
                    char_literal165=(Atom)match(input,138,FOLLOW_138_in_metaArgument8936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_138.add(char_literal165);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:29: ( NLL )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==NLL) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:29: NLL
                            {
                            NLL166=(Atom)match(input,NLL,FOLLOW_NLL_in_metaArgument8938); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL166);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1420:34: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metaArgument"


    public static class metaDelim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaDelim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1422:1: metaDelim : ',' ! ( NLL !)? ;
    public final pollenParser.metaDelim_return metaDelim() throws RecognitionException {
        pollenParser.metaDelim_return retval = new pollenParser.metaDelim_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal167=null;
        Atom NLL168=null;

        BaseNode char_literal167_tree=null;
        BaseNode NLL168_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:5: ( ',' ! ( NLL !)? )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:7: ',' ! ( NLL !)?
            {
            root_0 = (BaseNode)adaptor.nil();


            char_literal167=(Atom)match(input,138,FOLLOW_138_in_metaDelim8960); if (state.failed) return retval;

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:15: ( NLL !)?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==NLL) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1423:15: NLL !
                    {
                    NLL168=(Atom)match(input,NLL,FOLLOW_NLL_in_metaDelim8963); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metaDelim"


    public static class metaArg_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metaArg"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1425:1: metaArg : ( primitiveLit | typeNameScalar );
    public final pollenParser.metaArg_return metaArg() throws RecognitionException {
        pollenParser.metaArg_return retval = new pollenParser.metaArg_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit169 =null;

        pollenParser.typeNameScalar_return typeNameScalar170 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1426:5: ( primitiveLit | typeNameScalar )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==CHAR||LA61_0==HEX_LIT||LA61_0==INT_LIT||LA61_0==OCT_LIT||LA61_0==REAL_LIT||LA61_0==STRING||LA61_0==166||LA61_0==180||LA61_0==192) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENT||LA61_0==150||LA61_0==152||(LA61_0 >= 173 && LA61_0 <= 175)||LA61_0==188||LA61_0==190||(LA61_0 >= 194 && LA61_0 <= 196)) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1426:7: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_metaArg8981);
                    primitiveLit169=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit169.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1427:13: typeNameScalar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_typeNameScalar_in_metaArg8995);
                    typeNameScalar170=typeNameScalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar170.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metaArg"


    public static class typeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1430:1: typeName : typeNameScalar ;
    public final pollenParser.typeName_return typeName() throws RecognitionException {
        pollenParser.typeName_return retval = new pollenParser.typeName_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.typeNameScalar_return typeNameScalar171 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1431:5: ( typeNameScalar )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1431:10: typeNameScalar
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeNameScalar_in_typeName9017);
            typeNameScalar171=typeNameScalar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameScalar171.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeName"


    public static class typeNameScalar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameScalar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1433:1: typeNameScalar : ( builtinType -> ^( T_STD[\"T_STD\", typeMods] builtinType ) | userTypeName );
    public final pollenParser.typeNameScalar_return typeNameScalar() throws RecognitionException {
        pollenParser.typeNameScalar_return retval = new pollenParser.typeNameScalar_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType172 =null;

        pollenParser.userTypeName_return userTypeName173 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1434:5: ( builtinType -> ^( T_STD[\"T_STD\", typeMods] builtinType ) | userTypeName )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==150||LA62_0==152||(LA62_0 >= 173 && LA62_0 <= 175)||LA62_0==188||LA62_0==190||(LA62_0 >= 194 && LA62_0 <= 196)) ) {
                alt62=1;
            }
            else if ( (LA62_0==IDENT) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1434:10: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameScalar9048);
                    builtinType172=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType172.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1434:25: -> ^( T_STD[\"T_STD\", typeMods] builtinType )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1434:28: ^( T_STD[\"T_STD\", typeMods] builtinType )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", typeMods)
                        , root_1);

                        adaptor.addChild(root_1, stream_builtinType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1435:10: userTypeName
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_typeNameScalar9076);
                    userTypeName173=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeName173.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeNameScalar"


    public static class userTypeName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1437:1: userTypeName : qualName -> ^( T_USR[\"T_USR\", typeMods] qualName ) ;
    public final pollenParser.userTypeName_return userTypeName() throws RecognitionException {
        pollenParser.userTypeName_return retval = new pollenParser.userTypeName_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.qualName_return qualName174 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1438:5: ( qualName -> ^( T_USR[\"T_USR\", typeMods] qualName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1438:10: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeName9095);
            qualName174=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName174.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1438:22: -> ^( T_USR[\"T_USR\", typeMods] qualName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1438:25: ^( T_USR[\"T_USR\", typeMods] qualName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", typeMods)
                , root_1);

                adaptor.addChild(root_1, stream_qualName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "userTypeName"


    public static class typeNameArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeNameArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1440:1: typeNameArray : ( builtinType -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) ) | userTypeNameArr );
    public final pollenParser.typeNameArray_return typeNameArray() throws RecognitionException {
        pollenParser.typeNameArray_return retval = new pollenParser.typeNameArray_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType175 =null;

        pollenParser.userTypeNameArr_return userTypeNameArr176 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1441:5: ( builtinType -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) ) | userTypeNameArr )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==150||LA63_0==152||(LA63_0 >= 173 && LA63_0 <= 175)||LA63_0==188||LA63_0==190||(LA63_0 >= 194 && LA63_0 <= 196)) ) {
                alt63=1;
            }
            else if ( (LA63_0==IDENT) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1441:10: builtinType
                    {
                    pushFollow(FOLLOW_builtinType_in_typeNameArray9139);
                    builtinType175=builtinType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtinType.add(builtinType175.getTree());

                    // AST REWRITE
                    // elements: builtinType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1441:25: -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1441:28: ^( T_ARR[\"T_ARR\", typeMods] ^( T_STD[\"T_STD\", typeMods] builtinType ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Arr(T_ARR, "T_ARR", typeMods)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1441:69: ^( T_STD[\"T_STD\", typeMods] builtinType )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_builtinType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1442:10: userTypeNameArr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeNameArr_in_typeNameArray9177);
                    userTypeNameArr176=userTypeNameArr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, userTypeNameArr176.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeNameArray"


    public static class userTypeNameArr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userTypeNameArr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1444:1: userTypeNameArr : qualName -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) ) ;
    public final pollenParser.userTypeNameArr_return userTypeNameArr() throws RecognitionException {
        pollenParser.userTypeNameArr_return retval = new pollenParser.userTypeNameArr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.qualName_return qualName177 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:5: ( qualName -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:10: qualName
            {
            pushFollow(FOLLOW_qualName_in_userTypeNameArr9196);
            qualName177=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName177.getTree());

            // AST REWRITE
            // elements: qualName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1445:22: -> ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:25: ^( T_ARR[\"T_ARR\", typeMods] ^( T_USR[\"T_USR\", typeMods] qualName ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Arr(T_ARR, "T_ARR", typeMods)
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1445:66: ^( T_USR[\"T_USR\", typeMods] qualName )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", typeMods)
                , root_2);

                adaptor.addChild(root_2, stream_qualName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "userTypeNameArr"


    protected static class unitTypeDefinition_scope {
        Object meta;
        boolean publicEnum;
    }
    protected Stack unitTypeDefinition_stack = new Stack();


    public static class unitTypeDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unitTypeDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1448:1: unitTypeDefinition : ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition ) ;
    public final pollenParser.unitTypeDefinition_return unitTypeDefinition() throws RecognitionException {
        unitTypeDefinition_stack.push(new unitTypeDefinition_scope());
        pollenParser.unitTypeDefinition_return retval = new pollenParser.unitTypeDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.meta_return meta178 =null;

        pollenParser.moduleDefinition_return moduleDefinition179 =null;

        pollenParser.classDefinition_return classDefinition180 =null;

        pollenParser.protocolDefinition_return protocolDefinition181 =null;

        pollenParser.compositionDefinition_return compositionDefinition182 =null;

        pollenParser.enumUnitDefinition_return enumUnitDefinition183 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:4: ( ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:8: ( meta !) ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition )
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:8: ( meta !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1458:9: meta !
            {
            pushFollow(FOLLOW_meta_in_unitTypeDefinition9250);
            meta178=meta();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { ((unitTypeDefinition_scope)unitTypeDefinition_stack.peek()).meta = (meta178!=null?((BaseNode)meta178.tree):null); }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1460:6: ( ( 'module' )=> moduleDefinition | ( 'class' )=> classDefinition | ( 'protocol' )=> protocolDefinition | ( 'composition' )=> compositionDefinition | ( 'enum' )=> enumUnitDefinition )
            int alt64=5;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==178) && (synpred18_pollen())) {
                alt64=1;
            }
            else if ( (LA64_0==154) && (synpred19_pollen())) {
                alt64=2;
            }
            else if ( (LA64_0==185) && (synpred20_pollen())) {
                alt64=3;
            }
            else if ( (LA64_0==155) && (synpred21_pollen())) {
                alt64=4;
            }
            else if ( (LA64_0==162) && (synpred22_pollen())) {
                alt64=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:14: ( 'module' )=> moduleDefinition
                    {
                    pushFollow(FOLLOW_moduleDefinition_in_unitTypeDefinition9292);
                    moduleDefinition179=moduleDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moduleDefinition179.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1462:14: ( 'class' )=> classDefinition
                    {
                    pushFollow(FOLLOW_classDefinition_in_unitTypeDefinition9325);
                    classDefinition180=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition180.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1463:14: ( 'protocol' )=> protocolDefinition
                    {
                    pushFollow(FOLLOW_protocolDefinition_in_unitTypeDefinition9346);
                    protocolDefinition181=protocolDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocolDefinition181.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:14: ( 'composition' )=> compositionDefinition
                    {
                    pushFollow(FOLLOW_compositionDefinition_in_unitTypeDefinition9368);
                    compositionDefinition182=compositionDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compositionDefinition182.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:14: ( 'enum' )=> enumUnitDefinition
                    {
                    pushFollow(FOLLOW_enumUnitDefinition_in_unitTypeDefinition9390);
                    enumUnitDefinition183=enumUnitDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumUnitDefinition183.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               // debug
               if (ParseUnit.isDebugMode())
                System.out.println("       " + currType.getTypeName() + ", " + currType.getUnitFlags().toString());
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            unitTypeDefinition_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "unitTypeDefinition"


    public static class extendsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extendsClause"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1469:1: extendsClause : ( 'extends' qualName -> qualName | -> NIL );
    public final pollenParser.extendsClause_return extendsClause() throws RecognitionException {
        pollenParser.extendsClause_return retval = new pollenParser.extendsClause_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal184=null;
        pollenParser.qualName_return qualName185 =null;


        BaseNode string_literal184_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:5: ( 'extends' qualName -> qualName | -> NIL )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==165) ) {
                alt65=1;
            }
            else if ( (LA65_0==BRACE_OP||LA65_0==NLL||LA65_0==171) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1470:9: 'extends' qualName
                    {
                    string_literal184=(Atom)match(input,165,FOLLOW_165_in_extendsClause9416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_165.add(string_literal184);


                    pushFollow(FOLLOW_qualName_in_extendsClause9418);
                    qualName185=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName185.getTree());

                    if ( state.backtracking==0 ) {
                            if (currType.getUnitFlags().contains(Flags.CLASS) || currType.getUnitFlags().contains(Flags.MODULE))
                                throw new PollenException("\'extends\' clause is not supported for classes or modules", input);
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1475:6: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1476:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1476:11: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extendsClause"


    public static class implementsClause_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementsClause"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1479:1: implementsClause : ( 'implements' qualName -> qualName | -> NIL );
    public final pollenParser.implementsClause_return implementsClause() throws RecognitionException {
        pollenParser.implementsClause_return retval = new pollenParser.implementsClause_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal186=null;
        pollenParser.qualName_return qualName187 =null;


        BaseNode string_literal186_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1480:5: ( 'implements' qualName -> qualName | -> NIL )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==171) ) {
                alt66=1;
            }
            else if ( (LA66_0==BRACE_OP||LA66_0==NLL) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1480:9: 'implements' qualName
                    {
                    string_literal186=(Atom)match(input,171,FOLLOW_171_in_implementsClause9466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(string_literal186);


                    pushFollow(FOLLOW_qualName_in_implementsClause9468);
                    qualName187=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName187.getTree());

                    if ( state.backtracking==0 ) {
                            if (currType.getUnitFlags().contains(Flags.PROTOCOL))
                                throw new PollenException("\'implements\' clause is not supported for protocols", input);
                            
                        }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1486:9: -> qualName
                    {
                        adaptor.addChild(root_0, stream_qualName.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1487:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1487:11: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementsClause"


    public static class braceCloseNLL_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceCloseNLL"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1489:1: braceCloseNLL : ( ( BRACE_CL NLL )=> BRACE_CL ! ( NLL !) | BRACE_CL !);
    public final pollenParser.braceCloseNLL_return braceCloseNLL() throws RecognitionException {
        pollenParser.braceCloseNLL_return retval = new pollenParser.braceCloseNLL_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom BRACE_CL188=null;
        Atom NLL189=null;
        Atom BRACE_CL190=null;

        BaseNode BRACE_CL188_tree=null;
        BaseNode NLL189_tree=null;
        BaseNode BRACE_CL190_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:5: ( ( BRACE_CL NLL )=> BRACE_CL ! ( NLL !) | BRACE_CL !)
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==BRACE_CL) ) {
                int LA67_1 = input.LA(2);

                if ( (synpred23_pollen()) ) {
                    alt67=1;
                }
                else if ( (true) ) {
                    alt67=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:10: ( BRACE_CL NLL )=> BRACE_CL ! ( NLL !)
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_CL188=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_braceCloseNLL9528); if (state.failed) return retval;

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:38: ( NLL !)
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:39: NLL !
                    {
                    NLL189=(Atom)match(input,NLL,FOLLOW_NLL_in_braceCloseNLL9532); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1491:11: BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_CL190=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_braceCloseNLL9546); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (NoViableAltException ne) {
              
                    ParseUnit.current().reportFailure("Invalid token between '{'...'}'. Check that all statements are terminated by a newline or semicolon.");
                
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "braceCloseNLL"


    public static class braceOpenNLL_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceOpenNLL"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1501:1: braceOpenNLL : ( ( BRACE_OP NLL )=> BRACE_OP ! ( NLL !) | BRACE_OP !);
    public final pollenParser.braceOpenNLL_return braceOpenNLL() throws RecognitionException {
        pollenParser.braceOpenNLL_return retval = new pollenParser.braceOpenNLL_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom BRACE_OP191=null;
        Atom NLL192=null;
        Atom BRACE_OP193=null;

        BaseNode BRACE_OP191_tree=null;
        BaseNode NLL192_tree=null;
        BaseNode BRACE_OP193_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:5: ( ( BRACE_OP NLL )=> BRACE_OP ! ( NLL !) | BRACE_OP !)
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==BRACE_OP) ) {
                int LA68_1 = input.LA(2);

                if ( (synpred24_pollen()) ) {
                    alt68=1;
                }
                else if ( (true) ) {
                    alt68=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:8: ( BRACE_OP NLL )=> BRACE_OP ! ( NLL !)
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP191=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_braceOpenNLL9583); if (state.failed) return retval;

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:36: ( NLL !)
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:37: NLL !
                    {
                    NLL192=(Atom)match(input,NLL,FOLLOW_NLL_in_braceOpenNLL9587); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1503:10: BRACE_OP !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_OP193=(Atom)match(input,BRACE_OP,FOLLOW_BRACE_OP_in_braceOpenNLL9600); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "braceOpenNLL"


    public static class equalityOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1505:1: equalityOp : ( EQ | NOT_EQ );
    public final pollenParser.equalityOp_return equalityOp() throws RecognitionException {
        pollenParser.equalityOp_return retval = new pollenParser.equalityOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set194=null;

        BaseNode set194_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1506:5: ( EQ | NOT_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set194=(Atom)input.LT(1);

            if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set194)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equalityOp"


    public static class relationalOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relationalOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1508:1: relationalOp : ( LT | GT | LT_EQ | GT_EQ );
    public final pollenParser.relationalOp_return relationalOp() throws RecognitionException {
        pollenParser.relationalOp_return retval = new pollenParser.relationalOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set195=null;

        BaseNode set195_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1509:5: ( LT | GT | LT_EQ | GT_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set195=(Atom)input.LT(1);

            if ( (input.LA(1) >= GT && input.LA(1) <= GT_EQ)||(input.LA(1) >= LT && input.LA(1) <= LT_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set195)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relationalOp"


    public static class shiftOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shiftOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1511:1: shiftOp : ( '<<' | '>>' );
    public final pollenParser.shiftOp_return shiftOp() throws RecognitionException {
        pollenParser.shiftOp_return retval = new pollenParser.shiftOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set196=null;

        BaseNode set196_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1512:5: ( '<<' | '>>' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set196=(Atom)input.LT(1);

            if ( (input.LA(1) >= 142 && input.LA(1) <= 143) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set196)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shiftOp"


    public static class incDecOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incDecOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1514:1: incDecOp : ( INC | DEC );
    public final pollenParser.incDecOp_return incDecOp() throws RecognitionException {
        pollenParser.incDecOp_return retval = new pollenParser.incDecOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set197=null;

        BaseNode set197_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1515:5: ( INC | DEC )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set197=(Atom)input.LT(1);

            if ( input.LA(1)==DEC||input.LA(1)==INC ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set197)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incDecOp"


    public static class addSubOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addSubOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1517:1: addSubOp : ( PLUS | MINUS );
    public final pollenParser.addSubOp_return addSubOp() throws RecognitionException {
        pollenParser.addSubOp_return retval = new pollenParser.addSubOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set198=null;

        BaseNode set198_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1518:5: ( PLUS | MINUS )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set198=(Atom)input.LT(1);

            if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set198)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "addSubOp"


    public static class assignOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1520:1: assignOp : ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ );
    public final pollenParser.assignOp_return assignOp() throws RecognitionException {
        pollenParser.assignOp_return retval = new pollenParser.assignOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set199=null;

        BaseNode set199_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1521:5: ( ADD_EQ | SUB_EQ | MUL_EQ | DIV_EQ | MOD_EQ | LSHFT_EQ | RSHFT_EQ | BITAND_EQ | BITXOR_EQ | BITOR_EQ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set199=(Atom)input.LT(1);

            if ( input.LA(1)==ADD_EQ||(input.LA(1) >= BITAND_EQ && input.LA(1) <= BITXOR_EQ)||input.LA(1)==DIV_EQ||input.LA(1)==LSHFT_EQ||input.LA(1)==MOD_EQ||input.LA(1)==MUL_EQ||input.LA(1)==RSHFT_EQ||input.LA(1)==SUB_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set199)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assignOp"


    public static class multDivModOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multDivModOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1523:1: multDivModOp : ( '*' | '/' | '%' );
    public final pollenParser.multDivModOp_return multDivModOp() throws RecognitionException {
        pollenParser.multDivModOp_return retval = new pollenParser.multDivModOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set200=null;

        BaseNode set200_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1524:5: ( '*' | '/' | '%' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
            {
            root_0 = (BaseNode)adaptor.nil();


            set200=(Atom)input.LT(1);

            if ( input.LA(1)==132||input.LA(1)==137||input.LA(1)==140 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set200)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multDivModOp"


    public static class logicalNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalNotOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1526:1: logicalNotOp : LOG_NOT ;
    public final pollenParser.logicalNotOp_return logicalNotOp() throws RecognitionException {
        pollenParser.logicalNotOp_return retval = new pollenParser.logicalNotOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom LOG_NOT201=null;

        BaseNode LOG_NOT201_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1527:5: ( LOG_NOT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1527:11: LOG_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            LOG_NOT201=(Atom)match(input,LOG_NOT,FOLLOW_LOG_NOT_in_logicalNotOp9869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOG_NOT201_tree = 
            (BaseNode)adaptor.create(LOG_NOT201)
            ;
            adaptor.addChild(root_0, LOG_NOT201_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "logicalNotOp"


    public static class bitwiseNotOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitwiseNotOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1529:1: bitwiseNotOp : BIT_NOT ;
    public final pollenParser.bitwiseNotOp_return bitwiseNotOp() throws RecognitionException {
        pollenParser.bitwiseNotOp_return retval = new pollenParser.bitwiseNotOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom BIT_NOT202=null;

        BaseNode BIT_NOT202_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1530:5: ( BIT_NOT )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1530:10: BIT_NOT
            {
            root_0 = (BaseNode)adaptor.nil();


            BIT_NOT202=(Atom)match(input,BIT_NOT,FOLLOW_BIT_NOT_in_bitwiseNotOp9892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIT_NOT202_tree = 
            (BaseNode)adaptor.create(BIT_NOT202)
            ;
            adaptor.addChild(root_0, BIT_NOT202_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bitwiseNotOp"


    public static class exprList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1532:1: exprList : ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.exprList_return exprList() throws RecognitionException {
        pollenParser.exprList_return retval = new pollenParser.exprList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal204=null;
        pollenParser.expr_return expr203 =null;

        pollenParser.expr_return expr205 =null;


        BaseNode char_literal204_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1533:5: ( expr ( ',' expr )* -> ^( LIST[\"LIST\"] ( expr )+ ) | -> LIST[\"LIST\"] )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==BIT_NOT||LA70_0==CHAR||LA70_0==DEC||LA70_0==HEX_LIT||LA70_0==IDENT||(LA70_0 >= INC && LA70_0 <= INT_LIT)||LA70_0==LOG_NOT||LA70_0==MINUS||LA70_0==OCT_LIT||LA70_0==REAL_LIT||LA70_0==STRING||LA70_0==135||LA70_0==145||LA70_0==166||LA70_0==180||LA70_0==192) ) {
                alt70=1;
            }
            else if ( (LA70_0==136||LA70_0==147) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1533:10: expr ( ',' expr )*
                    {
                    pushFollow(FOLLOW_expr_in_exprList9912);
                    expr203=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr203.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1533:15: ( ',' expr )*
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==138) ) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1533:16: ',' expr
                    	    {
                    	    char_literal204=(Atom)match(input,138,FOLLOW_138_in_exprList9915); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal204);


                    	    pushFollow(FOLLOW_expr_in_exprList9917);
                    	    expr205=expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(expr205.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1534:9: -> ^( LIST[\"LIST\"] ( expr )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1534:12: ^( LIST[\"LIST\"] ( expr )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1535:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1535:10: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprList"


    public static class expr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1538:1: expr : exprLogicalOr exprQuestOp[$exprLogicalOr.tree] !;
    public final pollenParser.expr_return expr() throws RecognitionException {
        pollenParser.expr_return retval = new pollenParser.expr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprLogicalOr_return exprLogicalOr206 =null;

        pollenParser.exprQuestOp_return exprQuestOp207 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1539:4: ( exprLogicalOr exprQuestOp[$exprLogicalOr.tree] !)
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1539:9: exprLogicalOr exprQuestOp[$exprLogicalOr.tree] !
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprLogicalOr_in_expr9980);
            exprLogicalOr206=exprLogicalOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprLogicalOr206.getTree());

            pushFollow(FOLLOW_exprQuestOp_in_expr9982);
            exprQuestOp207=exprQuestOp((exprLogicalOr206!=null?((BaseNode)exprLogicalOr206.tree):null));

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class exprQuestOp_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprQuestOp"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1541:1: exprQuestOp[CommonTree expr] : ( '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] expr expr ) |);
    public final pollenParser.exprQuestOp_return exprQuestOp(CommonTree expr) throws RecognitionException {
        pollenParser.exprQuestOp_return retval = new pollenParser.exprQuestOp_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal208=null;
        Atom char_literal210=null;
        pollenParser.expr_return expr209 =null;

        pollenParser.expr_return expr211 =null;


        BaseNode char_literal208_tree=null;
        BaseNode char_literal210_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1547:4: ( '?' expr ':' expr -> ^( E_QUEST[\"E_QUEST\"] expr expr ) |)
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==144) ) {
                alt71=1;
            }
            else if ( (LA71_0==EOF||LA71_0==BRACE_CL||LA71_0==NLL||LA71_0==SEMI||LA71_0==136||LA71_0==138||LA71_0==141||LA71_0==147) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }
            switch (alt71) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1547:8: '?' expr ':' expr
                    {
                    char_literal208=(Atom)match(input,144,FOLLOW_144_in_exprQuestOp10006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_144.add(char_literal208);


                    pushFollow(FOLLOW_expr_in_exprQuestOp10008);
                    expr209=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr209.getTree());

                    char_literal210=(Atom)match(input,141,FOLLOW_141_in_exprQuestOp10010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal210);


                    pushFollow(FOLLOW_expr_in_exprQuestOp10012);
                    expr211=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr211.getTree());

                    // AST REWRITE
                    // elements: expr, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1547:26: -> ^( E_QUEST[\"E_QUEST\"] expr expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1547:30: ^( E_QUEST[\"E_QUEST\"] expr expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Quest(E_QUEST, "E_QUEST")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1549:4: 
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                  if (((BaseNode)retval.tree)  != null) {
                       expr.addChild(((BaseNode)retval.tree));
                  }
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprQuestOp"


    public static class exprLogicalOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalOr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1550:1: exprLogicalOr : ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* ;
    public final pollenParser.exprLogicalOr_return exprLogicalOr() throws RecognitionException {
        pollenParser.exprLogicalOr_return retval = new pollenParser.exprLogicalOr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal213=null;
        pollenParser.exprLogicalAnd_return exprLogicalAnd212 =null;

        pollenParser.exprLogicalAnd_return exprLogicalAnd214 =null;


        BaseNode string_literal213_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleSubtreeStream stream_exprLogicalAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprLogicalAnd");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1551:5: ( ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1551:7: ( exprLogicalAnd -> exprLogicalAnd ) ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1551:7: ( exprLogicalAnd -> exprLogicalAnd )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1551:8: exprLogicalAnd
            {
            pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr10051);
            exprLogicalAnd212=exprLogicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd212.getTree());

            // AST REWRITE
            // elements: exprLogicalAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1551:23: -> exprLogicalAnd
            {
                adaptor.addChild(root_0, stream_exprLogicalAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1552:9: ( '||' exprLogicalAnd -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd ) )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==200) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1553:13: '||' exprLogicalAnd
            	    {
            	    string_literal213=(Atom)match(input,200,FOLLOW_200_in_exprLogicalOr10080); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_200.add(string_literal213);


            	    pushFollow(FOLLOW_exprLogicalAnd_in_exprLogicalOr10082);
            	    exprLogicalAnd214=exprLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprLogicalAnd.add(exprLogicalAnd214.getTree());

            	    // AST REWRITE
            	    // elements: 200, exprLogicalOr, exprLogicalAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1554:17: -> ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1554:20: ^( E_BINARY[\"E_BINARY\"] '||' $exprLogicalOr exprLogicalAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_200.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprLogicalAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprLogicalOr"


    public static class exprLogicalAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprLogicalAnd"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1557:1: exprLogicalAnd : ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* ;
    public final pollenParser.exprLogicalAnd_return exprLogicalAnd() throws RecognitionException {
        pollenParser.exprLogicalAnd_return retval = new pollenParser.exprLogicalAnd_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal216=null;
        pollenParser.exprBitwiseOr_return exprBitwiseOr215 =null;

        pollenParser.exprBitwiseOr_return exprBitwiseOr217 =null;


        BaseNode string_literal216_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_exprBitwiseOr=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseOr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:5: ( ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:10: ( exprBitwiseOr -> exprBitwiseOr ) ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:10: ( exprBitwiseOr -> exprBitwiseOr )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1558:11: exprBitwiseOr
            {
            pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd10148);
            exprBitwiseOr215=exprBitwiseOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr215.getTree());

            // AST REWRITE
            // elements: exprBitwiseOr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1558:28: -> exprBitwiseOr
            {
                adaptor.addChild(root_0, stream_exprBitwiseOr.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1559:5: ( '&&' exprBitwiseOr -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr ) )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==133) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1560:9: '&&' exprBitwiseOr
            	    {
            	    string_literal216=(Atom)match(input,133,FOLLOW_133_in_exprLogicalAnd10172); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_133.add(string_literal216);


            	    pushFollow(FOLLOW_exprBitwiseOr_in_exprLogicalAnd10174);
            	    exprBitwiseOr217=exprBitwiseOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseOr.add(exprBitwiseOr217.getTree());

            	    // AST REWRITE
            	    // elements: exprLogicalAnd, exprBitwiseOr, 133
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1561:13: -> ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1561:16: ^( E_BINARY[\"E_BINARY\"] '&&' $exprLogicalAnd exprBitwiseOr )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_133.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseOr.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprLogicalAnd"


    public static class exprBitwiseOr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseOr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1564:1: exprBitwiseOr : ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* ;
    public final pollenParser.exprBitwiseOr_return exprBitwiseOr() throws RecognitionException {
        pollenParser.exprBitwiseOr_return retval = new pollenParser.exprBitwiseOr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal219=null;
        pollenParser.exprBitwiseXor_return exprBitwiseXor218 =null;

        pollenParser.exprBitwiseXor_return exprBitwiseXor220 =null;


        BaseNode char_literal219_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleSubtreeStream stream_exprBitwiseXor=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseXor");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:5: ( ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:10: ( exprBitwiseXor -> exprBitwiseXor ) ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:10: ( exprBitwiseXor -> exprBitwiseXor )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1565:11: exprBitwiseXor
            {
            pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr10232);
            exprBitwiseXor218=exprBitwiseXor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor218.getTree());

            // AST REWRITE
            // elements: exprBitwiseXor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1565:26: -> exprBitwiseXor
            {
                adaptor.addChild(root_0, stream_exprBitwiseXor.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1566:5: ( '|' exprBitwiseXor -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor ) )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==199) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1567:9: '|' exprBitwiseXor
            	    {
            	    char_literal219=(Atom)match(input,199,FOLLOW_199_in_exprBitwiseOr10253); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_199.add(char_literal219);


            	    pushFollow(FOLLOW_exprBitwiseXor_in_exprBitwiseOr10255);
            	    exprBitwiseXor220=exprBitwiseXor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseXor.add(exprBitwiseXor220.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseOr, 199, exprBitwiseXor
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1568:9: -> ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1568:12: ^( E_BINARY[\"E_BINARY\"] '|' $exprBitwiseOr exprBitwiseXor )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_199.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseXor.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprBitwiseOr"


    public static class exprBitwiseXor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseXor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1571:1: exprBitwiseXor : ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* ;
    public final pollenParser.exprBitwiseXor_return exprBitwiseXor() throws RecognitionException {
        pollenParser.exprBitwiseXor_return retval = new pollenParser.exprBitwiseXor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal222=null;
        pollenParser.exprBitwiseAnd_return exprBitwiseAnd221 =null;

        pollenParser.exprBitwiseAnd_return exprBitwiseAnd223 =null;


        BaseNode char_literal222_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleSubtreeStream stream_exprBitwiseAnd=new RewriteRuleSubtreeStream(adaptor,"rule exprBitwiseAnd");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1572:5: ( ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1572:10: ( exprBitwiseAnd -> exprBitwiseAnd ) ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1572:10: ( exprBitwiseAnd -> exprBitwiseAnd )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1572:11: exprBitwiseAnd
            {
            pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor10309);
            exprBitwiseAnd221=exprBitwiseAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd221.getTree());

            // AST REWRITE
            // elements: exprBitwiseAnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1572:26: -> exprBitwiseAnd
            {
                adaptor.addChild(root_0, stream_exprBitwiseAnd.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1573:5: ( '^' exprBitwiseAnd -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd ) )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==148) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1574:9: '^' exprBitwiseAnd
            	    {
            	    char_literal222=(Atom)match(input,148,FOLLOW_148_in_exprBitwiseXor10330); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_148.add(char_literal222);


            	    pushFollow(FOLLOW_exprBitwiseAnd_in_exprBitwiseXor10332);
            	    exprBitwiseAnd223=exprBitwiseAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprBitwiseAnd.add(exprBitwiseAnd223.getTree());

            	    // AST REWRITE
            	    // elements: 148, exprBitwiseXor, exprBitwiseAnd
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1575:9: -> ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1575:12: ^( E_BINARY[\"E_BINARY\"] '^' $exprBitwiseXor exprBitwiseAnd )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_148.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprBitwiseAnd.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprBitwiseXor"


    public static class exprBitwiseAnd_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprBitwiseAnd"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1578:1: exprBitwiseAnd : ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* ;
    public final pollenParser.exprBitwiseAnd_return exprBitwiseAnd() throws RecognitionException {
        pollenParser.exprBitwiseAnd_return retval = new pollenParser.exprBitwiseAnd_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal225=null;
        pollenParser.exprEquality_return exprEquality224 =null;

        pollenParser.exprEquality_return exprEquality226 =null;


        BaseNode char_literal225_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleSubtreeStream stream_exprEquality=new RewriteRuleSubtreeStream(adaptor,"rule exprEquality");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:5: ( ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:10: ( exprEquality -> exprEquality ) ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:10: ( exprEquality -> exprEquality )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1579:11: exprEquality
            {
            pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd10386);
            exprEquality224=exprEquality();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality224.getTree());

            // AST REWRITE
            // elements: exprEquality
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1579:24: -> exprEquality
            {
                adaptor.addChild(root_0, stream_exprEquality.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1580:5: ( '&' exprEquality -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality ) )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==134) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1581:9: '&' exprEquality
            	    {
            	    char_literal225=(Atom)match(input,134,FOLLOW_134_in_exprBitwiseAnd10407); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_134.add(char_literal225);


            	    pushFollow(FOLLOW_exprEquality_in_exprBitwiseAnd10412);
            	    exprEquality226=exprEquality();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprEquality.add(exprEquality226.getTree());

            	    // AST REWRITE
            	    // elements: exprBitwiseAnd, 134, exprEquality
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1582:9: -> ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1582:12: ^( E_BINARY[\"E_BINARY\"] '&' $exprBitwiseAnd exprEquality )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, 
            	        stream_134.nextNode()
            	        );

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprEquality.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprBitwiseAnd"


    public static class exprEquality_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprEquality"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1585:1: exprEquality : ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* ;
    public final pollenParser.exprEquality_return exprEquality() throws RecognitionException {
        pollenParser.exprEquality_return retval = new pollenParser.exprEquality_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprRelational_return exprRelational227 =null;

        pollenParser.equalityOp_return equalityOp228 =null;

        pollenParser.exprRelational_return exprRelational229 =null;


        RewriteRuleSubtreeStream stream_equalityOp=new RewriteRuleSubtreeStream(adaptor,"rule equalityOp");
        RewriteRuleSubtreeStream stream_exprRelational=new RewriteRuleSubtreeStream(adaptor,"rule exprRelational");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1586:5: ( ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1586:10: ( exprRelational -> exprRelational ) ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1586:10: ( exprRelational -> exprRelational )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1586:11: exprRelational
            {
            pushFollow(FOLLOW_exprRelational_in_exprEquality10466);
            exprRelational227=exprRelational();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational227.getTree());

            // AST REWRITE
            // elements: exprRelational
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1586:26: -> exprRelational
            {
                adaptor.addChild(root_0, stream_exprRelational.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1587:5: ( equalityOp exprRelational -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational ) )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==EQ||LA77_0==NOT_EQ) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1588:9: equalityOp exprRelational
            	    {
            	    pushFollow(FOLLOW_equalityOp_in_exprEquality10488);
            	    equalityOp228=equalityOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityOp.add(equalityOp228.getTree());

            	    pushFollow(FOLLOW_exprRelational_in_exprEquality10490);
            	    exprRelational229=exprRelational();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprRelational.add(exprRelational229.getTree());

            	    // AST REWRITE
            	    // elements: exprEquality, exprRelational, equalityOp
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1589:9: -> ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1589:12: ^( E_BINARY[\"E_BINARY\"] equalityOp $exprEquality exprRelational )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_equalityOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprRelational.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprEquality"


    public static class exprRelational_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprRelational"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1592:1: exprRelational : ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* ;
    public final pollenParser.exprRelational_return exprRelational() throws RecognitionException {
        pollenParser.exprRelational_return retval = new pollenParser.exprRelational_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprShift_return exprShift230 =null;

        pollenParser.relationalOp_return relationalOp231 =null;

        pollenParser.exprShift_return exprShift232 =null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_exprShift=new RewriteRuleSubtreeStream(adaptor,"rule exprShift");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1593:5: ( ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1593:10: ( exprShift -> exprShift ) ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1593:10: ( exprShift -> exprShift )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1593:11: exprShift
            {
            pushFollow(FOLLOW_exprShift_in_exprRelational10544);
            exprShift230=exprShift();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprShift.add(exprShift230.getTree());

            // AST REWRITE
            // elements: exprShift
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1593:21: -> exprShift
            {
                adaptor.addChild(root_0, stream_exprShift.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1594:5: ( relationalOp exprShift -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift ) )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0 >= GT && LA78_0 <= GT_EQ)||(LA78_0 >= LT && LA78_0 <= LT_EQ)) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1595:9: relationalOp exprShift
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_exprRelational10566);
            	    relationalOp231=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relationalOp.add(relationalOp231.getTree());

            	    pushFollow(FOLLOW_exprShift_in_exprRelational10568);
            	    exprShift232=exprShift();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprShift.add(exprShift232.getTree());

            	    // AST REWRITE
            	    // elements: exprShift, relationalOp, exprRelational
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1596:9: -> ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1596:12: ^( E_BINARY[\"E_BINARY\"] relationalOp $exprRelational exprShift )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_relationalOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprShift.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprRelational"


    public static class exprShift_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprShift"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1599:1: exprShift : ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* ;
    public final pollenParser.exprShift_return exprShift() throws RecognitionException {
        pollenParser.exprShift_return retval = new pollenParser.exprShift_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprAddSub_return exprAddSub233 =null;

        pollenParser.shiftOp_return shiftOp234 =null;

        pollenParser.exprAddSub_return exprAddSub235 =null;


        RewriteRuleSubtreeStream stream_exprAddSub=new RewriteRuleSubtreeStream(adaptor,"rule exprAddSub");
        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1600:5: ( ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1600:10: ( exprAddSub -> exprAddSub ) ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1600:10: ( exprAddSub -> exprAddSub )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1600:11: exprAddSub
            {
            pushFollow(FOLLOW_exprAddSub_in_exprShift10623);
            exprAddSub233=exprAddSub();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub233.getTree());

            // AST REWRITE
            // elements: exprAddSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1600:22: -> exprAddSub
            {
                adaptor.addChild(root_0, stream_exprAddSub.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1601:5: ( shiftOp exprAddSub -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub ) )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( ((LA79_0 >= 142 && LA79_0 <= 143)) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1602:9: shiftOp exprAddSub
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_exprShift10645);
            	    shiftOp234=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftOp.add(shiftOp234.getTree());

            	    pushFollow(FOLLOW_exprAddSub_in_exprShift10648);
            	    exprAddSub235=exprAddSub();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprAddSub.add(exprAddSub235.getTree());

            	    // AST REWRITE
            	    // elements: shiftOp, exprAddSub, exprShift
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1603:9: -> ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1603:12: ^( E_BINARY[\"E_BINARY\"] shiftOp $exprShift exprAddSub )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_shiftOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprAddSub.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprShift"


    public static class exprAddSub_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAddSub"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1606:1: exprAddSub : ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* ;
    public final pollenParser.exprAddSub_return exprAddSub() throws RecognitionException {
        pollenParser.exprAddSub_return retval = new pollenParser.exprAddSub_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprMultDiv_return exprMultDiv236 =null;

        pollenParser.addSubOp_return addSubOp237 =null;

        pollenParser.exprMultDiv_return exprMultDiv238 =null;


        RewriteRuleSubtreeStream stream_exprMultDiv=new RewriteRuleSubtreeStream(adaptor,"rule exprMultDiv");
        RewriteRuleSubtreeStream stream_addSubOp=new RewriteRuleSubtreeStream(adaptor,"rule addSubOp");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1607:5: ( ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1607:10: ( exprMultDiv -> exprMultDiv ) ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1607:10: ( exprMultDiv -> exprMultDiv )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1607:11: exprMultDiv
            {
            pushFollow(FOLLOW_exprMultDiv_in_exprAddSub10703);
            exprMultDiv236=exprMultDiv();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv236.getTree());

            // AST REWRITE
            // elements: exprMultDiv
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1607:23: -> exprMultDiv
            {
                adaptor.addChild(root_0, stream_exprMultDiv.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1608:5: ( addSubOp exprMultDiv -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv ) )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==MINUS||LA80_0==PLUS) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1609:9: addSubOp exprMultDiv
            	    {
            	    pushFollow(FOLLOW_addSubOp_in_exprAddSub10724);
            	    addSubOp237=addSubOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_addSubOp.add(addSubOp237.getTree());

            	    pushFollow(FOLLOW_exprMultDiv_in_exprAddSub10729);
            	    exprMultDiv238=exprMultDiv();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprMultDiv.add(exprMultDiv238.getTree());

            	    // AST REWRITE
            	    // elements: exprAddSub, addSubOp, exprMultDiv
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1610:9: -> ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1610:12: ^( E_BINARY[\"E_BINARY\"] addSubOp $exprAddSub exprMultDiv )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_addSubOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprMultDiv.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprAddSub"


    public static class exprMultDiv_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprMultDiv"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1613:1: exprMultDiv : ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* ;
    public final pollenParser.exprMultDiv_return exprMultDiv() throws RecognitionException {
        pollenParser.exprMultDiv_return retval = new pollenParser.exprMultDiv_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprUnary_return exprUnary239 =null;

        pollenParser.multDivModOp_return multDivModOp240 =null;

        pollenParser.exprUnary_return exprUnary241 =null;


        RewriteRuleSubtreeStream stream_multDivModOp=new RewriteRuleSubtreeStream(adaptor,"rule multDivModOp");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1614:5: ( ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1614:10: ( exprUnary -> exprUnary ) ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1614:10: ( exprUnary -> exprUnary )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1614:11: exprUnary
            {
            pushFollow(FOLLOW_exprUnary_in_exprMultDiv10787);
            exprUnary239=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary239.getTree());

            // AST REWRITE
            // elements: exprUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1614:21: -> exprUnary
            {
                adaptor.addChild(root_0, stream_exprUnary.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1615:5: ( multDivModOp exprUnary -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary ) )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==132||LA81_0==137||LA81_0==140) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1616:9: multDivModOp exprUnary
            	    {
            	    pushFollow(FOLLOW_multDivModOp_in_exprMultDiv10808);
            	    multDivModOp240=multDivModOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multDivModOp.add(multDivModOp240.getTree());

            	    pushFollow(FOLLOW_exprUnary_in_exprMultDiv10810);
            	    exprUnary241=exprUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary241.getTree());

            	    // AST REWRITE
            	    // elements: multDivModOp, exprMultDiv, exprUnary
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (BaseNode)adaptor.nil();
            	    // 1617:9: -> ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	    {
            	        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1617:12: ^( E_BINARY[\"E_BINARY\"] multDivModOp $exprMultDiv exprUnary )
            	        {
            	        BaseNode root_1 = (BaseNode)adaptor.nil();
            	        root_1 = (BaseNode)adaptor.becomeRoot(
            	        new ExprNode.Binary(E_BINARY, "E_BINARY")
            	        , root_1);

            	        adaptor.addChild(root_1, stream_multDivModOp.nextTree());

            	        adaptor.addChild(root_1, stream_retval.nextTree());

            	        adaptor.addChild(root_1, stream_exprUnary.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprMultDiv"


    public static class exprNew_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprNew"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1620:1: exprNew : 'new' qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) ) ;
    public final pollenParser.exprNew_return exprNew() throws RecognitionException {
        pollenParser.exprNew_return retval = new pollenParser.exprNew_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal242=null;
        pollenParser.qualName_return qualName243 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList244 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess245 =null;


        BaseNode string_literal242_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");

            String ctor = (typeMods.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;
            if (!(typeMods.contains(Flags.HOST)))
                ctor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:5: ( 'new' qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:7: 'new' qualName fcnArgumentList ( fieldOrArrayAccess )?
            {
            string_literal242=(Atom)match(input,179,FOLLOW_179_in_exprNew10870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal242);


            pushFollow(FOLLOW_qualName_in_exprNew10872);
            qualName243=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName243.getTree());

            pushFollow(FOLLOW_fcnArgumentList_in_exprNew10874);
            fcnArgumentList244=fcnArgumentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList244.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:38: ( fieldOrArrayAccess )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==139||LA82_0==146) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1627:38: fieldOrArrayAccess
                    {
                    pushFollow(FOLLOW_fieldOrArrayAccess_in_exprNew10876);
                    fieldOrArrayAccess245=fieldOrArrayAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess245.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: fcnArgumentList, fieldOrArrayAccess
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1628:5: -> ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1628:8: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.New(E_NEW, "E_NEW")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1629:13: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ( fieldOrArrayAccess )? )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Call(E_CALL, "E_CALL")
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:13: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Ident(E_IDENT, "E_IDENT")
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, (qualName243!=null?input.toString(qualName243.start,qualName243.stop):null) + "." + ctor)
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1630:102: ( fieldOrArrayAccess )?
                if ( stream_fieldOrArrayAccess.hasNext() ) {
                    adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                }
                stream_fieldOrArrayAccess.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprNew"


    public static class exprUnary_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprUnary"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1633:1: exprUnary : ( injectionCode | logicalNotOp exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary logicalNotOp ) | bitwiseNotOp exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary bitwiseNotOp ) | MINUS exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary MINUS ) | incDecOp exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary incDecOp ) | ( varOrFcnOrArray incDecOp )=> exprPrimary incDecOp -> ^( E_UNARY[\"E_UNARY\", true] exprPrimary incDecOp ) | exprPrimary );
    public final pollenParser.exprUnary_return exprUnary() throws RecognitionException {
        pollenParser.exprUnary_return retval = new pollenParser.exprUnary_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom MINUS251=null;
        pollenParser.injectionCode_return injectionCode246 =null;

        pollenParser.logicalNotOp_return logicalNotOp247 =null;

        pollenParser.exprPrimary_return exprPrimary248 =null;

        pollenParser.bitwiseNotOp_return bitwiseNotOp249 =null;

        pollenParser.exprPrimary_return exprPrimary250 =null;

        pollenParser.exprPrimary_return exprPrimary252 =null;

        pollenParser.incDecOp_return incDecOp253 =null;

        pollenParser.exprPrimary_return exprPrimary254 =null;

        pollenParser.exprPrimary_return exprPrimary255 =null;

        pollenParser.incDecOp_return incDecOp256 =null;

        pollenParser.exprPrimary_return exprPrimary257 =null;


        BaseNode MINUS251_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_incDecOp=new RewriteRuleSubtreeStream(adaptor,"rule incDecOp");
        RewriteRuleSubtreeStream stream_bitwiseNotOp=new RewriteRuleSubtreeStream(adaptor,"rule bitwiseNotOp");
        RewriteRuleSubtreeStream stream_exprPrimary=new RewriteRuleSubtreeStream(adaptor,"rule exprPrimary");
        RewriteRuleSubtreeStream stream_logicalNotOp=new RewriteRuleSubtreeStream(adaptor,"rule logicalNotOp");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1634:5: ( injectionCode | logicalNotOp exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary logicalNotOp ) | bitwiseNotOp exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary bitwiseNotOp ) | MINUS exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary MINUS ) | incDecOp exprPrimary -> ^( E_UNARY[\"E_UNARY\"] exprPrimary incDecOp ) | ( varOrFcnOrArray incDecOp )=> exprPrimary incDecOp -> ^( E_UNARY[\"E_UNARY\", true] exprPrimary incDecOp ) | exprPrimary )
            int alt83=7;
            switch ( input.LA(1) ) {
            case INJECT:
                {
                alt83=1;
                }
                break;
            case LOG_NOT:
                {
                alt83=2;
                }
                break;
            case BIT_NOT:
                {
                alt83=3;
                }
                break;
            case MINUS:
                {
                alt83=4;
                }
                break;
            case DEC:
            case INC:
                {
                alt83=5;
                }
                break;
            case 166:
            case 192:
                {
                int LA83_6 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 6, input);

                    throw nvae;

                }
                }
                break;
            case INT_LIT:
                {
                int LA83_7 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 7, input);

                    throw nvae;

                }
                }
                break;
            case OCT_LIT:
                {
                int LA83_8 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 8, input);

                    throw nvae;

                }
                }
                break;
            case REAL_LIT:
                {
                int LA83_9 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 9, input);

                    throw nvae;

                }
                }
                break;
            case HEX_LIT:
                {
                int LA83_10 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 10, input);

                    throw nvae;

                }
                }
                break;
            case 180:
                {
                int LA83_11 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 11, input);

                    throw nvae;

                }
                }
                break;
            case STRING:
                {
                int LA83_12 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 12, input);

                    throw nvae;

                }
                }
                break;
            case CHAR:
                {
                int LA83_13 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 13, input);

                    throw nvae;

                }
                }
                break;
            case 135:
                {
                int LA83_14 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 14, input);

                    throw nvae;

                }
                }
                break;
            case 145:
                {
                int LA83_15 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 15, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA83_16 = input.LA(2);

                if ( (synpred25_pollen()) ) {
                    alt83=6;
                }
                else if ( (true) ) {
                    alt83=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 16, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }

            switch (alt83) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1634:10: injectionCode
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_injectionCode_in_exprUnary10968);
                    injectionCode246=injectionCode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, injectionCode246.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:10: logicalNotOp exprPrimary
                    {
                    pushFollow(FOLLOW_logicalNotOp_in_exprUnary10981);
                    logicalNotOp247=logicalNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicalNotOp.add(logicalNotOp247.getTree());

                    pushFollow(FOLLOW_exprPrimary_in_exprUnary10983);
                    exprPrimary248=exprPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprPrimary.add(exprPrimary248.getTree());

                    // AST REWRITE
                    // elements: exprPrimary, logicalNotOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1636:47: -> ^( E_UNARY[\"E_UNARY\"] exprPrimary logicalNotOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1636:50: ^( E_UNARY[\"E_UNARY\"] exprPrimary logicalNotOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprPrimary.nextTree());

                        adaptor.addChild(root_1, stream_logicalNotOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1637:10: bitwiseNotOp exprPrimary
                    {
                    pushFollow(FOLLOW_bitwiseNotOp_in_exprUnary11023);
                    bitwiseNotOp249=bitwiseNotOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bitwiseNotOp.add(bitwiseNotOp249.getTree());

                    pushFollow(FOLLOW_exprPrimary_in_exprUnary11025);
                    exprPrimary250=exprPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprPrimary.add(exprPrimary250.getTree());

                    // AST REWRITE
                    // elements: bitwiseNotOp, exprPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1637:48: -> ^( E_UNARY[\"E_UNARY\"] exprPrimary bitwiseNotOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1637:51: ^( E_UNARY[\"E_UNARY\"] exprPrimary bitwiseNotOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprPrimary.nextTree());

                        adaptor.addChild(root_1, stream_bitwiseNotOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1638:10: MINUS exprPrimary
                    {
                    MINUS251=(Atom)match(input,MINUS,FOLLOW_MINUS_in_exprUnary11066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS251);


                    pushFollow(FOLLOW_exprPrimary_in_exprUnary11068);
                    exprPrimary252=exprPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprPrimary.add(exprPrimary252.getTree());

                    // AST REWRITE
                    // elements: exprPrimary, MINUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1638:42: -> ^( E_UNARY[\"E_UNARY\"] exprPrimary MINUS )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1638:45: ^( E_UNARY[\"E_UNARY\"] exprPrimary MINUS )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprPrimary.nextTree());

                        adaptor.addChild(root_1, 
                        stream_MINUS.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1639:10: incDecOp exprPrimary
                    {
                    pushFollow(FOLLOW_incDecOp_in_exprUnary11110);
                    incDecOp253=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp253.getTree());

                    pushFollow(FOLLOW_exprPrimary_in_exprUnary11112);
                    exprPrimary254=exprPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprPrimary.add(exprPrimary254.getTree());

                    // AST REWRITE
                    // elements: incDecOp, exprPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1639:39: -> ^( E_UNARY[\"E_UNARY\"] exprPrimary incDecOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1639:42: ^( E_UNARY[\"E_UNARY\"] exprPrimary incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprPrimary.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1641:10: ( varOrFcnOrArray incDecOp )=> exprPrimary incDecOp
                    {
                    pushFollow(FOLLOW_exprPrimary_in_exprUnary11157);
                    exprPrimary255=exprPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprPrimary.add(exprPrimary255.getTree());

                    pushFollow(FOLLOW_incDecOp_in_exprUnary11159);
                    incDecOp256=incDecOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_incDecOp.add(incDecOp256.getTree());

                    // AST REWRITE
                    // elements: exprPrimary, incDecOp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1642:10: -> ^( E_UNARY[\"E_UNARY\", true] exprPrimary incDecOp )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1642:13: ^( E_UNARY[\"E_UNARY\", true] exprPrimary incDecOp )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Unary(E_UNARY, "E_UNARY", true)
                        , root_1);

                        adaptor.addChild(root_1, stream_exprPrimary.nextTree());

                        adaptor.addChild(root_1, stream_incDecOp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1643:10: exprPrimary
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprPrimary_in_exprUnary11196);
                    exprPrimary257=exprPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprPrimary257.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprUnary"


    public static class exprPrimary_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprPrimary"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1645:1: exprPrimary : ( primitiveLit | '(' expr ')' -> ^( E_PAREN[\"E_PAREN\"] expr ) | varOrFcnOrArray );
    public final pollenParser.exprPrimary_return exprPrimary() throws RecognitionException {
        pollenParser.exprPrimary_return retval = new pollenParser.exprPrimary_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal259=null;
        Atom char_literal261=null;
        pollenParser.primitiveLit_return primitiveLit258 =null;

        pollenParser.expr_return expr260 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray262 =null;


        BaseNode char_literal259_tree=null;
        BaseNode char_literal261_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1646:5: ( primitiveLit | '(' expr ')' -> ^( E_PAREN[\"E_PAREN\"] expr ) | varOrFcnOrArray )
            int alt84=3;
            switch ( input.LA(1) ) {
            case CHAR:
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
            case STRING:
            case 166:
            case 180:
            case 192:
                {
                alt84=1;
                }
                break;
            case 135:
                {
                alt84=2;
                }
                break;
            case IDENT:
            case 145:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }

            switch (alt84) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1646:10: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_exprPrimary11215);
                    primitiveLit258=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit258.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1647:10: '(' expr ')'
                    {
                    char_literal259=(Atom)match(input,135,FOLLOW_135_in_exprPrimary11226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal259);


                    pushFollow(FOLLOW_expr_in_exprPrimary11228);
                    expr260=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr260.getTree());

                    char_literal261=(Atom)match(input,136,FOLLOW_136_in_exprPrimary11230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal261);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1647:38: -> ^( E_PAREN[\"E_PAREN\"] expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1647:41: ^( E_PAREN[\"E_PAREN\"] expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Paren(E_PAREN, "E_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1648:10: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_exprPrimary11271);
                    varOrFcnOrArray262=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray262.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprPrimary"


    public static class fcnDefinition_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinition"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1651:1: fcnDefinition : fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) ;
    public final pollenParser.fcnDefinition_return fcnDefinition() throws RecognitionException {
        pollenParser.fcnDefinition_return retval = new pollenParser.fcnDefinition_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr263 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName264 =null;

        pollenParser.formalParameterList_return formalParameterList265 =null;

        pollenParser.fcnBody_return fcnBody266 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1653:5: ( fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1653:7: fcnAttr fcnType_fcnName formalParameterList fcnBody[$formalParameterList.tree]
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDefinition11290);
            fcnAttr263=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr263.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDefinition11292);
            fcnType_fcnName264=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName264.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinition11294);
            formalParameterList265=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList265.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinition11296);
            fcnBody266=fcnBody((formalParameterList265!=null?((BaseNode)formalParameterList265.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody266.getTree());

            if ( state.backtracking==0 ) {     
                            if (currType.getUnitFlags().contains(Flags.COMPOSITION)) {
                                featureFlags.add(Flags.PUBLIC); /* enforce */     
                                if (!featureFlags.contains(Flags.HOST))
                                   throw new PollenException("Composition features must be one of host or preset functions, export statements, or enum definitions.", input);
                            }
                        }

            // AST REWRITE
            // elements: formalParameterList, fcnType_fcnName, fcnBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1661:9: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1661:12: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1665:13: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1666:17: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnDefinition"


    public static class fcnDefinitionVoidOrCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDefinitionVoidOrCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1676:1: fcnDefinitionVoidOrCtor : fcnAttr fcnType formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) ;
    public final pollenParser.fcnDefinitionVoidOrCtor_return fcnDefinitionVoidOrCtor() throws RecognitionException {
        pollenParser.fcnDefinitionVoidOrCtor_return retval = new pollenParser.fcnDefinitionVoidOrCtor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr267 =null;

        pollenParser.fcnType_return fcnType268 =null;

        pollenParser.formalParameterList_return formalParameterList269 =null;

        pollenParser.fcnBody_return fcnBody270 =null;


        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnType=new RewriteRuleSubtreeStream(adaptor,"rule fcnType");
        RewriteRuleSubtreeStream stream_fcnBody=new RewriteRuleSubtreeStream(adaptor,"rule fcnBody");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1678:5: ( fcnAttr fcnType formalParameterList fcnBody[$formalParameterList.tree] -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1678:7: fcnAttr fcnType formalParameterList fcnBody[$formalParameterList.tree]
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDefinitionVoidOrCtor11482);
            fcnAttr267=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr267.getTree());

            pushFollow(FOLLOW_fcnType_in_fcnDefinitionVoidOrCtor11484);
            fcnType268=fcnType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType.add(fcnType268.getTree());

            pushFollow(FOLLOW_formalParameterList_in_fcnDefinitionVoidOrCtor11486);
            formalParameterList269=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList269.getTree());

            pushFollow(FOLLOW_fcnBody_in_fcnDefinitionVoidOrCtor11488);
            fcnBody270=fcnBody((formalParameterList269!=null?((BaseNode)formalParameterList269.tree):null));

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnBody.add(fcnBody270.getTree());

            if ( state.backtracking==0 ) {     
                            if (currType.getUnitFlags().contains(Flags.COMPOSITION)) {
                                featureFlags.add(Flags.PUBLIC); /* enforce */     
                                if (!featureFlags.contains(Flags.HOST))
                                   throw new PollenException("Composition features must be one of host functions, a preset initializer, export statements, or enum definitions.", input);
                            }
                        }

            // AST REWRITE
            // elements: fcnBody, fcnType, formalParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1688:9: -> ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1688:12: ^( D_FCN_DEF[\"D_FCN_DEF\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) fcnBody )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DEF, "D_FCN_DEF", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1691:13: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1692:17: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fcnBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (PollenException re) {

                String hdr = getErrorHeader(re);
                String msg = re.toString();
                emitErrorMessage(hdr+" "+msg);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnDefinitionVoidOrCtor"


    public static class fcnAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1702:1: fcnAttr : ( 'public' | 'host' )* ;
    public final pollenParser.fcnAttr_return fcnAttr() throws RecognitionException {
        pollenParser.fcnAttr_return retval = new pollenParser.fcnAttr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal271=null;
        Atom string_literal272=null;

        BaseNode string_literal271_tree=null;
        BaseNode string_literal272_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:5: ( ( 'public' | 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:9: ( 'public' | 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:9: ( 'public' | 'host' )*
            loop85:
            do {
                int alt85=3;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==187) ) {
                    alt85=1;
                }
                else if ( (LA85_0==169) ) {
                    alt85=2;
                }


                switch (alt85) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1703:14: 'public'
            	    {
            	    string_literal271=(Atom)match(input,187,FOLLOW_187_in_fcnAttr11687); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal271_tree = 
            	    (BaseNode)adaptor.create(string_literal271)
            	    ;
            	    adaptor.addChild(root_0, string_literal271_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.PUBLIC); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1704:14: 'host'
            	    {
            	    string_literal272=(Atom)match(input,169,FOLLOW_169_in_fcnAttr11705); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal272_tree = 
            	    (BaseNode)adaptor.create(string_literal272)
            	    ;
            	    adaptor.addChild(root_0, string_literal272_tree);
            	    }

            	    if ( state.backtracking==0 ) { featureFlags.add(Flags.HOST); }

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnAttr"


    public static class fcnBody_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnBody"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1707:1: fcnBody[CommonTree formals] : ( NLL )? braceOpenNLL ( stmts ) braceCloseNLL -> ^( FCNBODY[\"FCNBODY\"] stmts ) ;
    public final pollenParser.fcnBody_return fcnBody(CommonTree formals) throws RecognitionException {
        pollenParser.fcnBody_return retval = new pollenParser.fcnBody_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL273=null;
        pollenParser.braceOpenNLL_return braceOpenNLL274 =null;

        pollenParser.stmts_return stmts275 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL276 =null;


        BaseNode NLL273_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:3: ( ( NLL )? braceOpenNLL ( stmts ) braceCloseNLL -> ^( FCNBODY[\"FCNBODY\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:8: ( NLL )? braceOpenNLL ( stmts ) braceCloseNLL
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:8: ( NLL )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==NLL) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:9: NLL
                    {
                    NLL273=(Atom)match(input,NLL,FOLLOW_NLL_in_fcnBody11738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL273);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpenNLL_in_fcnBody11742);
            braceOpenNLL274=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL274.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:28: ( stmts )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:29: stmts
            {
            pushFollow(FOLLOW_stmts_in_fcnBody11745);
            stmts275=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts275.getTree());

            }


            pushFollow(FOLLOW_braceCloseNLL_in_fcnBody11749);
            braceCloseNLL276=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL276.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1708:52: -> ^( FCNBODY[\"FCNBODY\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1708:55: ^( FCNBODY[\"FCNBODY\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new BodyNode(FCNBODY, "FCNBODY")
                , root_1);

                adaptor.addChild(root_1, formals);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnBody"


    public static class fcnDeclarationVoidOrCtor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDeclarationVoidOrCtor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1711:1: fcnDeclarationVoidOrCtor : fcnAttr fcnType ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ) ;
    public final pollenParser.fcnDeclarationVoidOrCtor_return fcnDeclarationVoidOrCtor() throws RecognitionException {
        pollenParser.fcnDeclarationVoidOrCtor_return retval = new pollenParser.fcnDeclarationVoidOrCtor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr277 =null;

        pollenParser.fcnType_return fcnType278 =null;

        pollenParser.formalParameterList_return formalParameterList279 =null;

        pollenParser.delim_return delim280 =null;


        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_fcnType=new RewriteRuleSubtreeStream(adaptor,"rule fcnType");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1713:4: ( fcnAttr fcnType ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1713:9: fcnAttr fcnType ( formalParameterList ) delim
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDeclarationVoidOrCtor11783);
            fcnAttr277=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr277.getTree());

            pushFollow(FOLLOW_fcnType_in_fcnDeclarationVoidOrCtor11785);
            fcnType278=fcnType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType.add(fcnType278.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1713:25: ( formalParameterList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1713:26: formalParameterList
            {
            pushFollow(FOLLOW_formalParameterList_in_fcnDeclarationVoidOrCtor11788);
            formalParameterList279=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList279.getTree());

            }


            pushFollow(FOLLOW_delim_in_fcnDeclarationVoidOrCtor11791);
            delim280=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim280.getTree());

            if ( state.backtracking==0 ) {
                        if (currType.getUnitFlags().contains(Flags.PROTOCOL))
                            featureFlags.add(Flags.PUBLIC);
                    }

            // AST REWRITE
            // elements: fcnType, formalParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1718:4: -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1718:7: ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DCL, "D_FCN_DCL", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1721:10: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1722:13: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnDeclarationVoidOrCtor"


    public static class fcnType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1726:1: fcnType : ({...}? => typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] ) |{...}? => typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] ) | qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName ) );
    public final pollenParser.fcnType_return fcnType() throws RecognitionException {
        pollenParser.fcnType_return retval = new pollenParser.fcnType_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.typeName_return typeName281 =null;

        pollenParser.typeName_return typeName282 =null;

        pollenParser.qualName_return qualName283 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");

            String modCtor = "";
            String clsCtor = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1731:5: ({...}? => typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] ) |{...}? => typeName -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] ) | qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName ) )
            int alt87=3;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==150) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==152) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_2 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==175) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_3 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==173) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_4 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==174) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_5 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==188) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_6 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==190) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_7 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==196) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_8 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==194) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_9 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==195) && (((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )||(input.LT(1).getText().equals(currType.getTypeName()) )))) {
                int LA87_10 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA87_0==IDENT) ) {
                int LA87_11 = input.LA(2);

                if ( ((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                    alt87=1;
                }
                else if ( ((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 11, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1731:10: {...}? => typeName
                    {
                    if ( !((input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType", "input.LT(1).getText().equals(currType.getTypeName()) && !(currType.getUnitFlags().contains(Flags.CLASS)) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType11934);
                    typeName281=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName281.getTree());

                    if ( state.backtracking==0 ) { 
                              featureFlags.add(Flags.CONSTRUCTOR); 
                              if (featureFlags.contains(Flags.HOST)) hasHostConstructor = true;
                              if (!featureFlags.contains(Flags.HOST)) hasTargetConstructor = true;
                              modCtor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_MODULE_HOST : ParseUnit.CTOR_MODULE_TARGET;
                            }

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1739:9: -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1739:12: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) IDENT[modCtor] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1740:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1741:13: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1741:38: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, modCtor)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1743:10: {...}? => typeName
                    {
                    if ( !((input.LT(1).getText().equals(currType.getTypeName()) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fcnType", "input.LT(1).getText().equals(currType.getTypeName()) ");
                    }

                    pushFollow(FOLLOW_typeName_in_fcnType12084);
                    typeName282=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName282.getTree());

                    if ( state.backtracking==0 ) { 
                              featureFlags.add(Flags.CONSTRUCTOR); 
                              if (featureFlags.contains(Flags.HOST)) hasHostConstructor = true;
                              if (!featureFlags.contains(Flags.HOST)) hasTargetConstructor = true;
                              clsCtor = (featureFlags.contains(Flags.HOST)) ? ParseUnit.CTOR_CLASS_HOST : ParseUnit.CTOR_CLASS_TARGET;
                            }

                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1751:9: -> ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1751:12: ^( D_FCN_CTOR[\"D_FCN_CTOR\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) IDENT[clsCtor] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_CTOR, "D_FCN_CTOR")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1752:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1753:13: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(IDENT, clsCtor)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1754:10: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_fcnType12190);
                    qualName283=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName283.getTree());

                    if ( state.backtracking==0 ) { featureFlags.add(Flags.VOID_FCN); }

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1756:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1756:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1756:60: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:17: ^( LIST[\"LIST\"] ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] ) )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1757:42: ^( T_STD[\"T_STD\", featureFlags] VOID[\"void\"] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Std(T_STD, "T_STD", featureFlags)
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(VOID, "void")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnType"


    public static class fcnDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1759:1: fcnDeclaration : fcnAttr fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ) ;
    public final pollenParser.fcnDeclaration_return fcnDeclaration() throws RecognitionException {
        pollenParser.fcnDeclaration_return retval = new pollenParser.fcnDeclaration_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fcnAttr_return fcnAttr284 =null;

        pollenParser.fcnType_fcnName_return fcnType_fcnName285 =null;

        pollenParser.formalParameterList_return formalParameterList286 =null;

        pollenParser.delim_return delim287 =null;


        RewriteRuleSubtreeStream stream_fcnType_fcnName=new RewriteRuleSubtreeStream(adaptor,"rule fcnType_fcnName");
        RewriteRuleSubtreeStream stream_fcnAttr=new RewriteRuleSubtreeStream(adaptor,"rule fcnAttr");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1760:4: ( fcnAttr fcnType_fcnName ( formalParameterList ) delim -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1760:9: fcnAttr fcnType_fcnName ( formalParameterList ) delim
            {
            pushFollow(FOLLOW_fcnAttr_in_fcnDeclaration12299);
            fcnAttr284=fcnAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnAttr.add(fcnAttr284.getTree());

            pushFollow(FOLLOW_fcnType_fcnName_in_fcnDeclaration12309);
            fcnType_fcnName285=fcnType_fcnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnType_fcnName.add(fcnType_fcnName285.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1761:25: ( formalParameterList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1761:26: formalParameterList
            {
            pushFollow(FOLLOW_formalParameterList_in_fcnDeclaration12312);
            formalParameterList286=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList286.getTree());

            }


            pushFollow(FOLLOW_delim_in_fcnDeclaration12315);
            delim287=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim287.getTree());

            if ( state.backtracking==0 ) {
                        if (currType.getUnitFlags().contains(Flags.PROTOCOL))
                            featureFlags.add(Flags.PUBLIC);
                    }

            // AST REWRITE
            // elements: fcnType_fcnName, formalParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1766:4: -> ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1766:7: ^( D_FCN_DCL[\"D_FCN_DCL\", featureFlags] fcnType_fcnName formalParameterList ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Fcn(D_FCN_DCL, "D_FCN_DCL", featureFlags)
                , root_1);

                adaptor.addChild(root_1, stream_fcnType_fcnName.nextTree());

                adaptor.addChild(root_1, stream_formalParameterList.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1769:10: ^( D_FORMAL[\"D_FORMAL\", featureFlags] ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] ) IDENT[\"this\"] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL", featureFlags)
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1770:13: ^( T_USR[\"T_USR\", featureFlags] IDENT[currType.getTypeName()] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Usr(T_USR, "T_USR", featureFlags)
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, currType.getTypeName())
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, "this")
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnDeclaration"


    public static class fcnType_fcnName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnType_fcnName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1774:1: fcnType_fcnName : ( ( typeNameArray '[' )=> typeNameArray varArraySpec qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName ) | typeName qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) );
    public final pollenParser.fcnType_fcnName_return fcnType_fcnName() throws RecognitionException {
        pollenParser.fcnType_fcnName_return retval = new pollenParser.fcnType_fcnName_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.typeNameArray_return typeNameArray288 =null;

        pollenParser.varArraySpec_return varArraySpec289 =null;

        pollenParser.qualName_return qualName290 =null;

        pollenParser.typeName_return typeName291 =null;

        pollenParser.qualName_return qualName292 =null;


        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1778:5: ( ( typeNameArray '[' )=> typeNameArray varArraySpec qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName ) | typeName qualName -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName ) )
            int alt88=2;
            switch ( input.LA(1) ) {
            case 150:
                {
                int LA88_1 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 1, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                int LA88_2 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 2, input);

                    throw nvae;

                }
                }
                break;
            case 175:
                {
                int LA88_3 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 3, input);

                    throw nvae;

                }
                }
                break;
            case 173:
                {
                int LA88_4 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 4, input);

                    throw nvae;

                }
                }
                break;
            case 174:
                {
                int LA88_5 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 5, input);

                    throw nvae;

                }
                }
                break;
            case 188:
                {
                int LA88_6 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 6, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA88_7 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 7, input);

                    throw nvae;

                }
                }
                break;
            case 196:
                {
                int LA88_8 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 8, input);

                    throw nvae;

                }
                }
                break;
            case 194:
                {
                int LA88_9 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 9, input);

                    throw nvae;

                }
                }
                break;
            case 195:
                {
                int LA88_10 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 10, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA88_11 = input.LA(2);

                if ( (synpred26_pollen()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 11, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }

            switch (alt88) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1778:9: ( typeNameArray '[' )=> typeNameArray varArraySpec qualName
                    {
                    pushFollow(FOLLOW_typeNameArray_in_fcnType_fcnName12455);
                    typeNameArray288=typeNameArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray288.getTree());

                    pushFollow(FOLLOW_varArraySpec_in_fcnType_fcnName12457);
                    varArraySpec289=varArraySpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec289.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName12459);
                    qualName290=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName290.getTree());

                    // AST REWRITE
                    // elements: typeNameArray, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1779:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1779:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1780:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeNameArray ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1781:17: ^( LIST[\"LIST\"] typeNameArray )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeNameArray.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1783:10: typeName qualName
                    {
                    pushFollow(FOLLOW_typeName_in_fcnType_fcnName12563);
                    typeName291=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName291.getTree());

                    pushFollow(FOLLOW_qualName_in_fcnType_fcnName12565);
                    qualName292=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName292.getTree());

                    // AST REWRITE
                    // elements: typeName, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1784:9: -> ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1784:12: ^( D_FCN_TYP_NM[\"D_FCN_TYP_NM\"] ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) ) qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.FcnTyp(D_FCN_TYP_NM, "D_FCN_TYP_NM")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1785:13: ^( T_LST[\"T_LST\", featureFlags] ^( LIST[\"LIST\"] typeName ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Lst(T_LST, "T_LST", featureFlags)
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1786:17: ^( LIST[\"LIST\"] typeName )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_typeName.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnType_fcnName"


    public static class formalParameterList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1803:1: formalParameterList : '(' formalParameters ')' -> formalParameters ;
    public final pollenParser.formalParameterList_return formalParameterList() throws RecognitionException {
        pollenParser.formalParameterList_return retval = new pollenParser.formalParameterList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal293=null;
        Atom char_literal295=null;
        pollenParser.formalParameters_return formalParameters294 =null;


        BaseNode char_literal293_tree=null;
        BaseNode char_literal295_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1804:5: ( '(' formalParameters ')' -> formalParameters )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1804:10: '(' formalParameters ')'
            {
            char_literal293=(Atom)match(input,135,FOLLOW_135_in_formalParameterList12696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal293);


            pushFollow(FOLLOW_formalParameters_in_formalParameterList12698);
            formalParameters294=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters294.getTree());

            char_literal295=(Atom)match(input,136,FOLLOW_136_in_formalParameterList12700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal295);


            // AST REWRITE
            // elements: formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1804:35: -> formalParameters
            {
                adaptor.addChild(root_0, stream_formalParameters.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"


    public static class formalParameters_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameters"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1811:1: formalParameters : ( formalParameter ( ( NLL )? ',' ( NLL )? formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.formalParameters_return formalParameters() throws RecognitionException {
        pollenParser.formalParameters_return retval = new pollenParser.formalParameters_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL297=null;
        Atom char_literal298=null;
        Atom NLL299=null;
        pollenParser.formalParameter_return formalParameter296 =null;

        pollenParser.formalParameter_return formalParameter300 =null;


        BaseNode NLL297_tree=null;
        BaseNode char_literal298_tree=null;
        BaseNode NLL299_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");


        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:5: ( formalParameter ( ( NLL )? ',' ( NLL )? formalParameter )* -> ^( LIST[\"LIST\"] ( formalParameter )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==IDENT||LA92_0==150||LA92_0==152||(LA92_0 >= 173 && LA92_0 <= 175)||LA92_0==188||LA92_0==190||(LA92_0 >= 193 && LA92_0 <= 196)) ) {
                alt92=1;
            }
            else if ( (LA92_0==136) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:10: formalParameter ( ( NLL )? ',' ( NLL )? formalParameter )*
                    {
                    pushFollow(FOLLOW_formalParameter_in_formalParameters12733);
                    formalParameter296=formalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter296.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:26: ( ( NLL )? ',' ( NLL )? formalParameter )*
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==NLL||LA91_0==138) ) {
                            alt91=1;
                        }


                        switch (alt91) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:27: ( NLL )? ',' ( NLL )? formalParameter
                    	    {
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:27: ( NLL )?
                    	    int alt89=2;
                    	    int LA89_0 = input.LA(1);

                    	    if ( (LA89_0==NLL) ) {
                    	        alt89=1;
                    	    }
                    	    switch (alt89) {
                    	        case 1 :
                    	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:27: NLL
                    	            {
                    	            NLL297=(Atom)match(input,NLL,FOLLOW_NLL_in_formalParameters12736); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NLL.add(NLL297);


                    	            }
                    	            break;

                    	    }


                    	    char_literal298=(Atom)match(input,138,FOLLOW_138_in_formalParameters12739); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal298);


                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:36: ( NLL )?
                    	    int alt90=2;
                    	    int LA90_0 = input.LA(1);

                    	    if ( (LA90_0==NLL) ) {
                    	        alt90=1;
                    	    }
                    	    switch (alt90) {
                    	        case 1 :
                    	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1814:36: NLL
                    	            {
                    	            NLL299=(Atom)match(input,NLL,FOLLOW_NLL_in_formalParameters12741); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NLL.add(NLL299);


                    	            }
                    	            break;

                    	    }


                    	    pushFollow(FOLLOW_formalParameter_in_formalParameters12744);
                    	    formalParameter300=formalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter300.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: formalParameter
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1815:9: -> ^( LIST[\"LIST\"] ( formalParameter )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1815:12: ^( LIST[\"LIST\"] ( formalParameter )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_formalParameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameter.nextTree());

                        }
                        stream_formalParameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1817:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1817:9: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1817:12: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formalParameters"


    public static class formalParameter_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameter"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1820:1: formalParameter : ( 'type' IDENT ( ASSIGN t= typeName )? -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? ) | ( typeName '[' )=> formalParameterArr | typeName IDENT ( ASSIGN expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) );
    public final pollenParser.formalParameter_return formalParameter() throws RecognitionException {
        pollenParser.formalParameter_return retval = new pollenParser.formalParameter_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal301=null;
        Atom IDENT302=null;
        Atom ASSIGN303=null;
        Atom IDENT306=null;
        Atom ASSIGN307=null;
        pollenParser.typeName_return t =null;

        pollenParser.formalParameterArr_return formalParameterArr304 =null;

        pollenParser.typeName_return typeName305 =null;

        pollenParser.expr_return expr308 =null;


        BaseNode string_literal301_tree=null;
        BaseNode IDENT302_tree=null;
        BaseNode ASSIGN303_tree=null;
        BaseNode IDENT306_tree=null;
        BaseNode ASSIGN307_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

            EnumSet<Flags> pFlags = EnumSet.noneOf(Flags.class);        

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:5: ( 'type' IDENT ( ASSIGN t= typeName )? -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? ) | ( typeName '[' )=> formalParameterArr | typeName IDENT ( ASSIGN expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? ) )
            int alt95=3;
            switch ( input.LA(1) ) {
            case 193:
                {
                alt95=1;
                }
                break;
            case 150:
                {
                int LA95_2 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                int LA95_3 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 3, input);

                    throw nvae;

                }
                }
                break;
            case 175:
                {
                int LA95_4 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 4, input);

                    throw nvae;

                }
                }
                break;
            case 173:
                {
                int LA95_5 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 5, input);

                    throw nvae;

                }
                }
                break;
            case 174:
                {
                int LA95_6 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 6, input);

                    throw nvae;

                }
                }
                break;
            case 188:
                {
                int LA95_7 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 7, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA95_8 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 8, input);

                    throw nvae;

                }
                }
                break;
            case 196:
                {
                int LA95_9 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 9, input);

                    throw nvae;

                }
                }
                break;
            case 194:
                {
                int LA95_10 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 10, input);

                    throw nvae;

                }
                }
                break;
            case 195:
                {
                int LA95_11 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 11, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA95_12 = input.LA(2);

                if ( (synpred27_pollen()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 12, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:12: 'type' IDENT ( ASSIGN t= typeName )?
                    {
                    string_literal301=(Atom)match(input,193,FOLLOW_193_in_formalParameter12824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal301);


                    IDENT302=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter12826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT302);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:25: ( ASSIGN t= typeName )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==ASSIGN) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1824:27: ASSIGN t= typeName
                            {
                            ASSIGN303=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter12830); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN303);


                            pushFollow(FOLLOW_typeName_in_formalParameter12834);
                            t=typeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeName.add(t.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { pFlags.add(Flags.TYPE_META_ARG); }

                    // AST REWRITE
                    // elements: IDENT, typeName, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1826:13: -> ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1826:16: ^( D_FORMAL[\"D_FORMAL\", pFlags] ^( T_USR[\"T_USR\", pFlags] IDENT ) IDENT ( ^( E_TYP[\"E_TYP\"] typeName ) )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL", pFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1827:17: ^( T_USR[\"T_USR\", pFlags] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", pFlags)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1828:23: ( ^( E_TYP[\"E_TYP\"] typeName ) )?
                        if ( stream_typeName.hasNext() ) {
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1828:23: ^( E_TYP[\"E_TYP\"] typeName )
                            {
                            BaseNode root_2 = (BaseNode)adaptor.nil();
                            root_2 = (BaseNode)adaptor.becomeRoot(
                            new ExprNode.Typ(E_TYP, "E_TYP")
                            , root_2);

                            adaptor.addChild(root_2, stream_typeName.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1829:12: ( typeName '[' )=> formalParameterArr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_formalParameterArr_in_formalParameter12958);
                    formalParameterArr304=formalParameterArr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterArr304.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1830:13: typeName IDENT ( ASSIGN expr )?
                    {
                    pushFollow(FOLLOW_typeName_in_formalParameter12972);
                    typeName305=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName305.getTree());

                    IDENT306=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameter12974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT306);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1830:28: ( ASSIGN expr )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==ASSIGN) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1830:30: ASSIGN expr
                            {
                            ASSIGN307=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameter12978); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN307);


                            pushFollow(FOLLOW_expr_in_formalParameter12980);
                            expr308=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr308.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: typeName, IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1831:13: -> ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1831:16: ^( D_FORMAL[\"D_FORMAL\"] typeName IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_typeName.nextTree());

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1831:71: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formalParameter"


    public static class formalParameterArr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "formalParameterArr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1834:1: formalParameterArr : typeNameArray '[' ']' IDENT ( ASSIGN expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? ) ;
    public final pollenParser.formalParameterArr_return formalParameterArr() throws RecognitionException {
        pollenParser.formalParameterArr_return retval = new pollenParser.formalParameterArr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal310=null;
        Atom char_literal311=null;
        Atom IDENT312=null;
        Atom ASSIGN313=null;
        pollenParser.typeNameArray_return typeNameArray309 =null;

        pollenParser.expr_return expr314 =null;


        BaseNode char_literal310_tree=null;
        BaseNode char_literal311_tree=null;
        BaseNode IDENT312_tree=null;
        BaseNode ASSIGN313_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:5: ( typeNameArray '[' ']' IDENT ( ASSIGN expr )? -> ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:10: typeNameArray '[' ']' IDENT ( ASSIGN expr )?
            {
            pushFollow(FOLLOW_typeNameArray_in_formalParameterArr13035);
            typeNameArray309=typeNameArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray309.getTree());

            char_literal310=(Atom)match(input,146,FOLLOW_146_in_formalParameterArr13037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal310);


            char_literal311=(Atom)match(input,147,FOLLOW_147_in_formalParameterArr13039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal311);


            IDENT312=(Atom)match(input,IDENT,FOLLOW_IDENT_in_formalParameterArr13041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT312);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:38: ( ASSIGN expr )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==ASSIGN) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1835:40: ASSIGN expr
                    {
                    ASSIGN313=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_formalParameterArr13045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN313);


                    pushFollow(FOLLOW_expr_in_formalParameterArr13047);
                    expr314=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr314.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expr, IDENT, typeNameArray
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1836:13: -> ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1836:16: ^( D_FORMAL[\"D_FORMAL\"] typeNameArray IDENT ( expr )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Formal(D_FORMAL, "D_FORMAL")
                , root_1);

                adaptor.addChild(root_1, stream_typeNameArray.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1836:76: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "formalParameterArr"


    public static class fcnArgumentList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArgumentList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1838:1: fcnArgumentList : '(' fcnArguments ')' -> fcnArguments ;
    public final pollenParser.fcnArgumentList_return fcnArgumentList() throws RecognitionException {
        pollenParser.fcnArgumentList_return retval = new pollenParser.fcnArgumentList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal315=null;
        Atom char_literal317=null;
        pollenParser.fcnArguments_return fcnArguments316 =null;


        BaseNode char_literal315_tree=null;
        BaseNode char_literal317_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_fcnArguments=new RewriteRuleSubtreeStream(adaptor,"rule fcnArguments");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1839:5: ( '(' fcnArguments ')' -> fcnArguments )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1839:10: '(' fcnArguments ')'
            {
            char_literal315=(Atom)match(input,135,FOLLOW_135_in_fcnArgumentList13101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal315);


            pushFollow(FOLLOW_fcnArguments_in_fcnArgumentList13103);
            fcnArguments316=fcnArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnArguments.add(fcnArguments316.getTree());

            char_literal317=(Atom)match(input,136,FOLLOW_136_in_fcnArgumentList13105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal317);


            // AST REWRITE
            // elements: fcnArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1839:34: -> fcnArguments
            {
                adaptor.addChild(root_0, stream_fcnArguments.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnArgumentList"


    public static class fcnArguments_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnArguments"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1841:1: fcnArguments : exprList ;
    public final pollenParser.fcnArguments_return fcnArguments() throws RecognitionException {
        pollenParser.fcnArguments_return retval = new pollenParser.fcnArguments_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprList_return exprList318 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1842:5: ( exprList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1842:10: exprList
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_exprList_in_fcnArguments13132);
            exprList318=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprList318.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnArguments"


    public static class varOrFcnOrArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varOrFcnOrArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1844:1: varOrFcnOrArray : ( ( '@' IDENT '(' )=> '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | ( '@' IDENT )=> '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) ) | ( qualName '(' )=> qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | ( qualName '[' )=> qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )? ) | qualName -> ^( E_IDENT[\"E_IDENT\"] qualName ) );
    public final pollenParser.varOrFcnOrArray_return varOrFcnOrArray() throws RecognitionException {
        pollenParser.varOrFcnOrArray_return retval = new pollenParser.varOrFcnOrArray_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal319=null;
        Atom IDENT320=null;
        Atom char_literal323=null;
        Atom IDENT324=null;
        Atom char_literal326=null;
        pollenParser.fcnArgumentList_return fcnArgumentList321 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess322 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess325 =null;

        pollenParser.qualName_return qualName327 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList328 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess329 =null;

        pollenParser.qualName_return qualName330 =null;

        pollenParser.arrayAccess_return arrayAccess331 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList332 =null;

        pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess333 =null;

        pollenParser.qualName_return qualName334 =null;


        BaseNode char_literal319_tree=null;
        BaseNode IDENT320_tree=null;
        BaseNode char_literal323_tree=null;
        BaseNode IDENT324_tree=null;
        BaseNode char_literal326_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fieldOrArrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule fieldOrArrayAccess");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_arrayAccess=new RewriteRuleSubtreeStream(adaptor,"rule arrayAccess");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:5: ( ( '@' IDENT '(' )=> '@' IDENT fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) ) | ( '@' IDENT )=> '@' IDENT ( fieldOrArrayAccess )? -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) ) | '@' -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) ) | ( qualName '(' )=> qualName fcnArgumentList ( fieldOrArrayAccess )? -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? ) | ( qualName '[' )=> qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )? -> ^( E_IDENT[\"E_IDENT\"] qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )? ) | qualName -> ^( E_IDENT[\"E_IDENT\"] qualName ) )
            int alt102=6;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==145) ) {
                int LA102_1 = input.LA(2);

                if ( (synpred28_pollen()) ) {
                    alt102=1;
                }
                else if ( (synpred29_pollen()) ) {
                    alt102=2;
                }
                else if ( (true) ) {
                    alt102=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA102_0==IDENT) ) {
                int LA102_2 = input.LA(2);

                if ( (synpred30_pollen()) ) {
                    alt102=4;
                }
                else if ( (synpred31_pollen()) ) {
                    alt102=5;
                }
                else if ( (true) ) {
                    alt102=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:9: ( '@' IDENT '(' )=> '@' IDENT fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    char_literal319=(Atom)match(input,145,FOLLOW_145_in_varOrFcnOrArray13163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_145.add(char_literal319);


                    IDENT320=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray13165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT320);


                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray13167);
                    fcnArgumentList321=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList321.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:55: ( fieldOrArrayAccess )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==139||LA97_0==146) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:55: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13169);
                            fieldOrArrayAccess322=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess322.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fcnArgumentList, IDENT, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1847:9: -> ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1847:12: ^( E_SELF[\"E_SELF\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1848:13: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1848:47: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_3);

                        adaptor.addChild(root_3, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, stream_fcnArgumentList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1848:107: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1850:11: ( '@' IDENT )=> '@' IDENT ( fieldOrArrayAccess )?
                    {
                    char_literal323=(Atom)match(input,145,FOLLOW_145_in_varOrFcnOrArray13262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_145.add(char_literal323);


                    IDENT324=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varOrFcnOrArray13267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT324);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1850:38: ( fieldOrArrayAccess )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==139||LA98_0==146) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1850:38: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13269);
                            fieldOrArrayAccess325=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess325.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1851:9: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1851:12: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1851:46: ^( E_IDENT[\"E_IDENT\"] IDENT ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1851:89: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1853:10: '@'
                    {
                    char_literal326=(Atom)match(input,145,FOLLOW_145_in_varOrFcnOrArray13332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_145.add(char_literal326);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1854:9: -> ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1854:12: ^( E_SELF[\"E_SELF\"] ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Self(E_SELF, "E_SELF")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1854:47: ^( E_IDENT[\"E_IDENT\"] IDENT[\"this\"] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, "this")
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:11: ( qualName '(' )=> qualName fcnArgumentList ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray13397);
                    qualName327=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName327.getTree());

                    pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray13399);
                    fcnArgumentList328=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList328.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:55: ( fieldOrArrayAccess )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==139||LA99_0==146) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:55: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13402);
                            fieldOrArrayAccess329=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess329.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fcnArgumentList, qualName, fieldOrArrayAccess
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1857:13: -> ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1857:16: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] qualName ) fcnArgumentList ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1857:50: ^( E_IDENT[\"E_IDENT\"] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1857:113: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:11: ( qualName '[' )=> qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )?
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray13464);
                    qualName330=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName330.getTree());

                    pushFollow(FOLLOW_arrayAccess_in_varOrFcnOrArray13466);
                    arrayAccess331=arrayAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayAccess.add(arrayAccess331.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:50: ( fcnArgumentList )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==135) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:50: fcnArgumentList
                            {
                            pushFollow(FOLLOW_fcnArgumentList_in_varOrFcnOrArray13468);
                            fcnArgumentList332=fcnArgumentList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList332.getTree());

                            }
                            break;

                    }


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:67: ( fieldOrArrayAccess )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==139||LA101_0==146) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:67: fieldOrArrayAccess
                            {
                            pushFollow(FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13471);
                            fieldOrArrayAccess333=fieldOrArrayAccess();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldOrArrayAccess.add(fieldOrArrayAccess333.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fieldOrArrayAccess, arrayAccess, fcnArgumentList, qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1859:13: -> ^( E_IDENT[\"E_IDENT\"] qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1859:16: ^( E_IDENT[\"E_IDENT\"] qualName arrayAccess ( fcnArgumentList )? ( fieldOrArrayAccess )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_1, stream_arrayAccess.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1859:74: ( fcnArgumentList )?
                        if ( stream_fcnArgumentList.hasNext() ) {
                            adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        }
                        stream_fcnArgumentList.reset();

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1859:91: ( fieldOrArrayAccess )?
                        if ( stream_fieldOrArrayAccess.hasNext() ) {
                            adaptor.addChild(root_1, stream_fieldOrArrayAccess.nextTree());

                        }
                        stream_fieldOrArrayAccess.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1860:12: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_varOrFcnOrArray13520);
                    qualName334=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName334.getTree());

                    // AST REWRITE
                    // elements: qualName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1861:13: -> ^( E_IDENT[\"E_IDENT\"] qualName )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1861:16: ^( E_IDENT[\"E_IDENT\"] qualName )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_qualName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varOrFcnOrArray"


    public static class fieldOrArrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldOrArrayAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1864:1: fieldOrArrayAccess : ( fieldAccess | arrayAccess ( fcnArgumentList )? )+ ;
    public final pollenParser.fieldOrArrayAccess_return fieldOrArrayAccess() throws RecognitionException {
        pollenParser.fieldOrArrayAccess_return retval = new pollenParser.fieldOrArrayAccess_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.fieldAccess_return fieldAccess335 =null;

        pollenParser.arrayAccess_return arrayAccess336 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList337 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:5: ( ( fieldAccess | arrayAccess ( fcnArgumentList )? )+ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:11: ( fieldAccess | arrayAccess ( fcnArgumentList )? )+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:11: ( fieldAccess | arrayAccess ( fcnArgumentList )? )+
            int cnt104=0;
            loop104:
            do {
                int alt104=3;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==139) ) {
                    alt104=1;
                }
                else if ( (LA104_0==146) ) {
                    alt104=2;
                }


                switch (alt104) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:12: fieldAccess
            	    {
            	    pushFollow(FOLLOW_fieldAccess_in_fieldOrArrayAccess13570);
            	    fieldAccess335=fieldAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldAccess335.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:26: arrayAccess ( fcnArgumentList )?
            	    {
            	    pushFollow(FOLLOW_arrayAccess_in_fieldOrArrayAccess13574);
            	    arrayAccess336=arrayAccess();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess336.getTree());

            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:38: ( fcnArgumentList )?
            	    int alt103=2;
            	    int LA103_0 = input.LA(1);

            	    if ( (LA103_0==135) ) {
            	        alt103=1;
            	    }
            	    switch (alt103) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1866:38: fcnArgumentList
            	            {
            	            pushFollow(FOLLOW_fcnArgumentList_in_fieldOrArrayAccess13576);
            	            fcnArgumentList337=fcnArgumentList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, fcnArgumentList337.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt104 >= 1 ) break loop104;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(104, input);
                        throw eee;
                }
                cnt104++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fieldOrArrayAccess"


    public static class fieldAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1868:1: fieldAccess : ( ( '.' IDENT '(' )=> '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) );
    public final pollenParser.fieldAccess_return fieldAccess() throws RecognitionException {
        pollenParser.fieldAccess_return retval = new pollenParser.fieldAccess_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal338=null;
        Atom IDENT339=null;
        Atom char_literal341=null;
        Atom IDENT342=null;
        pollenParser.fcnArgumentList_return fcnArgumentList340 =null;


        BaseNode char_literal338_tree=null;
        BaseNode IDENT339_tree=null;
        BaseNode char_literal341_tree=null;
        BaseNode IDENT342_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1869:5: ( ( '.' IDENT '(' )=> '.' IDENT fcnArgumentList -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList ) | '.' IDENT -> ^( E_IDENT[\"E_IDENT\", true] IDENT ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==139) ) {
                int LA105_1 = input.LA(2);

                if ( (synpred32_pollen()) ) {
                    alt105=1;
                }
                else if ( (true) ) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }
            switch (alt105) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1869:10: ( '.' IDENT '(' )=> '.' IDENT fcnArgumentList
                    {
                    char_literal338=(Atom)match(input,139,FOLLOW_139_in_fieldAccess13611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal338);


                    IDENT339=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess13616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT339);


                    pushFollow(FOLLOW_fcnArgumentList_in_fieldAccess13618);
                    fcnArgumentList340=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList340.getTree());

                    // AST REWRITE
                    // elements: fcnArgumentList, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1870:13: -> ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1870:16: ^( E_CALL[\"E_CALL\", true] ^( E_IDENT[\"E_IDENT\"] IDENT ) fcnArgumentList )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL", true)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1871:14: ^( E_IDENT[\"E_IDENT\"] IDENT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1872:10: '.' IDENT
                    {
                    char_literal341=(Atom)match(input,139,FOLLOW_139_in_fieldAccess13686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal341);


                    IDENT342=(Atom)match(input,IDENT,FOLLOW_IDENT_in_fieldAccess13691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT342);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1872:27: -> ^( E_IDENT[\"E_IDENT\", true] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1872:30: ^( E_IDENT[\"E_IDENT\", true] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT", true)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fieldAccess"


    public static class arrayAccess_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayAccess"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1874:1: arrayAccess : '[' ( exprList ) ']' -> ^( E_INDEX[\"E_INDEX\"] exprList ) ;
    public final pollenParser.arrayAccess_return arrayAccess() throws RecognitionException {
        pollenParser.arrayAccess_return retval = new pollenParser.arrayAccess_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal343=null;
        Atom char_literal345=null;
        pollenParser.exprList_return exprList344 =null;


        BaseNode char_literal343_tree=null;
        BaseNode char_literal345_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1875:5: ( '[' ( exprList ) ']' -> ^( E_INDEX[\"E_INDEX\"] exprList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1875:10: '[' ( exprList ) ']'
            {
            char_literal343=(Atom)match(input,146,FOLLOW_146_in_arrayAccess13728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal343);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1875:17: ( exprList )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1875:18: exprList
            {
            pushFollow(FOLLOW_exprList_in_arrayAccess13734);
            exprList344=exprList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprList.add(exprList344.getTree());

            }


            char_literal345=(Atom)match(input,147,FOLLOW_147_in_arrayAccess13740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal345);


            // AST REWRITE
            // elements: exprList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1876:12: -> ^( E_INDEX[\"E_INDEX\"] exprList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1876:15: ^( E_INDEX[\"E_INDEX\"] exprList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Index(E_INDEX, "E_INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_exprList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arrayAccess"


    public static class stmtBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBlock"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1880:1: stmtBlock : braceOpenNLL stmts braceCloseNLL -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) ;
    public final pollenParser.stmtBlock_return stmtBlock() throws RecognitionException {
        pollenParser.stmtBlock_return retval = new pollenParser.stmtBlock_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.braceOpenNLL_return braceOpenNLL346 =null;

        pollenParser.stmts_return stmts347 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL348 =null;


        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1881:5: ( braceOpenNLL stmts braceCloseNLL -> ^( S_BLOCK[\"S_BLOCK\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1881:11: braceOpenNLL stmts braceCloseNLL
            {
            pushFollow(FOLLOW_braceOpenNLL_in_stmtBlock13799);
            braceOpenNLL346=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL346.getTree());

            pushFollow(FOLLOW_stmts_in_stmtBlock13801);
            stmts347=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts347.getTree());

            pushFollow(FOLLOW_braceCloseNLL_in_stmtBlock13803);
            braceCloseNLL348=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL348.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1881:48: -> ^( S_BLOCK[\"S_BLOCK\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1881:51: ^( S_BLOCK[\"S_BLOCK\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Block(S_BLOCK, "S_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtBlock"


    public static class stmts_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmts"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1883:1: stmts : ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | -> LIST[\"LIST\"] );
    public final pollenParser.stmts_return stmts() throws RecognitionException {
        pollenParser.stmts_return retval = new pollenParser.stmts_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmt_return stmt349 =null;


        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:5: ( ( stmt )+ -> ^( LIST[\"LIST\"] ( stmt )+ ) | -> LIST[\"LIST\"] )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==BIT_NOT||(LA107_0 >= BRACE_OP && LA107_0 <= CHAR)||LA107_0==DEC||LA107_0==HEX_LIT||LA107_0==IDENT||(LA107_0 >= INC && LA107_0 <= INT_LIT)||LA107_0==LOG_NOT||LA107_0==MINUS||LA107_0==OCT_LIT||LA107_0==REAL_LIT||LA107_0==STRING||LA107_0==135||LA107_0==145||(LA107_0 >= 150 && LA107_0 <= 152)||(LA107_0 >= 156 && LA107_0 <= 157)||LA107_0==159||(LA107_0 >= 166 && LA107_0 <= 167)||(LA107_0 >= 169 && LA107_0 <= 170)||(LA107_0 >= 173 && LA107_0 <= 175)||(LA107_0 >= 179 && LA107_0 <= 180)||LA107_0==184||LA107_0==186||(LA107_0 >= 188 && LA107_0 <= 192)||(LA107_0 >= 194 && LA107_0 <= 198)) ) {
                alt107=1;
            }
            else if ( (LA107_0==BRACE_CL||LA107_0==153||LA107_0==158) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:10: ( stmt )+
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:10: ( stmt )+
                    int cnt106=0;
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==BIT_NOT||(LA106_0 >= BRACE_OP && LA106_0 <= CHAR)||LA106_0==DEC||LA106_0==HEX_LIT||LA106_0==IDENT||(LA106_0 >= INC && LA106_0 <= INT_LIT)||LA106_0==LOG_NOT||LA106_0==MINUS||LA106_0==OCT_LIT||LA106_0==REAL_LIT||LA106_0==STRING||LA106_0==135||LA106_0==145||(LA106_0 >= 150 && LA106_0 <= 152)||(LA106_0 >= 156 && LA106_0 <= 157)||LA106_0==159||(LA106_0 >= 166 && LA106_0 <= 167)||(LA106_0 >= 169 && LA106_0 <= 170)||(LA106_0 >= 173 && LA106_0 <= 175)||(LA106_0 >= 179 && LA106_0 <= 180)||LA106_0==184||LA106_0==186||(LA106_0 >= 188 && LA106_0 <= 192)||(LA106_0 >= 194 && LA106_0 <= 198)) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:11: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_stmts13841);
                    	    stmt349=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_stmt.add(stmt349.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt106 >= 1 ) break loop106;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(106, input);
                                throw eee;
                        }
                        cnt106++;
                    } while (true);


                    // AST REWRITE
                    // elements: stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1884:18: -> ^( LIST[\"LIST\"] ( stmt )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1884:21: ^( LIST[\"LIST\"] ( stmt )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_stmt.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_stmt.hasNext() ) {
                            adaptor.addChild(root_1, stream_stmt.nextTree());

                        }
                        stream_stmt.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1885:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1885:11: -> LIST[\"LIST\"]
                    {
                        adaptor.addChild(root_0, 
                        new ListNode(LIST, "LIST")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmts"


    public static class stmt_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmt"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1887:1: stmt : ( ( INJECT assign )=> stmtAssignInject | ( INJECT )=> stmtInjection | stmtBlock | stmtPrint | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | ( 'const' | 'volatile' | 'host' )=> stmtDecl | ( varDecl delim )=> stmtDecl | ( varOrFcnOrArray assign )=> stmtAssignVar | ( qualName BIND )=> stmtBind | ( varOrFcnOrArray PEG )=> stmtPeg | ( 'new' | 'host' 'new' )=> varDeclarationNew | exprUnary delim -> ^( S_EXPR[\"S_EXPR\"] exprUnary ) );
    public final pollenParser.stmt_return stmt() throws RecognitionException {
        pollenParser.stmt_return retval = new pollenParser.stmt_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtAssignInject_return stmtAssignInject350 =null;

        pollenParser.stmtInjection_return stmtInjection351 =null;

        pollenParser.stmtBlock_return stmtBlock352 =null;

        pollenParser.stmtPrint_return stmtPrint353 =null;

        pollenParser.stmtReturn_return stmtReturn354 =null;

        pollenParser.stmtBreak_return stmtBreak355 =null;

        pollenParser.stmtContinue_return stmtContinue356 =null;

        pollenParser.stmtFor_return stmtFor357 =null;

        pollenParser.stmtSwitch_return stmtSwitch358 =null;

        pollenParser.stmtDoWhile_return stmtDoWhile359 =null;

        pollenParser.stmtIf_return stmtIf360 =null;

        pollenParser.stmtProvided_return stmtProvided361 =null;

        pollenParser.stmtWhile_return stmtWhile362 =null;

        pollenParser.stmtDecl_return stmtDecl363 =null;

        pollenParser.stmtDecl_return stmtDecl364 =null;

        pollenParser.stmtAssignVar_return stmtAssignVar365 =null;

        pollenParser.stmtBind_return stmtBind366 =null;

        pollenParser.stmtPeg_return stmtPeg367 =null;

        pollenParser.varDeclarationNew_return varDeclarationNew368 =null;

        pollenParser.exprUnary_return exprUnary369 =null;

        pollenParser.delim_return delim370 =null;


        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags = EnumSet.noneOf(Flags.class);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1892:5: ( ( INJECT assign )=> stmtAssignInject | ( INJECT )=> stmtInjection | stmtBlock | stmtPrint | stmtReturn | stmtBreak | stmtContinue | stmtFor | stmtSwitch | stmtDoWhile | stmtIf | stmtProvided | stmtWhile | ( 'const' | 'volatile' | 'host' )=> stmtDecl | ( varDecl delim )=> stmtDecl | ( varOrFcnOrArray assign )=> stmtAssignVar | ( qualName BIND )=> stmtBind | ( varOrFcnOrArray PEG )=> stmtPeg | ( 'new' | 'host' 'new' )=> varDeclarationNew | exprUnary delim -> ^( S_EXPR[\"S_EXPR\"] exprUnary ) )
            int alt108=20;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==INJECT) ) {
                int LA108_1 = input.LA(2);

                if ( (synpred33_pollen()) ) {
                    alt108=1;
                }
                else if ( (synpred34_pollen()) ) {
                    alt108=2;
                }
                else if ( (true) ) {
                    alt108=20;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==BRACE_OP) ) {
                alt108=3;
            }
            else if ( (LA108_0==184) ) {
                alt108=4;
            }
            else if ( (LA108_0==189) ) {
                alt108=5;
            }
            else if ( (LA108_0==151) ) {
                alt108=6;
            }
            else if ( (LA108_0==157) ) {
                alt108=7;
            }
            else if ( (LA108_0==167) ) {
                alt108=8;
            }
            else if ( (LA108_0==191) ) {
                alt108=9;
            }
            else if ( (LA108_0==159) ) {
                alt108=10;
            }
            else if ( (LA108_0==170) ) {
                alt108=11;
            }
            else if ( (LA108_0==186) ) {
                alt108=12;
            }
            else if ( (LA108_0==198) ) {
                alt108=13;
            }
            else if ( (LA108_0==156) ) {
                int LA108_13 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==197) ) {
                int LA108_14 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==169) ) {
                int LA108_15 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else if ( (synpred40_pollen()) ) {
                    alt108=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==150) ) {
                int LA108_16 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==152) ) {
                int LA108_17 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 17, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==175) ) {
                int LA108_18 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 18, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==173) ) {
                int LA108_19 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 19, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==174) ) {
                int LA108_20 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 20, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==188) ) {
                int LA108_21 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 21, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==190) ) {
                int LA108_22 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 22, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==196) ) {
                int LA108_23 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 23, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==194) ) {
                int LA108_24 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 24, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==195) ) {
                int LA108_25 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 25, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==IDENT) ) {
                int LA108_26 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else if ( (synpred37_pollen()) ) {
                    alt108=16;
                }
                else if ( (synpred38_pollen()) ) {
                    alt108=17;
                }
                else if ( (synpred39_pollen()) ) {
                    alt108=18;
                }
                else if ( (true) ) {
                    alt108=20;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 26, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==135) ) {
                int LA108_27 = input.LA(2);

                if ( (synpred35_pollen()) ) {
                    alt108=14;
                }
                else if ( (synpred36_pollen()) ) {
                    alt108=15;
                }
                else if ( (true) ) {
                    alt108=20;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 27, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==145) ) {
                int LA108_28 = input.LA(2);

                if ( (synpred37_pollen()) ) {
                    alt108=16;
                }
                else if ( (synpred39_pollen()) ) {
                    alt108=18;
                }
                else if ( (true) ) {
                    alt108=20;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 28, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==179) && (synpred40_pollen())) {
                alt108=19;
            }
            else if ( (LA108_0==BIT_NOT||LA108_0==CHAR||LA108_0==DEC||LA108_0==HEX_LIT||LA108_0==INC||LA108_0==INT_LIT||LA108_0==LOG_NOT||LA108_0==MINUS||LA108_0==OCT_LIT||LA108_0==REAL_LIT||LA108_0==STRING||LA108_0==166||LA108_0==180||LA108_0==192) ) {
                alt108=20;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1892:10: ( INJECT assign )=> stmtAssignInject
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssignInject_in_stmt13908);
                    stmtAssignInject350=stmtAssignInject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssignInject350.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1893:10: ( INJECT )=> stmtInjection
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtInjection_in_stmt13926);
                    stmtInjection351=stmtInjection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtInjection351.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1894:10: stmtBlock
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBlock_in_stmt13937);
                    stmtBlock352=stmtBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBlock352.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1895:10: stmtPrint
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPrint_in_stmt13948);
                    stmtPrint353=stmtPrint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPrint353.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1896:10: stmtReturn
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtReturn_in_stmt13959);
                    stmtReturn354=stmtReturn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtReturn354.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1897:10: stmtBreak
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBreak_in_stmt13970);
                    stmtBreak355=stmtBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBreak355.getTree());

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1898:10: stmtContinue
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtContinue_in_stmt13981);
                    stmtContinue356=stmtContinue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtContinue356.getTree());

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1899:10: stmtFor
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtFor_in_stmt13992);
                    stmtFor357=stmtFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtFor357.getTree());

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1900:10: stmtSwitch
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtSwitch_in_stmt14003);
                    stmtSwitch358=stmtSwitch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtSwitch358.getTree());

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1901:10: stmtDoWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDoWhile_in_stmt14015);
                    stmtDoWhile359=stmtDoWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDoWhile359.getTree());

                    }
                    break;
                case 11 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1902:10: stmtIf
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtIf_in_stmt14026);
                    stmtIf360=stmtIf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtIf360.getTree());

                    }
                    break;
                case 12 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1903:10: stmtProvided
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtProvided_in_stmt14037);
                    stmtProvided361=stmtProvided();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtProvided361.getTree());

                    }
                    break;
                case 13 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1904:10: stmtWhile
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtWhile_in_stmt14048);
                    stmtWhile362=stmtWhile();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtWhile362.getTree());

                    }
                    break;
                case 14 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1905:10: ( 'const' | 'volatile' | 'host' )=> stmtDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDecl_in_stmt14074);
                    stmtDecl363=stmtDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDecl363.getTree());

                    }
                    break;
                case 15 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:10: ( varDecl delim )=> stmtDecl
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtDecl_in_stmt14095);
                    stmtDecl364=stmtDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtDecl364.getTree());

                    }
                    break;
                case 16 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1907:10: ( varOrFcnOrArray assign )=> stmtAssignVar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssignVar_in_stmt14116);
                    stmtAssignVar365=stmtAssignVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssignVar365.getTree());

                    }
                    break;
                case 17 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1908:10: ( qualName BIND )=> stmtBind
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtBind_in_stmt14136);
                    stmtBind366=stmtBind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBind366.getTree());

                    }
                    break;
                case 18 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:10: ( varOrFcnOrArray PEG )=> stmtPeg
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtPeg_in_stmt14156);
                    stmtPeg367=stmtPeg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtPeg367.getTree());

                    }
                    break;
                case 19 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:11: ( 'new' | 'host' 'new' )=> varDeclarationNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclarationNew_in_stmt14181);
                    varDeclarationNew368=varDeclarationNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclarationNew368.getTree());

                    }
                    break;
                case 20 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1911:10: exprUnary delim
                    {
                    pushFollow(FOLLOW_exprUnary_in_stmt14192);
                    exprUnary369=exprUnary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary369.getTree());

                    pushFollow(FOLLOW_delim_in_stmt14194);
                    delim370=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim370.getTree());

                    // AST REWRITE
                    // elements: exprUnary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 1911:27: -> ^( S_EXPR[\"S_EXPR\"] exprUnary )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1911:30: ^( S_EXPR[\"S_EXPR\"] exprUnary )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Expr(S_EXPR, "S_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_exprUnary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmt"


    public static class exprAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1917:1: exprAssign : ( ( exprUnary ASSIGN )=> exprChainedAssign | ( 'new' )=> exprNew | expr );
    public final pollenParser.exprAssign_return exprAssign() throws RecognitionException {
        pollenParser.exprAssign_return retval = new pollenParser.exprAssign_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.exprChainedAssign_return exprChainedAssign371 =null;

        pollenParser.exprNew_return exprNew372 =null;

        pollenParser.expr_return expr373 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1918:5: ( ( exprUnary ASSIGN )=> exprChainedAssign | ( 'new' )=> exprNew | expr )
            int alt109=3;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==INJECT) ) {
                int LA109_1 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==LOG_NOT) ) {
                int LA109_2 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==BIT_NOT) ) {
                int LA109_3 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==MINUS) ) {
                int LA109_4 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==DEC||LA109_0==INC) ) {
                int LA109_5 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==166||LA109_0==192) ) {
                int LA109_6 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==INT_LIT) ) {
                int LA109_7 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==OCT_LIT) ) {
                int LA109_8 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==REAL_LIT) ) {
                int LA109_9 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==HEX_LIT) ) {
                int LA109_10 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==180) ) {
                int LA109_11 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==STRING) ) {
                int LA109_12 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==CHAR) ) {
                int LA109_13 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==135) ) {
                int LA109_14 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==145) ) {
                int LA109_15 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==IDENT) ) {
                int LA109_16 = input.LA(2);

                if ( (synpred41_pollen()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA109_0==179) && (synpred42_pollen())) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:5: ( exprUnary ASSIGN )=> exprChainedAssign
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprChainedAssign_in_exprAssign14262);
                    exprChainedAssign371=exprChainedAssign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprChainedAssign371.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1920:7: ( 'new' )=> exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_exprAssign14276);
                    exprNew372=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew372.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1921:7: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_exprAssign14284);
                    expr373=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr373.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprAssign"


    public static class exprChainedAssign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exprChainedAssign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1923:1: exprChainedAssign : ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) ) ;
    public final pollenParser.exprChainedAssign_return exprChainedAssign() throws RecognitionException {
        pollenParser.exprChainedAssign_return retval = new pollenParser.exprChainedAssign_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom ASSIGN375=null;
        pollenParser.exprUnary_return exprUnary374 =null;

        pollenParser.exprAssign_return exprAssign376 =null;


        BaseNode ASSIGN375_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_exprUnary=new RewriteRuleSubtreeStream(adaptor,"rule exprUnary");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1924:5: ( ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1924:10: ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1924:10: ( exprUnary ASSIGN exprAssign -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1924:12: exprUnary ASSIGN exprAssign
            {
            pushFollow(FOLLOW_exprUnary_in_exprChainedAssign14305);
            exprUnary374=exprUnary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprUnary.add(exprUnary374.getTree());

            ASSIGN375=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_exprChainedAssign14307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN375);


            pushFollow(FOLLOW_exprAssign_in_exprChainedAssign14309);
            exprAssign376=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign376.getTree());

            // AST REWRITE
            // elements: exprAssign, exprUnary, ASSIGN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1925:9: -> ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1925:12: ^( E_BINARY[\"E_BINARY\"] ASSIGN exprUnary exprAssign )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Binary(E_BINARY, "E_BINARY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ASSIGN.nextNode()
                );

                adaptor.addChild(root_1, stream_exprUnary.nextTree());

                adaptor.addChild(root_1, stream_exprAssign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exprChainedAssign"


    public static class stmtAssignVar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssignVar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1929:1: stmtAssignVar : varOrFcnOrArray assign exprAssign delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign varOrFcnOrArray exprAssign ) ) ;
    public final pollenParser.stmtAssignVar_return stmtAssignVar() throws RecognitionException {
        pollenParser.stmtAssignVar_return retval = new pollenParser.stmtAssignVar_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray377 =null;

        pollenParser.assign_return assign378 =null;

        pollenParser.exprAssign_return exprAssign379 =null;

        pollenParser.delim_return delim380 =null;


        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1930:5: ( varOrFcnOrArray assign exprAssign delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign varOrFcnOrArray exprAssign ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1930:10: varOrFcnOrArray assign exprAssign delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtAssignVar14371);
            varOrFcnOrArray377=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray377.getTree());

            pushFollow(FOLLOW_assign_in_stmtAssignVar14373);
            assign378=assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assign.add(assign378.getTree());

            pushFollow(FOLLOW_exprAssign_in_stmtAssignVar14375);
            exprAssign379=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign379.getTree());

            pushFollow(FOLLOW_delim_in_stmtAssignVar14377);
            delim380=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim380.getTree());

            // AST REWRITE
            // elements: exprAssign, assign, varOrFcnOrArray
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1931:9: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign varOrFcnOrArray exprAssign ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1931:12: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign varOrFcnOrArray exprAssign ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1931:52: ^( E_BINARY[\"E_BINARY\", true] assign varOrFcnOrArray exprAssign )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                , root_2);

                adaptor.addChild(root_2, stream_assign.nextTree());

                adaptor.addChild(root_2, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_2, stream_exprAssign.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtAssignVar"


    public static class stmtAssignInject_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtAssignInject"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1933:1: stmtAssignInject : injectionCode assign expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign injectionCode expr ) ) ;
    public final pollenParser.stmtAssignInject_return stmtAssignInject() throws RecognitionException {
        pollenParser.stmtAssignInject_return retval = new pollenParser.stmtAssignInject_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.injectionCode_return injectionCode381 =null;

        pollenParser.assign_return assign382 =null;

        pollenParser.expr_return expr383 =null;

        pollenParser.delim_return delim384 =null;


        RewriteRuleSubtreeStream stream_injectionCode=new RewriteRuleSubtreeStream(adaptor,"rule injectionCode");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1934:5: ( injectionCode assign expr delim -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign injectionCode expr ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1934:7: injectionCode assign expr delim
            {
            pushFollow(FOLLOW_injectionCode_in_stmtAssignInject14429);
            injectionCode381=injectionCode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_injectionCode.add(injectionCode381.getTree());

            pushFollow(FOLLOW_assign_in_stmtAssignInject14431);
            assign382=assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assign.add(assign382.getTree());

            pushFollow(FOLLOW_expr_in_stmtAssignInject14433);
            expr383=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr383.getTree());

            pushFollow(FOLLOW_delim_in_stmtAssignInject14435);
            delim384=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim384.getTree());

            // AST REWRITE
            // elements: assign, injectionCode, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1935:9: -> ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign injectionCode expr ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1935:12: ^( S_ASSIGN[\"S_ASSIGN\"] ^( E_BINARY[\"E_BINARY\", true] assign injectionCode expr ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Assign(S_ASSIGN, "S_ASSIGN")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1935:52: ^( E_BINARY[\"E_BINARY\", true] assign injectionCode expr )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Binary(E_BINARY, "E_BINARY", true)
                , root_2);

                adaptor.addChild(root_2, stream_assign.nextTree());

                adaptor.addChild(root_2, stream_injectionCode.nextTree());

                adaptor.addChild(root_2, stream_expr.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtAssignInject"


    public static class assign_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1937:1: assign : ( ASSIGN | assignOp );
    public final pollenParser.assign_return assign() throws RecognitionException {
        pollenParser.assign_return retval = new pollenParser.assign_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom ASSIGN385=null;
        pollenParser.assignOp_return assignOp386 =null;


        BaseNode ASSIGN385_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1938:5: ( ASSIGN | assignOp )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASSIGN) ) {
                alt110=1;
            }
            else if ( (LA110_0==ADD_EQ||(LA110_0 >= BITAND_EQ && LA110_0 <= BITXOR_EQ)||LA110_0==DIV_EQ||LA110_0==LSHFT_EQ||LA110_0==MOD_EQ||LA110_0==MUL_EQ||LA110_0==RSHFT_EQ||LA110_0==SUB_EQ) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1938:8: ASSIGN
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    ASSIGN385=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_assign14488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSIGN385_tree = 
                    (BaseNode)adaptor.create(ASSIGN385)
                    ;
                    adaptor.addChild(root_0, ASSIGN385_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1938:17: assignOp
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_assignOp_in_assign14492);
                    assignOp386=assignOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignOp386.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class stmtBind_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBind"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1940:1: stmtBind : ( qualName BIND )=> qualName BIND userTypeName delim -> ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName ) ;
    public final pollenParser.stmtBind_return stmtBind() throws RecognitionException {
        pollenParser.stmtBind_return retval = new pollenParser.stmtBind_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom BIND388=null;
        pollenParser.qualName_return qualName387 =null;

        pollenParser.userTypeName_return userTypeName389 =null;

        pollenParser.delim_return delim390 =null;


        BaseNode BIND388_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_userTypeName=new RewriteRuleSubtreeStream(adaptor,"rule userTypeName");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            String qn = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:5: ( ( qualName BIND )=> qualName BIND userTypeName delim -> ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1944:10: ( qualName BIND )=> qualName BIND userTypeName delim
            {
            pushFollow(FOLLOW_qualName_in_stmtBind14525);
            qualName387=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualName.add(qualName387.getTree());

            BIND388=(Atom)match(input,BIND,FOLLOW_BIND_in_stmtBind14527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND388);


            pushFollow(FOLLOW_userTypeName_in_stmtBind14530);
            userTypeName389=userTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_userTypeName.add(userTypeName389.getTree());

            pushFollow(FOLLOW_delim_in_stmtBind14536);
            delim390=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim390.getTree());

            if ( state.backtracking==0 ) {

                        if ((qualName387!=null?input.toString(qualName387.start,qualName387.stop):null).equals(ParseUnit.POLLEN_PRINT_PROXY)) {
                        
                                   if (ProcessUnits.isDashPoption()) {
                                       ParseUnit.current().
                                       reportError(ParseUnit.POLLEN_PRINT_PROXY, 
                                       "Either the '-p' option to bind a print protocol can be used or a print protocol can be bound in code - but both cannot be used at once");
                                   }
                                   if (getParserTypeInfoListSize() > 1) {
                                       ParseUnit.current().reportError(ParseUnit.POLLEN_PRINT_PROXY, "Invalid bind of protocol member: not allowed in nested class");
                                   }
                                           
                            qn = ParseUnit.INTRINSIC_PRINT_PROXY;
                            ProcessUnits.setPollenProxyBindSeen(ProcessUnits.PollenProtocol.PRINT, true); // causes the  protocol member to be created
                            ProcessUnits.setPollenProtocolImpl(ProcessUnits.PollenProtocol.PRINT, (userTypeName389!=null?input.toString(userTypeName389.start,userTypeName389.stop):null));
                            ProcessUnits.setPollenProxyModule(ProcessUnits.PollenProtocol.PRINT,ParseUnit.mkPackageName(ParseUnit.current().getCurrPath()) + "."  + currType.getTypeName());
                            
                        }
                        else if ((qualName387!=null?input.toString(qualName387.start,qualName387.stop):null).equals(ParseUnit.POLLEN_DYNAMIC_MEMORY_PROXY)) {
                        
                                   if (getParserTypeInfoListSize() > 1) {
                                       ParseUnit.current().reportError(ParseUnit.POLLEN_DYNAMIC_MEMORY_PROXY, "Invalid bind of protocol member: not allowed in nested class");
                                   }
                                           
                            qn = ParseUnit.INTRINSIC_DYNAMIC_MEMORY_PROXY;
                            ProcessUnits.setPollenProxyBindSeen(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY, true); // causes the  protocol member to be created
                            ProcessUnits.setPollenProtocolImpl(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY, (userTypeName389!=null?input.toString(userTypeName389.start,userTypeName389.stop):null));
                            ProcessUnits.setPollenProxyModule(ProcessUnits.PollenProtocol.DYNAMIC_MEMORY, ParseUnit.mkPackageName(ParseUnit.current().getCurrPath()) + "."  + currType.getTypeName());
                            
                        }
                        else if ((qualName387!=null?input.toString(qualName387.start,qualName387.stop):null).equals(ParseUnit.POLLEN_SLEEP_WAKE_PROXY)) {
                        
                                   if (getParserTypeInfoListSize() > 1) {
                                       ParseUnit.current().reportError(ParseUnit.POLLEN_SLEEP_WAKE_PROXY, "Invalid bind of protocol member: not allowed in nested class");
                                   }
                                           
                            qn = ParseUnit.INTRINSIC_SLEEP_WAKE_PROXY;
                            ProcessUnits.setPollenProxyBindSeen(ProcessUnits.PollenProtocol.SLEEP_WAKE, true); // causes the  protocol member to be created
                            ProcessUnits.setPollenProtocolImpl(ProcessUnits.PollenProtocol.SLEEP_WAKE, (userTypeName389!=null?input.toString(userTypeName389.start,userTypeName389.stop):null));
                            ProcessUnits.setPollenProxyModule(ProcessUnits.PollenProtocol.SLEEP_WAKE, ParseUnit.mkPackageName(ParseUnit.current().getCurrPath()) + "."  + currType.getTypeName());
                            
                        }
                        else
                            qn = (qualName387!=null?input.toString(qualName387.start,qualName387.stop):null);
                    }

            // AST REWRITE
            // elements: userTypeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1991:13: -> ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1991:16: ^( S_BIND[\"S_BIND\"] ^( E_IDENT[\"E_IDENT\"] IDENT[qn] ) userTypeName )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Bind(S_BIND, "S_BIND")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1991:50: ^( E_IDENT[\"E_IDENT\"] IDENT[qn] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Ident(E_IDENT, "E_IDENT")
                , root_2);

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, qn)
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_userTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtBind"


    public static class stmtPeg_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPeg"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1993:1: stmtPeg : varOrFcnOrArray PEG exprAssign delim -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign ) ;
    public final pollenParser.stmtPeg_return stmtPeg() throws RecognitionException {
        pollenParser.stmtPeg_return retval = new pollenParser.stmtPeg_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom PEG392=null;
        pollenParser.varOrFcnOrArray_return varOrFcnOrArray391 =null;

        pollenParser.exprAssign_return exprAssign393 =null;

        pollenParser.delim_return delim394 =null;


        BaseNode PEG392_tree=null;
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleSubtreeStream stream_varOrFcnOrArray=new RewriteRuleSubtreeStream(adaptor,"rule varOrFcnOrArray");
        RewriteRuleSubtreeStream stream_exprAssign=new RewriteRuleSubtreeStream(adaptor,"rule exprAssign");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1994:5: ( varOrFcnOrArray PEG exprAssign delim -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1994:10: varOrFcnOrArray PEG exprAssign delim
            {
            pushFollow(FOLLOW_varOrFcnOrArray_in_stmtPeg14614);
            varOrFcnOrArray391=varOrFcnOrArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrFcnOrArray.add(varOrFcnOrArray391.getTree());

            PEG392=(Atom)match(input,PEG,FOLLOW_PEG_in_stmtPeg14617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PEG.add(PEG392);


            pushFollow(FOLLOW_exprAssign_in_stmtPeg14620);
            exprAssign393=exprAssign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exprAssign.add(exprAssign393.getTree());

            pushFollow(FOLLOW_delim_in_stmtPeg14626);
            delim394=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim394.getTree());

            // AST REWRITE
            // elements: exprAssign, varOrFcnOrArray, PEG
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1994:53: -> ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1994:56: ^( S_PEG[\"S_PEG\"] varOrFcnOrArray PEG exprAssign )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Peg(S_PEG, "S_PEG")
                , root_1);

                adaptor.addChild(root_1, stream_varOrFcnOrArray.nextTree());

                adaptor.addChild(root_1, 
                stream_PEG.nextNode()
                );

                adaptor.addChild(root_1, stream_exprAssign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtPeg"


    public static class printList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1996:1: printList : printItemList -> ^( LIST[\"LIST\"] printItemList ) ;
    public final pollenParser.printList_return printList() throws RecognitionException {
        pollenParser.printList_return retval = new pollenParser.printList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.printItemList_return printItemList395 =null;


        RewriteRuleSubtreeStream stream_printItemList=new RewriteRuleSubtreeStream(adaptor,"rule printItemList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1997:5: ( printItemList -> ^( LIST[\"LIST\"] printItemList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1997:14: printItemList
            {
            pushFollow(FOLLOW_printItemList_in_printList14676);
            printItemList395=printItemList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_printItemList.add(printItemList395.getTree());

            // AST REWRITE
            // elements: printItemList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 1997:31: -> ^( LIST[\"LIST\"] printItemList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1997:34: ^( LIST[\"LIST\"] printItemList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_printItemList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "printList"


    public static class printItemList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printItemList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1999:1: printItemList : ( printItem ( PLUS printItem )* -> ( printItem )+ | -> NIL );
    public final pollenParser.printItemList_return printItemList() throws RecognitionException {
        pollenParser.printItemList_return retval = new pollenParser.printItemList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom PLUS397=null;
        pollenParser.printItem_return printItem396 =null;

        pollenParser.printItem_return printItem398 =null;


        BaseNode PLUS397_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleSubtreeStream stream_printItem=new RewriteRuleSubtreeStream(adaptor,"rule printItem");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2000:5: ( printItem ( PLUS printItem )* -> ( printItem )+ | -> NIL )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==CHAR||LA112_0==HEX_LIT||LA112_0==IDENT||LA112_0==INT_LIT||LA112_0==OCT_LIT||LA112_0==REAL_LIT||LA112_0==STRING||LA112_0==145||LA112_0==166||LA112_0==180||LA112_0==192) ) {
                alt112=1;
            }
            else if ( (LA112_0==NLL||LA112_0==SEMI) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }
            switch (alt112) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2000:10: printItem ( PLUS printItem )*
                    {
                    pushFollow(FOLLOW_printItem_in_printItemList14710);
                    printItem396=printItem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_printItem.add(printItem396.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2000:23: ( PLUS printItem )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==PLUS) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2000:25: PLUS printItem
                    	    {
                    	    PLUS397=(Atom)match(input,PLUS,FOLLOW_PLUS_in_printItemList14717); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PLUS.add(PLUS397);


                    	    pushFollow(FOLLOW_printItem_in_printItemList14719);
                    	    printItem398=printItem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_printItem.add(printItem398.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: printItem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2000:46: -> ( printItem )+
                    {
                        if ( !(stream_printItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_printItem.hasNext() ) {
                            adaptor.addChild(root_0, stream_printItem.nextTree());

                        }
                        stream_printItem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2001:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2001:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "printItemList"


    public static class printItem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "printItem"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2003:1: printItem : ( primitiveLit | varOrFcnOrArray );
    public final pollenParser.printItem_return printItem() throws RecognitionException {
        pollenParser.printItem_return retval = new pollenParser.printItem_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit399 =null;

        pollenParser.varOrFcnOrArray_return varOrFcnOrArray400 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2004:5: ( primitiveLit | varOrFcnOrArray )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==CHAR||LA113_0==HEX_LIT||LA113_0==INT_LIT||LA113_0==OCT_LIT||LA113_0==REAL_LIT||LA113_0==STRING||LA113_0==166||LA113_0==180||LA113_0==192) ) {
                alt113=1;
            }
            else if ( (LA113_0==IDENT||LA113_0==145) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2004:10: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_printItem14762);
                    primitiveLit399=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit399.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2005:10: varOrFcnOrArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varOrFcnOrArray_in_printItem14777);
                    varOrFcnOrArray400=varOrFcnOrArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrFcnOrArray400.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "printItem"


    public static class stmtPrint_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrint"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2007:1: stmtPrint : 'print' ( stmtPrintTarget[flags] ) printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) ;
    public final pollenParser.stmtPrint_return stmtPrint() throws RecognitionException {
        pollenParser.stmtPrint_return retval = new pollenParser.stmtPrint_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal401=null;
        pollenParser.stmtPrintTarget_return stmtPrintTarget402 =null;

        pollenParser.printList_return printList403 =null;

        pollenParser.delim_return delim404 =null;


        BaseNode string_literal401_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_stmtPrintTarget=new RewriteRuleSubtreeStream(adaptor,"rule stmtPrintTarget");
        RewriteRuleSubtreeStream stream_printList=new RewriteRuleSubtreeStream(adaptor,"rule printList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            EnumSet<Flags> flags = EnumSet.noneOf(Flags.class);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2011:5: ( 'print' ( stmtPrintTarget[flags] ) printList delim -> ^( S_PRINT[\"S_PRINT\", flags] printList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2011:11: 'print' ( stmtPrintTarget[flags] ) printList delim
            {
            string_literal401=(Atom)match(input,184,FOLLOW_184_in_stmtPrint14802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal401);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2011:19: ( stmtPrintTarget[flags] )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2011:20: stmtPrintTarget[flags]
            {
            pushFollow(FOLLOW_stmtPrintTarget_in_stmtPrint14805);
            stmtPrintTarget402=stmtPrintTarget(flags);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtPrintTarget.add(stmtPrintTarget402.getTree());

            }


            pushFollow(FOLLOW_printList_in_stmtPrint14809);
            printList403=printList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_printList.add(printList403.getTree());

            pushFollow(FOLLOW_delim_in_stmtPrint14811);
            delim404=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim404.getTree());

            // AST REWRITE
            // elements: printList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2012:19: -> ^( S_PRINT[\"S_PRINT\", flags] printList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2012:22: ^( S_PRINT[\"S_PRINT\", flags] printList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Print(S_PRINT, "S_PRINT", flags)
                , root_1);

                adaptor.addChild(root_1, stream_printList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtPrint"


    public static class stmtPrintTarget_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtPrintTarget"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2014:1: stmtPrintTarget[EnumSet<Flags> f] : ( 'log' | 'err' | 'out' |) ;
    public final pollenParser.stmtPrintTarget_return stmtPrintTarget(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.stmtPrintTarget_return retval = new pollenParser.stmtPrintTarget_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal405=null;
        Atom string_literal406=null;
        Atom string_literal407=null;

        BaseNode string_literal405_tree=null;
        BaseNode string_literal406_tree=null;
        BaseNode string_literal407_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2015:5: ( ( 'log' | 'err' | 'out' |) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:9: ( 'log' | 'err' | 'out' |)
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:9: ( 'log' | 'err' | 'out' |)
            int alt114=4;
            switch ( input.LA(1) ) {
            case 176:
                {
                alt114=1;
                }
                break;
            case 163:
                {
                alt114=2;
                }
                break;
            case 181:
                {
                alt114=3;
                }
                break;
            case CHAR:
            case HEX_LIT:
            case IDENT:
            case INT_LIT:
            case NLL:
            case OCT_LIT:
            case REAL_LIT:
            case SEMI:
            case STRING:
            case 145:
            case 166:
            case 180:
            case 192:
                {
                alt114=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }

            switch (alt114) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2016:19: 'log'
                    {
                    string_literal405=(Atom)match(input,176,FOLLOW_176_in_stmtPrintTarget14883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal405_tree = 
                    (BaseNode)adaptor.create(string_literal405)
                    ;
                    adaptor.addChild(root_0, string_literal405_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.LOG); }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2017:19: 'err'
                    {
                    string_literal406=(Atom)match(input,163,FOLLOW_163_in_stmtPrintTarget14906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal406_tree = 
                    (BaseNode)adaptor.create(string_literal406)
                    ;
                    adaptor.addChild(root_0, string_literal406_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.ERR); }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2018:19: 'out'
                    {
                    string_literal407=(Atom)match(input,181,FOLLOW_181_in_stmtPrintTarget14931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal407_tree = 
                    (BaseNode)adaptor.create(string_literal407)
                    ;
                    adaptor.addChild(root_0, string_literal407_tree);
                    }

                    if ( state.backtracking==0 ) {f.add(Flags.OUT); }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2019:21: 
                    {
                    if ( state.backtracking==0 ) {f.add(Flags.OUT); }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtPrintTarget"


    public static class stmtReturn_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtReturn"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2022:1: stmtReturn : 'return' ( ( ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) ) | ( delim -> ^( S_RETURN[\"S_RETURN\"] ) ) ) ;
    public final pollenParser.stmtReturn_return stmtReturn() throws RecognitionException {
        pollenParser.stmtReturn_return retval = new pollenParser.stmtReturn_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal408=null;
        pollenParser.expr_return expr409 =null;

        pollenParser.delim_return delim410 =null;

        pollenParser.delim_return delim411 =null;


        BaseNode string_literal408_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2025:5: ( 'return' ( ( ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) ) | ( delim -> ^( S_RETURN[\"S_RETURN\"] ) ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2025:7: 'return' ( ( ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) ) | ( delim -> ^( S_RETURN[\"S_RETURN\"] ) ) )
            {
            string_literal408=(Atom)match(input,189,FOLLOW_189_in_stmtReturn14984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal408);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2026:18: ( ( ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) ) | ( delim -> ^( S_RETURN[\"S_RETURN\"] ) ) )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==BIT_NOT||LA115_0==CHAR||LA115_0==DEC||LA115_0==HEX_LIT||LA115_0==IDENT||(LA115_0 >= INC && LA115_0 <= INT_LIT)||LA115_0==LOG_NOT||LA115_0==MINUS||LA115_0==OCT_LIT||LA115_0==REAL_LIT||LA115_0==STRING||LA115_0==135||LA115_0==145||LA115_0==166||LA115_0==180||LA115_0==192) ) {
                alt115=1;
            }
            else if ( (LA115_0==NLL||LA115_0==SEMI) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2027:20: ( ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2027:20: ( ( expr ) delim -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) ) )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2027:21: ( expr ) delim
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2027:21: ( expr )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2027:22: expr
                    {
                    pushFollow(FOLLOW_expr_in_stmtReturn15028);
                    expr409=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr409.getTree());

                    }


                    pushFollow(FOLLOW_delim_in_stmtReturn15032);
                    delim410=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim410.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2028:24: -> ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2028:27: ^( S_RETURN[\"S_RETURN\"] ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2028:67: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] expr ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Vec(E_VEC, "E_VEC")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2028:98: ^( LIST[\"LIST\"] expr )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_3);

                        adaptor.addChild(root_3, stream_expr.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2030:20: ( delim -> ^( S_RETURN[\"S_RETURN\"] ) )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2030:20: ( delim -> ^( S_RETURN[\"S_RETURN\"] ) )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2030:21: delim
                    {
                    pushFollow(FOLLOW_delim_in_stmtReturn15133);
                    delim411=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim411.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2031:24: -> ^( S_RETURN[\"S_RETURN\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2031:27: ^( S_RETURN[\"S_RETURN\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Return(S_RETURN, "S_RETURN")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtReturn"


    public static class stmtBreak_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtBreak"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2035:1: stmtBreak : 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) ;
    public final pollenParser.stmtBreak_return stmtBreak() throws RecognitionException {
        pollenParser.stmtBreak_return retval = new pollenParser.stmtBreak_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal412=null;
        pollenParser.delim_return delim413 =null;


        BaseNode string_literal412_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2036:5: ( 'break' delim -> ^( S_BREAK[\"S_BREAK\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2036:10: 'break' delim
            {
            string_literal412=(Atom)match(input,151,FOLLOW_151_in_stmtBreak15224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal412);


            pushFollow(FOLLOW_delim_in_stmtBreak15226);
            delim413=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim413.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2036:24: -> ^( S_BREAK[\"S_BREAK\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2036:27: ^( S_BREAK[\"S_BREAK\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Break(S_BREAK, "S_BREAK")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtBreak"


    public static class stmtContinue_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtContinue"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2038:1: stmtContinue : 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) ;
    public final pollenParser.stmtContinue_return stmtContinue() throws RecognitionException {
        pollenParser.stmtContinue_return retval = new pollenParser.stmtContinue_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal414=null;
        pollenParser.delim_return delim415 =null;


        BaseNode string_literal414_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2039:5: ( 'continue' delim -> ^( S_CONTINUE[\"S_CONTINUE\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2039:10: 'continue' delim
            {
            string_literal414=(Atom)match(input,157,FOLLOW_157_in_stmtContinue15257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal414);


            pushFollow(FOLLOW_delim_in_stmtContinue15259);
            delim415=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim415.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2039:27: -> ^( S_CONTINUE[\"S_CONTINUE\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2039:30: ^( S_CONTINUE[\"S_CONTINUE\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Continue(S_CONTINUE, "S_CONTINUE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtContinue"


    public static class stmtFor_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtFor"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2041:1: stmtFor : 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' ( NLL )? stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar ) ;
    public final pollenParser.stmtFor_return stmtFor() throws RecognitionException {
        pollenParser.stmtFor_return retval = new pollenParser.stmtFor_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal416=null;
        Atom char_literal421=null;
        Atom NLL422=null;
        pollenParser.defaultLoopVar_return defaultLoopVar417 =null;

        pollenParser.stmtForInit_return stmtForInit418 =null;

        pollenParser.stmtForCond_return stmtForCond419 =null;

        pollenParser.stmtForNext_return stmtForNext420 =null;

        pollenParser.stmtBlock_return stmtBlock423 =null;


        BaseNode string_literal416_tree=null;
        BaseNode char_literal421_tree=null;
        BaseNode NLL422_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtForCond=new RewriteRuleSubtreeStream(adaptor,"rule stmtForCond");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_stmtForInit=new RewriteRuleSubtreeStream(adaptor,"rule stmtForInit");
        RewriteRuleSubtreeStream stream_stmtForNext=new RewriteRuleSubtreeStream(adaptor,"rule stmtForNext");
        RewriteRuleSubtreeStream stream_defaultLoopVar=new RewriteRuleSubtreeStream(adaptor,"rule defaultLoopVar");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2042:5: ( 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' ( NLL )? stmtBlock -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2042:9: 'for' defaultLoopVar stmtForInit stmtForCond stmtForNext ')' ( NLL )? stmtBlock
            {
            string_literal416=(Atom)match(input,167,FOLLOW_167_in_stmtFor15289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal416);


            pushFollow(FOLLOW_defaultLoopVar_in_stmtFor15291);
            defaultLoopVar417=defaultLoopVar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_defaultLoopVar.add(defaultLoopVar417.getTree());

            pushFollow(FOLLOW_stmtForInit_in_stmtFor15293);
            stmtForInit418=stmtForInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForInit.add(stmtForInit418.getTree());

            pushFollow(FOLLOW_stmtForCond_in_stmtFor15295);
            stmtForCond419=stmtForCond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForCond.add(stmtForCond419.getTree());

            pushFollow(FOLLOW_stmtForNext_in_stmtFor15297);
            stmtForNext420=stmtForNext();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtForNext.add(stmtForNext420.getTree());

            char_literal421=(Atom)match(input,136,FOLLOW_136_in_stmtFor15299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal421);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2042:70: ( NLL )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==NLL) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2042:71: NLL
                    {
                    NLL422=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtFor15302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL422);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtFor15306);
            stmtBlock423=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock423.getTree());

            // AST REWRITE
            // elements: stmtForInit, stmtForNext, defaultLoopVar, stmtForCond, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2043:13: -> ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2043:16: ^( S_FOR[\"S_FOR\"] stmtForInit stmtForCond stmtForNext stmtBlock defaultLoopVar )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.For(S_FOR, "S_FOR")
                , root_1);

                adaptor.addChild(root_1, stream_stmtForInit.nextTree());

                adaptor.addChild(root_1, stream_stmtForCond.nextTree());

                adaptor.addChild(root_1, stream_stmtForNext.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_1, stream_defaultLoopVar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtFor"


    public static class stmtForCond_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForCond"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2045:1: stmtForCond : ( SEMI -> NIL | expr SEMI -> expr );
    public final pollenParser.stmtForCond_return stmtForCond() throws RecognitionException {
        pollenParser.stmtForCond_return retval = new pollenParser.stmtForCond_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom SEMI424=null;
        Atom SEMI426=null;
        pollenParser.expr_return expr425 =null;


        BaseNode SEMI424_tree=null;
        BaseNode SEMI426_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2046:5: ( SEMI -> NIL | expr SEMI -> expr )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==SEMI) ) {
                alt117=1;
            }
            else if ( (LA117_0==BIT_NOT||LA117_0==CHAR||LA117_0==DEC||LA117_0==HEX_LIT||LA117_0==IDENT||(LA117_0 >= INC && LA117_0 <= INT_LIT)||LA117_0==LOG_NOT||LA117_0==MINUS||LA117_0==OCT_LIT||LA117_0==REAL_LIT||LA117_0==STRING||LA117_0==135||LA117_0==145||LA117_0==166||LA117_0==180||LA117_0==192) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2046:9: SEMI
                    {
                    SEMI424=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond15359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI424);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2047:12: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2048:9: expr SEMI
                    {
                    pushFollow(FOLLOW_expr_in_stmtForCond15384);
                    expr425=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr425.getTree());

                    SEMI426=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForCond15386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI426);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2048:19: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtForCond"


    public static class defaultLoopVar_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultLoopVar"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2050:1: defaultLoopVar : lv= '(' -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) ) ;
    public final pollenParser.defaultLoopVar_return defaultLoopVar() throws RecognitionException {
        pollenParser.defaultLoopVar_return retval = new pollenParser.defaultLoopVar_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom lv=null;

        BaseNode lv_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2051:5: (lv= '(' -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2051:10: lv= '('
            {
            lv=(Atom)match(input,135,FOLLOW_135_in_defaultLoopVar15414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(lv);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2051:17: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2051:20: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2052:18: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] ) IDENT[ParseUnit.DEFAULT_LOOPVAR] )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                , root_2);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2053:22: ^( T_STD[\"T_STD\", EnumSet.noneOf(Flags.class)] IDENT[$lv,\"uint32\"] )
                {
                BaseNode root_3 = (BaseNode)adaptor.nil();
                root_3 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", EnumSet.noneOf(Flags.class))
                , root_3);

                adaptor.addChild(root_3, 
                (BaseNode)adaptor.create(IDENT, lv, "uint32")
                );

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, 
                (BaseNode)adaptor.create(IDENT, ParseUnit.DEFAULT_LOOPVAR)
                );

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defaultLoopVar"


    public static class stmtForInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2057:1: stmtForInit : ( SEMI -> NIL | ( typeName IDENT ASSIGN )=> typeName IDENT ASSIGN expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | ( INJECT )=> stmtAssignInject | stmtAssignVar );
    public final pollenParser.stmtForInit_return stmtForInit() throws RecognitionException {
        pollenParser.stmtForInit_return retval = new pollenParser.stmtForInit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom SEMI427=null;
        Atom IDENT429=null;
        Atom ASSIGN430=null;
        Atom SEMI432=null;
        pollenParser.typeName_return typeName428 =null;

        pollenParser.expr_return expr431 =null;

        pollenParser.stmtAssignInject_return stmtAssignInject433 =null;

        pollenParser.stmtAssignVar_return stmtAssignVar434 =null;


        BaseNode SEMI427_tree=null;
        BaseNode IDENT429_tree=null;
        BaseNode ASSIGN430_tree=null;
        BaseNode SEMI432_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2058:5: ( SEMI -> NIL | ( typeName IDENT ASSIGN )=> typeName IDENT ASSIGN expr SEMI -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) ) | ( INJECT )=> stmtAssignInject | stmtAssignVar )
            int alt118=4;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==SEMI) ) {
                alt118=1;
            }
            else if ( (LA118_0==150) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==152) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==175) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==173) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==174) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==188) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==190) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==196) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==194) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==195) && (synpred44_pollen())) {
                alt118=2;
            }
            else if ( (LA118_0==IDENT) ) {
                int LA118_12 = input.LA(2);

                if ( (synpred44_pollen()) ) {
                    alt118=2;
                }
                else if ( (true) ) {
                    alt118=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA118_0==INJECT) && (synpred45_pollen())) {
                alt118=3;
            }
            else if ( (LA118_0==145) ) {
                alt118=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2058:9: SEMI
                    {
                    SEMI427=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit15535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI427);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2059:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2060:9: ( typeName IDENT ASSIGN )=> typeName IDENT ASSIGN expr SEMI
                    {
                    pushFollow(FOLLOW_typeName_in_stmtForInit15571);
                    typeName428=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName428.getTree());

                    IDENT429=(Atom)match(input,IDENT,FOLLOW_IDENT_in_stmtForInit15573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT429);


                    ASSIGN430=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_stmtForInit15575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN430);


                    pushFollow(FOLLOW_expr_in_stmtForInit15577);
                    expr431=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr431.getTree());

                    SEMI432=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtForInit15579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI432);


                    // AST REWRITE
                    // elements: IDENT, expr, typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2061:13: -> ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2061:16: ^( S_DECL[\"S_DECL\"] ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Decl(S_DECL, "S_DECL")
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2062:18: ^( D_VAR[\"D_VAR\", EnumSet.noneOf(Flags.class)] typeName IDENT expr )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", EnumSet.noneOf(Flags.class))
                        , root_2);

                        adaptor.addChild(root_2, stream_typeName.nextTree());

                        adaptor.addChild(root_2, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_2, stream_expr.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2063:9: ( INJECT )=> stmtAssignInject
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssignInject_in_stmtForInit15653);
                    stmtAssignInject433=stmtAssignInject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssignInject433.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2064:10: stmtAssignVar
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_stmtAssignVar_in_stmtForInit15664);
                    stmtAssignVar434=stmtAssignVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtAssignVar434.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtForInit"


    public static class stmtForNext_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtForNext"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2066:1: stmtForNext : ( -> NIL | expr );
    public final pollenParser.stmtForNext_return stmtForNext() throws RecognitionException {
        pollenParser.stmtForNext_return retval = new pollenParser.stmtForNext_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.expr_return expr435 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2067:5: ( -> NIL | expr )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==136) ) {
                alt119=1;
            }
            else if ( (LA119_0==BIT_NOT||LA119_0==CHAR||LA119_0==DEC||LA119_0==HEX_LIT||LA119_0==IDENT||(LA119_0 >= INC && LA119_0 <= INT_LIT)||LA119_0==LOG_NOT||LA119_0==MINUS||LA119_0==OCT_LIT||LA119_0==REAL_LIT||LA119_0==STRING||LA119_0==135||LA119_0==145||LA119_0==166||LA119_0==180||LA119_0==192) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }
            switch (alt119) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2068:13: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2068:13: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2069:9: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_stmtForNext15707);
                    expr435=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtForNext"


    public static class stmtSwitch_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtSwitch"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2077:1: stmtSwitch : 'switch' '(' expr ')' ( NLL )? braceOpenNLL stmtsCase ( stmtDefault )? braceCloseNLL -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) ;
    public final pollenParser.stmtSwitch_return stmtSwitch() throws RecognitionException {
        pollenParser.stmtSwitch_return retval = new pollenParser.stmtSwitch_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal436=null;
        Atom char_literal437=null;
        Atom char_literal439=null;
        Atom NLL440=null;
        pollenParser.expr_return expr438 =null;

        pollenParser.braceOpenNLL_return braceOpenNLL441 =null;

        pollenParser.stmtsCase_return stmtsCase442 =null;

        pollenParser.stmtDefault_return stmtDefault443 =null;

        pollenParser.braceCloseNLL_return braceCloseNLL444 =null;


        BaseNode string_literal436_tree=null;
        BaseNode char_literal437_tree=null;
        BaseNode char_literal439_tree=null;
        BaseNode NLL440_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtDefault=new RewriteRuleSubtreeStream(adaptor,"rule stmtDefault");
        RewriteRuleSubtreeStream stream_braceOpenNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceOpenNLL");
        RewriteRuleSubtreeStream stream_braceCloseNLL=new RewriteRuleSubtreeStream(adaptor,"rule braceCloseNLL");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtsCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtsCase");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:5: ( 'switch' '(' expr ')' ( NLL )? braceOpenNLL stmtsCase ( stmtDefault )? braceCloseNLL -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:10: 'switch' '(' expr ')' ( NLL )? braceOpenNLL stmtsCase ( stmtDefault )? braceCloseNLL
            {
            string_literal436=(Atom)match(input,191,FOLLOW_191_in_stmtSwitch15732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal436);


            char_literal437=(Atom)match(input,135,FOLLOW_135_in_stmtSwitch15734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal437);


            pushFollow(FOLLOW_expr_in_stmtSwitch15736);
            expr438=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr438.getTree());

            char_literal439=(Atom)match(input,136,FOLLOW_136_in_stmtSwitch15738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal439);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:32: ( NLL )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==NLL) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:33: NLL
                    {
                    NLL440=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtSwitch15741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL440);


                    }
                    break;

            }


            pushFollow(FOLLOW_braceOpenNLL_in_stmtSwitch15745);
            braceOpenNLL441=braceOpenNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceOpenNLL.add(braceOpenNLL441.getTree());

            pushFollow(FOLLOW_stmtsCase_in_stmtSwitch15747);
            stmtsCase442=stmtsCase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsCase.add(stmtsCase442.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:62: ( stmtDefault )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==158) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:62: stmtDefault
                    {
                    pushFollow(FOLLOW_stmtDefault_in_stmtSwitch15749);
                    stmtDefault443=stmtDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtDefault.add(stmtDefault443.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_braceCloseNLL_in_stmtSwitch15752);
            braceCloseNLL444=braceCloseNLL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_braceCloseNLL.add(braceCloseNLL444.getTree());

            // AST REWRITE
            // elements: stmtsCase, stmtDefault, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2078:92: -> ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:95: ^( S_SWITCH[\"S_SWITCH\"] expr stmtsCase ( stmtDefault )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Switch(S_SWITCH, "S_SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtsCase.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2078:151: ( stmtDefault )?
                if ( stream_stmtDefault.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtDefault.nextTree());

                }
                stream_stmtDefault.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtSwitch"


    public static class stmtsCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsCase"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2080:1: stmtsCase : ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) ;
    public final pollenParser.stmtsCase_return stmtsCase() throws RecognitionException {
        pollenParser.stmtsCase_return retval = new pollenParser.stmtsCase_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtCase_return stmtCase445 =null;


        RewriteRuleSubtreeStream stream_stmtCase=new RewriteRuleSubtreeStream(adaptor,"rule stmtCase");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:5: ( ( stmtCase )* -> ^( LIST[\"LIST\"] ( stmtCase )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:10: ( stmtCase )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:10: ( stmtCase )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==153) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:10: stmtCase
            	    {
            	    pushFollow(FOLLOW_stmtCase_in_stmtsCase15794);
            	    stmtCase445=stmtCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtCase.add(stmtCase445.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtCase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2081:20: -> ^( LIST[\"LIST\"] ( stmtCase )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:23: ^( LIST[\"LIST\"] ( stmtCase )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2081:48: ( stmtCase )*
                while ( stream_stmtCase.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtCase.nextTree());

                }
                stream_stmtCase.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtsCase"


    public static class stmtDefault_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDefault"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2083:1: stmtDefault : 'default' ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ) ;
    public final pollenParser.stmtDefault_return stmtDefault() throws RecognitionException {
        pollenParser.stmtDefault_return retval = new pollenParser.stmtDefault_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal446=null;
        Atom char_literal447=null;
        Atom NLL448=null;
        pollenParser.stmts_return stmts449 =null;


        BaseNode string_literal446_tree=null;
        BaseNode char_literal447_tree=null;
        BaseNode NLL448_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:5: ( 'default' ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:10: 'default' ':' ( NLL )? stmts
            {
            string_literal446=(Atom)match(input,158,FOLLOW_158_in_stmtDefault15827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal446);


            char_literal447=(Atom)match(input,141,FOLLOW_141_in_stmtDefault15832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal447);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:27: ( NLL )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==NLL) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:28: NLL
                    {
                    NLL448=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtDefault15835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL448);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmts_in_stmtDefault15839);
            stmts449=stmts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmts.add(stmts449.getTree());

            // AST REWRITE
            // elements: stmts
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2084:43: -> ^( S_CASE[\"S_CASE\"] stmts )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2084:46: ^( S_CASE[\"S_CASE\"] stmts )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Case(S_CASE, "S_CASE")
                , root_1);

                adaptor.addChild(root_1, stream_stmts.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtDefault"


    public static class stmtCase_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtCase"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2086:1: stmtCase : ( ( 'case' INT_LIT )=> 'case' ( INT_LIT ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) ) | 'case' ( qualName ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) ) );
    public final pollenParser.stmtCase_return stmtCase() throws RecognitionException {
        pollenParser.stmtCase_return retval = new pollenParser.stmtCase_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal450=null;
        Atom INT_LIT451=null;
        Atom char_literal452=null;
        Atom NLL453=null;
        Atom string_literal455=null;
        Atom char_literal457=null;
        Atom NLL458=null;
        pollenParser.stmts_return stmts454 =null;

        pollenParser.qualName_return qualName456 =null;

        pollenParser.stmts_return stmts459 =null;


        BaseNode string_literal450_tree=null;
        BaseNode INT_LIT451_tree=null;
        BaseNode char_literal452_tree=null;
        BaseNode NLL453_tree=null;
        BaseNode string_literal455_tree=null;
        BaseNode char_literal457_tree=null;
        BaseNode NLL458_tree=null;
        RewriteRuleTokenStream stream_INT_LIT=new RewriteRuleTokenStream(adaptor,"token INT_LIT");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts");

            EnumSet<LitFlags> litFlags = EnumSet.of(LitFlags.INT);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:5: ( ( 'case' INT_LIT )=> 'case' ( INT_LIT ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) ) | 'case' ( qualName ) ':' ( NLL )? stmts -> ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) ) )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==153) ) {
                int LA126_1 = input.LA(2);

                if ( (synpred46_pollen()) ) {
                    alt126=1;
                }
                else if ( (true) ) {
                    alt126=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:10: ( 'case' INT_LIT )=> 'case' ( INT_LIT ) ':' ( NLL )? stmts
                    {
                    string_literal450=(Atom)match(input,153,FOLLOW_153_in_stmtCase15887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal450);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:36: ( INT_LIT )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:37: INT_LIT
                    {
                    INT_LIT451=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_stmtCase15890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INT_LIT.add(INT_LIT451);


                    }


                    char_literal452=(Atom)match(input,141,FOLLOW_141_in_stmtCase15896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal452);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:53: ( NLL )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==NLL) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:54: NLL
                            {
                            NLL453=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtCase15899); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL453);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_stmts_in_stmtCase15903);
                    stmts454=stmts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmts.add(stmts454.getTree());

                    // AST REWRITE
                    // elements: stmts, INT_LIT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2090:69: -> ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:72: ^( S_CASE[\"S_CASE\"] stmts ^( E_CONST[\"E_CONST\", litFlags] INT_LIT ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Case(S_CASE, "S_CASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_stmts.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2091:33: ^( E_CONST[\"E_CONST\", litFlags] INT_LIT )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", litFlags)
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_INT_LIT.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:10: 'case' ( qualName ) ':' ( NLL )? stmts
                    {
                    string_literal455=(Atom)match(input,153,FOLLOW_153_in_stmtCase15976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal455);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:17: ( qualName )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:18: qualName
                    {
                    pushFollow(FOLLOW_qualName_in_stmtCase15979);
                    qualName456=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName456.getTree());

                    }


                    char_literal457=(Atom)match(input,141,FOLLOW_141_in_stmtCase15985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal457);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:35: ( NLL )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==NLL) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:36: NLL
                            {
                            NLL458=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtCase15988); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NLL.add(NLL458);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_stmts_in_stmtCase15992);
                    stmts459=stmts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmts.add(stmts459.getTree());

                    // AST REWRITE
                    // elements: stmts
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2092:51: -> ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2092:54: ^( S_CASE[\"S_CASE\"] stmts ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Case(S_CASE, "S_CASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_stmts.nextTree());

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2093:33: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text] )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_2);

                        adaptor.addChild(root_2, 
                        (BaseNode)adaptor.create(IDENT, (qualName456!=null?input.toString(qualName456.start,qualName456.stop):null))
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtCase"


    public static class stmtDoWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDoWhile"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2095:1: stmtDoWhile : 'do' ( NLL )? stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) ;
    public final pollenParser.stmtDoWhile_return stmtDoWhile() throws RecognitionException {
        pollenParser.stmtDoWhile_return retval = new pollenParser.stmtDoWhile_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal460=null;
        Atom NLL461=null;
        Atom string_literal463=null;
        Atom char_literal464=null;
        Atom char_literal466=null;
        pollenParser.stmtBlock_return stmtBlock462 =null;

        pollenParser.expr_return expr465 =null;

        pollenParser.delim_return delim467 =null;


        BaseNode string_literal460_tree=null;
        BaseNode NLL461_tree=null;
        BaseNode string_literal463_tree=null;
        BaseNode char_literal464_tree=null;
        BaseNode char_literal466_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2096:5: ( 'do' ( NLL )? stmtBlock 'while' '(' expr ')' delim -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2096:10: 'do' ( NLL )? stmtBlock 'while' '(' expr ')' delim
            {
            string_literal460=(Atom)match(input,159,FOLLOW_159_in_stmtDoWhile16075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal460);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2096:15: ( NLL )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==NLL) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2096:16: NLL
                    {
                    NLL461=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtDoWhile16078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL461);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtDoWhile16082);
            stmtBlock462=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock462.getTree());

            string_literal463=(Atom)match(input,198,FOLLOW_198_in_stmtDoWhile16084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal463);


            char_literal464=(Atom)match(input,135,FOLLOW_135_in_stmtDoWhile16086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal464);


            pushFollow(FOLLOW_expr_in_stmtDoWhile16088);
            expr465=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr465.getTree());

            char_literal466=(Atom)match(input,136,FOLLOW_136_in_stmtDoWhile16090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal466);


            pushFollow(FOLLOW_delim_in_stmtDoWhile16092);
            delim467=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim467.getTree());

            // AST REWRITE
            // elements: expr, stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2096:63: -> ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2096:66: ^( S_WHILE[\"S_WHILE\", true] expr stmtBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE", true)
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtDoWhile"


    public static class stmtIf_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIf"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2098:1: stmtIf : 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) ;
    public final pollenParser.stmtIf_return stmtIf() throws RecognitionException {
        pollenParser.stmtIf_return retval = new pollenParser.stmtIf_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal468=null;
        pollenParser.stmtIfBlock_return stmtIfBlock469 =null;

        pollenParser.stmtsElif_return stmtsElif470 =null;

        pollenParser.stmtElse_return stmtElse471 =null;


        BaseNode string_literal468_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        RewriteRuleSubtreeStream stream_stmtsElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtsElif");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:5: ( 'if' stmtIfBlock stmtsElif ( stmtElse )? -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:10: 'if' stmtIfBlock stmtsElif ( stmtElse )?
            {
            string_literal468=(Atom)match(input,170,FOLLOW_170_in_stmtIf16131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal468);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtIf16133);
            stmtIfBlock469=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock469.getTree());

            pushFollow(FOLLOW_stmtsElif_in_stmtIf16135);
            stmtsElif470=stmtsElif();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtsElif.add(stmtsElif470.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:37: ( stmtElse )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==161) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:37: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtIf16137);
                    stmtElse471=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse471.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtsElif, stmtIfBlock, stmtElse
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2099:50: -> ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:53: ^( S_IF[\"S_IF\"] stmtIfBlock stmtsElif ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.If(S_IF, "S_IF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_1, stream_stmtsElif.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2099:103: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtIf"


    public static class stmtIfBlock_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtIfBlock"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2101:1: stmtIfBlock : '(' expr ')' ( NLL )? stmtBlock -> expr stmtBlock ;
    public final pollenParser.stmtIfBlock_return stmtIfBlock() throws RecognitionException {
        pollenParser.stmtIfBlock_return retval = new pollenParser.stmtIfBlock_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal472=null;
        Atom char_literal474=null;
        Atom NLL475=null;
        pollenParser.expr_return expr473 =null;

        pollenParser.stmtBlock_return stmtBlock476 =null;


        BaseNode char_literal472_tree=null;
        BaseNode char_literal474_tree=null;
        BaseNode NLL475_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2102:5: ( '(' expr ')' ( NLL )? stmtBlock -> expr stmtBlock )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2102:10: '(' expr ')' ( NLL )? stmtBlock
            {
            char_literal472=(Atom)match(input,135,FOLLOW_135_in_stmtIfBlock16179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal472);


            pushFollow(FOLLOW_expr_in_stmtIfBlock16181);
            expr473=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr473.getTree());

            char_literal474=(Atom)match(input,136,FOLLOW_136_in_stmtIfBlock16183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal474);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2102:23: ( NLL )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NLL) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2102:24: NLL
                    {
                    NLL475=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtIfBlock16186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL475);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtIfBlock16190);
            stmtBlock476=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock476.getTree());

            // AST REWRITE
            // elements: stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2102:40: -> expr stmtBlock
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtIfBlock"


    public static class stmtsElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtsElif"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2104:1: stmtsElif : ( stmtElif )* -> ^( LIST[\"LIST\"] ( stmtElif )* ) ;
    public final pollenParser.stmtsElif_return stmtsElif() throws RecognitionException {
        pollenParser.stmtsElif_return retval = new pollenParser.stmtsElif_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtElif_return stmtElif477 =null;


        RewriteRuleSubtreeStream stream_stmtElif=new RewriteRuleSubtreeStream(adaptor,"rule stmtElif");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:5: ( ( stmtElif )* -> ^( LIST[\"LIST\"] ( stmtElif )* ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:10: ( stmtElif )*
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:10: ( stmtElif )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==160) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:10: stmtElif
            	    {
            	    pushFollow(FOLLOW_stmtElif_in_stmtsElif16215);
            	    stmtElif477=stmtElif();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stmtElif.add(stmtElif477.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            // AST REWRITE
            // elements: stmtElif
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2105:20: -> ^( LIST[\"LIST\"] ( stmtElif )* )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:23: ^( LIST[\"LIST\"] ( stmtElif )* )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2105:48: ( stmtElif )*
                while ( stream_stmtElif.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElif.nextTree());

                }
                stream_stmtElif.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtsElif"


    public static class stmtElif_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElif"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2107:1: stmtElif : 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) ;
    public final pollenParser.stmtElif_return stmtElif() throws RecognitionException {
        pollenParser.stmtElif_return retval = new pollenParser.stmtElif_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal478=null;
        pollenParser.stmtIfBlock_return stmtIfBlock479 =null;


        BaseNode string_literal478_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_stmtIfBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtIfBlock");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2108:5: ( 'elif' stmtIfBlock -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2108:10: 'elif' stmtIfBlock
            {
            string_literal478=(Atom)match(input,160,FOLLOW_160_in_stmtElif16248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal478);


            pushFollow(FOLLOW_stmtIfBlock_in_stmtElif16250);
            stmtIfBlock479=stmtIfBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtIfBlock.add(stmtIfBlock479.getTree());

            // AST REWRITE
            // elements: stmtIfBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2108:29: -> ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2108:32: ^( S_ELIF[\"S_ELIF\"] stmtIfBlock )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Elif(S_ELIF, "S_ELIF")
                , root_1);

                adaptor.addChild(root_1, stream_stmtIfBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtElif"


    public static class stmtElse_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtElse"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2110:1: stmtElse : 'else' ( NLL )? stmtBlock -> stmtBlock ;
    public final pollenParser.stmtElse_return stmtElse() throws RecognitionException {
        pollenParser.stmtElse_return retval = new pollenParser.stmtElse_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal480=null;
        Atom NLL481=null;
        pollenParser.stmtBlock_return stmtBlock482 =null;


        BaseNode string_literal480_tree=null;
        BaseNode NLL481_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2111:5: ( 'else' ( NLL )? stmtBlock -> stmtBlock )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2111:10: 'else' ( NLL )? stmtBlock
            {
            string_literal480=(Atom)match(input,161,FOLLOW_161_in_stmtElse16283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal480);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2111:17: ( NLL )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==NLL) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2111:18: NLL
                    {
                    NLL481=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtElse16286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL481);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtElse16290);
            stmtBlock482=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock482.getTree());

            // AST REWRITE
            // elements: stmtBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2111:34: -> stmtBlock
            {
                adaptor.addChild(root_0, stream_stmtBlock.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtElse"


    public static class stmtProvided_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtProvided"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2113:1: stmtProvided : 'provided' '(' expr ')' ( NLL )? stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) ;
    public final pollenParser.stmtProvided_return stmtProvided() throws RecognitionException {
        pollenParser.stmtProvided_return retval = new pollenParser.stmtProvided_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal483=null;
        Atom char_literal484=null;
        Atom char_literal486=null;
        Atom NLL487=null;
        pollenParser.expr_return expr485 =null;

        pollenParser.stmtBlock_return stmtBlock488 =null;

        pollenParser.stmtElse_return stmtElse489 =null;


        BaseNode string_literal483_tree=null;
        BaseNode char_literal484_tree=null;
        BaseNode char_literal486_tree=null;
        BaseNode NLL487_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_stmtBlock=new RewriteRuleSubtreeStream(adaptor,"rule stmtBlock");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtElse=new RewriteRuleSubtreeStream(adaptor,"rule stmtElse");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2114:5: ( 'provided' '(' expr ')' ( NLL )? stmtBlock ( stmtElse )? -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2114:10: 'provided' '(' expr ')' ( NLL )? stmtBlock ( stmtElse )?
            {
            string_literal483=(Atom)match(input,186,FOLLOW_186_in_stmtProvided16313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal483);


            char_literal484=(Atom)match(input,135,FOLLOW_135_in_stmtProvided16315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal484);


            pushFollow(FOLLOW_expr_in_stmtProvided16317);
            expr485=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr485.getTree());

            char_literal486=(Atom)match(input,136,FOLLOW_136_in_stmtProvided16319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal486);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2114:34: ( NLL )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==NLL) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2114:35: NLL
                    {
                    NLL487=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtProvided16322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL487);


                    }
                    break;

            }


            pushFollow(FOLLOW_stmtBlock_in_stmtProvided16326);
            stmtBlock488=stmtBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtBlock.add(stmtBlock488.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2114:51: ( stmtElse )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==161) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2114:52: stmtElse
                    {
                    pushFollow(FOLLOW_stmtElse_in_stmtProvided16329);
                    stmtElse489=stmtElse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stmtElse.add(stmtElse489.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: stmtElse, stmtBlock, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2115:9: -> ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2115:12: ^( S_PROVIDED[\"S_PROVIDED\"] expr stmtBlock ( stmtElse )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Provided(S_PROVIDED, "S_PROVIDED")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtBlock.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2115:73: ( stmtElse )?
                if ( stream_stmtElse.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmtElse.nextTree());

                }
                stream_stmtElse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtProvided"


    public static class stmtWhile_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtWhile"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2117:1: stmtWhile : 'while' '(' expr ')' stmtWhile2 -> ^( S_WHILE[\"S_WHILE\"] expr stmtWhile2 ) ;
    public final pollenParser.stmtWhile_return stmtWhile() throws RecognitionException {
        pollenParser.stmtWhile_return retval = new pollenParser.stmtWhile_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal490=null;
        Atom char_literal491=null;
        Atom char_literal493=null;
        pollenParser.expr_return expr492 =null;

        pollenParser.stmtWhile2_return stmtWhile2494 =null;


        BaseNode string_literal490_tree=null;
        BaseNode char_literal491_tree=null;
        BaseNode char_literal493_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_stmtWhile2=new RewriteRuleSubtreeStream(adaptor,"rule stmtWhile2");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2118:5: ( 'while' '(' expr ')' stmtWhile2 -> ^( S_WHILE[\"S_WHILE\"] expr stmtWhile2 ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2118:10: 'while' '(' expr ')' stmtWhile2
            {
            string_literal490=(Atom)match(input,198,FOLLOW_198_in_stmtWhile16377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal490);


            char_literal491=(Atom)match(input,135,FOLLOW_135_in_stmtWhile16379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal491);


            pushFollow(FOLLOW_expr_in_stmtWhile16380);
            expr492=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr492.getTree());

            char_literal493=(Atom)match(input,136,FOLLOW_136_in_stmtWhile16381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal493);


            pushFollow(FOLLOW_stmtWhile2_in_stmtWhile16383);
            stmtWhile2494=stmtWhile2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtWhile2.add(stmtWhile2494.getTree());

            // AST REWRITE
            // elements: expr, stmtWhile2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2118:40: -> ^( S_WHILE[\"S_WHILE\"] expr stmtWhile2 )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2118:43: ^( S_WHILE[\"S_WHILE\"] expr stmtWhile2 )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.While(S_WHILE, "S_WHILE")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_1, stream_stmtWhile2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtWhile"


    public static class stmtWhile2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtWhile2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2120:1: stmtWhile2 : ( ';' ( NLL ) -> ^( S_BLOCK[\"S_BLOCK\"] LIST[\"LIST\"] ) | ( NLL !)? stmtBlock );
    public final pollenParser.stmtWhile2_return stmtWhile2() throws RecognitionException {
        pollenParser.stmtWhile2_return retval = new pollenParser.stmtWhile2_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal495=null;
        Atom NLL496=null;
        Atom NLL497=null;
        pollenParser.stmtBlock_return stmtBlock498 =null;


        BaseNode char_literal495_tree=null;
        BaseNode NLL496_tree=null;
        BaseNode NLL497_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:5: ( ';' ( NLL ) -> ^( S_BLOCK[\"S_BLOCK\"] LIST[\"LIST\"] ) | ( NLL !)? stmtBlock )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==SEMI) ) {
                alt135=1;
            }
            else if ( (LA135_0==BRACE_OP||LA135_0==NLL) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:7: ';' ( NLL )
                    {
                    char_literal495=(Atom)match(input,SEMI,FOLLOW_SEMI_in_stmtWhile216416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal495);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:11: ( NLL )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:12: NLL
                    {
                    NLL496=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtWhile216419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL496);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2121:17: -> ^( S_BLOCK[\"S_BLOCK\"] LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2121:20: ^( S_BLOCK[\"S_BLOCK\"] LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new StmtNode.Block(S_BLOCK, "S_BLOCK")
                        , root_1);

                        adaptor.addChild(root_1, 
                        new ListNode(LIST, "LIST")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2122:14: ( NLL !)? stmtBlock
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2122:14: ( NLL !)?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==NLL) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2122:15: NLL !
                            {
                            NLL497=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtWhile216454); if (state.failed) return retval;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_stmtBlock_in_stmtWhile216459);
                    stmtBlock498=stmtBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmtBlock498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtWhile2"


    public static class stmtDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2124:1: stmtDecl : stmtDeclAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) ;
    public final pollenParser.stmtDecl_return stmtDecl() throws RecognitionException {
        pollenParser.stmtDecl_return retval = new pollenParser.stmtDecl_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.stmtDeclAttr_return stmtDeclAttr499 =null;

        pollenParser.varDecl_return varDecl500 =null;

        pollenParser.delim_return delim501 =null;


        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_stmtDeclAttr=new RewriteRuleSubtreeStream(adaptor,"rule stmtDeclAttr");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2125:4: ( stmtDeclAttr varDecl delim -> ^( S_DECL[\"S_DECL\"] varDecl ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2125:10: stmtDeclAttr varDecl delim
            {
            pushFollow(FOLLOW_stmtDeclAttr_in_stmtDecl16479);
            stmtDeclAttr499=stmtDeclAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stmtDeclAttr.add(stmtDeclAttr499.getTree());

            pushFollow(FOLLOW_varDecl_in_stmtDecl16481);
            varDecl500=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl500.getTree());

            pushFollow(FOLLOW_delim_in_stmtDecl16483);
            delim501=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim501.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2125:40: -> ^( S_DECL[\"S_DECL\"] varDecl )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2125:43: ^( S_DECL[\"S_DECL\"] varDecl )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Decl(S_DECL, "S_DECL")
                , root_1);

                adaptor.addChild(root_1, stream_varDecl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtDecl"


    public static class stmtDeclAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtDeclAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2127:1: stmtDeclAttr : ( 'const' | 'volatile' |t= 'host' )* ;
    public final pollenParser.stmtDeclAttr_return stmtDeclAttr() throws RecognitionException {
        pollenParser.stmtDeclAttr_return retval = new pollenParser.stmtDeclAttr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom t=null;
        Atom string_literal502=null;
        Atom string_literal503=null;

        BaseNode t_tree=null;
        BaseNode string_literal502_tree=null;
        BaseNode string_literal503_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2128:5: ( ( 'const' | 'volatile' |t= 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2128:10: ( 'const' | 'volatile' |t= 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2128:10: ( 'const' | 'volatile' |t= 'host' )*
            loop136:
            do {
                int alt136=4;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt136=1;
                    }
                    break;
                case 197:
                    {
                    alt136=2;
                    }
                    break;
                case 169:
                    {
                    alt136=3;
                    }
                    break;

                }

                switch (alt136) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2128:16: 'const'
            	    {
            	    string_literal502=(Atom)match(input,156,FOLLOW_156_in_stmtDeclAttr16524); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal502_tree = 
            	    (BaseNode)adaptor.create(string_literal502)
            	    ;
            	    adaptor.addChild(root_0, string_literal502_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2129:15: 'volatile'
            	    {
            	    string_literal503=(Atom)match(input,197,FOLLOW_197_in_stmtDeclAttr16542); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal503_tree = 
            	    (BaseNode)adaptor.create(string_literal503)
            	    ;
            	    adaptor.addChild(root_0, string_literal503_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2130:18: t= 'host'
            	    {
            	    t=(Atom)match(input,169,FOLLOW_169_in_stmtDeclAttr16565); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    t_tree = 
            	    (BaseNode)adaptor.create(t)
            	    ;
            	    adaptor.addChild(root_0, t_tree);
            	    }

            	    if ( state.backtracking==0 ) { ParseUnit.current().reportError(t, "invalid function local variable attribute"); }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtDeclAttr"


    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2133:1: fieldDeclaration : ( ( 'new' | 'host' 'new' )=> varDeclarationNew | varAttr varDecl delim -> varDecl );
    public final pollenParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        pollenParser.fieldDeclaration_return retval = new pollenParser.fieldDeclaration_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.varDeclarationNew_return varDeclarationNew504 =null;

        pollenParser.varAttr_return varAttr505 =null;

        pollenParser.varDecl_return varDecl506 =null;

        pollenParser.delim_return delim507 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            stmtFlags = EnumSet.noneOf(Flags.class);
            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags.add(Flags.FIELD);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:4: ( ( 'new' | 'host' 'new' )=> varDeclarationNew | varAttr varDecl delim -> varDecl )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==179) && (synpred47_pollen())) {
                alt137=1;
            }
            else if ( (LA137_0==169) ) {
                int LA137_2 = input.LA(2);

                if ( (synpred47_pollen()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA137_0==IDENT||LA137_0==135||LA137_0==150||LA137_0==152||LA137_0==156||(LA137_0 >= 173 && LA137_0 <= 175)||LA137_0==188||LA137_0==190||(LA137_0 >= 194 && LA137_0 <= 197)) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:10: ( 'new' | 'host' 'new' )=> varDeclarationNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclarationNew_in_fieldDeclaration16618);
                    varDeclarationNew504=varDeclarationNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclarationNew504.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2140:10: varAttr varDecl delim
                    {
                    pushFollow(FOLLOW_varAttr_in_fieldDeclaration16629);
                    varAttr505=varAttr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varAttr.add(varAttr505.getTree());

                    pushFollow(FOLLOW_varDecl_in_fieldDeclaration16631);
                    varDecl506=varDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varDecl.add(varDecl506.getTree());

                    pushFollow(FOLLOW_delim_in_fieldDeclaration16633);
                    delim507=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim507.getTree());

                    // AST REWRITE
                    // elements: varDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2140:35: -> varDecl
                    {
                        adaptor.addChild(root_0, stream_varDecl.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"


    public static class varDeclaration_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclaration"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2142:1: varDeclaration : varAttr varDecl delim -> varDecl ;
    public final pollenParser.varDeclaration_return varDeclaration() throws RecognitionException {
        pollenParser.varDeclaration_return retval = new pollenParser.varDeclaration_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.varAttr_return varAttr508 =null;

        pollenParser.varDecl_return varDecl509 =null;

        pollenParser.delim_return delim510 =null;


        RewriteRuleSubtreeStream stream_varAttr=new RewriteRuleSubtreeStream(adaptor,"rule varAttr");
        RewriteRuleSubtreeStream stream_varDecl=new RewriteRuleSubtreeStream(adaptor,"rule varDecl");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags = EnumSet.noneOf(Flags.class);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2150:4: ( varAttr varDecl delim -> varDecl )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2150:10: varAttr varDecl delim
            {
            pushFollow(FOLLOW_varAttr_in_varDeclaration16672);
            varAttr508=varAttr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varAttr.add(varAttr508.getTree());

            pushFollow(FOLLOW_varDecl_in_varDeclaration16674);
            varDecl509=varDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varDecl.add(varDecl509.getTree());

            pushFollow(FOLLOW_delim_in_varDeclaration16676);
            delim510=delim();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_delim.add(delim510.getTree());

            // AST REWRITE
            // elements: varDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2150:35: -> varDecl
            {
                adaptor.addChild(root_0, stream_varDecl.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                typeMods = EnumSet.noneOf(Flags.class);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varDeclaration"


    public static class varAttr_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varAttr"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2152:1: varAttr : ( 'const' | 'volatile' | 'host' )* ;
    public final pollenParser.varAttr_return varAttr() throws RecognitionException {
        pollenParser.varAttr_return retval = new pollenParser.varAttr_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal511=null;
        Atom string_literal512=null;
        Atom string_literal513=null;

        BaseNode string_literal511_tree=null;
        BaseNode string_literal512_tree=null;
        BaseNode string_literal513_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2153:5: ( ( 'const' | 'volatile' | 'host' )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2153:10: ( 'const' | 'volatile' | 'host' )*
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2153:10: ( 'const' | 'volatile' | 'host' )*
            loop138:
            do {
                int alt138=4;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt138=1;
                    }
                    break;
                case 197:
                    {
                    alt138=2;
                    }
                    break;
                case 169:
                    {
                    alt138=3;
                    }
                    break;

                }

                switch (alt138) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2153:16: 'const'
            	    {
            	    string_literal511=(Atom)match(input,156,FOLLOW_156_in_varAttr16707); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal511_tree = 
            	    (BaseNode)adaptor.create(string_literal511)
            	    ;
            	    adaptor.addChild(root_0, string_literal511_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.CONST); }

            	    }
            	    break;
            	case 2 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2154:15: 'volatile'
            	    {
            	    string_literal512=(Atom)match(input,197,FOLLOW_197_in_varAttr16725); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal512_tree = 
            	    (BaseNode)adaptor.create(string_literal512)
            	    ;
            	    adaptor.addChild(root_0, string_literal512_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.VOLATILE); }

            	    }
            	    break;
            	case 3 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2155:17: 'host'
            	    {
            	    string_literal513=(Atom)match(input,169,FOLLOW_169_in_varAttr16745); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal513_tree = 
            	    (BaseNode)adaptor.create(string_literal513)
            	    ;
            	    adaptor.addChild(root_0, string_literal513_tree);
            	    }

            	    if ( state.backtracking==0 ) { typeMods.add(Flags.HOST); }

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varAttr"


    protected static class varDecl_scope {
        Object typ;
    }
    protected Stack varDecl_stack = new Stack();


    public static class varDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2158:1: varDecl : ( ( typeName IDENT ( ASSIGN ) )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( typeName '[' )=> varArray2 | ( ( '(' )? typeName '(' )=> varFcnRef | ( ( '(' ) typeName typeName '(' )=> varFcnRef2 | ( typeName varInit )=> varDeclList );
    public final pollenParser.varDecl_return varDecl() throws RecognitionException {
        varDecl_stack.push(new varDecl_scope());
        pollenParser.varDecl_return retval = new pollenParser.varDecl_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.varDeclList_return varDeclList514 =null;

        pollenParser.varArray_return varArray515 =null;

        pollenParser.varArray2_return varArray2516 =null;

        pollenParser.varFcnRef_return varFcnRef517 =null;

        pollenParser.varFcnRef2_return varFcnRef2518 =null;

        pollenParser.varDeclList_return varDeclList519 =null;




            ((varDecl_scope)varDecl_stack.peek()).typ = null;
            stmtFlags.addAll(typeMods);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:5: ( ( typeName IDENT ( ASSIGN ) )=> varDeclList | ( typeName IDENT '[' )=> varArray | ( typeName '[' )=> varArray2 | ( ( '(' )? typeName '(' )=> varFcnRef | ( ( '(' ) typeName typeName '(' )=> varFcnRef2 | ( typeName varInit )=> varDeclList )
            int alt139=6;
            switch ( input.LA(1) ) {
            case 150:
                {
                int LA139_1 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                int LA139_2 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 2, input);

                    throw nvae;

                }
                }
                break;
            case 175:
                {
                int LA139_3 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 3, input);

                    throw nvae;

                }
                }
                break;
            case 173:
                {
                int LA139_4 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 4, input);

                    throw nvae;

                }
                }
                break;
            case 174:
                {
                int LA139_5 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 5, input);

                    throw nvae;

                }
                }
                break;
            case 188:
                {
                int LA139_6 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 6, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA139_7 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 7, input);

                    throw nvae;

                }
                }
                break;
            case 196:
                {
                int LA139_8 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 8, input);

                    throw nvae;

                }
                }
                break;
            case 194:
                {
                int LA139_9 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 9, input);

                    throw nvae;

                }
                }
                break;
            case 195:
                {
                int LA139_10 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 10, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA139_11 = input.LA(2);

                if ( (synpred48_pollen()) ) {
                    alt139=1;
                }
                else if ( (synpred49_pollen()) ) {
                    alt139=2;
                }
                else if ( (synpred50_pollen()) ) {
                    alt139=3;
                }
                else if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred53_pollen()) ) {
                    alt139=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 11, input);

                    throw nvae;

                }
                }
                break;
            case 135:
                {
                int LA139_12 = input.LA(2);

                if ( (synpred51_pollen()) ) {
                    alt139=4;
                }
                else if ( (synpred52_pollen()) ) {
                    alt139=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 12, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }

            switch (alt139) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:10: ( typeName IDENT ( ASSIGN ) )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl16799);
                    varDeclList514=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList514.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2169:10: ( typeName IDENT '[' )=> varArray
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varArray_in_varDecl16820);
                    varArray515=varArray();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varArray515.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2170:10: ( typeName '[' )=> varArray2
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varArray2_in_varDecl16841);
                    varArray2516=varArray2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varArray2516.getTree());

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2171:11: ( ( '(' )? typeName '(' )=> varFcnRef
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef_in_varDecl16867);
                    varFcnRef517=varFcnRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef517.getTree());

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2172:11: ( ( '(' ) typeName typeName '(' )=> varFcnRef2
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varFcnRef2_in_varDecl16896);
                    varFcnRef2518=varFcnRef2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varFcnRef2518.getTree());

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2173:11: ( typeName varInit )=> varDeclList
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varDeclList_in_varDecl16916);
                    varDeclList519=varDeclList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDeclList519.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            varDecl_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varDecl"


    public static class varDeclarationNew_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclarationNew"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2175:1: varDeclarationNew : ( 'new' qualName IDENT fcnArgumentList delim -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) | ( 'host' 'new' )=> 'host' 'new' qualName IDENT fcnArgumentList delim -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) );
    public final pollenParser.varDeclarationNew_return varDeclarationNew() throws RecognitionException {
        pollenParser.varDeclarationNew_return retval = new pollenParser.varDeclarationNew_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal520=null;
        Atom IDENT522=null;
        Atom string_literal525=null;
        Atom string_literal526=null;
        Atom IDENT528=null;
        pollenParser.qualName_return qualName521 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList523 =null;

        pollenParser.delim_return delim524 =null;

        pollenParser.qualName_return qualName527 =null;

        pollenParser.fcnArgumentList_return fcnArgumentList529 =null;

        pollenParser.delim_return delim530 =null;


        BaseNode string_literal520_tree=null;
        BaseNode IDENT522_tree=null;
        BaseNode string_literal525_tree=null;
        BaseNode string_literal526_tree=null;
        BaseNode IDENT528_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_qualName=new RewriteRuleSubtreeStream(adaptor,"rule qualName");
        RewriteRuleSubtreeStream stream_fcnArgumentList=new RewriteRuleSubtreeStream(adaptor,"rule fcnArgumentList");
        RewriteRuleSubtreeStream stream_delim=new RewriteRuleSubtreeStream(adaptor,"rule delim");

            typeMods = EnumSet.noneOf(Flags.class);
            stmtFlags = EnumSet.noneOf(Flags.class);
            String ctor = ""; 

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2184:5: ( 'new' qualName IDENT fcnArgumentList delim -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) | ( 'host' 'new' )=> 'host' 'new' qualName IDENT fcnArgumentList delim -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) ) )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==179) ) {
                alt140=1;
            }
            else if ( (LA140_0==169) && (synpred54_pollen())) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2184:10: 'new' qualName IDENT fcnArgumentList delim
                    {
                    string_literal520=(Atom)match(input,179,FOLLOW_179_in_varDeclarationNew16955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal520);


                    pushFollow(FOLLOW_qualName_in_varDeclarationNew16957);
                    qualName521=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName521.getTree());

                    IDENT522=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varDeclarationNew16959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT522);


                    pushFollow(FOLLOW_fcnArgumentList_in_varDeclarationNew16961);
                    fcnArgumentList523=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList523.getTree());

                    pushFollow(FOLLOW_delim_in_varDeclarationNew16964);
                    delim524=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim524.getTree());

                    if ( state.backtracking==0 ) { 
                                      stmtFlags.add(Flags.NEW); 
                                      ctor = ParseUnit.CTOR_CLASS_TARGET; 
                                 }

                    // AST REWRITE
                    // elements: qualName, fcnArgumentList, IDENT, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2189:14: -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2189:17: ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2189:67: ^( T_USR[\"T_USR\", typeMods] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2190:24: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2191:31: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2192:32: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(IDENT, (qualName521!=null?input.toString(qualName521.start,qualName521.stop):null) + "." + ctor)
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_3, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2195:6: ( 'host' 'new' )=> 'host' 'new' qualName IDENT fcnArgumentList delim
                    {
                    string_literal525=(Atom)match(input,169,FOLLOW_169_in_varDeclarationNew17236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(string_literal525);


                    string_literal526=(Atom)match(input,179,FOLLOW_179_in_varDeclarationNew17238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(string_literal526);


                    pushFollow(FOLLOW_qualName_in_varDeclarationNew17240);
                    qualName527=qualName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualName.add(qualName527.getTree());

                    IDENT528=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varDeclarationNew17242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT528);


                    pushFollow(FOLLOW_fcnArgumentList_in_varDeclarationNew17244);
                    fcnArgumentList529=fcnArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnArgumentList.add(fcnArgumentList529.getTree());

                    pushFollow(FOLLOW_delim_in_varDeclarationNew17247);
                    delim530=delim();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delim.add(delim530.getTree());

                    if ( state.backtracking==0 ) {   stmtFlags.add(Flags.NEW); 
                                      stmtFlags.add(Flags.HOST);
                                      ctor = ParseUnit.CTOR_CLASS_HOST;
                                      typeMods.add(Flags.HOST);
                                 }

                    // AST REWRITE
                    // elements: IDENT, fcnArgumentList, qualName, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2201:14: -> ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2201:17: ^( D_VAR[\"D_VAR\", stmtFlags] ^( T_USR[\"T_USR\", typeMods] qualName ) IDENT ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) ) )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2201:67: ^( T_USR[\"T_USR\", typeMods] qualName )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new TypeNode.Usr(T_USR, "T_USR", typeMods)
                        , root_2);

                        adaptor.addChild(root_2, stream_qualName.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2202:24: ^( E_NEW[\"E_NEW\"] ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList ) )
                        {
                        BaseNode root_2 = (BaseNode)adaptor.nil();
                        root_2 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.New(E_NEW, "E_NEW")
                        , root_2);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2203:31: ^( E_CALL[\"E_CALL\"] ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] ) fcnArgumentList )
                        {
                        BaseNode root_3 = (BaseNode)adaptor.nil();
                        root_3 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Call(E_CALL, "E_CALL")
                        , root_3);

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2204:32: ^( E_IDENT[\"E_IDENT\"] IDENT[$qualName.text + \".\" + ctor] )
                        {
                        BaseNode root_4 = (BaseNode)adaptor.nil();
                        root_4 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Ident(E_IDENT, "E_IDENT")
                        , root_4);

                        adaptor.addChild(root_4, 
                        (BaseNode)adaptor.create(IDENT, (qualName527!=null?input.toString(qualName527.start,qualName527.stop):null) + "." + ctor)
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_3, stream_fcnArgumentList.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                typeMods = EnumSet.noneOf(Flags.class);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varDeclarationNew"


    public static class varFcnRef_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2209:1: varFcnRef : ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? ) -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? ) ;
    public final pollenParser.varFcnRef_return varFcnRef() throws RecognitionException {
        pollenParser.varFcnRef_return retval = new pollenParser.varFcnRef_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal531=null;
        Atom char_literal534=null;
        Atom IDENT535=null;
        Atom ASSIGN536=null;
        Atom IDENT540=null;
        Atom ASSIGN541=null;
        pollenParser.typeName_return typeName532 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList533 =null;

        pollenParser.expr_return expr537 =null;

        pollenParser.typeName_return typeName538 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList539 =null;

        pollenParser.expr_return expr542 =null;


        BaseNode char_literal531_tree=null;
        BaseNode char_literal534_tree=null;
        BaseNode IDENT535_tree=null;
        BaseNode ASSIGN536_tree=null;
        BaseNode IDENT540_tree=null;
        BaseNode ASSIGN541_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:5: ( ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? ) -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:11: ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? )
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:11: ( ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )? | typeName fcnRefTypeList IDENT ( ASSIGN expr )? )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==135) ) {
                alt143=1;
            }
            else if ( (LA143_0==IDENT||LA143_0==150||LA143_0==152||(LA143_0 >= 173 && LA143_0 <= 175)||LA143_0==188||LA143_0==190||(LA143_0 >= 194 && LA143_0 <= 196)) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:13: ( '(' ) typeName fcnRefTypeList ( ')' ) IDENT ( ASSIGN expr )?
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:13: ( '(' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:14: '('
                    {
                    char_literal531=(Atom)match(input,135,FOLLOW_135_in_varFcnRef17528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal531);


                    }


                    pushFollow(FOLLOW_typeName_in_varFcnRef17531);
                    typeName532=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName532.getTree());

                    pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef17533);
                    fcnRefTypeList533=fcnRefTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList533.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:43: ( ')' )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:44: ')'
                    {
                    char_literal534=(Atom)match(input,136,FOLLOW_136_in_varFcnRef17536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal534);


                    }


                    IDENT535=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef17539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT535);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:55: ( ASSIGN expr )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==ASSIGN) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2210:56: ASSIGN expr
                            {
                            ASSIGN536=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varFcnRef17542); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN536);


                            pushFollow(FOLLOW_expr_in_varFcnRef17544);
                            expr537=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr537.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2211:16: typeName fcnRefTypeList IDENT ( ASSIGN expr )?
                    {
                    pushFollow(FOLLOW_typeName_in_varFcnRef17563);
                    typeName538=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName538.getTree());

                    pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef17565);
                    fcnRefTypeList539=fcnRefTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList539.getTree());

                    IDENT540=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef17568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT540);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2211:47: ( ASSIGN expr )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==ASSIGN) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2211:48: ASSIGN expr
                            {
                            ASSIGN541=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varFcnRef17571); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN541);


                            pushFollow(FOLLOW_expr_in_varFcnRef17573);
                            expr542=expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expr.add(expr542.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: typeName, expr, fcnRefTypeList, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2212:9: -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2212:12: ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT ( expr )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2212:95: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varFcnRef"


    public static class varFcnRef2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varFcnRef2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2214:1: varFcnRef2 : '(' rtnType typeName fcnRefTypeList ')' IDENT ( ASSIGN expr )? -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? ) ;
    public final pollenParser.varFcnRef2_return varFcnRef2() throws RecognitionException {
        pollenParser.varFcnRef2_return retval = new pollenParser.varFcnRef2_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal543=null;
        Atom char_literal547=null;
        Atom IDENT548=null;
        Atom ASSIGN549=null;
        pollenParser.rtnType_return rtnType544 =null;

        pollenParser.typeName_return typeName545 =null;

        pollenParser.fcnRefTypeList_return fcnRefTypeList546 =null;

        pollenParser.expr_return expr550 =null;


        BaseNode char_literal543_tree=null;
        BaseNode char_literal547_tree=null;
        BaseNode IDENT548_tree=null;
        BaseNode ASSIGN549_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_rtnType=new RewriteRuleSubtreeStream(adaptor,"rule rtnType");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_fcnRefTypeList=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypeList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2215:5: ( '(' rtnType typeName fcnRefTypeList ')' IDENT ( ASSIGN expr )? -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2215:11: '(' rtnType typeName fcnRefTypeList ')' IDENT ( ASSIGN expr )?
            {
            char_literal543=(Atom)match(input,135,FOLLOW_135_in_varFcnRef217627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal543);


            pushFollow(FOLLOW_rtnType_in_varFcnRef217629);
            rtnType544=rtnType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rtnType.add(rtnType544.getTree());

            pushFollow(FOLLOW_typeName_in_varFcnRef217631);
            typeName545=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeName.add(typeName545.getTree());

            pushFollow(FOLLOW_fcnRefTypeList_in_varFcnRef217633);
            fcnRefTypeList546=fcnRefTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypeList.add(fcnRefTypeList546.getTree());

            char_literal547=(Atom)match(input,136,FOLLOW_136_in_varFcnRef217635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal547);


            IDENT548=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varFcnRef217637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT548);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2215:57: ( ASSIGN expr )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==ASSIGN) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2215:58: ASSIGN expr
                    {
                    ASSIGN549=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varFcnRef217640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN549);


                    pushFollow(FOLLOW_expr_in_varFcnRef217642);
                    expr550=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr550.getTree());

                    }
                    break;

            }


            if ( state.backtracking==0 ) { stmtFlags.add(Flags.FCN_REF_RTN); }

            // AST REWRITE
            // elements: rtnType, typeName, fcnRefTypeList, expr, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2217:9: -> ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2217:12: ^( D_FCN_REF[\"D_FCN_REF\", stmtFlags] typeName fcnRefTypeList IDENT rtnType ( expr )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.FcnRef(D_FCN_REF, "D_FCN_REF", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeName.nextTree());

                adaptor.addChild(root_1, stream_fcnRefTypeList.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_rtnType.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2217:103: ( expr )?
                if ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_expr.nextTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varFcnRef2"


    public static class rtnType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rtnType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2219:1: rtnType : typeName ;
    public final pollenParser.rtnType_return rtnType() throws RecognitionException {
        pollenParser.rtnType_return retval = new pollenParser.rtnType_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.typeName_return typeName551 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2220:5: ( typeName )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2220:10: typeName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_typeName_in_rtnType17719);
            typeName551=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName551.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rtnType"


    public static class fcnRefTypeList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypeList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2223:1: fcnRefTypeList : '(' fcnRefTypes ')' -> fcnRefTypes ;
    public final pollenParser.fcnRefTypeList_return fcnRefTypeList() throws RecognitionException {
        pollenParser.fcnRefTypeList_return retval = new pollenParser.fcnRefTypeList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal552=null;
        Atom char_literal554=null;
        pollenParser.fcnRefTypes_return fcnRefTypes553 =null;


        BaseNode char_literal552_tree=null;
        BaseNode char_literal554_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleSubtreeStream stream_fcnRefTypes=new RewriteRuleSubtreeStream(adaptor,"rule fcnRefTypes");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2224:5: ( '(' fcnRefTypes ')' -> fcnRefTypes )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2224:11: '(' fcnRefTypes ')'
            {
            char_literal552=(Atom)match(input,135,FOLLOW_135_in_fcnRefTypeList17740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal552);


            pushFollow(FOLLOW_fcnRefTypes_in_fcnRefTypeList17742);
            fcnRefTypes553=fcnRefTypes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fcnRefTypes.add(fcnRefTypes553.getTree());

            char_literal554=(Atom)match(input,136,FOLLOW_136_in_fcnRefTypeList17744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal554);


            // AST REWRITE
            // elements: fcnRefTypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2224:31: -> fcnRefTypes
            {
                adaptor.addChild(root_0, stream_fcnRefTypes.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnRefTypeList"


    public static class fcnRefTypes_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fcnRefTypes"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2226:1: fcnRefTypes : ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) );
    public final pollenParser.fcnRefTypes_return fcnRefTypes() throws RecognitionException {
        pollenParser.fcnRefTypes_return retval = new pollenParser.fcnRefTypes_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal556=null;
        pollenParser.typeName_return typeName555 =null;

        pollenParser.typeName_return typeName557 =null;


        BaseNode char_literal556_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_typeName=new RewriteRuleSubtreeStream(adaptor,"rule typeName");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2227:5: ( typeName ( ',' typeName )* -> ^( LIST[\"LIST\"] ( typeName )+ ) | -> ^( LIST[\"LIST\"] ) )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==IDENT||LA146_0==150||LA146_0==152||(LA146_0 >= 173 && LA146_0 <= 175)||LA146_0==188||LA146_0==190||(LA146_0 >= 194 && LA146_0 <= 196)) ) {
                alt146=1;
            }
            else if ( (LA146_0==136) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2227:10: typeName ( ',' typeName )*
                    {
                    pushFollow(FOLLOW_typeName_in_fcnRefTypes17767);
                    typeName555=typeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeName.add(typeName555.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2227:19: ( ',' typeName )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==138) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2227:20: ',' typeName
                    	    {
                    	    char_literal556=(Atom)match(input,138,FOLLOW_138_in_fcnRefTypes17770); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal556);


                    	    pushFollow(FOLLOW_typeName_in_fcnRefTypes17772);
                    	    typeName557=typeName();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeName.add(typeName557.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: typeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2228:9: -> ^( LIST[\"LIST\"] ( typeName )+ )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2228:12: ^( LIST[\"LIST\"] ( typeName )+ )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        if ( !(stream_typeName.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_typeName.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeName.nextTree());

                        }
                        stream_typeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2229:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2229:10: -> ^( LIST[\"LIST\"] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2229:13: ^( LIST[\"LIST\"] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ListNode(LIST, "LIST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fcnRefTypes"


    protected static class varArray_scope {
        Object varArrSpec;
        Object typArrSpec;
    }
    protected Stack varArray_stack = new Stack();


    public static class varArray_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArray"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2231:1: varArray : typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) ;
    public final pollenParser.varArray_return varArray() throws RecognitionException {
        varArray_stack.push(new varArray_scope());
        pollenParser.varArray_return retval = new pollenParser.varArray_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT559=null;
        pollenParser.typeNameArray_return typeNameArray558 =null;

        pollenParser.varArraySpec_return varArraySpec560 =null;

        pollenParser.varArrayInit_return varArrayInit561 =null;


        BaseNode IDENT559_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_varArrayInit=new RewriteRuleSubtreeStream(adaptor,"rule varArrayInit");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2239:5: ( typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2239:10: typeNameArray IDENT varArraySpec ( varArrayInit[stmtFlags] )?
            {
            pushFollow(FOLLOW_typeNameArray_in_varArray17842);
            typeNameArray558=typeNameArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray558.getTree());

            if ( state.backtracking==0 ) { ((varArray_scope)varArray_stack.peek()).typArrSpec = (typeNameArray558!=null?((BaseNode)typeNameArray558.tree):null); }

            IDENT559=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varArray17854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT559);


            pushFollow(FOLLOW_varArraySpec_in_varArray17865);
            varArraySpec560=varArraySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec560.getTree());

            if ( state.backtracking==0 ) { ((varArray_scope)varArray_stack.peek()).varArrSpec = (varArraySpec560!=null?((BaseNode)varArraySpec560.tree):null); }

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2242:9: ( varArrayInit[stmtFlags] )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==ASSIGN||LA147_0==PEG) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2242:9: varArrayInit[stmtFlags]
                    {
                    pushFollow(FOLLOW_varArrayInit_in_varArray17878);
                    varArrayInit561=varArrayInit(stmtFlags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArrayInit.add(varArrayInit561.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: IDENT, varArraySpec, varArrayInit, typeNameArray
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2243:13: -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2243:17: ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Arr(D_ARR, "D_ARR", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeNameArray.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_varArraySpec.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2245:36: ( varArrayInit )?
                if ( stream_varArrayInit.hasNext() ) {
                    adaptor.addChild(root_1, stream_varArrayInit.nextTree());

                }
                stream_varArrayInit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                     ((CommonTree) ((varArray_scope)varArray_stack.peek()).typArrSpec).addChild(((CommonTree) ((varArray_scope)varArray_stack.peek()).varArrSpec));                
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            varArray_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varArray"


    protected static class varArray2_scope {
        Object varArrSpec;
        Object typArrSpec;
    }
    protected Stack varArray2_stack = new Stack();


    public static class varArray2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArray2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2247:1: varArray2 : typeNameArray varArraySpec IDENT ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) ;
    public final pollenParser.varArray2_return varArray2() throws RecognitionException {
        varArray2_stack.push(new varArray2_scope());
        pollenParser.varArray2_return retval = new pollenParser.varArray2_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT564=null;
        pollenParser.typeNameArray_return typeNameArray562 =null;

        pollenParser.varArraySpec_return varArraySpec563 =null;

        pollenParser.varArrayInit_return varArrayInit565 =null;


        BaseNode IDENT564_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_typeNameArray=new RewriteRuleSubtreeStream(adaptor,"rule typeNameArray");
        RewriteRuleSubtreeStream stream_varArraySpec=new RewriteRuleSubtreeStream(adaptor,"rule varArraySpec");
        RewriteRuleSubtreeStream stream_varArrayInit=new RewriteRuleSubtreeStream(adaptor,"rule varArrayInit");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2255:5: ( typeNameArray varArraySpec IDENT ( varArrayInit[stmtFlags] )? -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2255:9: typeNameArray varArraySpec IDENT ( varArrayInit[stmtFlags] )?
            {
            pushFollow(FOLLOW_typeNameArray_in_varArray217978);
            typeNameArray562=typeNameArray();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeNameArray.add(typeNameArray562.getTree());

            if ( state.backtracking==0 ) { ((varArray2_scope)varArray2_stack.peek()).typArrSpec = (typeNameArray562!=null?((BaseNode)typeNameArray562.tree):null); }

            pushFollow(FOLLOW_varArraySpec_in_varArray217990);
            varArraySpec563=varArraySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varArraySpec.add(varArraySpec563.getTree());

            if ( state.backtracking==0 ) { ((varArray2_scope)varArray2_stack.peek()).varArrSpec = (varArraySpec563!=null?((BaseNode)varArraySpec563.tree):null); }

            IDENT564=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varArray218004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT564);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2258:9: ( varArrayInit[stmtFlags] )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ASSIGN||LA148_0==PEG) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2258:9: varArrayInit[stmtFlags]
                    {
                    pushFollow(FOLLOW_varArrayInit_in_varArray218015);
                    varArrayInit565=varArrayInit(stmtFlags);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varArrayInit.add(varArrayInit565.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: typeNameArray, IDENT, varArrayInit, varArraySpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2259:13: -> ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2259:17: ^( D_ARR[\"D_ARR\", stmtFlags] typeNameArray IDENT varArraySpec ( varArrayInit )? )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Arr(D_ARR, "D_ARR", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_typeNameArray.nextTree());

                adaptor.addChild(root_1, 
                stream_IDENT.nextNode()
                );

                adaptor.addChild(root_1, stream_varArraySpec.nextTree());

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2261:36: ( varArrayInit )?
                if ( stream_varArrayInit.hasNext() ) {
                    adaptor.addChild(root_1, stream_varArrayInit.nextTree());

                }
                stream_varArrayInit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                     ((CommonTree) ((varArray2_scope)varArray2_stack.peek()).typArrSpec).addChild(((CommonTree) ((varArray2_scope)varArray2_stack.peek()).varArrSpec));                
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            varArray2_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "varArray2"


    public static class varArraySpec_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArraySpec"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2263:1: varArraySpec : ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) ;
    public final pollenParser.varArraySpec_return varArraySpec() throws RecognitionException {
        pollenParser.varArraySpec_return retval = new pollenParser.varArraySpec_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal566=null;
        Atom char_literal568=null;
        pollenParser.varDim_return varDim567 =null;


        BaseNode char_literal566_tree=null;
        BaseNode char_literal568_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_varDim=new RewriteRuleSubtreeStream(adaptor,"rule varDim");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2264:5: ( ( '[' varDim ']' )+ -> ^( LIST[\"LIST\"] ( varDim )+ ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2264:10: ( '[' varDim ']' )+
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2264:10: ( '[' varDim ']' )+
            int cnt149=0;
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==146) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2264:11: '[' varDim ']'
            	    {
            	    char_literal566=(Atom)match(input,146,FOLLOW_146_in_varArraySpec18109); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_146.add(char_literal566);


            	    pushFollow(FOLLOW_varDim_in_varArraySpec18111);
            	    varDim567=varDim();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_varDim.add(varDim567.getTree());

            	    char_literal568=(Atom)match(input,147,FOLLOW_147_in_varArraySpec18113); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_147.add(char_literal568);


            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            // AST REWRITE
            // elements: varDim
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2264:31: -> ^( LIST[\"LIST\"] ( varDim )+ )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2264:36: ^( LIST[\"LIST\"] ( varDim )+ )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                if ( !(stream_varDim.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varDim.hasNext() ) {
                    adaptor.addChild(root_1, stream_varDim.nextTree());

                }
                stream_varDim.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varArraySpec"


    public static class varArrayInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varArrayInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2266:1: varArrayInit[EnumSet<Flags> f] : ( ( ASSIGN initializer ) -> initializer | ( PEG initializer ) -> initializer );
    public final pollenParser.varArrayInit_return varArrayInit(EnumSet<Flags> f) throws RecognitionException {
        pollenParser.varArrayInit_return retval = new pollenParser.varArrayInit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom ASSIGN569=null;
        Atom PEG571=null;
        pollenParser.initializer_return initializer570 =null;

        pollenParser.initializer_return initializer572 =null;


        BaseNode ASSIGN569_tree=null;
        BaseNode PEG571_tree=null;
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2267:5: ( ( ASSIGN initializer ) -> initializer | ( PEG initializer ) -> initializer )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==ASSIGN) ) {
                alt150=1;
            }
            else if ( (LA150_0==PEG) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;

            }
            switch (alt150) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2267:10: ( ASSIGN initializer )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2267:10: ( ASSIGN initializer )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2267:11: ASSIGN initializer
                    {
                    ASSIGN569=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varArrayInit18154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN569);


                    pushFollow(FOLLOW_initializer_in_varArrayInit18156);
                    initializer570=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer570.getTree());

                    }


                    // AST REWRITE
                    // elements: initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2267:47: -> initializer
                    {
                        adaptor.addChild(root_0, stream_initializer.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2268:10: ( PEG initializer )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2268:10: ( PEG initializer )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2268:11: PEG initializer
                    {
                    PEG571=(Atom)match(input,PEG,FOLLOW_PEG_in_varArrayInit18189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PEG.add(PEG571);


                    pushFollow(FOLLOW_initializer_in_varArrayInit18191);
                    initializer572=initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_initializer.add(initializer572.getTree());

                    }


                    if ( state.backtracking==0 ) {f.add(Flags.PEG);}

                    // AST REWRITE
                    // elements: initializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2268:52: -> initializer
                    {
                        adaptor.addChild(root_0, stream_initializer.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varArrayInit"


    public static class varDim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2270:1: varDim : ( expr | -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] ) );
    public final pollenParser.varDim_return varDim() throws RecognitionException {
        pollenParser.varDim_return retval = new pollenParser.varDim_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.expr_return expr573 =null;




          EnumSet<LitFlags> fl = EnumSet.noneOf(LitFlags.class);
          fl.add(LitFlags.NUM); fl.add(LitFlags.INT);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2275:5: ( expr | -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==BIT_NOT||LA151_0==CHAR||LA151_0==DEC||LA151_0==HEX_LIT||LA151_0==IDENT||(LA151_0 >= INC && LA151_0 <= INT_LIT)||LA151_0==LOG_NOT||LA151_0==MINUS||LA151_0==OCT_LIT||LA151_0==REAL_LIT||LA151_0==STRING||LA151_0==135||LA151_0==145||LA151_0==166||LA151_0==180||LA151_0==192) ) {
                alt151=1;
            }
            else if ( (LA151_0==147) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }
            switch (alt151) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2275:12: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_varDim18228);
                    expr573=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr573.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2277:11: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2277:11: -> ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2277:14: ^( E_CONST[\"E_CONST\", fl] INT_LIT[ParseUnit.ARRAY_WITHOUT_DIMENSION] )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", fl)
                        , root_1);

                        adaptor.addChild(root_1, 
                        (BaseNode)adaptor.create(INT_LIT, ParseUnit.ARRAY_WITHOUT_DIMENSION)
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varDim"


    public static class initializer_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2280:1: initializer : ( expr | ( 'new' )=> exprNew | braceOpenNLL initializer_list braceNLLClose );
    public final pollenParser.initializer_return initializer() throws RecognitionException {
        pollenParser.initializer_return retval = new pollenParser.initializer_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.expr_return expr574 =null;

        pollenParser.exprNew_return exprNew575 =null;

        pollenParser.braceOpenNLL_return braceOpenNLL576 =null;

        pollenParser.initializer_list_return initializer_list577 =null;

        pollenParser.braceNLLClose_return braceNLLClose578 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2281:5: ( expr | ( 'new' )=> exprNew | braceOpenNLL initializer_list braceNLLClose )
            int alt152=3;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==BIT_NOT||LA152_0==CHAR||LA152_0==DEC||LA152_0==HEX_LIT||LA152_0==IDENT||(LA152_0 >= INC && LA152_0 <= INT_LIT)||LA152_0==LOG_NOT||LA152_0==MINUS||LA152_0==OCT_LIT||LA152_0==REAL_LIT||LA152_0==STRING||LA152_0==135||LA152_0==145||LA152_0==166||LA152_0==180||LA152_0==192) ) {
                alt152=1;
            }
            else if ( (LA152_0==179) && (synpred55_pollen())) {
                alt152=2;
            }
            else if ( (LA152_0==BRACE_OP) ) {
                alt152=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2281:8: expr
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_initializer18282);
                    expr574=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr574.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2282:8: ( 'new' )=> exprNew
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_exprNew_in_initializer18298);
                    exprNew575=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exprNew575.getTree());

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2283:8: braceOpenNLL initializer_list braceNLLClose
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_braceOpenNLL_in_initializer18307);
                    braceOpenNLL576=braceOpenNLL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceOpenNLL576.getTree());

                    pushFollow(FOLLOW_initializer_list_in_initializer18309);
                    initializer_list577=initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_list577.getTree());

                    pushFollow(FOLLOW_braceNLLClose_in_initializer18311);
                    braceNLLClose578=braceNLLClose();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, braceNLLClose578.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (NoViableAltException ne) {
              
                    ParseUnit.current().reportFailure("Invalid token between '{'...'}'.  Check initializer list for improper newline location. In lists, newlines are only valid after comma.");
                
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "initializer"


    public static class initializer_list_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initializer_list"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2288:1: initializer_list : initializer ( ',' ( NLL )? initializer )* -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) ) ;
    public final pollenParser.initializer_list_return initializer_list() throws RecognitionException {
        pollenParser.initializer_list_return retval = new pollenParser.initializer_list_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal580=null;
        Atom NLL581=null;
        pollenParser.initializer_return initializer579 =null;

        pollenParser.initializer_return initializer582 =null;


        BaseNode char_literal580_tree=null;
        BaseNode NLL581_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_initializer=new RewriteRuleSubtreeStream(adaptor,"rule initializer");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:5: ( initializer ( ',' ( NLL )? initializer )* -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:10: initializer ( ',' ( NLL )? initializer )*
            {
            pushFollow(FOLLOW_initializer_in_initializer_list18338);
            initializer579=initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_initializer.add(initializer579.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:22: ( ',' ( NLL )? initializer )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==138) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:23: ',' ( NLL )? initializer
            	    {
            	    char_literal580=(Atom)match(input,138,FOLLOW_138_in_initializer_list18341); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal580);


            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:27: ( NLL )?
            	    int alt153=2;
            	    int LA153_0 = input.LA(1);

            	    if ( (LA153_0==NLL) ) {
            	        alt153=1;
            	    }
            	    switch (alt153) {
            	        case 1 :
            	            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:27: NLL
            	            {
            	            NLL581=(Atom)match(input,NLL,FOLLOW_NLL_in_initializer_list18343); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NLL.add(NLL581);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_initializer_in_initializer_list18346);
            	    initializer582=initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_initializer.add(initializer582.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            // AST REWRITE
            // elements: initializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2289:48: -> ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:51: ^( E_VEC[\"E_VEC\"] ^( LIST[\"LIST\"] ( initializer )+ ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Vec(E_VEC, "E_VEC")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2289:83: ^( LIST[\"LIST\"] ( initializer )+ )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_2);

                if ( !(stream_initializer.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_initializer.hasNext() ) {
                    adaptor.addChild(root_2, stream_initializer.nextTree());

                }
                stream_initializer.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "initializer_list"


    public static class braceNLLClose_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "braceNLLClose"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2292:1: braceNLLClose : ( ( NLL BRACE_CL )=> NLL ! BRACE_CL !| BRACE_CL !);
    public final pollenParser.braceNLLClose_return braceNLLClose() throws RecognitionException {
        pollenParser.braceNLLClose_return retval = new pollenParser.braceNLLClose_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL583=null;
        Atom BRACE_CL584=null;
        Atom BRACE_CL585=null;

        BaseNode NLL583_tree=null;
        BaseNode BRACE_CL584_tree=null;
        BaseNode BRACE_CL585_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2293:5: ( ( NLL BRACE_CL )=> NLL ! BRACE_CL !| BRACE_CL !)
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==NLL) && (synpred56_pollen())) {
                alt155=1;
            }
            else if ( (LA155_0==BRACE_CL) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }
            switch (alt155) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2293:9: ( NLL BRACE_CL )=> NLL ! BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    NLL583=(Atom)match(input,NLL,FOLLOW_NLL_in_braceNLLClose18401); if (state.failed) return retval;

                    BRACE_CL584=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_braceNLLClose18404); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2294:9: BRACE_CL !
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    BRACE_CL585=(Atom)match(input,BRACE_CL,FOLLOW_BRACE_CL_in_braceNLLClose18415); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "braceNLLClose"


    public static class varDeclList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varDeclList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2297:1: varDeclList : ( varBuiltInType ! varListBuiltInType | userTypeName ! varListUserDefType );
    public final pollenParser.varDeclList_return varDeclList() throws RecognitionException {
        pollenParser.varDeclList_return retval = new pollenParser.varDeclList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.varBuiltInType_return varBuiltInType586 =null;

        pollenParser.varListBuiltInType_return varListBuiltInType587 =null;

        pollenParser.userTypeName_return userTypeName588 =null;

        pollenParser.varListUserDefType_return varListUserDefType589 =null;




            assert ((varDecl_scope)varDecl_stack.peek()).typ != null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2301:5: ( varBuiltInType ! varListBuiltInType | userTypeName ! varListUserDefType )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==150||LA156_0==152||(LA156_0 >= 173 && LA156_0 <= 175)||LA156_0==188||LA156_0==190||(LA156_0 >= 194 && LA156_0 <= 196)) ) {
                alt156=1;
            }
            else if ( (LA156_0==IDENT) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2301:10: varBuiltInType ! varListBuiltInType
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_varBuiltInType_in_varDeclList18445);
                    varBuiltInType586=varBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (varBuiltInType586!=null?((BaseNode)varBuiltInType586.tree):null); }

                    pushFollow(FOLLOW_varListBuiltInType_in_varDeclList18450);
                    varListBuiltInType587=varListBuiltInType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varListBuiltInType587.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2302:10: userTypeName ! varListUserDefType
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_userTypeName_in_varDeclList18461);
                    userTypeName588=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {((varDecl_scope)varDecl_stack.peek()).typ = (userTypeName588!=null?((BaseNode)userTypeName588.tree):null); }

                    pushFollow(FOLLOW_varListUserDefType_in_varDeclList18466);
                    varListUserDefType589=varListUserDefType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varListUserDefType589.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varDeclList"


    public static class varBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varBuiltInType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2304:1: varBuiltInType : builtinType -> ^( T_STD[\"T_STD\", stmtFlags] builtinType ) ;
    public final pollenParser.varBuiltInType_return varBuiltInType() throws RecognitionException {
        pollenParser.varBuiltInType_return retval = new pollenParser.varBuiltInType_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.builtinType_return builtinType590 =null;


        RewriteRuleSubtreeStream stream_builtinType=new RewriteRuleSubtreeStream(adaptor,"rule builtinType");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2305:5: ( builtinType -> ^( T_STD[\"T_STD\", stmtFlags] builtinType ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2305:10: builtinType
            {
            pushFollow(FOLLOW_builtinType_in_varBuiltInType18489);
            builtinType590=builtinType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtinType.add(builtinType590.getTree());

            // AST REWRITE
            // elements: builtinType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2305:22: -> ^( T_STD[\"T_STD\", stmtFlags] builtinType )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2305:25: ^( T_STD[\"T_STD\", stmtFlags] builtinType )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new TypeNode.Std(T_STD, "T_STD", stmtFlags)
                , root_1);

                adaptor.addChild(root_1, stream_builtinType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varBuiltInType"


    public static class varListBuiltInType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varListBuiltInType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2307:1: varListBuiltInType : varInit2 ( ',' ! varInit2 )* ;
    public final pollenParser.varListBuiltInType_return varListBuiltInType() throws RecognitionException {
        pollenParser.varListBuiltInType_return retval = new pollenParser.varListBuiltInType_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal592=null;
        pollenParser.varInit2_return varInit2591 =null;

        pollenParser.varInit2_return varInit2593 =null;


        BaseNode char_literal592_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2308:5: ( varInit2 ( ',' ! varInit2 )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2308:10: varInit2 ( ',' ! varInit2 )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_varInit2_in_varListBuiltInType18522);
            varInit2591=varInit2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2591.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2308:19: ( ',' ! varInit2 )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==138) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2308:20: ',' ! varInit2
            	    {
            	    char_literal592=(Atom)match(input,138,FOLLOW_138_in_varListBuiltInType18525); if (state.failed) return retval;

            	    pushFollow(FOLLOW_varInit2_in_varListBuiltInType18528);
            	    varInit2593=varInit2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit2593.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varListBuiltInType"


    public static class varListUserDefType_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varListUserDefType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2310:1: varListUserDefType : varInit ( ',' ! varInit )* ;
    public final pollenParser.varListUserDefType_return varListUserDefType() throws RecognitionException {
        pollenParser.varListUserDefType_return retval = new pollenParser.varListUserDefType_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal595=null;
        pollenParser.varInit_return varInit594 =null;

        pollenParser.varInit_return varInit596 =null;


        BaseNode char_literal595_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2311:5: ( varInit ( ',' ! varInit )* )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2311:10: varInit ( ',' ! varInit )*
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_varInit_in_varListUserDefType18554);
            varInit594=varInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit594.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2311:18: ( ',' ! varInit )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==138) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2311:19: ',' ! varInit
            	    {
            	    char_literal595=(Atom)match(input,138,FOLLOW_138_in_varListUserDefType18557); if (state.failed) return retval;

            	    pushFollow(FOLLOW_varInit_in_varListUserDefType18560);
            	    varInit596=varInit();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varInit596.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varListUserDefType"


    public static class varInit2_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit2"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2313:1: varInit2 : ( ( IDENT ASSIGN )=> IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) );
    public final pollenParser.varInit2_return varInit2() throws RecognitionException {
        pollenParser.varInit2_return retval = new pollenParser.varInit2_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT597=null;
        Atom ASSIGN598=null;
        Atom IDENT600=null;
        pollenParser.expr_return expr599 =null;


        BaseNode IDENT597_tree=null;
        BaseNode ASSIGN598_tree=null;
        BaseNode IDENT600_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2314:5: ( ( IDENT ASSIGN )=> IDENT ASSIGN expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==IDENT) ) {
                int LA159_1 = input.LA(2);

                if ( (synpred57_pollen()) ) {
                    alt159=1;
                }
                else if ( (true) ) {
                    alt159=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }
            switch (alt159) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2314:10: ( IDENT ASSIGN )=> IDENT ASSIGN expr
                    {
                    IDENT597=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit218601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT597);


                    ASSIGN598=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit218603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN598);


                    pushFollow(FOLLOW_expr_in_varInit218605);
                    expr599=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr599.getTree());

                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2315:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2315:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2317:11: IDENT
                    {
                    IDENT600=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit218656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT600);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2318:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2318:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.Var(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varInit2"


    public static class varInit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varInit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2321:1: varInit : ( ( IDENT BIND )=> IDENT BIND userTypeName -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? ) | ( IDENT PEG )=> IDENT PEG expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? ) | ( IDENT ASSIGN 'new' )=> IDENT ASSIGN exprNew -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT exprNew ) | ( IDENT ASSIGN )=> IDENT ASSIGN ( expr ) -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) );
    public final pollenParser.varInit_return varInit() throws RecognitionException {
        pollenParser.varInit_return retval = new pollenParser.varInit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT601=null;
        Atom BIND602=null;
        Atom IDENT604=null;
        Atom PEG605=null;
        Atom IDENT607=null;
        Atom ASSIGN608=null;
        Atom IDENT610=null;
        Atom ASSIGN611=null;
        Atom IDENT613=null;
        pollenParser.userTypeName_return userTypeName603 =null;

        pollenParser.expr_return expr606 =null;

        pollenParser.exprNew_return exprNew609 =null;

        pollenParser.expr_return expr612 =null;


        BaseNode IDENT601_tree=null;
        BaseNode BIND602_tree=null;
        BaseNode IDENT604_tree=null;
        BaseNode PEG605_tree=null;
        BaseNode IDENT607_tree=null;
        BaseNode ASSIGN608_tree=null;
        BaseNode IDENT610_tree=null;
        BaseNode ASSIGN611_tree=null;
        BaseNode IDENT613_tree=null;
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_PEG=new RewriteRuleTokenStream(adaptor,"token PEG");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_exprNew=new RewriteRuleSubtreeStream(adaptor,"rule exprNew");
        RewriteRuleSubtreeStream stream_userTypeName=new RewriteRuleSubtreeStream(adaptor,"rule userTypeName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2322:5: ( ( IDENT BIND )=> IDENT BIND userTypeName -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? ) | ( IDENT PEG )=> IDENT PEG expr -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? ) | ( IDENT ASSIGN 'new' )=> IDENT ASSIGN exprNew -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT exprNew ) | ( IDENT ASSIGN )=> IDENT ASSIGN ( expr ) -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr ) | IDENT -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ) )
            int alt160=5;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==IDENT) ) {
                int LA160_1 = input.LA(2);

                if ( (synpred58_pollen()) ) {
                    alt160=1;
                }
                else if ( (synpred59_pollen()) ) {
                    alt160=2;
                }
                else if ( (synpred60_pollen()) ) {
                    alt160=3;
                }
                else if ( (synpred61_pollen()) ) {
                    alt160=4;
                }
                else if ( (true) ) {
                    alt160=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;

            }
            switch (alt160) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2322:10: ( IDENT BIND )=> IDENT BIND userTypeName
                    {
                    IDENT601=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit18714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT601);


                    BIND602=(Atom)match(input,BIND,FOLLOW_BIND_in_varInit18716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND602);


                    pushFollow(FOLLOW_userTypeName_in_varInit18718);
                    userTypeName603=userTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_userTypeName.add(userTypeName603.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.PROTOCOL_MEMBER);  stmtFlags.add(Flags.BIND); }

                    // AST REWRITE
                    // elements: IDENT, userTypeName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2323:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2323:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( ^( E_TYP[\"E_TYP\"] userTypeName ) )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2323:84: ( ^( E_TYP[\"E_TYP\"] userTypeName ) )?
                        if ( stream_userTypeName.hasNext() ) {
                            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2323:84: ^( E_TYP[\"E_TYP\"] userTypeName )
                            {
                            BaseNode root_2 = (BaseNode)adaptor.nil();
                            root_2 = (BaseNode)adaptor.becomeRoot(
                            new ExprNode.Typ(E_TYP, "E_TYP")
                            , root_2);

                            adaptor.addChild(root_2, stream_userTypeName.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_userTypeName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2324:11: ( IDENT PEG )=> IDENT PEG expr
                    {
                    IDENT604=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit18782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT604);


                    PEG605=(Atom)match(input,PEG,FOLLOW_PEG_in_varInit18784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PEG.add(PEG605);


                    pushFollow(FOLLOW_expr_in_varInit18786);
                    expr606=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr606.getTree());

                    if ( state.backtracking==0 ) { stmtFlags.add(Flags.PEG); }

                    // AST REWRITE
                    // elements: IDENT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2325:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2325:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT ( expr )? )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2325:84: ( expr )?
                        if ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.nextTree());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2326:11: ( IDENT ASSIGN 'new' )=> IDENT ASSIGN exprNew
                    {
                    IDENT607=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit18839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT607);


                    ASSIGN608=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit18841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN608);


                    pushFollow(FOLLOW_exprNew_in_varInit18843);
                    exprNew609=exprNew();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprNew.add(exprNew609.getTree());

                    // AST REWRITE
                    // elements: exprNew, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2327:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT exprNew )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2327:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT exprNew )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_exprNew.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2329:11: ( IDENT ASSIGN )=> IDENT ASSIGN ( expr )
                    {
                    IDENT610=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit18901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT610);


                    ASSIGN611=(Atom)match(input,ASSIGN,FOLLOW_ASSIGN_in_varInit18903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN611);


                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2329:40: ( expr )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2329:41: expr
                    {
                    pushFollow(FOLLOW_expr_in_varInit18906);
                    expr612=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr612.getTree());

                    }


                    // AST REWRITE
                    // elements: expr, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2330:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2330:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT expr )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2332:10: IDENT
                    {
                    IDENT613=(Atom)match(input,IDENT,FOLLOW_IDENT_in_varInit18957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT613);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2333:9: -> ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2333:12: ^( D_VAR[\"D_VAR\", stmtFlags] IDENT )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new DeclNode.TypedMember(D_VAR, "D_VAR", stmtFlags)
                        , root_1);

                        adaptor.addChild(root_1, ((varDecl_scope)varDecl_stack.peek()).typ);

                        adaptor.addChild(root_1, 
                        stream_IDENT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varInit"


    public static class builtinType_return extends ParserRuleReturnScope {
        public EnumSet<LitFlags> f;
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "builtinType"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2336:1: builtinType returns [EnumSet<LitFlags> f] : ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'real' | 'string' | 'uint8' | 'uint16' | 'uint32' );
    public final pollenParser.builtinType_return builtinType() throws RecognitionException {
        pollenParser.builtinType_return retval = new pollenParser.builtinType_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal614=null;
        Atom string_literal615=null;
        Atom string_literal616=null;
        Atom string_literal617=null;
        Atom string_literal618=null;
        Atom string_literal619=null;
        Atom string_literal620=null;
        Atom string_literal621=null;
        Atom string_literal622=null;
        Atom string_literal623=null;

        BaseNode string_literal614_tree=null;
        BaseNode string_literal615_tree=null;
        BaseNode string_literal616_tree=null;
        BaseNode string_literal617_tree=null;
        BaseNode string_literal618_tree=null;
        BaseNode string_literal619_tree=null;
        BaseNode string_literal620_tree=null;
        BaseNode string_literal621_tree=null;
        BaseNode string_literal622_tree=null;
        BaseNode string_literal623_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2337:5: ( 'bool' | 'byte' | 'int8' | 'int16' | 'int32' | 'real' | 'string' | 'uint8' | 'uint16' | 'uint32' )
            int alt161=10;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt161=1;
                }
                break;
            case 152:
                {
                alt161=2;
                }
                break;
            case 175:
                {
                alt161=3;
                }
                break;
            case 173:
                {
                alt161=4;
                }
                break;
            case 174:
                {
                alt161=5;
                }
                break;
            case 188:
                {
                alt161=6;
                }
                break;
            case 190:
                {
                alt161=7;
                }
                break;
            case 196:
                {
                alt161=8;
                }
                break;
            case 194:
                {
                alt161=9;
                }
                break;
            case 195:
                {
                alt161=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }

            switch (alt161) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2337:9: 'bool'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal614=(Atom)match(input,150,FOLLOW_150_in_builtinType19006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal614_tree = 
                    (BaseNode)adaptor.create(string_literal614)
                    ;
                    adaptor.addChild(root_0, string_literal614_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.BOOL);}

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2338:9: 'byte'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal615=(Atom)match(input,152,FOLLOW_152_in_builtinType19027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal615_tree = 
                    (BaseNode)adaptor.create(string_literal615)
                    ;
                    adaptor.addChild(root_0, string_literal615_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.CHR);}

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2339:9: 'int8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal616=(Atom)match(input,175,FOLLOW_175_in_builtinType19048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal616_tree = 
                    (BaseNode)adaptor.create(string_literal616)
                    ;
                    adaptor.addChild(root_0, string_literal616_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2340:9: 'int16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal617=(Atom)match(input,173,FOLLOW_173_in_builtinType19070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal617_tree = 
                    (BaseNode)adaptor.create(string_literal617)
                    ;
                    adaptor.addChild(root_0, string_literal617_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2341:9: 'int32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal618=(Atom)match(input,174,FOLLOW_174_in_builtinType19090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal618_tree = 
                    (BaseNode)adaptor.create(string_literal618)
                    ;
                    adaptor.addChild(root_0, string_literal618_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 6 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2342:9: 'real'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal619=(Atom)match(input,188,FOLLOW_188_in_builtinType19110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal619_tree = 
                    (BaseNode)adaptor.create(string_literal619)
                    ;
                    adaptor.addChild(root_0, string_literal619_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 7 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2343:9: 'string'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal620=(Atom)match(input,190,FOLLOW_190_in_builtinType19132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal620_tree = 
                    (BaseNode)adaptor.create(string_literal620)
                    ;
                    adaptor.addChild(root_0, string_literal620_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.STR);}

                    }
                    break;
                case 8 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2344:9: 'uint8'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal621=(Atom)match(input,196,FOLLOW_196_in_builtinType19151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal621_tree = 
                    (BaseNode)adaptor.create(string_literal621)
                    ;
                    adaptor.addChild(root_0, string_literal621_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 9 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2345:9: 'uint16'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal622=(Atom)match(input,194,FOLLOW_194_in_builtinType19171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal622_tree = 
                    (BaseNode)adaptor.create(string_literal622)
                    ;
                    adaptor.addChild(root_0, string_literal622_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;
                case 10 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2346:9: 'uint32'
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    string_literal623=(Atom)match(input,195,FOLLOW_195_in_builtinType19189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal623_tree = 
                    (BaseNode)adaptor.create(string_literal623)
                    ;
                    adaptor.addChild(root_0, string_literal623_tree);
                    }

                    if ( state.backtracking==0 ) {retval.f = EnumSet.noneOf(LitFlags.class); retval.f.add(LitFlags.NUM);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "builtinType"


    protected static class qualName_scope {
        Object qtree;
        String s;
    }
    protected Stack qualName_stack = new Stack();


    public static class qualName_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualName"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2349:1: qualName : IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] ;
    public final pollenParser.qualName_return qualName() throws RecognitionException {
        qualName_stack.push(new qualName_scope());
        pollenParser.qualName_return retval = new pollenParser.qualName_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom IDENT624=null;
        pollenParser.qualNameList_return qualNameList625 =null;


        BaseNode IDENT624_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_qualNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualNameList");

            ((qualName_scope)qualName_stack.peek()).qtree = null;
            ((qualName_scope)qualName_stack.peek()).s = "";

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2376:5: ( IDENT ( ( qualNameList )? ) -> IDENT[$IDENT.text + $qualName::s] )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2376:8: IDENT ( ( qualNameList )? )
            {
            IDENT624=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualName19240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT624);


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2376:14: ( ( qualNameList )? )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2376:15: ( qualNameList )?
            {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2376:15: ( qualNameList )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==139) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2376:15: qualNameList
                    {
                    pushFollow(FOLLOW_qualNameList_in_qualName19243);
                    qualNameList625=qualNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualNameList.add(qualNameList625.getTree());

                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2376:31: -> IDENT[$IDENT.text + $qualName::s]
            {
                adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(IDENT, (IDENT624!=null?IDENT624.getText():null) + ((qualName_scope)qualName_stack.peek()).s)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {  // moved handleIntrinsics() code inline for performance
                    if (((BaseNode)retval.tree) != null && ((BaseNode)retval.tree).getText().length() > 0 &&
                        ((BaseNode)retval.tree).getText().indexOf('.') != -1) {

                       switch ( ((BaseNode)retval.tree).getText().charAt(0)) {
                       case 'p':
                       //  handleIntrinsics((CommonTree) ((BaseNode)retval.tree));
                         String s = ((BaseNode)retval.tree).getText();             
                         if (s.substring(0, s.indexOf('.')).equals("pollen")) {
                            s = s.replaceFirst("\\.", "__");
                            ((BaseNode)retval.tree).getToken().setText(s);
                         }       
                         break;
                       default:
                         break;
                       }
                    }      
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            qualName_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "qualName"


    public static class qualNameList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "qualNameList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2379:1: qualNameList : ( '.' ! IDENT !)+ ;
    public final pollenParser.qualNameList_return qualNameList() throws RecognitionException {
        pollenParser.qualNameList_return retval = new pollenParser.qualNameList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal626=null;
        Atom IDENT627=null;

        BaseNode char_literal626_tree=null;
        BaseNode IDENT627_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2380:5: ( ( '.' ! IDENT !)+ )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2381:5: ( '.' ! IDENT !)+
            {
            root_0 = (BaseNode)adaptor.nil();


            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2381:5: ( '.' ! IDENT !)+
            int cnt163=0;
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==139) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2381:9: '.' ! IDENT !
            	    {
            	    char_literal626=(Atom)match(input,139,FOLLOW_139_in_qualNameList19278); if (state.failed) return retval;

            	    IDENT627=(Atom)match(input,IDENT,FOLLOW_IDENT_in_qualNameList19302); if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {((qualName_scope)qualName_stack.peek()).s += "." + (IDENT627!=null?IDENT627.getText():null);}

            	    }
            	    break;

            	default :
            	    if ( cnt163 >= 1 ) break loop163;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(163, input);
                        throw eee;
                }
                cnt163++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "qualNameList"


    public static class arrayLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2386:1: arrayLit : '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) ;
    public final pollenParser.arrayLit_return arrayLit() throws RecognitionException {
        pollenParser.arrayLit_return retval = new pollenParser.arrayLit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal628=null;
        Atom char_literal630=null;
        pollenParser.arrayLitList_return arrayLitList629 =null;


        BaseNode char_literal628_tree=null;
        BaseNode char_literal630_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_arrayLitList=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitList");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2387:5: ( '[' arrayLitList ']' -> ^( LIST[\"LIST\"] arrayLitList ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2387:10: '[' arrayLitList ']'
            {
            char_literal628=(Atom)match(input,146,FOLLOW_146_in_arrayLit19362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(char_literal628);


            pushFollow(FOLLOW_arrayLitList_in_arrayLit19367);
            arrayLitList629=arrayLitList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayLitList.add(arrayLitList629.getTree());

            char_literal630=(Atom)match(input,147,FOLLOW_147_in_arrayLit19372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal630);


            // AST REWRITE
            // elements: arrayLitList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2387:40: -> ^( LIST[\"LIST\"] arrayLitList )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2387:43: ^( LIST[\"LIST\"] arrayLitList )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, stream_arrayLitList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arrayLit"


    public static class arrayLitList_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitList"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2389:1: arrayLitList : ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL );
    public final pollenParser.arrayLitList_return arrayLitList() throws RecognitionException {
        pollenParser.arrayLitList_return retval = new pollenParser.arrayLitList_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom char_literal632=null;
        pollenParser.arrayLitElem_return arrayLitElem631 =null;

        pollenParser.arrayLitElem_return arrayLitElem633 =null;


        BaseNode char_literal632_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleSubtreeStream stream_arrayLitElem=new RewriteRuleSubtreeStream(adaptor,"rule arrayLitElem");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2390:5: ( arrayLitElem ( ',' arrayLitElem )* -> ( arrayLitElem )+ | -> NIL )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==CHAR||LA165_0==HEX_LIT||LA165_0==IDENT||LA165_0==INT_LIT||LA165_0==OCT_LIT||LA165_0==REAL_LIT||LA165_0==STRING||LA165_0==166||LA165_0==180||LA165_0==192) ) {
                alt165=1;
            }
            else if ( (LA165_0==147) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2390:10: arrayLitElem ( ',' arrayLitElem )*
                    {
                    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList19406);
                    arrayLitElem631=arrayLitElem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem631.getTree());

                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2390:26: ( ',' arrayLitElem )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==138) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2390:27: ',' arrayLitElem
                    	    {
                    	    char_literal632=(Atom)match(input,138,FOLLOW_138_in_arrayLitList19412); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal632);


                    	    pushFollow(FOLLOW_arrayLitElem_in_arrayLitList19417);
                    	    arrayLitElem633=arrayLitElem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayLitElem.add(arrayLitElem633.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: arrayLitElem
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2390:52: -> ( arrayLitElem )+
                    {
                        if ( !(stream_arrayLitElem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_arrayLitElem.hasNext() ) {
                            adaptor.addChild(root_0, stream_arrayLitElem.nextTree());

                        }
                        stream_arrayLitElem.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2391:10: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2391:10: -> NIL
                    {
                        adaptor.addChild(root_0, 
                        (BaseNode)adaptor.create(NIL, "NIL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arrayLitList"


    public static class arrayLitElem_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayLitElem"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2393:1: arrayLitElem : ( primitiveLit | namedConstant );
    public final pollenParser.arrayLitElem_return arrayLitElem() throws RecognitionException {
        pollenParser.arrayLitElem_return retval = new pollenParser.arrayLitElem_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.primitiveLit_return primitiveLit634 =null;

        pollenParser.namedConstant_return namedConstant635 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2394:5: ( primitiveLit | namedConstant )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==CHAR||LA166_0==HEX_LIT||LA166_0==INT_LIT||LA166_0==OCT_LIT||LA166_0==REAL_LIT||LA166_0==STRING||LA166_0==166||LA166_0==180||LA166_0==192) ) {
                alt166=1;
            }
            else if ( (LA166_0==IDENT) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }
            switch (alt166) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2394:10: primitiveLit
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveLit_in_arrayLitElem19459);
                    primitiveLit634=primitiveLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveLit634.getTree());

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2394:31: namedConstant
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    pushFollow(FOLLOW_namedConstant_in_arrayLitElem19469);
                    namedConstant635=namedConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namedConstant635.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arrayLitElem"


    public static class namedConstant_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "namedConstant"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2396:1: namedConstant : qualName ;
    public final pollenParser.namedConstant_return namedConstant() throws RecognitionException {
        pollenParser.namedConstant_return retval = new pollenParser.namedConstant_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.qualName_return qualName636 =null;



        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2397:5: ( qualName )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2397:10: qualName
            {
            root_0 = (BaseNode)adaptor.nil();


            pushFollow(FOLLOW_qualName_in_namedConstant19488);
            qualName636=qualName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualName636.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "namedConstant"


    public static class boolLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2399:1: boolLit : ( 'true' | 'false' ) ;
    public final pollenParser.boolLit_return boolLit() throws RecognitionException {
        pollenParser.boolLit_return retval = new pollenParser.boolLit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom set637=null;

        BaseNode set637_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2400:5: ( ( 'true' | 'false' ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2400:7: ( 'true' | 'false' )
            {
            root_0 = (BaseNode)adaptor.nil();


            set637=(Atom)input.LT(1);

            if ( input.LA(1)==166||input.LA(1)==192 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (BaseNode)adaptor.create(set637)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.BOOL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boolLit"


    public static class nullLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2402:1: nullLit : 'null' ;
    public final pollenParser.nullLit_return nullLit() throws RecognitionException {
        pollenParser.nullLit_return retval = new pollenParser.nullLit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom string_literal638=null;

        BaseNode string_literal638_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2403:5: ( 'null' )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2403:10: 'null'
            {
            root_0 = (BaseNode)adaptor.nil();


            string_literal638=(Atom)match(input,180,FOLLOW_180_in_nullLit19539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = 
            (BaseNode)adaptor.create(string_literal638)
            ;
            adaptor.addChild(root_0, string_literal638_tree);
            }

            if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NULL);}

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nullLit"


    public static class numLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2405:1: numLit : ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT );
    public final pollenParser.numLit_return numLit() throws RecognitionException {
        pollenParser.numLit_return retval = new pollenParser.numLit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom INT_LIT639=null;
        Atom OCT_LIT640=null;
        Atom REAL_LIT641=null;
        Atom HEX_LIT642=null;

        BaseNode INT_LIT639_tree=null;
        BaseNode OCT_LIT640_tree=null;
        BaseNode REAL_LIT641_tree=null;
        BaseNode HEX_LIT642_tree=null;

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2409:5: ( INT_LIT | OCT_LIT | REAL_LIT | HEX_LIT )
            int alt167=4;
            switch ( input.LA(1) ) {
            case INT_LIT:
                {
                alt167=1;
                }
                break;
            case OCT_LIT:
                {
                alt167=2;
                }
                break;
            case REAL_LIT:
                {
                alt167=3;
                }
                break;
            case HEX_LIT:
                {
                alt167=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;

            }

            switch (alt167) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2409:10: INT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    INT_LIT639=(Atom)match(input,INT_LIT,FOLLOW_INT_LIT_in_numLit19565); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT_LIT639_tree = 
                    (BaseNode)adaptor.create(INT_LIT639)
                    ;
                    adaptor.addChild(root_0, INT_LIT639_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.INT);}

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2410:11: OCT_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    OCT_LIT640=(Atom)match(input,OCT_LIT,FOLLOW_OCT_LIT_in_numLit19583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OCT_LIT640_tree = 
                    (BaseNode)adaptor.create(OCT_LIT640)
                    ;
                    adaptor.addChild(root_0, OCT_LIT640_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.OCT);}

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2411:11: REAL_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    REAL_LIT641=(Atom)match(input,REAL_LIT,FOLLOW_REAL_LIT_in_numLit19601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REAL_LIT641_tree = 
                    (BaseNode)adaptor.create(REAL_LIT641)
                    ;
                    adaptor.addChild(root_0, REAL_LIT641_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.REAL);}

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2412:11: HEX_LIT
                    {
                    root_0 = (BaseNode)adaptor.nil();


                    HEX_LIT642=(Atom)match(input,HEX_LIT,FOLLOW_HEX_LIT_in_numLit19619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX_LIT642_tree = 
                    (BaseNode)adaptor.create(HEX_LIT642)
                    ;
                    adaptor.addChild(root_0, HEX_LIT642_tree);
                    }

                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.HEX);}

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
                ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.NUM);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numLit"


    protected static class primitiveLit_scope {
        EnumSet<LitFlags> litFlags;
    }
    protected Stack primitiveLit_stack = new Stack();


    public static class primitiveLit_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveLit"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2415:1: primitiveLit : ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) );
    public final pollenParser.primitiveLit_return primitiveLit() throws RecognitionException {
        primitiveLit_stack.push(new primitiveLit_scope());
        pollenParser.primitiveLit_return retval = new pollenParser.primitiveLit_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom STRING646=null;
        Atom CHAR647=null;
        pollenParser.boolLit_return boolLit643 =null;

        pollenParser.numLit_return numLit644 =null;

        pollenParser.nullLit_return nullLit645 =null;


        BaseNode STRING646_tree=null;
        BaseNode CHAR647_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_CHAR=new RewriteRuleTokenStream(adaptor,"token CHAR");
        RewriteRuleSubtreeStream stream_boolLit=new RewriteRuleSubtreeStream(adaptor,"rule boolLit");
        RewriteRuleSubtreeStream stream_nullLit=new RewriteRuleSubtreeStream(adaptor,"rule nullLit");
        RewriteRuleSubtreeStream stream_numLit=new RewriteRuleSubtreeStream(adaptor,"rule numLit");

            ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags = EnumSet.noneOf(LitFlags.class);

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2422:5: ( boolLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit ) | numLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit ) | nullLit -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit ) | STRING -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING ) | CHAR -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR ) )
            int alt168=5;
            switch ( input.LA(1) ) {
            case 166:
            case 192:
                {
                alt168=1;
                }
                break;
            case HEX_LIT:
            case INT_LIT:
            case OCT_LIT:
            case REAL_LIT:
                {
                alt168=2;
                }
                break;
            case 180:
                {
                alt168=3;
                }
                break;
            case STRING:
                {
                alt168=4;
                }
                break;
            case CHAR:
                {
                alt168=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }

            switch (alt168) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2422:10: boolLit
                    {
                    pushFollow(FOLLOW_boolLit_in_primitiveLit19656);
                    boolLit643=boolLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolLit.add(boolLit643.getTree());

                    // AST REWRITE
                    // elements: boolLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2422:18: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2422:21: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] boolLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_boolLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2423:10: numLit
                    {
                    pushFollow(FOLLOW_numLit_in_primitiveLit19681);
                    numLit644=numLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numLit.add(numLit644.getTree());

                    // AST REWRITE
                    // elements: numLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2423:18: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2423:21: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] numLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_numLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2424:10: nullLit
                    {
                    pushFollow(FOLLOW_nullLit_in_primitiveLit19707);
                    nullLit645=nullLit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullLit.add(nullLit645.getTree());

                    // AST REWRITE
                    // elements: nullLit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2424:18: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2424:21: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] nullLit )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, stream_nullLit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2425:10: STRING
                    {
                    STRING646=(Atom)match(input,STRING,FOLLOW_STRING_in_primitiveLit19732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(STRING646);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.STR);}

                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2426:8: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2426:11: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] STRING )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2427:10: CHAR
                    {
                    CHAR647=(Atom)match(input,CHAR,FOLLOW_CHAR_in_primitiveLit19769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR.add(CHAR647);


                    if ( state.backtracking==0 ) {((primitiveLit_scope)primitiveLit_stack.peek()).litFlags.add(LitFlags.CHR);}

                    // AST REWRITE
                    // elements: CHAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2428:9: -> ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                    {
                        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2428:12: ^( E_CONST[\"E_CONST\", $primitiveLit::litFlags] CHAR )
                        {
                        BaseNode root_1 = (BaseNode)adaptor.nil();
                        root_1 = (BaseNode)adaptor.becomeRoot(
                        new ExprNode.Const(E_CONST, "E_CONST", ((primitiveLit_scope)primitiveLit_stack.peek()).litFlags)
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            primitiveLit_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "primitiveLit"


    public static class stmtInjection_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stmtInjection"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2430:1: stmtInjection : inject NLL -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) ;
    public final pollenParser.stmtInjection_return stmtInjection() throws RecognitionException {
        pollenParser.stmtInjection_return retval = new pollenParser.stmtInjection_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL649=null;
        pollenParser.inject_return inject648 =null;


        BaseNode NLL649_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2431:5: ( inject NLL -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2431:10: inject NLL
            {
            pushFollow(FOLLOW_inject_in_stmtInjection19814);
            inject648=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject648.getTree());

            NLL649=(Atom)match(input,NLL,FOLLOW_NLL_in_stmtInjection19824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NLL.add(NLL649);


            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2433:9: -> ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2433:12: ^( S_INJ[\"S_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new StmtNode.Inject(S_INJ, "S_INJ")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2433:47: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, stream_inject.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stmtInjection"


    public static class inject_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inject"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2437:1: inject : c= INJECT -> ^( LIST[\"LIST\"] ) ;
    public final pollenParser.inject_return inject() throws RecognitionException {
        pollenParser.inject_return retval = new pollenParser.inject_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom c=null;

        BaseNode c_tree=null;
        RewriteRuleTokenStream stream_INJECT=new RewriteRuleTokenStream(adaptor,"token INJECT");


            BaseNode r = (BaseNode)adaptor.nil();

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2441:5: (c= INJECT -> ^( LIST[\"LIST\"] ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2441:10: c= INJECT
            {
            c=(Atom)match(input,INJECT,FOLLOW_INJECT_in_inject19889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INJECT.add(c);


            if ( state.backtracking==0 ) {           
                                c.setText(getInject(c.getText()));
                                   createInjectNodes(r, c.getText());           
                            }

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2445:9: -> ^( LIST[\"LIST\"] )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2445:12: ^( LIST[\"LIST\"] )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ListNode(LIST, "LIST")
                , root_1);

                adaptor.addChild(root_1, r);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inject"


    public static class injectionCode_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionCode"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2447:1: injectionCode : inject -> ^( E_INJ[\"E_INJ\"] inject ) ;
    public final pollenParser.injectionCode_return injectionCode() throws RecognitionException {
        pollenParser.injectionCode_return retval = new pollenParser.injectionCode_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        pollenParser.inject_return inject650 =null;


        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2448:5: ( inject -> ^( E_INJ[\"E_INJ\"] inject ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2448:10: inject
            {
            pushFollow(FOLLOW_inject_in_injectionCode19931);
            inject650=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject650.getTree());

            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2449:9: -> ^( E_INJ[\"E_INJ\"] inject )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2449:12: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_1);

                adaptor.addChild(root_1, stream_inject.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "injectionCode"


    public static class injectionDecl_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "injectionDecl"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2451:1: injectionDecl : inject ( NLL ) -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) ;
    public final pollenParser.injectionDecl_return injectionDecl() throws RecognitionException {
        pollenParser.injectionDecl_return retval = new pollenParser.injectionDecl_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom NLL652=null;
        pollenParser.inject_return inject651 =null;


        BaseNode NLL652_tree=null;
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");
        RewriteRuleSubtreeStream stream_inject=new RewriteRuleSubtreeStream(adaptor,"rule inject");
        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2452:5: ( inject ( NLL ) -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) ) )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2452:10: inject ( NLL )
            {
            pushFollow(FOLLOW_inject_in_injectionDecl19974);
            inject651=inject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inject.add(inject651.getTree());

            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2453:17: ( NLL )
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2453:18: NLL
            {
            NLL652=(Atom)match(input,NLL,FOLLOW_NLL_in_injectionDecl19993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NLL.add(NLL652);


            }


            // AST REWRITE
            // elements: inject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (BaseNode)adaptor.nil();
            // 2454:18: -> ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
            {
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2454:21: ^( D_INJ[\"D_INJ\"] ^( E_INJ[\"E_INJ\"] inject ) )
                {
                BaseNode root_1 = (BaseNode)adaptor.nil();
                root_1 = (BaseNode)adaptor.becomeRoot(
                new DeclNode.Inject(D_INJ, "D_INJ")
                , root_1);

                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2454:55: ^( E_INJ[\"E_INJ\"] inject )
                {
                BaseNode root_2 = (BaseNode)adaptor.nil();
                root_2 = (BaseNode)adaptor.becomeRoot(
                new ExprNode.Inject(E_INJ, "E_INJ")
                , root_2);

                adaptor.addChild(root_2, stream_inject.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "injectionDecl"


    public static class delim_return extends ParserRuleReturnScope {
        BaseNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delim"
    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2456:1: delim : ( ( SEMI NLL )=> SEMI NLL ->| ( SEMI ) ->| ( NLL ) ->);
    public final pollenParser.delim_return delim() throws RecognitionException {
        pollenParser.delim_return retval = new pollenParser.delim_return();
        retval.start = input.LT(1);


        BaseNode root_0 = null;

        Atom SEMI653=null;
        Atom NLL654=null;
        Atom SEMI655=null;
        Atom NLL656=null;

        BaseNode SEMI653_tree=null;
        BaseNode NLL654_tree=null;
        BaseNode SEMI655_tree=null;
        BaseNode NLL656_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_NLL=new RewriteRuleTokenStream(adaptor,"token NLL");

        try {
            // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2457:5: ( ( SEMI NLL )=> SEMI NLL ->| ( SEMI ) ->| ( NLL ) ->)
            int alt169=3;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==SEMI) ) {
                int LA169_1 = input.LA(2);

                if ( (synpred62_pollen()) ) {
                    alt169=1;
                }
                else if ( (true) ) {
                    alt169=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA169_0==NLL) ) {
                alt169=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }
            switch (alt169) {
                case 1 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2457:10: ( SEMI NLL )=> SEMI NLL
                    {
                    SEMI653=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim20062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI653);


                    NLL654=(Atom)match(input,NLL,FOLLOW_NLL_in_delim20064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL654);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2457:34: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2458:10: ( SEMI )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2458:10: ( SEMI )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2458:11: SEMI
                    {
                    SEMI655=(Atom)match(input,SEMI,FOLLOW_SEMI_in_delim20080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI655);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2458:17: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2459:10: ( NLL )
                    {
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2459:10: ( NLL )
                    // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2459:11: NLL
                    {
                    NLL656=(Atom)match(input,NLL,FOLLOW_NLL_in_delim20095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NLL.add(NLL656);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (BaseNode)adaptor.nil();
                    // 2459:18: ->
                    {
                        root_0 = null;
                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (BaseNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (BaseNode)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delim"

    // $ANTLR start synpred1_pollen
    public final void synpred1_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:9: ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:10: fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred1_pollen1601);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnType_in_synpred1_pollen1603);
        fcnType();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterList_in_synpred1_pollen1605);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:46: ( NLL )?
        int alt170=2;
        int LA170_0 = input.LA(1);

        if ( (LA170_0==NLL) ) {
            alt170=1;
        }
        switch (alt170) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:576:46: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred1_pollen1607); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred1_pollen1610); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_pollen

    // $ANTLR start synpred2_pollen
    public final void synpred2_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:9: ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:10: fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred2_pollen1626);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred2_pollen1628);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:27: ( '[' ']' )?
        int alt171=2;
        int LA171_0 = input.LA(1);

        if ( (LA171_0==146) ) {
            alt171=1;
        }
        switch (alt171) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:28: '[' ']'
                {
                match(input,146,FOLLOW_146_in_synpred2_pollen1631); if (state.failed) return ;

                match(input,147,FOLLOW_147_in_synpred2_pollen1633); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_qualName_in_synpred2_pollen1637);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterList_in_synpred2_pollen1640);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:69: ( NLL )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==NLL) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:577:69: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred2_pollen1643); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred2_pollen1646); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_pollen

    // $ANTLR start synpred3_pollen
    public final void synpred3_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:9: ( ( 'public' )? 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:10: ( 'public' )? 'enum'
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:10: ( 'public' )?
        int alt173=2;
        int LA173_0 = input.LA(1);

        if ( (LA173_0==187) ) {
            alt173=1;
        }
        switch (alt173) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:578:11: 'public'
                {
                match(input,187,FOLLOW_187_in_synpred3_pollen1667); if (state.failed) return ;

                }
                break;

        }


        match(input,162,FOLLOW_162_in_synpred3_pollen1671); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_pollen

    // $ANTLR start synpred4_pollen
    public final void synpred4_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:12: ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:13: fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred4_pollen5052);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnType_in_synpred4_pollen5054);
        fcnType();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterList_in_synpred4_pollen5056);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:49: ( NLL )?
        int alt174=2;
        int LA174_0 = input.LA(1);

        if ( (LA174_0==NLL) ) {
            alt174=1;
        }
        switch (alt174) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:817:49: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred4_pollen5058); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred4_pollen5061); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_pollen

    // $ANTLR start synpred5_pollen
    public final void synpred5_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:12: ( fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:13: fcnAttr typeName ( '[' ']' )? qualName formalParameterList ( NLL )? BRACE_OP
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred5_pollen5080);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred5_pollen5082);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:30: ( '[' ']' )?
        int alt175=2;
        int LA175_0 = input.LA(1);

        if ( (LA175_0==146) ) {
            alt175=1;
        }
        switch (alt175) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:31: '[' ']'
                {
                match(input,146,FOLLOW_146_in_synpred5_pollen5085); if (state.failed) return ;

                match(input,147,FOLLOW_147_in_synpred5_pollen5087); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_qualName_in_synpred5_pollen5091);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterList_in_synpred5_pollen5094);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:72: ( NLL )?
        int alt176=2;
        int LA176_0 = input.LA(1);

        if ( (LA176_0==NLL) ) {
            alt176=1;
        }
        switch (alt176) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:818:72: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred5_pollen5097); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred5_pollen5100); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_pollen

    // $ANTLR start synpred6_pollen
    public final void synpred6_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:12: ( 'new' | 'host' 'new' )
        int alt177=2;
        int LA177_0 = input.LA(1);

        if ( (LA177_0==179) ) {
            alt177=1;
        }
        else if ( (LA177_0==169) ) {
            alt177=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 177, 0, input);

            throw nvae;

        }
        switch (alt177) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:13: 'new'
                {
                match(input,179,FOLLOW_179_in_synpred6_pollen5119); if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:819:21: 'host' 'new'
                {
                match(input,169,FOLLOW_169_in_synpred6_pollen5123); if (state.failed) return ;

                match(input,179,FOLLOW_179_in_synpred6_pollen5125); if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred6_pollen

    // $ANTLR start synpred7_pollen
    public final void synpred7_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:12: ( ( 'public' )? 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:13: ( 'public' )? 'enum'
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:13: ( 'public' )?
        int alt178=2;
        int LA178_0 = input.LA(1);

        if ( (LA178_0==187) ) {
            alt178=1;
        }
        switch (alt178) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:821:14: 'public'
                {
                match(input,187,FOLLOW_187_in_synpred7_pollen5159); if (state.failed) return ;

                }
                break;

        }


        match(input,162,FOLLOW_162_in_synpred7_pollen5163); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_pollen

    // $ANTLR start synpred8_pollen
    public final void synpred8_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:885:11: ( IDENT ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:885:12: IDENT ASSIGN
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred8_pollen5532); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred8_pollen5534); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_pollen

    // $ANTLR start synpred9_pollen
    public final void synpred9_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:9: ( ( 'public' )? 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:10: ( 'public' )? 'enum'
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:10: ( 'public' )?
        int alt179=2;
        int LA179_0 = input.LA(1);

        if ( (LA179_0==187) ) {
            alt179=1;
        }
        switch (alt179) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:930:11: 'public'
                {
                match(input,187,FOLLOW_187_in_synpred9_pollen5868); if (state.failed) return ;

                }
                break;

        }


        match(input,162,FOLLOW_162_in_synpred9_pollen5872); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_pollen

    // $ANTLR start synpred10_pollen
    public final void synpred10_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:931:9: ( fcnAttr fcnType formalParameterList delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:931:10: fcnAttr fcnType formalParameterList delim
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred10_pollen5888);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnType_in_synpred10_pollen5890);
        fcnType();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterList_in_synpred10_pollen5892);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred10_pollen5894);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_pollen

    // $ANTLR start synpred11_pollen
    public final void synpred11_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:971:11: ( 'preset' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:971:12: 'preset'
        {
        match(input,183,FOLLOW_183_in_synpred11_pollen6183); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_pollen

    // $ANTLR start synpred12_pollen
    public final void synpred12_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:11: ( fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:12: fcnAttr fcnType formalParameterList ( NLL )? BRACE_OP
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred12_pollen6785);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_fcnType_in_synpred12_pollen6787);
        fcnType();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_formalParameterList_in_synpred12_pollen6789);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:48: ( NLL )?
        int alt180=2;
        int LA180_0 = input.LA(1);

        if ( (LA180_0==NLL) ) {
            alt180=1;
        }
        switch (alt180) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:997:48: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred12_pollen6791); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred12_pollen6794); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_pollen

    // $ANTLR start synpred13_pollen
    public final void synpred13_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:11: ( fcnAttr typeName qualName ( '[' ']' )? formalParameterList ( NLL )? BRACE_OP )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:12: fcnAttr typeName qualName ( '[' ']' )? formalParameterList ( NLL )? BRACE_OP
        {
        pushFollow(FOLLOW_fcnAttr_in_synpred13_pollen6812);
        fcnAttr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred13_pollen6814);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_qualName_in_synpred13_pollen6816);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:38: ( '[' ']' )?
        int alt181=2;
        int LA181_0 = input.LA(1);

        if ( (LA181_0==146) ) {
            alt181=1;
        }
        switch (alt181) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:39: '[' ']'
                {
                match(input,146,FOLLOW_146_in_synpred13_pollen6819); if (state.failed) return ;

                match(input,147,FOLLOW_147_in_synpred13_pollen6821); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_formalParameterList_in_synpred13_pollen6825);
        formalParameterList();

        state._fsp--;
        if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:70: ( NLL )?
        int alt182=2;
        int LA182_0 = input.LA(1);

        if ( (LA182_0==NLL) ) {
            alt182=1;
        }
        switch (alt182) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:998:70: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred13_pollen6828); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred13_pollen6831); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_pollen

    // $ANTLR start synpred14_pollen
    public final void synpred14_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:11: ( ( 'public' )? 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:12: ( 'public' )? 'enum'
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:12: ( 'public' )?
        int alt183=2;
        int LA183_0 = input.LA(1);

        if ( (LA183_0==187) ) {
            alt183=1;
        }
        switch (alt183) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:999:13: 'public'
                {
                match(input,187,FOLLOW_187_in_synpred14_pollen6855); if (state.failed) return ;

                }
                break;

        }


        match(input,162,FOLLOW_162_in_synpred14_pollen6859); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_pollen

    // $ANTLR start synpred15_pollen
    public final void synpred15_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:7: ( BRACE_OP ( NLL )? BRACE_CL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:8: BRACE_OP ( NLL )? BRACE_CL
        {
        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred15_pollen8715); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:17: ( NLL )?
        int alt184=2;
        int LA184_0 = input.LA(1);

        if ( (LA184_0==NLL) ) {
            alt184=1;
        }
        switch (alt184) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1405:17: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred15_pollen8717); if (state.failed) return ;

                }
                break;

        }


        match(input,BRACE_CL,FOLLOW_BRACE_CL_in_synpred15_pollen8720); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_pollen

    // $ANTLR start synpred16_pollen
    public final void synpred16_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:11: ( metaDelim metaArg )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1419:12: metaDelim metaArg
        {
        pushFollow(FOLLOW_metaDelim_in_synpred16_pollen8900);
        metaDelim();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_metaArg_in_synpred16_pollen8902);
        metaArg();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_pollen

    // $ANTLR start synpred17_pollen
    public final void synpred17_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:11: ( ',' ( NLL )? )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:12: ',' ( NLL )?
        {
        match(input,138,FOLLOW_138_in_synpred17_pollen8928); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:16: ( NLL )?
        int alt185=2;
        int LA185_0 = input.LA(1);

        if ( (LA185_0==NLL) ) {
            alt185=1;
        }
        switch (alt185) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1420:16: NLL
                {
                match(input,NLL,FOLLOW_NLL_in_synpred17_pollen8930); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred17_pollen

    // $ANTLR start synpred18_pollen
    public final void synpred18_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:14: ( 'module' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1461:15: 'module'
        {
        match(input,178,FOLLOW_178_in_synpred18_pollen9287); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_pollen

    // $ANTLR start synpred19_pollen
    public final void synpred19_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1462:14: ( 'class' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1462:15: 'class'
        {
        match(input,154,FOLLOW_154_in_synpred19_pollen9319); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_pollen

    // $ANTLR start synpred20_pollen
    public final void synpred20_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1463:14: ( 'protocol' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1463:15: 'protocol'
        {
        match(input,185,FOLLOW_185_in_synpred20_pollen9341); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_pollen

    // $ANTLR start synpred21_pollen
    public final void synpred21_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:14: ( 'composition' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1464:15: 'composition'
        {
        match(input,155,FOLLOW_155_in_synpred21_pollen9363); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_pollen

    // $ANTLR start synpred22_pollen
    public final void synpred22_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:14: ( 'enum' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1465:15: 'enum'
        {
        match(input,162,FOLLOW_162_in_synpred22_pollen9385); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_pollen

    // $ANTLR start synpred23_pollen
    public final void synpred23_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:10: ( BRACE_CL NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1490:11: BRACE_CL NLL
        {
        match(input,BRACE_CL,FOLLOW_BRACE_CL_in_synpred23_pollen9521); if (state.failed) return ;

        match(input,NLL,FOLLOW_NLL_in_synpred23_pollen9523); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_pollen

    // $ANTLR start synpred24_pollen
    public final void synpred24_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:8: ( BRACE_OP NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1502:9: BRACE_OP NLL
        {
        match(input,BRACE_OP,FOLLOW_BRACE_OP_in_synpred24_pollen9576); if (state.failed) return ;

        match(input,NLL,FOLLOW_NLL_in_synpred24_pollen9578); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_pollen

    // $ANTLR start synpred25_pollen
    public final void synpred25_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1641:10: ( varOrFcnOrArray incDecOp )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1641:11: varOrFcnOrArray incDecOp
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred25_pollen11150);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_incDecOp_in_synpred25_pollen11152);
        incDecOp();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_pollen

    // $ANTLR start synpred26_pollen
    public final void synpred26_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1778:9: ( typeNameArray '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1778:10: typeNameArray '['
        {
        pushFollow(FOLLOW_typeNameArray_in_synpred26_pollen12447);
        typeNameArray();

        state._fsp--;
        if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred26_pollen12449); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_pollen

    // $ANTLR start synpred27_pollen
    public final void synpred27_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1829:12: ( typeName '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1829:13: typeName '['
        {
        pushFollow(FOLLOW_typeName_in_synpred27_pollen12950);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred27_pollen12953); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_pollen

    // $ANTLR start synpred28_pollen
    public final void synpred28_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:9: ( '@' IDENT '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1846:10: '@' IDENT '('
        {
        match(input,145,FOLLOW_145_in_synpred28_pollen13153); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred28_pollen13155); if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred28_pollen13157); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_pollen

    // $ANTLR start synpred29_pollen
    public final void synpred29_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1850:11: ( '@' IDENT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1850:12: '@' IDENT
        {
        match(input,145,FOLLOW_145_in_synpred29_pollen13256); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred29_pollen13258); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_pollen

    // $ANTLR start synpred30_pollen
    public final void synpred30_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:11: ( qualName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1856:12: qualName '('
        {
        pushFollow(FOLLOW_qualName_in_synpred30_pollen13390);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred30_pollen13392); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_pollen

    // $ANTLR start synpred31_pollen
    public final void synpred31_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:11: ( qualName '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1858:12: qualName '['
        {
        pushFollow(FOLLOW_qualName_in_synpred31_pollen13457);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred31_pollen13459); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_pollen

    // $ANTLR start synpred32_pollen
    public final void synpred32_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1869:10: ( '.' IDENT '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1869:11: '.' IDENT '('
        {
        match(input,139,FOLLOW_139_in_synpred32_pollen13599); if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred32_pollen13604); if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred32_pollen13606); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_pollen

    // $ANTLR start synpred33_pollen
    public final void synpred33_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1892:10: ( INJECT assign )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1892:12: INJECT assign
        {
        match(input,INJECT,FOLLOW_INJECT_in_synpred33_pollen13901); if (state.failed) return ;

        pushFollow(FOLLOW_assign_in_synpred33_pollen13903);
        assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_pollen

    // $ANTLR start synpred34_pollen
    public final void synpred34_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1893:10: ( INJECT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1893:12: INJECT
        {
        match(input,INJECT,FOLLOW_INJECT_in_synpred34_pollen13921); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_pollen

    // $ANTLR start synpred35_pollen
    public final void synpred35_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1905:10: ( 'const' | 'volatile' | 'host' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:
        {
        if ( input.LA(1)==156||input.LA(1)==169||input.LA(1)==197 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred35_pollen

    // $ANTLR start synpred36_pollen
    public final void synpred36_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:10: ( varDecl delim )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1906:12: varDecl delim
        {
        pushFollow(FOLLOW_varDecl_in_synpred36_pollen14088);
        varDecl();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_delim_in_synpred36_pollen14090);
        delim();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_pollen

    // $ANTLR start synpred37_pollen
    public final void synpred37_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1907:10: ( varOrFcnOrArray assign )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1907:12: varOrFcnOrArray assign
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred37_pollen14109);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_assign_in_synpred37_pollen14111);
        assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_pollen

    // $ANTLR start synpred38_pollen
    public final void synpred38_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1908:10: ( qualName BIND )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1908:12: qualName BIND
        {
        pushFollow(FOLLOW_qualName_in_synpred38_pollen14129);
        qualName();

        state._fsp--;
        if (state.failed) return ;

        match(input,BIND,FOLLOW_BIND_in_synpred38_pollen14131); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_pollen

    // $ANTLR start synpred39_pollen
    public final void synpred39_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:10: ( varOrFcnOrArray PEG )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1909:11: varOrFcnOrArray PEG
        {
        pushFollow(FOLLOW_varOrFcnOrArray_in_synpred39_pollen14148);
        varOrFcnOrArray();

        state._fsp--;
        if (state.failed) return ;

        match(input,PEG,FOLLOW_PEG_in_synpred39_pollen14151); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred39_pollen

    // $ANTLR start synpred40_pollen
    public final void synpred40_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:11: ( 'new' | 'host' 'new' )
        int alt186=2;
        int LA186_0 = input.LA(1);

        if ( (LA186_0==179) ) {
            alt186=1;
        }
        else if ( (LA186_0==169) ) {
            alt186=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 186, 0, input);

            throw nvae;

        }
        switch (alt186) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:12: 'new'
                {
                match(input,179,FOLLOW_179_in_synpred40_pollen14170); if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1910:20: 'host' 'new'
                {
                match(input,169,FOLLOW_169_in_synpred40_pollen14174); if (state.failed) return ;

                match(input,179,FOLLOW_179_in_synpred40_pollen14176); if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred40_pollen

    // $ANTLR start synpred41_pollen
    public final void synpred41_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:5: ( exprUnary ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1919:6: exprUnary ASSIGN
        {
        pushFollow(FOLLOW_exprUnary_in_synpred41_pollen14254);
        exprUnary();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred41_pollen14256); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_pollen

    // $ANTLR start synpred42_pollen
    public final void synpred42_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1920:7: ( 'new' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:1920:8: 'new'
        {
        match(input,179,FOLLOW_179_in_synpred42_pollen14271); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_pollen

    // $ANTLR start synpred44_pollen
    public final void synpred44_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2060:9: ( typeName IDENT ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2060:10: typeName IDENT ASSIGN
        {
        pushFollow(FOLLOW_typeName_in_synpred44_pollen15562);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred44_pollen15564); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred44_pollen15566); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_pollen

    // $ANTLR start synpred45_pollen
    public final void synpred45_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2063:9: ( INJECT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2063:10: INJECT
        {
        match(input,INJECT,FOLLOW_INJECT_in_synpred45_pollen15648); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_pollen

    // $ANTLR start synpred46_pollen
    public final void synpred46_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:10: ( 'case' INT_LIT )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2090:11: 'case' INT_LIT
        {
        match(input,153,FOLLOW_153_in_synpred46_pollen15881); if (state.failed) return ;

        match(input,INT_LIT,FOLLOW_INT_LIT_in_synpred46_pollen15883); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_pollen

    // $ANTLR start synpred47_pollen
    public final void synpred47_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:10: ( 'new' | 'host' 'new' )
        int alt187=2;
        int LA187_0 = input.LA(1);

        if ( (LA187_0==179) ) {
            alt187=1;
        }
        else if ( (LA187_0==169) ) {
            alt187=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 187, 0, input);

            throw nvae;

        }
        switch (alt187) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:11: 'new'
                {
                match(input,179,FOLLOW_179_in_synpred47_pollen16608); if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2139:19: 'host' 'new'
                {
                match(input,169,FOLLOW_169_in_synpred47_pollen16612); if (state.failed) return ;

                match(input,179,FOLLOW_179_in_synpred47_pollen16614); if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred47_pollen

    // $ANTLR start synpred48_pollen
    public final void synpred48_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:10: ( typeName IDENT ( ASSIGN ) )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:11: typeName IDENT ( ASSIGN )
        {
        pushFollow(FOLLOW_typeName_in_synpred48_pollen16788);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred48_pollen16790); if (state.failed) return ;

        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:26: ( ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2168:27: ASSIGN
        {
        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred48_pollen16793); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred48_pollen

    // $ANTLR start synpred49_pollen
    public final void synpred49_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2169:10: ( typeName IDENT '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2169:11: typeName IDENT '['
        {
        pushFollow(FOLLOW_typeName_in_synpred49_pollen16811);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,IDENT,FOLLOW_IDENT_in_synpred49_pollen16813); if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred49_pollen16815); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred49_pollen

    // $ANTLR start synpred50_pollen
    public final void synpred50_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2170:10: ( typeName '[' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2170:11: typeName '['
        {
        pushFollow(FOLLOW_typeName_in_synpred50_pollen16833);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,146,FOLLOW_146_in_synpred50_pollen16835); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_pollen

    // $ANTLR start synpred51_pollen
    public final void synpred51_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2171:11: ( ( '(' )? typeName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2171:12: ( '(' )? typeName '('
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2171:12: ( '(' )?
        int alt188=2;
        int LA188_0 = input.LA(1);

        if ( (LA188_0==135) ) {
            alt188=1;
        }
        switch (alt188) {
            case 1 :
                // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2171:13: '('
                {
                match(input,135,FOLLOW_135_in_synpred51_pollen16855); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_typeName_in_synpred51_pollen16859);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred51_pollen16861); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred51_pollen

    // $ANTLR start synpred52_pollen
    public final void synpred52_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2172:11: ( ( '(' ) typeName typeName '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2172:13: ( '(' ) typeName typeName '('
        {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2172:13: ( '(' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2172:14: '('
        {
        match(input,135,FOLLOW_135_in_synpred52_pollen16883); if (state.failed) return ;

        }


        pushFollow(FOLLOW_typeName_in_synpred52_pollen16886);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_typeName_in_synpred52_pollen16888);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred52_pollen16890); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred52_pollen

    // $ANTLR start synpred53_pollen
    public final void synpred53_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2173:11: ( typeName varInit )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2173:12: typeName varInit
        {
        pushFollow(FOLLOW_typeName_in_synpred53_pollen16909);
        typeName();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_varInit_in_synpred53_pollen16911);
        varInit();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred53_pollen

    // $ANTLR start synpred54_pollen
    public final void synpred54_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2195:6: ( 'host' 'new' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2195:7: 'host' 'new'
        {
        match(input,169,FOLLOW_169_in_synpred54_pollen17229); if (state.failed) return ;

        match(input,179,FOLLOW_179_in_synpred54_pollen17231); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred54_pollen

    // $ANTLR start synpred55_pollen
    public final void synpred55_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2282:8: ( 'new' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2282:9: 'new'
        {
        match(input,179,FOLLOW_179_in_synpred55_pollen18293); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred55_pollen

    // $ANTLR start synpred56_pollen
    public final void synpred56_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2293:9: ( NLL BRACE_CL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2293:10: NLL BRACE_CL
        {
        match(input,NLL,FOLLOW_NLL_in_synpred56_pollen18394); if (state.failed) return ;

        match(input,BRACE_CL,FOLLOW_BRACE_CL_in_synpred56_pollen18396); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred56_pollen

    // $ANTLR start synpred57_pollen
    public final void synpred57_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2314:10: ( IDENT ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2314:11: IDENT ASSIGN
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred57_pollen18595); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred57_pollen18597); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred57_pollen

    // $ANTLR start synpred58_pollen
    public final void synpred58_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2322:10: ( IDENT BIND )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2322:11: IDENT BIND
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred58_pollen18708); if (state.failed) return ;

        match(input,BIND,FOLLOW_BIND_in_synpred58_pollen18710); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred58_pollen

    // $ANTLR start synpred59_pollen
    public final void synpred59_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2324:11: ( IDENT PEG )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2324:12: IDENT PEG
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred59_pollen18776); if (state.failed) return ;

        match(input,PEG,FOLLOW_PEG_in_synpred59_pollen18778); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred59_pollen

    // $ANTLR start synpred60_pollen
    public final void synpred60_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2326:11: ( IDENT ASSIGN 'new' )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2326:12: IDENT ASSIGN 'new'
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred60_pollen18832); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred60_pollen18834); if (state.failed) return ;

        match(input,179,FOLLOW_179_in_synpred60_pollen18836); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred60_pollen

    // $ANTLR start synpred61_pollen
    public final void synpred61_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2329:11: ( IDENT ASSIGN )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2329:12: IDENT ASSIGN
        {
        match(input,IDENT,FOLLOW_IDENT_in_synpred61_pollen18896); if (state.failed) return ;

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred61_pollen18898); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred61_pollen

    // $ANTLR start synpred62_pollen
    public final void synpred62_pollen_fragment() throws RecognitionException {
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2457:10: ( SEMI NLL )
        // /Users/lentil/Documents/MegansStuff/Documents/Grammar_Sample/com.amaret.pollen/parser/pollen.g:2457:11: SEMI NLL
        {
        match(input,SEMI,FOLLOW_SEMI_in_synpred62_pollen20055); if (state.failed) return ;

        match(input,NLL,FOLLOW_NLL_in_synpred62_pollen20057); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred62_pollen

    // Delegated rules

    public final boolean synpred49_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_pollen() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_pollen_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_NLL_in_unit676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040110000000000L});
    public static final BitSet FOLLOW_unitPackage_in_unit680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPackage_in_unitPackage729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_importList_in_unitPackage750 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importPrintIntrinsic_in_unitPackage789 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importSleepWakeIntrinsic_in_unitPackage810 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importDynamicMemoryIntrinsic_in_unitPackage831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x020600040C000000L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x020600040C000000L});
    public static final BitSet FOLLOW_unitTypeDefinition_in_unitPackage874 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_stmtInjectionList_in_unitPackage895 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_unitPackage916 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_pollenEOF_in_unitPackage938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_pollenEOF993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmtInjectionList1017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_182_in_stmtPackage1053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtPackage1055 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtPackage1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_stmtExport1114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtExport1116 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtExport1118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_classDefinition1159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classDefinition1161 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_classDefinition1184 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_classDefinition1197 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_classDefinition1210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5808E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_classFeatureList_in_classDefinition1212 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_classDefinition1215 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_classDefinition1218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFeature_in_classFeatureList1293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5808E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_classHostCtor_in_classFeatureList1296 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_classTargCtor_in_classFeatureList1299 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicUnitName_in_classFeatureList1306 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_classFeatureList1309 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicSleepWakeProxy_in_classFeatureList1311 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicDynamicMemoryProxy_in_classFeatureList1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionVoidOrCtor_in_classFeature1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_classFeature1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_classFeature1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classFeature1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_classFeature1696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_classFeature1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_moduleDefinition2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_moduleDefinition2469 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_moduleDefinition2493 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_moduleDefinition2505 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_moduleDefinition2520 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_moduleDefinition2524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5808E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_moduleFeatureList_in_moduleDefinition2526 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_moduleDefinition2530 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_moduleDefinition2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleFeature_in_moduleFeatureList2666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5808E20415400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_moduleHostCtor_in_moduleFeatureList2672 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_moduleTargCtor_in_moduleFeatureList2675 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicUnitName_in_moduleFeatureList2678 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_moduleFeatureList2681 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicSleepWakeProxy_in_moduleFeatureList2683 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicDynamicMemoryProxy_in_moduleFeatureList2685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionVoidOrCtor_in_moduleFeature5066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_moduleFeature5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclarationNew_in_moduleFeature5130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_moduleFeature5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_moduleFeature5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_moduleFeature5181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_moduleFeature5195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_enumUnitDefinition5282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumBodyDefinition_in_enumUnitDefinition5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_enumDefinition5310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_enumDefinition5327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumBodyDefinition_in_enumDefinition5338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumBodyDefinition5376 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_enumBodyDefinition5397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumList_in_enumBodyDefinition5399 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_enumBodyDefinition5401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList5461 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_enumList5477 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_NLL_in_enumList5480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumElement_in_enumList5484 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_enumList5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement5538 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_enumElement5540 = new BitSet(new long[]{0x4000000000000000L,0x0000000008000100L});
    public static final BitSet FOLLOW_enumVal_in_enumElement5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumElement5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_enumVal5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_enumVal5662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_enumVal5676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_protocolDefinition5706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_protocolDefinition5708 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_protocolDefinition5728 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_protocolDefinition5738 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_protocolDefinition5749 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_protocolDefinition5753 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000082L,0x5800E20401400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_protocolFeatureList_in_protocolDefinition5755 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_protocolDefinition5758 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_protocolDefinition5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolFeature_in_protocolFeatureList5826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L,0x5800E20401400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_enumDefinition_in_protocolFeature5877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclarationVoidOrCtor_in_protocolFeature5899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDeclaration_in_protocolFeature5909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_protocolFeature5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_compositionDefinition5947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_compositionDefinition5949 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_extendsClause_in_compositionDefinition5969 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_implementsClause_in_compositionDefinition5981 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_compositionDefinition5992 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_compositionDefinition5996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5880E21411400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_compositionFeatureList_in_compositionDefinition5998 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_compositionDefinition6001 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_compositionDefinition6005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionFeature_in_compositionFeatureList6078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000082L,0x5880E21411400080L,0x000000000000003CL});
    public static final BitSet FOLLOW_intrinsicPrintProxy_in_compositionFeatureList6093 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicSleepWakeProxy_in_compositionFeatureList6103 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_intrinsicDynamicMemoryProxy_in_compositionFeatureList6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtExport_in_compositionFeature6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_compositionFeature6188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_compositionFeature6190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_compositionFeature6195 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_fcnBody_in_compositionFeature6197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinitionVoidOrCtor_in_compositionFeature6799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnDefinition_in_compositionFeature6836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDefinition_in_compositionFeature6864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_compositionFeature6876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionDecl_in_compositionFeature6888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_stmtImport6918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_importFrom_in_stmtImport6921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_stmtImport6942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtImport6944 = new BitSet(new long[]{0x0000000000001000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_metaArguments_in_stmtImport6988 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_importAs_in_stmtImport7018 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtImport7045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importFrom7148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_importFrom7178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importFrom7195 = new BitSet(new long[]{0x0000000000001000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_metaArguments_in_importFrom7238 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_importAs_in_importFrom7268 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_importFrom7270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_importAs7351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_importAs7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImports_in_importList7426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtImport_in_stmtImports7446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_importPrintImpl_in_importPrintIntrinsic7521 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_importPrintProtocol_in_importPrintIntrinsic7541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importSleepWakeProtocol_in_importSleepWakeIntrinsic7812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importDynamicMemoryProtocol_in_importDynamicMemoryIntrinsic7981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_meta8156 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_meta8193 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_meta8198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_metaParmsGen_in_meta8217 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_meta8234 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_meta8239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaParmGen_in_metaParmsGen8371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_metaParmsGen8386 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_NLL_in_metaParmsGen8401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_metaParmGen_in_metaParmsGen8421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_193_in_metaParmGen8492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_metaParmGen8494 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaParmGen8498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_metaParmGen8500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_metaParmGen8563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_metaParmGen8567 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_metaParmGen8570 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000100L,0x0010004000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_primitiveLit_in_metaParmGen8572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_metaArguments8725 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_metaArguments8727 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_metaArguments8730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_metaArguments8755 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x5010E04001400400L,0x000000000000001DL});
    public static final BitSet FOLLOW_metaArgumentList_in_metaArguments8759 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_metaArguments8762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaFirstArg_in_metaArgumentList8797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_metaArgument_in_metaArgumentList8800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_metaArg_in_metaFirstArg8839 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_metaFirstArg8841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaDelim_in_metaArgument8907 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x5010E04001400000L,0x000000000000001DL});
    public static final BitSet FOLLOW_metaArg_in_metaArgument8909 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_metaArgument8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_metaArgument8936 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_metaArgument8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_metaDelim8960 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_metaDelim8963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_metaArg8981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_metaArg8995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameScalar_in_typeName9017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameScalar9048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_typeNameScalar9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeName9095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_typeNameArray9139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeNameArr_in_typeNameArray9177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_userTypeNameArr9196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_meta_in_unitTypeDefinition9250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x020400040C000000L});
    public static final BitSet FOLLOW_moduleDefinition_in_unitTypeDefinition9292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_unitTypeDefinition9325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocolDefinition_in_unitTypeDefinition9346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compositionDefinition_in_unitTypeDefinition9368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumUnitDefinition_in_unitTypeDefinition9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_extendsClause9416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_extendsClause9418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_implementsClause9466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_implementsClause9468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_braceCloseNLL9528 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_braceCloseNLL9532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_braceCloseNLL9546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_braceOpenNLL9583 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_braceOpenNLL9587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_braceOpenNLL9600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOG_NOT_in_logicalNotOp9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_NOT_in_bitwiseNotOp9892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprList9912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_exprList9915 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprList9917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exprLogicalOr_in_expr9980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_exprQuestOp_in_expr9982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_exprQuestOp10006 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprQuestOp10008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_exprQuestOp10010 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprQuestOp10012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr10051 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_exprLogicalOr10080 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprLogicalAnd_in_exprLogicalOr10082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd10148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_exprLogicalAnd10172 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseOr_in_exprLogicalAnd10174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr10232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_exprBitwiseOr10253 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseXor_in_exprBitwiseOr10255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor10309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_exprBitwiseXor10330 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprBitwiseAnd_in_exprBitwiseXor10332 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd10386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_exprBitwiseAnd10407 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprEquality_in_exprBitwiseAnd10412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality10466 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_equalityOp_in_exprEquality10488 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprRelational_in_exprEquality10490 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational10544 = new BitSet(new long[]{0x1800000000000002L,0x0000000000003000L});
    public static final BitSet FOLLOW_relationalOp_in_exprRelational10566 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprShift_in_exprRelational10568 = new BitSet(new long[]{0x1800000000000002L,0x0000000000003000L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift10623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_shiftOp_in_exprShift10645 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAddSub_in_exprShift10648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub10703 = new BitSet(new long[]{0x0000000000000002L,0x0000000020008000L});
    public static final BitSet FOLLOW_addSubOp_in_exprAddSub10724 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprMultDiv_in_exprAddSub10729 = new BitSet(new long[]{0x0000000000000002L,0x0000000020008000L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv10787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001210L});
    public static final BitSet FOLLOW_multDivModOp_in_exprMultDiv10808 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprUnary_in_exprMultDiv10810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001210L});
    public static final BitSet FOLLOW_179_in_exprNew10870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_exprNew10872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_exprNew10874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_exprNew10876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_exprUnary10968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalNotOp_in_exprUnary10981 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprPrimary_in_exprUnary10983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseNotOp_in_exprUnary11023 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprPrimary_in_exprUnary11025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_exprUnary11066 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprPrimary_in_exprUnary11068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary11110 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprPrimary_in_exprUnary11112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprPrimary_in_exprUnary11157 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000040L});
    public static final BitSet FOLLOW_incDecOp_in_exprUnary11159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprPrimary_in_exprUnary11196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveLit_in_exprPrimary11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_exprPrimary11226 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_exprPrimary11228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_exprPrimary11230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_exprPrimary11271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDefinition11290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDefinition11292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinition11294 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinition11296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDefinitionVoidOrCtor11482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_in_fcnDefinitionVoidOrCtor11484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDefinitionVoidOrCtor11486 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_fcnBody_in_fcnDefinitionVoidOrCtor11488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_fcnAttr11687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800020000000000L});
    public static final BitSet FOLLOW_169_in_fcnAttr11705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0800020000000000L});
    public static final BitSet FOLLOW_NLL_in_fcnBody11738 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_fcnBody11742 = new BitSet(new long[]{0x4000000000013C00L,0x00000040880085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_fcnBody11745 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_fcnBody11749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDeclarationVoidOrCtor11783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_in_fcnDeclarationVoidOrCtor11785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDeclarationVoidOrCtor11788 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_fcnDeclarationVoidOrCtor11791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType11934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType12084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType12190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_fcnDeclaration12299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_fcnName_in_fcnDeclaration12309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_fcnDeclaration12312 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_fcnDeclaration12315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_fcnType_fcnName12455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_varArraySpec_in_fcnType_fcnName12457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName12459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnType_fcnName12563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_fcnType_fcnName12565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_formalParameterList12696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400100L,0x000000000000001EL});
    public static final BitSet FOLLOW_formalParameters_in_formalParameterList12698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_formalParameterList12700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters12733 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_formalParameters12736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_formalParameters12739 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000002L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_NLL_in_formalParameters12741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001EL});
    public static final BitSet FOLLOW_formalParameter_in_formalParameters12744 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_193_in_formalParameter12824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter12826 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter12830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_formalParameter12834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterArr_in_formalParameter12958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_formalParameter12972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_formalParameter12974 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameter12978 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_formalParameter12980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_formalParameterArr13035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_formalParameterArr13037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_formalParameterArr13039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_formalParameterArr13041 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_formalParameterArr13045 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_formalParameterArr13047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_fcnArgumentList13101 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_fcnArguments_in_fcnArgumentList13103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_fcnArgumentList13105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprList_in_fcnArguments13132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_varOrFcnOrArray13163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray13165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray13167 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_varOrFcnOrArray13262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varOrFcnOrArray13267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_varOrFcnOrArray13332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray13397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray13399 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray13464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_arrayAccess_in_varOrFcnOrArray13466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040880L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varOrFcnOrArray13468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_fieldOrArrayAccess_in_varOrFcnOrArray13471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varOrFcnOrArray13520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldAccess_in_fieldOrArrayAccess13570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_arrayAccess_in_fieldOrArrayAccess13574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040880L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldOrArrayAccess13576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_139_in_fieldAccess13611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess13616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_fieldAccess13618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_fieldAccess13686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_fieldAccess13691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_arrayAccess13728 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x00100040000A0080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprList_in_arrayAccess13734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_arrayAccess13740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpenNLL_in_stmtBlock13799 = new BitSet(new long[]{0x4000000000013C00L,0x00000040880085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtBlock13801 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_stmtBlock13803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_stmts13841 = new BitSet(new long[]{0x4000000000013402L,0x00000040880085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmtAssignInject_in_stmt13908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtInjection_in_stmt13926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBlock_in_stmt13937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPrint_in_stmt13948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtReturn_in_stmt13959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBreak_in_stmt13970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtContinue_in_stmt13981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtFor_in_stmt13992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtSwitch_in_stmt14003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDoWhile_in_stmt14015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtIf_in_stmt14026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtProvided_in_stmt14037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtWhile_in_stmt14048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDecl_in_stmt14074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDecl_in_stmt14095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssignVar_in_stmt14116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtBind_in_stmt14136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtPeg_in_stmt14156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclarationNew_in_stmt14181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_stmt14192 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmt14194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprChainedAssign_in_exprAssign14262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_exprAssign14276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprAssign14284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_exprChainedAssign14305 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_exprChainedAssign14307 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_exprChainedAssign14309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtAssignVar14371 = new BitSet(new long[]{0x00000000000403B0L,0x0000008100240800L});
    public static final BitSet FOLLOW_assign_in_stmtAssignVar14373 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_stmtAssignVar14375 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtAssignVar14377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_injectionCode_in_stmtAssignInject14429 = new BitSet(new long[]{0x00000000000403B0L,0x0000008100240800L});
    public static final BitSet FOLLOW_assign_in_stmtAssignInject14431 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtAssignInject14433 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtAssignInject14435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_assign14488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignOp_in_assign14492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtBind14525 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_stmtBind14527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_stmtBind14530 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtBind14536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_stmtPeg14614 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_stmtPeg14617 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_exprAssign_in_stmtPeg14620 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtPeg14626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItemList_in_printList14676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_printItem_in_printItemList14710 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_PLUS_in_printItemList14717 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_printItem_in_printItemList14719 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_primitiveLit_in_printItem14762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_printItem14777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_stmtPrint14802 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0031004800020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_stmtPrintTarget_in_stmtPrint14805 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000020000L,0x0000000000000001L});
    public static final BitSet FOLLOW_printList_in_stmtPrint14809 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtPrint14811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_stmtPrintTarget14883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_stmtPrintTarget14906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_stmtPrintTarget14931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_stmtReturn14984 = new BitSet(new long[]{0x4000000000012400L,0x00000042890085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtReturn15028 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtReturn15032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delim_in_stmtReturn15133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_stmtBreak15224 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtBreak15226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_stmtContinue15257 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtContinue15259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_stmtFor15289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_defaultLoopVar_in_stmtFor15291 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000082L,0x5000E00001420000L,0x000000000000001CL});
    public static final BitSet FOLLOW_stmtForInit_in_stmtFor15293 = new BitSet(new long[]{0x4000000000012400L,0x00000042880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_stmtForCond_in_stmtFor15295 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020180L,0x0000000000000001L});
    public static final BitSet FOLLOW_stmtForNext_in_stmtFor15297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtFor15299 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtFor15302 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtFor15306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond15359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForCond15384 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForCond15386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_defaultLoopVar15414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit15535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_stmtForInit15571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_stmtForInit15573 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_stmtForInit15575 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtForInit15577 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMI_in_stmtForInit15579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssignInject_in_stmtForInit15653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtAssignVar_in_stmtForInit15664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_stmtForNext15707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_stmtSwitch15732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtSwitch15734 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtSwitch15736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtSwitch15738 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtSwitch15741 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_braceOpenNLL_in_stmtSwitch15745 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000042000000L});
    public static final BitSet FOLLOW_stmtsCase_in_stmtSwitch15747 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_stmtDefault_in_stmtSwitch15749 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_braceCloseNLL_in_stmtSwitch15752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtCase_in_stmtsCase15794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_158_in_stmtDefault15827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_stmtDefault15832 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_NLL_in_stmtDefault15835 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtDefault15839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_stmtCase15887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_INT_LIT_in_stmtCase15890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_stmtCase15896 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_NLL_in_stmtCase15899 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtCase15903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_stmtCase15976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_stmtCase15979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_stmtCase15985 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_NLL_in_stmtCase15988 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0xF518E6C0B1C20080L,0x000000000000007DL});
    public static final BitSet FOLLOW_stmts_in_stmtCase15992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_stmtDoWhile16075 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtDoWhile16078 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtDoWhile16082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_stmtDoWhile16084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtDoWhile16086 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtDoWhile16088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtDoWhile16090 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtDoWhile16092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_stmtIf16131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtIf16133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_stmtsElif_in_stmtIf16135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtIf16137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_stmtIfBlock16179 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtIfBlock16181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtIfBlock16183 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtIfBlock16186 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtIfBlock16190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtElif_in_stmtsElif16215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_stmtElif16248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_stmtIfBlock_in_stmtElif16250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_stmtElse16283 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtElse16286 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtElse16290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_stmtProvided16313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtProvided16315 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtProvided16317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtProvided16319 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtProvided16322 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtProvided16326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_stmtElse_in_stmtProvided16329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_stmtWhile16377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_stmtWhile16379 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_stmtWhile16380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_stmtWhile16381 = new BitSet(new long[]{0x0000000000001000L,0x0000000201000000L});
    public static final BitSet FOLLOW_stmtWhile2_in_stmtWhile16383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_stmtWhile216416 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtWhile216419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_stmtWhile216454 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_stmtBlock_in_stmtWhile216459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmtDeclAttr_in_stmtDecl16479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_varDecl_in_stmtDecl16481 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_stmtDecl16483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_stmtDeclAttr16524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_stmtDeclAttr16542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_169_in_stmtDeclAttr16565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_varDeclarationNew_in_fieldDeclaration16618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_fieldDeclaration16629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_varDecl_in_fieldDeclaration16631 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_fieldDeclaration16633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAttr_in_varDeclaration16672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400080L,0x000000000000001CL});
    public static final BitSet FOLLOW_varDecl_in_varDeclaration16674 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_varDeclaration16676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_varAttr16707 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_varAttr16725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_169_in_varAttr16745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020010000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl16799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varArray_in_varDecl16820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varArray2_in_varDecl16841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef_in_varDecl16867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varFcnRef2_in_varDecl16896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclList_in_varDecl16916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_varDeclarationNew16955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varDeclarationNew16957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varDeclarationNew16959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varDeclarationNew16961 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_varDeclarationNew16964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_varDeclarationNew17236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_varDeclarationNew17238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_varDeclarationNew17240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varDeclarationNew17242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnArgumentList_in_varDeclarationNew17244 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_varDeclarationNew17247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_varFcnRef17528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_varFcnRef17531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef17533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_varFcnRef17536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef17539 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varFcnRef17542 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varFcnRef17544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_varFcnRef17563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef17565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef17568 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varFcnRef17571 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varFcnRef17573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_varFcnRef217627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_rtnType_in_varFcnRef217629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_varFcnRef217631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fcnRefTypeList_in_varFcnRef217633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_varFcnRef217635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varFcnRef217637 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASSIGN_in_varFcnRef217640 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varFcnRef217642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_rtnType17719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_fcnRefTypeList17740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400100L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnRefTypes_in_fcnRefTypeList17742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_fcnRefTypeList17744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes17767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_fcnRefTypes17770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_fcnRefTypes17772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_typeNameArray_in_varArray17842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varArray17854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_varArraySpec_in_varArray17865 = new BitSet(new long[]{0x0000000000000022L,0x0000000010000000L});
    public static final BitSet FOLLOW_varArrayInit_in_varArray17878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_varArray217978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_varArraySpec_in_varArray217990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varArray218004 = new BitSet(new long[]{0x0000000000000022L,0x0000000010000000L});
    public static final BitSet FOLLOW_varArrayInit_in_varArray218015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_varArraySpec18109 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x00100040000A0080L,0x0000000000000001L});
    public static final BitSet FOLLOW_varDim_in_varArraySpec18111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_varArraySpec18113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ASSIGN_in_varArrayInit18154 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_in_varArrayInit18156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PEG_in_varArrayInit18189 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_in_varArrayInit18191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_varDim18228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_initializer18282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprNew_in_initializer18298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braceOpenNLL_in_initializer18307 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_list_in_initializer18309 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_braceNLLClose_in_initializer18311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_initializer_list18338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_initializer_list18341 = new BitSet(new long[]{0x4000000000013400L,0x00000040890085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_NLL_in_initializer_list18343 = new BitSet(new long[]{0x4000000000013400L,0x00000040880085C2L,0x0018004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_initializer_in_initializer_list18346 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NLL_in_braceNLLClose18401 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_braceNLLClose18404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_braceNLLClose18415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varBuiltInType_in_varDeclList18445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varListBuiltInType_in_varDeclList18450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_varDeclList18461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varListUserDefType_in_varDeclList18466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinType_in_varBuiltInType18489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varInit2_in_varListBuiltInType18522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_varListBuiltInType18525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varInit2_in_varListBuiltInType18528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_varInit_in_varListUserDefType18554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_varListUserDefType18557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varInit_in_varListUserDefType18560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_varInit218601 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit218603 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varInit218605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit218656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit18714 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_varInit18716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_userTypeName_in_varInit18718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit18782 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_varInit18784 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varInit18786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit18839 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit18841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_exprNew_in_varInit18843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit18901 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_varInit18903 = new BitSet(new long[]{0x4000000000012400L,0x00000040880085C2L,0x0010004000020080L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_varInit18906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varInit18957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_builtinType19006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_builtinType19027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_builtinType19048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_builtinType19070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_builtinType19090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_builtinType19110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_builtinType19132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_builtinType19151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_builtinType19171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_builtinType19189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualName19240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_qualNameList_in_qualName19243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_qualNameList19278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualNameList19302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_146_in_arrayLit19362 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000080000L,0x0000000000000001L});
    public static final BitSet FOLLOW_arrayLitList_in_arrayLit19367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_arrayLit19372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList19406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_arrayLitList19412 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x0010004000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_arrayLitElem_in_arrayLitList19417 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_primitiveLit_in_arrayLitElem19459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedConstant_in_arrayLitElem19469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_namedConstant19488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_boolLit19512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_nullLit19539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_LIT_in_numLit19565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCT_LIT_in_numLit19583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_LIT_in_numLit19601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_LIT_in_numLit19619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolLit_in_primitiveLit19656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numLit_in_primitiveLit19681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullLit_in_primitiveLit19707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_primitiveLit19732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_in_primitiveLit19769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_stmtInjection19814 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_stmtInjection19824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_inject19889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_injectionCode19931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inject_in_injectionDecl19974 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_injectionDecl19993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_delim20062 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_delim20064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_delim20080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_delim20095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred1_pollen1601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_in_synpred1_pollen1603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred1_pollen1605 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred1_pollen1607 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred1_pollen1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred2_pollen1626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred2_pollen1628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred2_pollen1631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_synpred2_pollen1633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred2_pollen1637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred2_pollen1640 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred2_pollen1643 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred2_pollen1646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred3_pollen1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_synpred3_pollen1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred4_pollen5052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_in_synpred4_pollen5054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred4_pollen5056 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred4_pollen5058 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred4_pollen5061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred5_pollen5080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred5_pollen5082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred5_pollen5085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_synpred5_pollen5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred5_pollen5091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred5_pollen5094 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred5_pollen5097 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred5_pollen5100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synpred6_pollen5119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synpred6_pollen5123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_synpred6_pollen5125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred7_pollen5159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_synpred7_pollen5163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred8_pollen5532 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred8_pollen5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred9_pollen5868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_synpred9_pollen5872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred10_pollen5888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_in_synpred10_pollen5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred10_pollen5892 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred10_pollen5894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_synpred11_pollen6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred12_pollen6785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_fcnType_in_synpred12_pollen6787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred12_pollen6789 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred12_pollen6791 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred12_pollen6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fcnAttr_in_synpred13_pollen6812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred13_pollen6814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred13_pollen6816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040080L});
    public static final BitSet FOLLOW_146_in_synpred13_pollen6819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_synpred13_pollen6821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred13_pollen6825 = new BitSet(new long[]{0x0000000000001000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred13_pollen6828 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred13_pollen6831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred14_pollen6855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_synpred14_pollen6859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred15_pollen8715 = new BitSet(new long[]{0x0000000000000800L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred15_pollen8717 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_synpred15_pollen8720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metaDelim_in_synpred16_pollen8900 = new BitSet(new long[]{0x4000000000002000L,0x0000004088000102L,0x5010E04001400000L,0x000000000000001DL});
    public static final BitSet FOLLOW_metaArg_in_synpred16_pollen8902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_synpred17_pollen8928 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred17_pollen8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_synpred18_pollen9287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_synpred19_pollen9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_synpred20_pollen9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_synpred21_pollen9363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_synpred22_pollen9385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_CL_in_synpred23_pollen9521 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred23_pollen9523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BRACE_OP_in_synpred24_pollen9576 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred24_pollen9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred25_pollen11150 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000040L});
    public static final BitSet FOLLOW_incDecOp_in_synpred25_pollen11152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeNameArray_in_synpred26_pollen12447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred26_pollen12449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred27_pollen12950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred27_pollen12953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_synpred28_pollen13153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred28_pollen13155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred28_pollen13157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_synpred29_pollen13256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred29_pollen13258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred30_pollen13390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred30_pollen13392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred31_pollen13457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred31_pollen13459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_synpred32_pollen13599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred32_pollen13604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred32_pollen13606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_synpred33_pollen13901 = new BitSet(new long[]{0x00000000000403B0L,0x0000008100240800L});
    public static final BitSet FOLLOW_assign_in_synpred33_pollen13903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_synpred34_pollen13921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDecl_in_synpred36_pollen14088 = new BitSet(new long[]{0x0000000000000000L,0x0000000201000000L});
    public static final BitSet FOLLOW_delim_in_synpred36_pollen14090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred37_pollen14109 = new BitSet(new long[]{0x00000000000403B0L,0x0000008100240800L});
    public static final BitSet FOLLOW_assign_in_synpred37_pollen14111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualName_in_synpred38_pollen14129 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_synpred38_pollen14131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrFcnOrArray_in_synpred39_pollen14148 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_synpred39_pollen14151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synpred40_pollen14170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synpred40_pollen14174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_synpred40_pollen14176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprUnary_in_synpred41_pollen14254 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred41_pollen14256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synpred42_pollen14271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred44_pollen15562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred44_pollen15564 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred44_pollen15566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INJECT_in_synpred45_pollen15648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_synpred46_pollen15881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_INT_LIT_in_synpred46_pollen15883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synpred47_pollen16608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synpred47_pollen16612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_synpred47_pollen16614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred48_pollen16788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred48_pollen16790 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred48_pollen16793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred49_pollen16811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred49_pollen16813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred49_pollen16815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred50_pollen16833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_synpred50_pollen16835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred51_pollen16855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred51_pollen16859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred51_pollen16861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred52_pollen16883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred52_pollen16886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x5000E00001400000L,0x000000000000001CL});
    public static final BitSet FOLLOW_typeName_in_synpred52_pollen16888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred52_pollen16890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeName_in_synpred53_pollen16909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_varInit_in_synpred53_pollen16911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synpred54_pollen17229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_synpred54_pollen17231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synpred55_pollen18293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NLL_in_synpred56_pollen18394 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_BRACE_CL_in_synpred56_pollen18396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred57_pollen18595 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred57_pollen18597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred58_pollen18708 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_BIND_in_synpred58_pollen18710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred59_pollen18776 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PEG_in_synpred59_pollen18778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred60_pollen18832 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred60_pollen18834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_synpred60_pollen18836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred61_pollen18896 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred61_pollen18898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred62_pollen20055 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NLL_in_synpred62_pollen20057 = new BitSet(new long[]{0x0000000000000002L});

}