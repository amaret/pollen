Grammar testing.
Test grammar is NOT production grammar!
Create new tester.
Old grammar saved in directory OLD.
###################
### tst_codeunits.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 28 tests
-----------------------------------------------------------------------
28 failures found:
test1 (unit, line4) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT data) (E_IDENT test))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT data)) (E_IDENT Queue) (E_IDENT Queue) (D_META_ARGS uint8 10)) (S_IMPORT (E_IDENT pollen (E_IDENT data)) (E_IDENT Queue) (E_IDENT Queue1)) (S_IMPORT (E_IDENT mcu (E_IDENT localhost)) (E_IDENT Write) NIL)) (D_MODULE (QueueCapacity (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Queue)))) q) (D_VAR (T_USER_TYPE (E_IDENT Queue1) (D_META_ARGS bool (T_USER_TYPE (E_IDENT Queue) (D_META_ARGS uint8 10)))) q) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8 bool) (E_IDENT myfcn)) LIST (FCNBODY (LIST (S_RETURN (E_CONST 8) (E_CONST true))))))) null)

test2 (unit, line25) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT PB4) (E_IDENT D12)) (S_IMPORT (E_IDENT Mcu) (E_IDENT PB5) (E_IDENT D13)) (S_IMPORT (E_IDENT pollen (E_IDENT parts)) (E_IDENT Led) (E_IDENT Led) (D_META_ARGS false))) (D_COMPOSITION Duemilanove (LIST (export (E_IDENT Mcu)) (export (E_IDENT Led)) (export (E_IDENT D12)) (export (E_IDENT D13))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Duemilanove))) (T_USER_TYPE (E_IDENT Duemilanove))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT setSystemFrequency)) (LIST (E_CONST 16000000))) (E_CALL (E_IDENT Led (E_IDENT bindPin)) (LIST (E_IDENT D13))))))) null)

test3 (unit, line52) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_COMPOSITION Environment (LIST (export (E_IDENT GlobalInterrupts)) (export (E_IDENT Led)) (export (E_IDENT Mcu)) (export (E_IDENT Mcu (E_IDENT reset))) (export (E_IDENT Mcu (E_IDENT wait))) (export (E_IDENT Events (E_IDENT run))) (export (E_IDENT Events (E_IDENT post))) (export (E_IDENT Events (E_IDENT postFromInterrupt)))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Environment))) (T_USER_TYPE (E_IDENT Environment))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Events (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts))) (E_CALL (E_IDENT Time (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts))) (E_CALL (E_IDENT Time (E_IDENT bindTimerDriver)) (LIST (E_IDENT TD))))))) null)

test4 (unit, line82) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT distro (E_IDENT arduino))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT PB4) (E_IDENT D12)) (S_IMPORT (E_IDENT Mcu) (E_IDENT PB5) (E_IDENT D13)) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT Timer0)) (S_IMPORT (E_IDENT Mcu) (E_IDENT Uart) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT parts)) (E_IDENT Led) (E_IDENT Led) (D_META_ARGS false))) (D_COMPOSITION Board (LIST (export (E_IDENT Mcu)) (export (E_IDENT Timer0)) (export (E_IDENT Uart)) (export (E_IDENT Led)) (export (E_IDENT D12)) (export (E_IDENT D13))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Board))) (T_USER_TYPE (E_IDENT Board))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT setSystemFrequency)) (LIST (E_CONST 16000000))) (E_CALL (E_IDENT Led (E_IDENT bindPin)) (LIST (E_IDENT D13))))))) null)

test5 (unit, line113) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT distro (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin0) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Timer0) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Uart) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL)) (D_COMPOSITION Distro (LIST (export (E_IDENT Led)) (export (E_IDENT Mcu)) (export (E_IDENT Pin0)) (export (E_IDENT Uart))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Distro))) (T_USER_TYPE (E_IDENT Distro))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Events (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts))) (E_CALL (E_IDENT Time (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts))) (E_CALL (E_IDENT Time (E_IDENT bindTimerDriver)) (LIST (E_IDENT Timer0))) (E_CALL (E_IDENT Uart (E_IDENT setBaud)) (LIST (E_CONST 57600))))))) null)

test6 (unit, line143) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT distro (E_IDENT arduino))) LIST (D_MODULE (Lifecycle (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT reset))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT ready))) LIST (FCNBODY NIL)))) null)

test7 (unit, line186) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT P1_0) (E_IDENT Pin0)) (S_IMPORT (E_IDENT pollen (E_IDENT parts)) (E_IDENT Led) (E_IDENT Led) (D_META_ARGS false))) (D_COMPOSITION Board (LIST (export (E_IDENT Mcu)) (export (E_IDENT Pin0)) (export (E_IDENT Led))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Board))) (T_USER_TYPE (E_IDENT Board))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Led (E_IDENT bindPin)) (LIST (E_IDENT Pin0))))))) null)

test8 (unit, line206) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad))) (LIST (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin0) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL)) (D_COMPOSITION Distro (LIST (export (E_IDENT Mcu)) (export (E_IDENT Pin0))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Distro))) (T_USER_TYPE (E_IDENT Distro))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Events (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts))))))) null)

test9 (unit, line227) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT I2C) NIL)) (D_MODULE (MMA845x (D_VAR byte (REG_STATUS (E_CONST 0x00))) (D_VAR byte (REG_OUT_X_MSB (E_CONST 0x01))) (D_VAR byte (REG_OUT_X_LSB (E_CONST 0x02))) (D_VAR byte (REG_OUT_Y_MSB (E_CONST 0x03))) (D_VAR byte (REG_OUT_Y_LSB (E_CONST 0x04))) (D_VAR byte (REG_OUT_Z_MSB (E_CONST 0x05))) (D_VAR byte (REG_OUT_Z_LSB (E_CONST 0x06))) (D_VAR byte (REG_SYSMOD (E_CONST 0x0b))) (D_VAR byte (REG_INT_SOURCE (E_CONST 0x0c))) (D_VAR byte (REG_WHO_AM_I (E_CONST 0x0d))) (D_VAR byte (REG_XYZ_DATA_CFG (E_CONST 0xe))) (D_VAR byte (REG_HP_FILTER_CUTOFF (E_CONST 0x0f))) (D_VAR byte (REG_PL_STATUS (E_CONST 0x10))) (D_VAR byte (REG_PL_CFG (E_CONST 0x11))) (D_VAR byte (REG_PL_COUNT (E_CONST 0x12))) (D_VAR byte (REG_PL_BF_ZCOMP (E_CONST 0x13))) (D_VAR byte (REG_P_L_THS_REG (E_CONST 0x14))) (D_VAR byte (REG_FF_MT_CFG (E_CONST 0x15))) (D_VAR byte (REG_FF_MT_SRC (E_CONST 0x16))) (D_VAR byte (REG_FF_MT_THS (E_CONST 0x17))) (D_VAR byte (REG_FF_MT_COUNT (E_CONST 0x18))) (D_VAR byte (REG_TRANSIENT_CFG (E_CONST 0x1d))) (D_VAR byte (REG_TRANSIENT_SRC (E_CONST 0x1e))) (D_VAR byte (REG_TRANSIENT_THS (E_CONST 0x1f))) (D_VAR byte (REG_TRANSIENT_COUNT (E_CONST 0x20))) (D_VAR byte (REG_PULSE_CFG (E_CONST 0x21))) (D_VAR byte (REG_PULSE_SRC (E_CONST 0x22))) (D_VAR byte (REG_PULSE_THSX (E_CONST 0x23))) (D_VAR byte (REG_PULSE_THSY (E_CONST 0x24))) (D_VAR byte (REG_PULSE_THSZ (E_CONST 0x25))) (D_VAR byte (REG_PULSE_TMLT (E_CONST 0x26))) (D_VAR byte (REG_PULSE_LTCY (E_CONST 0x27))) (D_VAR byte (REG_PULSE_WIND (E_CONST 0x28))) (D_VAR byte (REG_ASLP_COUNT (E_CONST 0x29))) (D_VAR byte (REG_CTRL_REG1 (E_CONST 0x2a))) (D_VAR byte (REG_CTRL_REG2 (E_CONST 0x2b))) (D_VAR byte (REG_CTRL_REG3 (E_CONST 0x2c))) (D_VAR byte (REG_CTRL_REG4 (E_CONST 0x2d))) (D_VAR byte (REG_CTRL_REG5 (E_CONST 0x2e))) (D_VAR byte (REG_OFF_X (E_CONST 0x2f))) (D_VAR byte (REG_OFF_Y (E_CONST 0x30))) (D_VAR byte (REG_OFF_Z (E_CONST 0x31))) (D_VAR byte (FULL_SCALE_RANGE_2g (E_CONST 0x0))) (D_VAR byte (FULL_SCALE_RANGE_4g (E_CONST 0x1))) (D_VAR byte (FULL_SCALE_RANGE_8g (E_CONST 0x2))) (D_VAR uint8 (i2c_addr (E_CONST 0x1C))) (D_VAR int16 x) (D_VAR int16 y) (D_VAR int16 z) (D_VAR bool (dataMode (E_CONST false))) (D_VAR bool (highResolutionData (E_CONST true))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setI2CAddr)) (LIST (D_FORMAL uint8 address)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF i2c_addr) (E_IDENT address)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT dataMode)) (LIST (D_FORMAL bool highRes) (D_FORMAL uint8 gScaleRange)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST int16) (E_IDENT x)) LIST (FCNBODY (LIST (S_RETURN (E_SELF x))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST int16) (E_IDENT y)) LIST (FCNBODY (LIST (S_RETURN (E_SELF y))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST int16) (E_IDENT z)) LIST (FCNBODY (LIST (S_RETURN (E_SELF z))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT update)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT regRead)) (LIST (D_FORMAL byte reg) (D_FORMAL byte buf) (D_FORMAL byte (count (E_CONST 1)))) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT regWrite)) (LIST (D_FORMAL byte reg) (D_FORMAL byte val)) (FCNBODY NIL)))) null)

test10 (unit, line310) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Interrupt) NIL)) (D_META (string name) (string enableRegister) (string enableBit) (string clearRegister) (string clearBit)) (D_MODULE (InterruptMeta (implements Interrupt) (E_INJECT +{ #include <avr/io.h> }+) (E_INJECT +{ #include <avr/interrupt.h> }+) (E_INJECT +{ ISR( }+) (E_INJECT +{name}+) (E_INJECT +{ ) { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF h) (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF h) (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{enableRegister}+) ( (E_BINARY << (E_CONST 1) (E_INJECT +{enableBit}+)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT enabled)) LIST (FCNBODY (LIST (S_RETURN (E_BINARY & (E_INJECT +{enableRegister}+) ( (E_BINARY << (E_CONST 1) (E_INJECT +{enableBit}+)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT disable)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{enableRegister}+) ~ ( (E_BINARY << (E_CONST 1) (E_INJECT +{enableBit}+)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{clearRegister}+) ~ ( (E_BINARY << (E_CONST 1) (E_INJECT +{clearBit}+)) )))))) (D_VAR (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) (h (E_CONST 0))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT isr)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY != (E_IDENT h) (E_CONST null))) (S_BLOCK (LIST (E_CALL (E_IDENT h) NIL))))))))) null)

test11 (unit, line364) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Mcu) (E_IDENT McuI))) (D_MODULE (Atmega328p (implements McuI) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT reset)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT shutdown)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT wait)) (LIST (D_FORMAL uint32 us)) (FCNBODY (LIST (S_FOR NIL (E_BINARY > (E_IDENT us) (E_CONST 0)) (E_IDENT us) -- (S_BLOCK (LIST (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT nop)) LIST (FCNBODY (LIST (E_INJECT +{ asm(nop) }+)))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (S_RETURN (E_SELF sysFreq))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (S_RETURN (E_SELF sysFreq))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setSystemFrequency)) (LIST (D_FORMAL uint32 hz)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF sysFreq) (E_IDENT hz)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setSystemFrequency)) (LIST (D_FORMAL uint32 hz)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF sysFreq) (E_IDENT hz)))))) (D_VAR uint32 sysFreq))) null)

test12 (unit, line436) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) (E_IDENT GI))) (D_MODULE (GlobalInterrupts (implements GI) (E_INJECT +{ #include <avr/io.h>\n       #include <avr/interrupt.h> }+) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint16) (E_IDENT disable)) LIST (FCNBODY (LIST (D_VAR uint16 (key (E_BINARY & (E_INJECT +{SREG}+) ( (E_BINARY << (E_CONST 1) (E_CONST 7)) )))) (E_INJECT +{cli()}+) (S_RETURN (E_IDENT key))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST (FCNBODY (LIST (E_INJECT +{sei()}+)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT restore)) (LIST (D_FORMAL uint16 key)) (FCNBODY (LIST (S_IF (E_COND (E_BINARY != (E_IDENT key) (E_CONST 0))) (S_BLOCK (LIST (E_INJECT +{sei()}+))) (S_ELSE (S_BLOCK (LIST (E_INJECT +{cli()}+)))))))))) null)

test13 (unit, line466) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL)) (D_META (string (port \"\")) (string (ddr \"\")) (uint8 (pin 0))) (D_MODULE (GpioMeta (implements Gpio) (E_INJECT +{ #include <avr/io.h> }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT set)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{port}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{port}+) ~ ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT get)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST ( (E_BINARY & (E_INJECT +{port}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )) ) (E_CONST true) (E_CONST false)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY ^= (E_INJECT +{port}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT makeInput)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{ddr}+) ~ ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT isInput)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST ( (E_BINARY & (E_INJECT +{ddr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )) ) (E_CONST false) (E_CONST true)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT makeOutput)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{ddr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT isOutput)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST ( (E_BINARY & (E_INJECT +{ddr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )) ) (E_CONST true) (E_CONST false)))))))) null)

test14 (unit, line500) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT I2C) (E_IDENT I2CI))) (D_MODULE (I2C (implements I2CI) (D_VAR uint32 (slowestSlaveFrequency (E_CONST 100000))) (D_VAR uint32 (mcuFrequency (E_CONST 16000000))) (D_VAR uint8 (MT_SLA_ACK (E_CONST 0x18))) (D_VAR uint8 (MR_SLA_ACK (E_CONST 0x40))) (D_VAR uint8 (MT_DATA_ACK (E_CONST 0x28))) (D_VAR uint8 (START (E_CONST 0x08))) (D_VAR uint8 (RESTART (E_CONST 0x10))) (E_INJECT +{ #include <avr/io.h> }+) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT ready)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST ( (E_BINARY & (E_INJECT +{TWCR}+) ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWINT}+)) )) ) (E_CONST true) (E_CONST false)))))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT I2C))) (T_USER_TYPE (E_IDENT I2C))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enableAsMaster)) LIST (FCNBODY (LIST (D_VAR uint32 (sclFrequency (E_CONST 0))) (D_VAR uint8 (prescaler (E_CONST 0))) (E_INJECT +{PRR &= ~(1<<PRTWI)}+) (S_ASSIGN (E_BINARY = (E_IDENT sclFrequency) (E_BINARY / ( (E_BINARY - ( (E_BINARY / (E_IDENT mcuFrequency) (E_IDENT slowestSlaveFrequency)) ) (E_CONST 16)) ) (E_CONST 2)))) (S_WHILE (S_BLOCK (LIST (S_ASSIGN (E_BINARY >>= (E_IDENT sclFrequency) (E_CONST 2))) (E_IDENT prescaler) ++))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWSR}+) ( (E_BINARY << (E_IDENT prescaler) (E_INJECT +{TWPS0}+)) ))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWBR}+) (E_IDENT sclFrequency))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWSR}+) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWBR}+) (E_CONST 72))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWCR}+) (E_BINARY | ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWEN}+)) ) ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWEA}+)) ))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enableAsSlave)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT get)) (LIST (D_FORMAL bool ack)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{TWCR}+) (E_BINARY | (E_BINARY | ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWINT}+)) ) ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWEN}+)) )) ( (E_QUEST (E_IDENT ack) ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWEA}+)) ) (E_CONST 0)) )))) (S_WHILE (S_BLOCK NIL)) (S_RETURN (E_INJECT +{TWDR}+))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT put)) (LIST (D_FORMAL uint8 data)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{TWDR}+) (E_IDENT data))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWCR}+) (E_BINARY | (E_BINARY | ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWINT}+)) ) ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWEN}+)) )) ( (E_BINARY << (E_CONST 1) (E_INJECT +{TWEA}+)) )))) (S_WHILE (S_BLOCK NIL)) (S_IF (E_COND (E_BINARY != ( (E_BINARY & (E_INJECT +{TWSR}+) (E_CONST 0xF8)) ) (E_IDENT MT_DATA_ACK))) (S_BLOCK (LIST (S_RETURN (E_CONST 1))))) (S_RETURN (E_CONST 0))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT start)) (LIST (D_FORMAL uint8 address) (D_FORMAL bool write)) (FCNBODY (LIST (E_INJECT +{TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWEA)}+) (S_WHILE (S_BLOCK NIL)) (S_IF (E_COND (E_BINARY && ( (E_BINARY != ( (E_BINARY & (E_INJECT +{TWSR}+) (E_CONST 0xF8)) ) (E_IDENT START)) ) ( (E_BINARY != ( (E_BINARY & (E_INJECT +{TWSR}+) (E_CONST 0xF8)) ) (E_IDENT RESTART)) ))) (S_BLOCK (LIST (S_RETURN (E_CONST 1))))) (S_ASSIGN (E_BINARY = (E_INJECT +{TWDR}+) (E_BINARY | ( (E_BINARY << (E_IDENT address) (E_CONST 1)) ) ( (E_QUEST (E_IDENT write) (E_CONST 0) (E_CONST 1)) )))) (E_INJECT +{TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA)}+) (S_WHILE (S_BLOCK NIL)) (S_IF (E_COND (E_BINARY && ( (E_BINARY != ( (E_BINARY & (E_INJECT +{TWSR}+) (E_CONST 0xF8)) ) (E_IDENT MT_SLA_ACK)) ) ( (E_BINARY != ( (E_BINARY & (E_INJECT +{TWSR}+) (E_CONST 0xF8)) ) (E_IDENT MR_SLA_ACK)) ))) (S_BLOCK (LIST (S_RETURN (E_CONST 2))))) (S_RETURN (E_CONST 0))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (E_INJECT +{TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO) | (1 << TWEA)}+)))))) null)

test15 (unit, line619) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega)) (E_IDENT InterruptMeta) (E_IDENT Timer0MatchA) (D_META_ARGS \"TIMER0_COMPA_vect\" \"TIMSK0\" \"OCIE0A\" \"TIFR0\" \"OCF0A\"))) (D_COMPOSITION Interrupts (LIST (export (E_IDENT Timer0MatchA)))) null)

test16 (unit, line630) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT NIL (E_IDENT Atmega328p) NIL) (S_IMPORT NIL (E_IDENT GlobalInterrupts) NIL) (S_IMPORT NIL (E_IDENT Interrupts) NIL) (S_IMPORT NIL (E_IDENT TimerMilli8BitTimer0) NIL) (S_IMPORT NIL (E_IDENT Uart) NIL) (S_IMPORT NIL (E_IDENT GpioMeta) (E_IDENT PB3) (D_META_ARGS \"PORTB\" \"DDRB\" 3)) (S_IMPORT NIL (E_IDENT GpioMeta) (E_IDENT PB4) (D_META_ARGS \"PORTB\" \"DDRB\" 4)) (S_IMPORT NIL (E_IDENT GpioMeta) (E_IDENT PB5) (D_META_ARGS \"PORTB\" \"DDRB\" 5))) (D_COMPOSITION Mcu (LIST (export (E_IDENT Atmega328p (E_IDENT reset))) (export (E_IDENT Atmega328p (E_IDENT shutdown))) (export (E_IDENT Atmega328p (E_IDENT wait))) (export (E_IDENT Atmega328p (E_IDENT nop)))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (S_RETURN (E_CALL (E_IDENT Atmega328p (E_IDENT getSystemFrequency)) NIL))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setSystemFrequency)) (LIST (D_FORMAL uint32 hz)) (FCNBODY (LIST (E_CALL (E_IDENT Atmega328p (E_IDENT setSystemFrequency)) (LIST (E_IDENT hz)))))) (LIST (export (E_IDENT GlobalInterrupts)) (export (E_IDENT Interrupts)) (export (E_IDENT TimerMilli8BitTimer0)) (export (E_IDENT Uart)) (export (E_IDENT PB3)) (export (E_IDENT PB4)) (export (E_IDENT PB5)))) null)

test17 (unit, line683) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT NIL (E_IDENT Atmega328p) NIL) (S_IMPORT NIL (E_IDENT Interrupts) NIL) (S_IMPORT (E_IDENT Interrupts) (E_IDENT Timer0MatchA) (E_IDENT Interrupt)) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL)) (D_MODULE (TimerMilli8BitTimer0 (implements TimerDriver) (E_INJECT +{ #include <avr/io.h> }+) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilli8BitTimer0))) (T_USER_TYPE (E_IDENT TimerMilli8BitTimer0))) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT ticksPerMs) (E_BINARY / (E_CALL (E_IDENT Atmega328p (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_CONST 64) (E_CONST 1000)) ))))))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilli8BitTimer0))) (T_USER_TYPE (E_IDENT TimerMilli8BitTimer0))) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{TCCR0A}+) (E_IDENT TIMER0_MODE_CTC))) (S_ASSIGN (E_BINARY = (E_INJECT +{TCCR0B}+) (E_IDENT TIMER0_STOP))) (S_ASSIGN (E_BINARY = (E_INJECT +{OCR0A}+) (E_IDENT ticksPerMs)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) (h (E_CONST null)))) (FCNBODY (LIST (E_CALL (E_IDENT Interrupt (E_IDENT setHandler)) (LIST (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT start)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{TCNT0}+) (E_CONST 0))) (E_CALL (E_IDENT Interrupt (E_IDENT clear)) NIL) (E_CALL (E_IDENT Interrupt (E_IDENT enable)) NIL) (S_ASSIGN (E_BINARY = (E_INJECT +{TCCR0B}+) (E_IDENT TIMER0_DIV64)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (E_CALL (E_IDENT Interrupt (E_IDENT disable)) NIL) (E_CALL (E_IDENT Interrupt (E_IDENT clear)) NIL) (S_ASSIGN (E_BINARY = (E_INJECT +{TCCR0B}+) (E_IDENT TIMER0_STOP)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST (FCNBODY (LIST (S_RETURN (E_BINARY && (E_BINARY != (E_INJECT +{TCCR0B}+) (E_CONST 0)) (E_CALL (E_IDENT Interrupt (E_IDENT enabled)) NIL)))))) (D_VAR uint16 (ticksPerMs (E_CONST 0))) (D_VAR uint8 (TIMER0_MODE_CTC (E_CONST 0x02))) (D_VAR uint8 (TIMER0_STOP (E_CONST 0x00))) (D_VAR uint8 (TIMER0_DIV1 (E_CONST 0x01))) (D_VAR uint8 (TIMER0_DIV8 (E_CONST 0x02))) (D_VAR uint8 (TIMER0_DIV64 (E_CONST 0x03))) (D_VAR uint8 (TIMER0_DIV256 (E_CONST 0x04))))) null)

test18 (unit, line746) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Uart) (E_IDENT UartI)) (S_IMPORT NIL (E_IDENT Atmega328p) (E_IDENT Mcu))) (D_MODULE (Uart (implements UartI) (E_INJECT +{ #include <avr/io.h> }+) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Uart))) (T_USER_TYPE (E_IDENT Uart))) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT baudh) ( (E_BINARY >> ( (E_BINARY - ( (E_BINARY / (E_CALL (E_IDENT Mcu (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_IDENT baudRate) (E_CONST 16)) )) ) (E_CONST 1)) ) (E_CONST 8)) ))) (S_ASSIGN (E_BINARY = (E_IDENT baudl) ( ( (E_BINARY - ( (E_BINARY / (E_CALL (E_IDENT Mcu (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_IDENT baudRate) (E_CONST 16)) )) ) (E_CONST 1)) ) )))))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Uart))) (T_USER_TYPE (E_IDENT Uart))) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{UBRR0H}+) (E_IDENT baudh))) (S_ASSIGN (E_BINARY = (E_INJECT +{UBRR0L}+) (E_IDENT baudl))) (E_INJECT +{UCSR0B |= (1 << RXEN0) | (1 << TXEN0)}+) (E_INJECT +{UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01)}+)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT put)) (LIST (D_FORMAL uint8 data)) (FCNBODY (LIST (S_WHILE (S_BLOCK NIL)) (S_ASSIGN (E_BINARY = (E_INJECT +{UDR0}+) (E_IDENT data)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT get)) LIST (FCNBODY (LIST (S_WHILE (S_BLOCK NIL)) (S_RETURN (E_INJECT +{UDR0}+))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT flush)) LIST (FCNBODY (LIST (D_VAR uint8 (dummy (E_CONST 0))) (S_WHILE (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT dummy) (E_INJECT +{UDR0}+))))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setBaud)) (LIST (D_FORMAL uint32 baud)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT baudRate) (E_IDENT baud))) (S_ASSIGN (E_BINARY = (E_INJECT +{UBRR0H}+) ( (E_BINARY >> ( (E_BINARY - ( (E_BINARY / (E_CALL (E_IDENT Mcu (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_IDENT baudRate) (E_CONST 16)) )) ) (E_CONST 1)) ) (E_CONST 8)) ))) (S_ASSIGN (E_BINARY = (E_INJECT +{UBRR0L}+) ( ( (E_BINARY - ( (E_BINARY / (E_CALL (E_IDENT Mcu (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_IDENT baudRate) (E_CONST 16)) )) ) (E_CONST 1)) ) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setBaud)) (LIST (D_FORMAL uint32 baud)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT baudRate) (E_IDENT baud))) (S_ASSIGN (E_BINARY = (E_IDENT baudh) ( (E_BINARY >> ( (E_BINARY - ( (E_BINARY / (E_CALL (E_IDENT Mcu (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_IDENT baudRate) (E_CONST 16)) )) ) (E_CONST 1)) ) (E_CONST 8)) ))) (S_ASSIGN (E_BINARY = (E_IDENT baudl) ( ( (E_BINARY - ( (E_BINARY / (E_CALL (E_IDENT Mcu (E_IDENT getSystemFrequency)) NIL) ( (E_BINARY * (E_IDENT baudRate) (E_CONST 16)) )) ) (E_CONST 1)) ) )))))) (D_VAR uint32 (baudRate (E_CONST 9600))) (D_VAR uint8 (dataBits (E_CONST 8))) (D_VAR uint8 (stopBits (E_CONST 1))) (D_VAR uint8 (parity (E_CONST 0))) (D_VAR uint8 baudh) (D_VAR uint8 baudl))) null)

test19 (unit, line811) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Wait) (E_IDENT WaitI))) (D_MODULE (Wait (implements WaitI) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Wait))) (T_USER_TYPE (E_IDENT Wait))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT us)) (LIST (D_FORMAL uint32 microseconds)) (FCNBODY (LIST (S_FOR (S_DECL (uint32 i (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_IDENT microseconds)) (E_IDENT i) ++ (S_BLOCK (LIST (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+) (E_INJECT +{ asm(nop) }+))))))))) null)

test20 (unit, line852) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT localhost))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) (E_IDENT GI))) (D_MODULE (GlobalInterrupts (implements GI) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT disable)) LIST (FCNBODY (LIST (S_RETURN (E_CONST false))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT restore)) (LIST (D_FORMAL bool state)) (FCNBODY NIL)))) null)

test21 (unit, line878) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT localhost))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Mcu) (E_IDENT McuI))) (D_MODULE (Mcu (implements McuI) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT reset)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT shutdown)) LIST (FCNBODY NIL)))) null)

test22 (unit, line893) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT localhost))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Wait) (E_IDENT WaitI))) (D_MODULE (Wait (implements WaitI) (E_INJECT +{ #include <unistd.h> }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT us)) (LIST (D_FORMAL uint32 microseconds)) (FCNBODY (LIST (E_INJECT +{ usleep(microseconds) }+)))))) null)

test23 (unit, line907) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT localhost))) LIST (D_MODULE (Write (E_INJECT +{ #include <stdio.h> }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT outs)) (LIST (D_FORMAL string s)) (FCNBODY (LIST (E_INJECT +{printf(\"s\" s)}+)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT outi)) (LIST (D_FORMAL uint32 i)) (FCNBODY (LIST (E_INJECT +{printf(\"i\" i)}+)))))) null)

test24 (unit, line927) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) (E_IDENT GI))) (D_MODULE (GlobalInterrupts (implements GI) (E_INJECT +{ #include <msp430g2231.h> }+) (E_INJECT +{ #include <legacymsp430.h> }+) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT disable)) LIST (FCNBODY (LIST (D_VAR uint16 (x (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_INJECT +{x}+) (E_INJECT +{ __read_status_register() }+))) (E_INJECT +{dint()}+) (S_RETURN (E_QUEST (E_BINARY != ( (E_BINARY & (E_IDENT x) (E_INJECT +{GIE}+)) ) (E_CONST 0)) (E_CONST true) (E_CONST false)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST (FCNBODY (LIST (E_INJECT +{eint()}+)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT restore)) (LIST (D_FORMAL bool state)) (FCNBODY (LIST (S_IF (E_COND (E_BINARY == (E_IDENT state) (E_CONST true))) (S_BLOCK (LIST (E_CALL (E_IDENT enable) NIL))))))))) null)

test25 (unit, line962) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL)) (D_META (string part) (string dirr) (string inr) (string outr) (uint8 pin)) (D_MODULE (GpioMeta (implements Gpio) (E_INJECT +{ #include <msp430g2231.h> }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT set)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{outr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{outr}+) ~ ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY ^= (E_INJECT +{outr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT get)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST (E_BINARY & (E_INJECT +{inr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )) (E_CONST true) (E_CONST false)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT makeInput)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{dirr}+) ~ ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT isInput)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST (E_BINARY & (E_INJECT +{dirr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )) (E_CONST false) (E_CONST true)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT makeOutput)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{dirr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT isOutput)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST (E_BINARY & (E_INJECT +{dirr}+) ( (E_BINARY << (E_CONST 1) (E_IDENT pin)) )) (E_CONST true) (E_CONST false)))))))) null)

test26 (unit, line1009) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT I2C) NIL)) (D_MODULE (I2CUsi (implements I2C) (D_VAR uint32 (slowestSlaveFrequency (E_CONST 100000))) (D_VAR uint32 (mcuFreq (E_CONST 1000000))) (D_VAR uint8 divisor) (D_VAR uint8 source) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT I2CUsi))) (T_USER_TYPE (E_IDENT I2CUsi))) LIST (FCNBODY (LIST (D_VAR uint32 SCLFreq) (S_ASSIGN (E_BINARY = (E_IDENT SCLFreq) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_INJECT +{P1OUT}+) (E_CONST 0xC0))) (S_ASSIGN (E_BINARY |= (E_INJECT +{P1REN}+) (E_CONST 0xC0))) (S_ASSIGN (E_BINARY = (E_INJECT +{P1DIR}+) (E_CONST 0xFF))) (S_ASSIGN (E_BINARY = (E_IDENT source) (E_INJECT +{USISSEL_2}+))) (S_ASSIGN (E_BINARY = (E_IDENT SCLFreq) (E_IDENT mcuFreq))) (S_ASSIGN (E_BINARY = (E_IDENT divisor) (E_CONST 0))) (S_WHILE (S_BLOCK (LIST (S_ASSIGN (E_BINARY >>= (E_IDENT SCLFreq) (E_CONST 1))) (E_IDENT divisor) ++))) (S_ASSIGN (E_BINARY <<= (E_IDENT divisor) (E_CONST 5)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enableAsMaster)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{ADC10AE0}+) (E_CONST 0))) (E_INJECT +{USICTL0    = USIPE7 | USIPE6 | USIMST | USISWRST}+) (E_INJECT +{USICTL1    = USII2C}+) (S_ASSIGN (E_BINARY = (E_INJECT +{USICKCTL}+) (E_BINARY | (E_BINARY | (E_IDENT divisor) (E_IDENT source)) (E_INJECT +{USICKPL}+)))) (S_ASSIGN (E_BINARY = (E_INJECT +{USICNT}+) (E_CONST 0))) (E_INJECT +{USICTL0   &= ~USISWRST}+) (E_INJECT +{USICTL1   &= ~USIIFG}+)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enableAsSlave)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT get)) (LIST (D_FORMAL bool ack)) (FCNBODY (LIST (D_VAR uint8 data) (E_INJECT +{USICTL0 &= ~USIOE}+) (E_INJECT +{USICNT = (USICNT & 0xE0) | 0x08}+) (S_WHILE (S_BLOCK NIL)) (S_ASSIGN (E_BINARY = (E_IDENT data) (E_INJECT +{USISRL}+))) (S_ASSIGN (E_BINARY = (E_INJECT +{USISRL}+) (E_QUEST (E_IDENT ack) (E_CONST 0x00) (E_CONST 0x80)))) (E_INJECT +{USICTL0 |= USIOE}+) (E_INJECT +{USICNT = (USICNT & 0xE0) | 0x01}+) (S_WHILE (S_BLOCK NIL)) (S_RETURN (E_IDENT data))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT put)) (LIST (D_FORMAL uint8 data)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{USISRL}+) (E_IDENT data))) (E_INJECT +{USICTL0 |= USIOE}+) (E_INJECT +{USICNT = (USICNT & 0xE0) | 0x08}+) (S_WHILE (S_BLOCK NIL)) (E_INJECT +{USICTL0 &= ~USIOE}+) (E_INJECT +{USICNT = (USICNT & 0xE0) | 0x01}+) (S_WHILE (S_BLOCK NIL)) (S_RETURN (E_QUEST ( (E_BINARY & (E_INJECT +{USISRL}+) (E_CONST 0x01)) ) (E_CONST true) (E_CONST false)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT start)) (LIST (D_FORMAL uint8 address) (D_FORMAL bool write)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{USISRL}+) (E_CONST 0))) (E_INJECT +{USICTL0 |= USIOE | USIGE}+) (E_INJECT +{USICTL0 &= ~USIGE}+) (S_RETURN (E_CALL (E_IDENT put) (LIST (E_BINARY | ( (E_BINARY << (E_IDENT address) (E_CONST 1)) ) ( (E_QUEST (E_IDENT write) (E_CONST 0) (E_CONST 1)) )))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (E_INJECT +{USICTL0 |= USIOE}+) (S_ASSIGN (E_BINARY = (E_INJECT +{USISRL}+) (E_CONST 0))) (E_INJECT +{USICNT = (USICNT & 0xE0) | 0x01}+) (S_WHILE (S_BLOCK NIL)) (S_ASSIGN (E_BINARY = (E_INJECT +{USISRL}+) (E_CONST 0xFF))) (E_INJECT +{USICTL0 |= USIGE}+) (E_INJECT +{USICTL0 &= ~USIOE & ~USIGE}+)))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT ready)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST (E_INJECT +{(USICTL1 & USIIFG)}+) (E_CONST true) (E_CONST false)))))))) null)

test27 (unit, line1158) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Interrupt) NIL)) (D_META (string part) (string vector) (string enableRegister) (string enableBit) (string clearRegister) (string clearBit)) (D_MODULE (InterruptMeta (implements Interrupt) (E_INJECT +{ #include <msp430g2231.h> }+) (E_INJECT +{ #include <legacymsp430.h> }+) (D_VAR string (v2 (E_BINARY + (E_IDENT vector) (E_CONST \"_ISR() {\")))) (E_INJECT +{ interrupt (}+) (E_INJECT +{vector}+) (E_INJECT +{) }+) (E_INJECT +{vector + \"_ISR() {\"\t\n   \t+{ isr() }+) (E_INJECT +{;} }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF h) (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF h) (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{enableRegister}+) ( (E_BINARY << (E_CONST 1) (E_INJECT +{enableBit}+)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT enabled)) LIST (FCNBODY (LIST (S_RETURN (E_BINARY & (E_INJECT +{enableRegister}+) ( (E_BINARY << (E_CONST 1) (E_INJECT +{enableBit}+)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT disable)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{enableRegister}+) ~ ( (E_BINARY << (E_CONST 1) (E_INJECT +{enableBit}+)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{clearRegister}+) ~ ( (E_BINARY << (E_CONST 1) (E_INJECT +{clearBit}+)) )))))) (D_VAR (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) (h (E_CONST 0))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT isr)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY != (E_IDENT h) (E_CONST null))) (S_BLOCK (LIST (E_CALL (E_IDENT h) NIL))))))))) null)

test28 (unit, line1216) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Mcu) NIL)) (D_PROTOCOL (Msp430 (extends Mcu) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint32) (E_IDENT getMasterClock)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSubMasterClock)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint32) (E_IDENT getAuxiliaryClock)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setMasterClock)) (LIST (D_FORMAL uint32 freq))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setSubMasterClock)) (LIST (D_FORMAL uint32 freq))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setAuxiliaryClock)) (LIST (D_FORMAL uint32 freq))))) null)


Tests run: 28, Failures: 28
###################
### tst_codeunits2.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 34 tests
-----------------------------------------------------------------------
34 failures found:
test1 (unit, line4) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Interrupt) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL)) (D_MODULE (TimerA0Interrupt (implements Interrupt) (D_VAR (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h) (E_INJECT +{ #include <msp430g2231.h> }+) (E_INJECT +{ #include <legacymsp430.h> }+) (E_INJECT +{ interrupt (TIMERA0_VECTOR) TimerA0Interrupt_ISR() { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF h) (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF h) (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY |= (E_INJECT +{TACCTL0}+) ( (E_BINARY << (E_CONST 1) (E_CONST 4)) )))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT enabled)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST (E_BINARY & (E_INJECT +{TACCTL0}+) ( (E_BINARY << (E_CONST 1) (E_CONST 4)) )) (E_CONST true) (E_CONST false)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT disable)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{TACCTL0}+) ~ ( (E_BINARY << (E_CONST 1) (E_CONST 4)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY &= (E_INJECT +{TACCTL0}+) ~ ( (E_BINARY << (E_CONST 1) (E_CONST 0)) )))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT isr)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY != (E_IDENT h) (E_CONST null))) (S_BLOCK (LIST (E_CALL (E_IDENT h) NIL))))))))) null)

test2 (unit, line47) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL) (S_IMPORT NIL (E_IDENT TimerA0Interrupt) (E_IDENT Interrupt))) (D_MODULE (TimerMilliA0 (implements TimerDriver) (E_INJECT +{ #include <msp430g2231.h> }+) (D_VAR uint16 (ticksPerMs (E_CONST 1000))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilliA0))) (T_USER_TYPE (E_IDENT TimerMilliA0))) LIST (FCNBODY (LIST (E_INJECT +{TACTL = TASSEL_2 + MC_0}+) (S_ASSIGN (E_BINARY = (E_INJECT +{TACCR0}+) (E_IDENT ticksPerMs)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) (h (E_CONST null)))) (FCNBODY (LIST (E_CALL (E_IDENT Interrupt (E_IDENT setHandler)) (LIST (E_IDENT h)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT start)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_INJECT +{TAR}+) (E_CONST 0))) (E_CALL (E_IDENT Interrupt (E_IDENT clear)) NIL) (E_CALL (E_IDENT Interrupt (E_IDENT enable)) NIL) (E_INJECT +{TACTL |= MC_1}+)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (E_CALL (E_IDENT Interrupt (E_IDENT disable)) NIL) (E_CALL (E_IDENT Interrupt (E_IDENT clear)) NIL) (D_VAR uint16 (mask ~ ( (E_BINARY << (E_CONST 3) (E_CONST 4)) ))) (S_ASSIGN (E_BINARY &= (E_INJECT +{TACTL}+) (E_IDENT mask)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST (FCNBODY (LIST (S_RETURN (E_QUEST ( (E_BINARY && (E_INJECT +{TACTL & MC_1}+) (E_CALL (E_IDENT Interrupt (E_IDENT enabled)) NIL)) ) (E_CONST true) (E_CONST false)))))))) null)

test3 (unit, line98) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Timer) (E_IDENT TimerI)) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8)) (S_IMPORT NIL (E_IDENT TimerMilliA0) (E_IDENT TA0))) (D_MODULE (TimerMilli (implements TimerI) (D_VAR (T_USER_TYPE (E_IDENT Event)) event) (D_VAR uint16 duration) (D_VAR uint16 current) (D_VAR bool repeat) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilli))) (T_USER_TYPE (E_IDENT TimerMilli))) LIST (FCNBODY (LIST (E_CALL (E_IDENT TA0 (E_IDENT setHandler)) (LIST (E_IDENT timerInterrupt)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT start)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) onTick) (D_FORMAL uint16 duration) (D_FORMAL bool (repeat (E_CONST true)))) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF event) (E_IDENT onTick))) (S_ASSIGN (E_BINARY = (E_SELF duration) (E_IDENT duration))) (S_ASSIGN (E_BINARY = (E_SELF repeat) (E_IDENT repeat))) (S_ASSIGN (E_BINARY = (E_SELF current) (E_CONST 0))) (E_CALL (E_IDENT TA0 (E_IDENT start)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (E_CALL (E_IDENT TA0 (E_IDENT stop)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT periodic)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT repeat))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST (FCNBODY (LIST (S_RETURN (E_CALL (E_IDENT TA0 (E_IDENT running)) NIL))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint16) (E_IDENT ticksPerSecond)) LIST (FCNBODY (LIST (S_RETURN (E_CONST 1000))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT timerInterrupt)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY == ++ (E_IDENT current) (E_IDENT duration))) (S_BLOCK (LIST (S_IF (E_COND (E_BINARY == (E_IDENT repeat) (E_CONST true))) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT current) (E_CONST 0))))) (S_ELSE (S_BLOCK (LIST (E_CALL (E_IDENT TA0 (E_IDENT stop)) NIL))))) (S_IF (E_COND (E_BINARY != (E_IDENT event) (E_CONST 0))) (S_BLOCK (LIST (E_CALL (E_IDENT Events (E_IDENT postFromInterrupt)) (LIST (E_IDENT event)))))))))))))) null)

test4 (unit, line153) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Wait) (E_IDENT WaitI))) (D_MODULE (Wait (implements WaitI) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT us)) (LIST (D_FORMAL uint32 microseconds)) (FCNBODY (LIST (D_VAR uint32 t) (S_FOR (S_DECL (uint32 i (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_BINARY + ( (E_BINARY / (E_IDENT microseconds) (E_CONST 10)) ) (E_CONST 1))) (E_IDENT i) ++ (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT t) (E_CONST 0))))))))))) null)

test5 (unit, line180) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT InterruptMeta) (E_IDENT GpioP1) (D_META_ARGS NIL)) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT InterruptMeta) (E_IDENT GpioP2) (D_META_ARGS NIL))) (D_COMPOSITION Interrupts (LIST (export (E_IDENT GpioP1)) (export (E_IDENT GpioP2)))) null)

test6 (unit, line193) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231))) (LIST (S_IMPORT NIL (E_IDENT Msp430g2231) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT TimerMilliA0) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT GpioMeta) (E_IDENT P1_0) (D_META_ARGS \"msp430g2231.h\" \"P1DIR\" \"P1IN\" \"P1OUT\" 0)) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT GpioMeta) (E_IDENT P1_6) (D_META_ARGS \"msp430g2231.h\" \"P1DIR\" \"P1IN\" \"P1OUT\" 6))) (D_COMPOSITION Mcu (LIST (export (E_IDENT Msp430g2231 (E_IDENT reset))) (export (E_IDENT Msp430g2231 (E_IDENT shutdown))) (export (E_IDENT Msp430g2231 (E_IDENT wait))) (export (E_IDENT Msp430g2231 (E_IDENT nop))) (export (E_IDENT GlobalInterrupts)) (export (E_IDENT TimerMilliA0)) (export (E_IDENT P1_0)) (export (E_IDENT P1_6)))) null)

test7 (unit, line233) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Mcu) (E_IDENT McuI)) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT Wait) NIL)) (D_MODULE (Msp430g2231 (implements McuI) (D_VAR uint32 (mclkFrequency (E_CONST 1000000))) (D_VAR uint32 (smclkFrequency (E_CONST 1000000))) (D_VAR uint32 (aclkFrequency (E_CONST 0))) (E_INJECT +{ #include <msp430g2231.h> }+) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT reset)) LIST (FCNBODY (LIST (E_INJECT +{WDTCTL = WDTPW | WDTHOLD}+) (E_INJECT +{BCSCTL1 = CALBC1_1MHZ}+) (E_INJECT +{DCOCTL = CALDCO_1MHZ}+) (S_IF (E_COND (E_BINARY == (E_IDENT mclkFrequency) (E_CONST 1000000))) (S_BLOCK (LIST (S_IF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 500000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_1}+))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 250000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_2}+)))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 125000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_3}+))))))) (S_ELIF (E_COND (E_BINARY == (E_IDENT mclkFrequency) (E_CONST 500000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVM_1}+) (S_IF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 250000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_1}+))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 125000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_2}+)))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 62500))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_3}+)))))))) (S_ELIF (E_COND (E_BINARY == (E_IDENT mclkFrequency) (E_CONST 250000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVM_2}+) (S_IF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 125000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_1}+))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 62500))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_2}+)))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 31250))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_3}+)))))))) (S_ELIF (E_COND (E_BINARY == (E_IDENT mclkFrequency) (E_CONST 125000))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVM_3}+) (S_IF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 62500))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_1}+))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 31250))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_2}+)))) (S_ELIF (E_COND (E_BINARY == (E_IDENT smclkFrequency) (E_CONST 15625))) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_3}+)))))))) (S_ELSE (S_BLOCK NIL)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT shutdown)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT wait)) (LIST (D_FORMAL uint32 us)) (FCNBODY (LIST (E_CALL (E_IDENT Wait (E_IDENT us)) (LIST (E_IDENT us)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT nop)) LIST (FCNBODY (LIST (E_INJECT +{ asm(\"nop\") }+)))))) null)

test8 (unit, line329) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Uart) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL)) (D_MODULE (SoftwareUart (implements Uart) (D_VAR (T_USER_TYPE (E_IDENT TimerDriver)) (Timer (E_CONST 0))) (D_VAR (T_USER_TYPE (E_IDENT Gpio)) (RxPin (E_CONST 0))) (D_VAR (T_USER_TYPE (E_IDENT Gpio)) (TxPin (E_CONST 0))) (D_VAR uint32 (baudRate (E_CONST 9600))) (D_VAR uint8 (dataBits (E_CONST 8))) (D_VAR uint8 (stopBits (E_CONST 1))) (D_VAR uint8 (parity (E_CONST 0))) (D_VAR uint8 baudh) (D_VAR uint8 baudl) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT SoftwareUart))) (T_USER_TYPE (E_IDENT SoftwareUart))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindInterfaces)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT TimerDriver)) TD) (D_FORMAL (T_USER_TYPE (E_IDENT Gpio)) Rx) (D_FORMAL (T_USER_TYPE (E_IDENT Gpio)) Tx)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT Timer) (E_IDENT TD))) (S_ASSIGN (E_BINARY = (E_IDENT RxPin) (E_IDENT Rx))) (S_ASSIGN (E_BINARY = (E_IDENT TxPin) (E_IDENT Tx)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT put)) (LIST (D_FORMAL uint8 data)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT get)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT flush)) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setBaud)) (LIST (D_FORMAL uint32 baud)) (FCNBODY NIL)))) null)

test9 (unit, line373) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT board (E_IDENT ti))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT P1_0) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT parts)) (E_IDENT Led) (E_IDENT Led) (D_META_ARGS false))) (D_COMPOSITION LaunchPad (LIST (export (E_IDENT Mcu)) (export (E_IDENT Led)) (export (E_IDENT P1_0))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT LaunchPad))) (T_USER_TYPE (E_IDENT LaunchPad))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Led (E_IDENT bindPin)) (LIST (E_IDENT P1_0))))))) null)

test10 (unit, line394) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT data))) LIST (D_META (type T) (uint8 cap)) (D_CLASS (Queue (D_VAR uint8 (capacity (E_IDENT cap))) (D_ARR (T_USER_TYPE (E_IDENT T)) elements (LIST (E_IDENT capacity))) (D_VAR uint8 (head (E_CONST 0))) (D_VAR uint8 (tail (E_CONST 0))) (D_VAR uint8 (num (E_CONST 0))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Queue))) (T_USER_TYPE (E_IDENT Queue))) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF head) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_SELF tail) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_SELF num) (E_CONST 0)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setCapacity)) (LIST (D_FORMAL uint8 cap)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF capacity) (E_IDENT cap)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT enqueue)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT T)) t)) (FCNBODY (LIST (S_IF (E_COND (E_BINARY < (E_IDENT num) (E_IDENT capacity))) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT elements) (E_INDEX (LIST (E_IDENT tail))) (E_IDENT t))) (E_IDENT num) ++ (E_IDENT tail) ++ (S_IF (E_COND (E_BINARY == (E_IDENT tail) (E_IDENT capacity))) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT tail) (E_CONST 0)))))) (S_RETURN (E_CONST true)))) (S_ELSE (S_BLOCK (LIST (S_RETURN (E_CONST false))))))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST (T_USER_TYPE (E_IDENT T))) (E_IDENT dequeue)) LIST (FCNBODY (LIST (D_VAR (T_USER_TYPE (E_IDENT T)) (t (E_CONST 0))) (S_IF (E_COND (E_BINARY > (E_IDENT num) (E_CONST 0))) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT t) (E_IDENT elements) (E_INDEX (LIST (E_IDENT head))))) (E_IDENT head) ++ (S_IF (E_COND (E_BINARY == (E_IDENT head) (E_IDENT capacity))) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT head) (E_CONST 0)))))) (E_IDENT num) --))) (S_RETURN (E_IDENT t))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT length)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT num))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT getCapacity)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT capacity))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT getCapacity)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT capacity))))))) null)

test11 (unit, line461) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT events))) (LIST (S_IMPORT NIL (E_IDENT Event) (E_IDENT AE) (D_META_ARGS (T_USER_TYPE (E_IDENT any)))) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT data)) (E_IDENT Queue) (E_IDENT AEQueue) (D_META_ARGS (T_USER_TYPE (E_IDENT AE)) 10))) (D_MODULE (Dispatcher (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindGlobalInterrupts)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT GlobalInterrupts)) gi)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT GI) (E_IDENT gi)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT post)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT AE)) e)) (FCNBODY (LIST (D_VAR bool (on (E_CALL (E_IDENT GI (E_IDENT disable)) NIL))) (E_CALL (E_IDENT events (E_IDENT enqueue)) (LIST (E_IDENT e))) (E_CALL (E_IDENT GI (E_IDENT restore)) (LIST (E_IDENT on)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT postFromInterrupt)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT AE)) e)) (FCNBODY (LIST (E_CALL (E_IDENT events (E_IDENT enqueue)) (LIST (E_IDENT e)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT run)) LIST (FCNBODY (LIST (E_CALL (E_IDENT GI (E_IDENT enable)) NIL) (S_WHILE (S_BLOCK (LIST (D_VAR bool (on (E_CALL (E_IDENT GI (E_IDENT disable)) NIL))) (D_VAR (T_USER_TYPE (E_IDENT AE)) (e (E_CALL (E_IDENT events (E_IDENT dequeue)) NIL))) (E_CALL (E_IDENT GI (E_IDENT restore)) (LIST (E_IDENT on))) (S_IF (E_COND (E_BINARY != (E_IDENT e) (E_CONST null))) (S_BLOCK (LIST (E_CALL (E_IDENT e (E_IDENT handle)) NIL)))))))))) (D_VAR (T_USER_TYPE (E_IDENT GlobalInterrupts)) GI) (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT AEQueue)))) events))) null)

test12 (unit, line519) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT events))) LIST (D_META (type T)) (D_PROTOCOL (EventHandler (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT handle)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT T)) e))))) null)

test13 (unit, line532) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT events))) (LIST (S_IMPORT NIL (E_IDENT EventHandler) (E_IDENT EH) (D_META_ARGS (T_USER_TYPE (E_IDENT any))))) (D_META (type (T uint8))) (D_CLASS (Event (D_VAR uint8 (priority (E_CONST 0))) (D_VAR (T_USER_TYPE (E_IDENT EH (E_IDENT handle))) (handler (E_CONST 0))) (D_VAR (T_USER_TYPE (E_IDENT T)) (data (E_CONST 0))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Event))) (T_USER_TYPE (E_IDENT Event))) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT EH (E_IDENT handle))) (handler (E_CONST 0))) (D_FORMAL (T_USER_TYPE (E_IDENT T)) (data (E_CONST 0))) (D_FORMAL uint8 (priority (E_CONST 0)))) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF handler) (E_IDENT handler))) (S_ASSIGN (E_BINARY = (E_SELF data) (E_IDENT data))) (S_ASSIGN (E_BINARY = (E_SELF priority) (E_IDENT priority)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint8) (E_IDENT getPriority)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT priority))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setPriority)) (LIST (D_FORMAL uint8 priority)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF priority) (E_IDENT priority)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST (T_USER_TYPE (E_IDENT EH (E_IDENT handle)))) (E_IDENT getHandler)) LIST (FCNBODY (LIST (S_RETURN (E_SELF handler))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT EH (E_IDENT handle))) handler)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF handler) (E_IDENT handler)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST (T_USER_TYPE (E_IDENT T))) (E_IDENT getData)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT data))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setData)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT T)) data)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF data) (E_IDENT data)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT handle)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY != (E_IDENT handler) (E_CONST null))) (S_BLOCK (LIST (E_CALL (E_IDENT handler) (LIST E_SELF)))))))))) null)

test14 (unit, line570) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT events))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT NIL (E_IDENT Dispatcher) NIL)) (D_COMPOSITION Events (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindGlobalInterrupts)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT GlobalInterrupts)) gi)) (FCNBODY (LIST (E_CALL (E_IDENT Dispatcher (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT gi)))))) (LIST (export (E_IDENT Dispatcher (E_IDENT post))) (export (E_IDENT Dispatcher (E_IDENT postFromInterrupt))) (export (E_IDENT Dispatcher (E_IDENT run))))) null)

test15 (unit, line588) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (GlobalInterrupts (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT disable)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT restore)) (LIST (D_FORMAL bool state))))) null)

test16 (unit, line616) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (Gpio (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT set)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT get)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT makeInput)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT isInput)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT makeOutput)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT isOutput)) LIST))) null)

test17 (unit, line643) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (Handler (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT handle)) LIST))) null)

test18 (unit, line660) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (I2C (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT enableAsMaster)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT enableAsSlave)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint8) (E_IDENT get)) (LIST (D_FORMAL bool ack))) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint8) (E_IDENT put)) (LIST (D_FORMAL uint8 data))) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint8) (E_IDENT start)) (LIST (D_FORMAL uint8 address) (D_FORMAL bool write))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST))) null)

test19 (unit, line690) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) (LIST (S_IMPORT NIL (E_IDENT Handler) NIL)) (D_PROTOCOL (Interrupt (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT enable)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT enabled)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT disable)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT clear)) LIST))) null)

test20 (unit, line718) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (Led (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT on)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT off)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT isOn)) LIST))) null)

test21 (unit, line734) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (Mcu (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT reset)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT shutdown)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT wait)) (LIST (D_FORMAL uint32 us))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT nop)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setSystemFrequency)) (LIST (D_FORMAL uint32 hz))))) null)

test22 (unit, line762) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) (LIST (S_IMPORT NIL (E_IDENT Handler) NIL)) (D_PROTOCOL (TimerDriver (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) (h (E_CONST null))))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT start)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST))) null)

test23 (unit, line781) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS (T_USER_TYPE (E_IDENT any))))) (D_PROTOCOL (Timer (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT repeats)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint16) (E_IDENT ticksPerSecond)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT start)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) onTick) (D_FORMAL uint16 duration) (D_FORMAL bool (repeat (E_CONST true))))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST))) null)

test24 (unit, line800) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (Uart (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT put)) (LIST (D_FORMAL uint8 data))) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint8) (E_IDENT get)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT flush)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setBaud)) (LIST (D_FORMAL uint32 baud))))) null)

test25 (unit, line819) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT interfaces))) LIST (D_PROTOCOL (Wait (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT us)) (LIST (D_FORMAL uint32 dt))))) null)

test26 (unit, line832) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL)) (D_META (bool (isActiveLow true))) (D_MODULE (Led (D_VAR (T_USER_TYPE (E_IDENT Gpio)) LedPin) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Led))) (T_USER_TYPE (E_IDENT Led))) LIST (FCNBODY (LIST (E_CALL (E_IDENT LedPin (E_IDENT clear)) NIL) (E_CALL (E_IDENT LedPin (E_IDENT makeOutput)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindPin)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Gpio)) p)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT LedPin) (E_IDENT p)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST (FCNBODY (LIST (E_CALL (E_IDENT LedPin (E_IDENT toggle)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT on)) LIST (FCNBODY (LIST (S_PROVIDED (E_BINARY == (E_IDENT isActiveLow) (E_CONST false)) (S_BLOCK (LIST (E_CALL (E_IDENT LedPin (E_IDENT set)) NIL))) (S_ELSE (S_BLOCK (LIST (E_CALL (E_IDENT LedPin (E_IDENT clear)) NIL)))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT off)) LIST (FCNBODY (LIST (S_PROVIDED (E_BINARY == (E_IDENT isActiveLow) (E_CONST false)) (S_BLOCK (LIST (E_CALL (E_IDENT LedPin (E_IDENT clear)) NIL))) (S_ELSE (S_BLOCK (LIST (E_CALL (E_IDENT LedPin (E_IDENT set)) NIL)))))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT isOn)) LIST (FCNBODY (LIST (S_PROVIDED (E_BINARY == (E_IDENT isActiveLow) (E_CONST false)) (S_BLOCK (LIST (S_RETURN (E_BINARY == (E_CALL (E_IDENT LedPin (E_IDENT get)) NIL) (E_CONST false))))) (S_ELSE (S_BLOCK (LIST (S_RETURN (E_BINARY == (E_CALL (E_IDENT LedPin (E_IDENT get)) NIL) (E_CONST true)))))))))))) null)

test27 (unit, line878) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT time))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL) (S_IMPORT NIL (E_IDENT TimerMilli) NIL)) (D_COMPOSITION Time (LIST (export (E_IDENT TimerMilli))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindGlobalInterrupts)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT GlobalInterrupts)) gi)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindTimerDriver)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT TimerDriver)) t)) (FCNBODY (LIST (E_CALL (E_IDENT TimerMilli (E_IDENT bindTimerDriver)) (LIST (E_IDENT t))))))) null)

test28 (unit, line898) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Timer) (E_IDENT TimerI)) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8))) (D_MODULE (TimerManager (D_CLASS (Timer (implements TimerI) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT init)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT id) (E_IDENT numTimers))) (E_IDENT numTimers) ++ (S_ASSIGN (E_BINARY = (E_IDENT repeat) (E_CONST false))) (S_PRINT (LIST (E_CONST \"TIMER INIT\")))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT repeats)) LIST (FCNBODY (LIST (S_RETURN (E_IDENT repeat))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST (FCNBODY (LIST (S_RETURN (E_BINARY != (E_IDENT timers) (E_INDEX (LIST (E_IDENT id))) (E_CONST 0)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint16) (E_IDENT ticksPerSecond)) LIST (FCNBODY (LIST (S_RETURN (E_CONST 1000))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT start)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e) (D_FORMAL uint16 d) (D_FORMAL bool (r (E_CONST true)))) (FCNBODY (LIST (D_VAR bool (state (E_CALL (E_IDENT gint (E_IDENT disable)) NIL))) (S_IF (E_COND ! (E_CALL (E_IDENT running) NIL)) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT expired) (E_IDENT e))) (S_ASSIGN (E_BINARY = (E_IDENT duration) (E_IDENT d))) (S_ASSIGN (E_BINARY = (E_IDENT elapsed) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_IDENT repeat) (E_IDENT r))) (S_ASSIGN (E_BINARY = (E_IDENT timers) (E_INDEX (LIST (E_IDENT id))) E_SELF))))) (E_CALL (E_IDENT gint (E_IDENT restore)) (LIST (E_IDENT state))) (S_IF (E_COND ! (E_CALL (E_IDENT hw_timer (E_IDENT running)) NIL)) (S_BLOCK (LIST (E_CALL (E_IDENT hw_timer (E_IDENT start)) NIL))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (D_VAR bool (state (E_CALL (E_IDENT gint (E_IDENT disable)) NIL))) (S_ASSIGN (E_BINARY = (E_IDENT timers) (E_INDEX (LIST (E_IDENT id))) (E_CONST null))) (E_CALL (E_IDENT gint (E_IDENT restore)) (LIST (E_IDENT state)))))) (D_VAR uint8 id) (D_VAR (T_USER_TYPE (E_IDENT Event)) expired) (D_VAR uint32 duration) (D_VAR uint32 elapsed) (D_VAR bool repeat))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindGlobalInterrupts)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT GlobalInterrupts)) gi)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT gint) (E_IDENT gi)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindTimerDriver)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT TimerDriver)) t)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT hw_timer) (E_IDENT t)))))) (D_VAR (T_USER_TYPE (E_IDENT GlobalInterrupts)) gint) (D_VAR (T_USER_TYPE (E_IDENT TimerDriver)) hw_timer) (D_VAR uint8 (numTimers (E_CONST 0))) (D_ARR (T_USER_TYPE (E_IDENT Timer)) timers (LIST (E_IDENT numTimers))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT timerISR)) LIST (FCNBODY (LIST (D_VAR bool (off (E_CONST true))) (S_FOR (S_DECL (uint8 i (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_IDENT numTimers)) (E_IDENT i) ++ (S_BLOCK (LIST (S_IF (E_COND (E_BINARY != (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_CONST 0))) (S_BLOCK (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT elapsed) ++ (S_IF (E_COND (E_BINARY == (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT elapsed) (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT duration))) (S_BLOCK (LIST (S_IF (E_COND (E_BINARY != (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT expired) (E_CONST 0))) (S_BLOCK (LIST (E_CALL (E_IDENT Events (E_IDENT postFromInterrupt)) (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT expired))) (S_IF (E_COND (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT repeat)) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT elapsed) (E_CONST 0))))) (S_ELSE (S_BLOCK (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_CALL stop NIL))))))) (S_ELSE (S_BLOCK (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_CALL stop NIL)))))))) (S_ASSIGN (E_BINARY = (E_IDENT off) (E_CONST false))))))))) (S_IF (E_COND (E_IDENT off)) (S_BLOCK (LIST (E_CALL (E_IDENT hw_timer (E_IDENT stop)) NIL))))))))) null)

test29 (unit, line1001) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Timer) (E_IDENT TimerI)) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8))) (D_MODULE (TimerManager (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindTimerDriver)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT TimerDriver)) t)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT hw_timer) (E_IDENT t)))))) (D_VAR (T_USER_TYPE (E_IDENT GlobalInterrupts)) gint) (D_VAR (T_USER_TYPE (E_IDENT TimerDriver)) hw_timer) (D_VAR uint8 (numTimers (E_CONST 0))) (D_ARR (T_USER_TYPE (E_IDENT Timer)) timers (LIST (E_IDENT numTimers))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT timerISR)) LIST (FCNBODY (LIST (D_VAR bool (off (E_CONST true))) (S_FOR (S_DECL (uint8 i (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_IDENT numTimers)) (E_IDENT i) ++ (S_BLOCK (LIST (S_IF (E_COND (E_BINARY != (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_CONST 0))) (S_BLOCK (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT elapsed) ++ (S_IF (E_COND (E_BINARY == (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT elapsed) (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT duration))) (S_BLOCK (LIST (S_IF (E_COND (E_BINARY != (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT expired) (E_CONST 0))) (S_BLOCK (LIST (E_CALL (E_IDENT Events (E_IDENT postFromInterrupt)) (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT expired))) (S_IF (E_COND (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT repeat)) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_IDENT elapsed) (E_CONST 0))))) (S_ELSE (S_BLOCK (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_CALL stop NIL))))))) (S_ELSE (S_BLOCK (LIST (E_IDENT timers) (E_INDEX (LIST (E_IDENT i))) (E_CALL stop NIL)))))))) (S_ASSIGN (E_BINARY = (E_IDENT off) (E_CONST false))))))))) (S_IF (E_COND (E_IDENT off)) (S_BLOCK (LIST (E_CALL (E_IDENT hw_timer (E_IDENT stop)) NIL))))))))) null)

test30 (unit, line1054) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT time))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL)) (D_PROTOCOL (TimerMilli (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT start)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setHandlerH)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h))))) null)

test31 (unit, line1070) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT time))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Handler) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT TimerDriver) NIL)) (D_MODULE (TimerMilli (D_VAR (T_USER_TYPE (E_IDENT TimerDriver)) timer) (D_VAR uint16 (count (E_CONST 0))) (D_VAR uint16 (duration (E_CONST 0))) (D_VAR bool (repeat (E_CONST true))) (D_VAR (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) clientTick) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilli))) (T_USER_TYPE (E_IDENT TimerMilli))) LIST (FCNBODY (LIST (E_CALL (E_IDENT timer (E_IDENT setHandler)) (LIST (E_IDENT timerTick)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindTimerDriver)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT TimerDriver)) td)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF timer) (E_IDENT td)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT start)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h) (D_FORMAL uint16 duration) (D_FORMAL bool (repeat (E_CONST true)))) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF clientTick) (E_IDENT h))) (S_ASSIGN (E_BINARY = (E_SELF count) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_SELF duration) (E_IDENT duration))) (S_ASSIGN (E_BINARY = (E_SELF repeat) (E_IDENT repeat))) (E_CALL (E_IDENT timer (E_IDENT start)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (E_CALL (E_IDENT timer (E_IDENT stop)) NIL) (S_ASSIGN (E_BINARY = (E_SELF duration) (E_CONST 0)))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST (FCNBODY (LIST (S_RETURN (E_BINARY && (E_BINARY != (E_IDENT duration) (E_CONST 0)) (E_CALL (E_IDENT timer (E_IDENT running)) NIL)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT timerTick)) LIST (FCNBODY (LIST ++ (E_IDENT count) (S_IF (E_COND (E_BINARY == (E_IDENT count) (E_IDENT duration))) (S_BLOCK (LIST (S_IF (E_COND (E_BINARY != (E_IDENT clientTick) (E_CONST 0))) (S_BLOCK (LIST (E_CALL (E_IDENT clientTick) NIL)))) (S_ASSIGN (E_BINARY = (E_IDENT count) (E_CONST 0))) (S_IF (E_COND ! (E_IDENT repeat)) (S_BLOCK (LIST (E_CALL (E_IDENT stop) NIL)))))))))))) null)

test32 (unit, line1122) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT time))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8)) (S_IMPORT NIL (E_IDENT TimerManager) NIL)) (D_CLASS (Timer (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Timer))) (T_USER_TYPE (E_IDENT Timer))) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT active) (E_CONST 0))) (S_ASSIGN (E_BINARY = (E_IDENT repeat) (E_CONST 0)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT start)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e) (D_FORMAL uint32 duration) (D_FORMAL bool (repeat (E_CONST true)))) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF e) (E_IDENT e))) (S_ASSIGN (E_BINARY = (E_SELF duration) (E_IDENT duration))) (S_ASSIGN (E_BINARY = (E_SELF repeat) (E_IDENT repeat))) (S_ASSIGN (E_BINARY = (E_SELF active) (E_CONST true)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT stop)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_SELF active) (E_CONST false)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT tick)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY == (E_IDENT active) (E_CONST true))) (S_BLOCK (LIST (E_IDENT elapsed) ++ (S_IF (E_COND (E_BINARY == (E_IDENT elapsed) (E_IDENT duration))) (S_BLOCK (LIST (S_IF (E_COND (E_BINARY != (E_IDENT e) (E_CONST 0))) (S_BLOCK (LIST (E_CALL (E_IDENT Events (E_IDENT post)) (LIST (E_IDENT e)))))) (S_IF (E_COND (E_BINARY == (E_IDENT repeat) (E_CONST true))) (S_BLOCK (LIST (S_ASSIGN (E_BINARY = (E_IDENT elapsed) (E_CONST 0))))) (S_ELSE (S_BLOCK (LIST (E_CALL (E_IDENT stop) NIL)))))))))))))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT running)) LIST (FCNBODY (LIST (S_RETURN (E_SELF active))))) (D_VAR (T_USER_TYPE (E_IDENT Event)) e) (D_VAR uint32 duration) (D_VAR uint32 elapsed) (D_VAR bool repeat) (D_VAR bool active))) null)

test33 (unit, line1180) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT cc (E_IDENT arduino)) (E_IDENT Environment) (E_IDENT Env)) (S_IMPORT (E_IDENT Env) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT TimerMilli) NIL)) (D_MODULE (BlinkMilliEvents (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e)) (FCNBODY (LIST (E_CALL (E_IDENT Led (E_IDENT toggle)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT tick)) LIST (FCNBODY (LIST (E_CALL (E_IDENT Env (E_IDENT postFromInterrupt)) (LIST (E_IDENT e)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT toggle))) (E_CALL (E_IDENT TimerMilli (E_IDENT start)) (LIST (E_IDENT tick) (E_CONST 1000))) (E_CALL (E_IDENT Env (E_IDENT run)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT reset))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Env (E_IDENT reset)) NIL)))))) null)

test34 (unit, line1206) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT cc (E_IDENT arduino)) (E_IDENT Environment) (E_IDENT Env)) (S_IMPORT (E_IDENT Env) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT TimerMilli) NIL)) (D_MODULE (BlinkMilli (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT madams_chkArray)) LIST (FCNBODY (LIST (D_ARR uint8 arr (LIST (E_CONST 8))) (D_ARR uint8 arr2d (LIST (E_CONST 8) (E_CONST 2)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST (FCNBODY (LIST (E_CALL (E_IDENT Led (E_IDENT toggle)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT TimerMilli (E_IDENT start)) (LIST (E_IDENT toggle) (E_CONST 50))) (E_CALL (E_IDENT Env (E_IDENT GlobalInterrupts) (E_IDENT enable)) NIL) (S_WHILE (S_BLOCK NIL))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT reset))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Env (E_IDENT reset)) NIL)))))) null)


Tests run: 34, Failures: 34
###################
### tst_codeunits3.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 30 tests
-----------------------------------------------------------------------
30 failures found:
test1 (unit, line4) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT cc (E_IDENT arduino)) (E_IDENT Environment) (E_IDENT Env)) (S_IMPORT (E_IDENT Env) (E_IDENT Led) NIL)) (D_MODULE (Blink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Led (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Env (E_IDENT wait)) (LIST (E_CONST 500000))))))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT reset))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Env (E_IDENT reset)) NIL)))))) null)

test2 (unit, line21) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT board (E_IDENT ti)) (E_IDENT LaunchPad) (E_IDENT Hw)) (S_IMPORT (E_IDENT Hw) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilliA0) (E_IDENT TD)) (S_IMPORT (E_IDENT Hw) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL)) (D_COMPOSITION Board (LIST (export (E_IDENT Led)) (export (E_IDENT Mcu))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Board))) (T_USER_TYPE (E_IDENT Board))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Time (E_IDENT bindGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts))) (E_CALL (E_IDENT Time (E_IDENT bindTimerDriver)) (LIST (E_IDENT TD))))))) null)

test3 (unit, line47) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin0) NIL)) (D_MODULE (BoardWaitBlink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin0 (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin0 (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 50000))))))))))) null)

test4 (unit, line65) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Pin0) NIL)) (D_MODULE (DistroWaitBlink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin0 (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin0 (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 500000))))))))))) null)

test5 (unit, line83) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Uart) NIL)) (D_MODULE (UartHello (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Uart (E_IDENT put)) (LIST (E_CONST 'H'))) (E_CALL (E_IDENT Uart (E_IDENT put)) (LIST (E_CONST 'e'))) (E_CALL (E_IDENT Uart (E_IDENT put)) (LIST (E_CONST 'l'))) (E_CALL (E_IDENT Uart (E_IDENT put)) (LIST (E_CONST 'l'))) (E_CALL (E_IDENT Uart (E_IDENT put)) (LIST (E_CONST 'o'))) (E_CALL (E_IDENT Uart (E_IDENT put)) (LIST (E_CONST '!')))))))) null)

test6 (unit, line116) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin0) NIL)) (D_MODULE (BoardWaitBlink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin0 (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin0 (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 500000))))))))))) null)

test7 (unit, line134) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Pin0) NIL)) (D_MODULE (DistroWaitBlink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin0 (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin0 (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 50000))))))))))) null)

test8 (unit, line152) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p) (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin0) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p)) (E_IDENT TimerMilli8BitTimer0) (E_IDENT Timer))) (D_MODULE (TimerInterruptTest (D_VAR uint16 (count (E_CONST 0))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Timer (E_IDENT setHandler)) (LIST (E_IDENT blink))) (E_CALL (E_IDENT Pin0 (E_IDENT makeOutput)) NIL) (E_CALL (E_IDENT Timer (E_IDENT start)) NIL) (E_CALL (E_IDENT GlobalInterrupts (E_IDENT enable)) NIL) (S_WHILE (S_BLOCK NIL))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT blink)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY == ++ (E_IDENT count) (E_CONST 75))) (S_BLOCK (LIST (E_CALL (E_IDENT Pin0 (E_IDENT toggle)) NIL) (S_ASSIGN (E_BINARY = (E_IDENT count) (E_CONST 0))))))))))) null)

test9 (unit, line186) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT P1_0) (E_IDENT Pin)) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) (E_IDENT GI)) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT TimerMilliA0) (E_IDENT TA0))) (D_MODULE (TimerMilliA0Test (D_VAR uint32 (counter (E_CONST 0))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilliA0Test))) (T_USER_TYPE (E_IDENT TimerMilliA0Test))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT TA0 (E_IDENT setHandler)) (LIST (E_IDENT handleISR))) (E_CALL (E_IDENT Pin (E_IDENT clear)) NIL) (E_CALL (E_IDENT Pin (E_IDENT makeOutput)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT TA0 (E_IDENT start)) NIL) (E_CALL (E_IDENT GI (E_IDENT enable)) NIL) (S_WHILE (S_BLOCK NIL))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT handleISR)) LIST (FCNBODY (LIST (S_IF (E_COND (E_BINARY == (E_IDENT counter) ++ (E_CONST 500))) (S_BLOCK (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL) (S_ASSIGN (E_BINARY = (E_IDENT counter) (E_CONST 0))))))))))) null)

test10 (unit, line218) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT test))) (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT P1_0) (E_IDENT Pin)) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430)) (E_IDENT TimerMilli) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8))) (D_MODULE (TimerMilliTest (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilliTest))) (T_USER_TYPE (E_IDENT TimerMilliTest))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Events (E_IDENT assignGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts)))))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerMilliTest))) (T_USER_TYPE (E_IDENT TimerMilliTest))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT tick))) (E_CALL (E_IDENT Pin (E_IDENT clear)) NIL) (E_CALL (E_IDENT Pin (E_IDENT makeOutput)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT TimerMilli (E_IDENT start)) (LIST (E_IDENT e) (E_CONST 25) (E_CONST true))) (E_CALL (E_IDENT Events (E_IDENT run)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT tick)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) t)) (FCNBODY (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL)))))) null)

test11 (unit, line261) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT data) (E_IDENT test))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT data)) (E_IDENT Queue) (E_IDENT Queue) (D_META_ARGS uint8 10)) (S_IMPORT (E_IDENT mcu (E_IDENT localhost)) (E_IDENT Write) NIL)) (D_MODULE (QueueCapacity (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Queue)))) q) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"Capacity running: \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q (E_IDENT getCapacity)) NIL)))))))) null)

test12 (unit, line279) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT data) (E_IDENT test))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT data)) (E_IDENT Queue) (E_IDENT Queue10) (D_META_ARGS uint8 10)) (S_IMPORT (E_IDENT pollen (E_IDENT data)) (E_IDENT Queue) (E_IDENT Queue22) (D_META_ARGS uint8 22)) (S_IMPORT (E_IDENT mcu (E_IDENT localhost)) (E_IDENT Write) NIL)) (D_MODULE (QueueTest (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Queue22)))) q22) (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Queue10)))) q10) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT QueueTest))) (T_USER_TYPE (E_IDENT QueueTest))) LIST (FCNBODY (LIST (E_CALL (E_IDENT q22 (E_IDENT setCapacity)) (LIST (E_CONST 33))) (E_CALL (E_IDENT q10 (E_IDENT setCapacity)) (LIST (E_CONST 13)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (D_VAR uint8 (i (E_CONST 0))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"q22 capacity: \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q22 (E_IDENT getCapacity)) NIL))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"q10 capacity: \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q10 (E_IDENT getCapacity)) NIL))) (S_FOR (S_ASSIGN (E_BINARY = (E_IDENT i) (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_CONST 13)) (E_IDENT i) ++ (S_BLOCK (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"e22: \"))) (S_IF (E_COND (E_CALL (E_IDENT q22 (E_IDENT enqueue)) (LIST (E_BINARY + (E_CONST 5) (E_IDENT i))))) (S_BLOCK (LIST (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_BINARY + (E_CONST 5) (E_IDENT i)))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \", \"))))) (S_ELSE (S_BLOCK (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"full, \"))))))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q22 (E_IDENT length)) NIL)))))) (S_FOR (S_ASSIGN (E_BINARY = (E_IDENT i) (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_CONST 13)) (E_IDENT i) ++ (S_BLOCK (LIST (D_VAR uint8 (x (E_CALL (E_IDENT q22 (E_IDENT dequeue)) NIL))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"d: \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_IDENT x))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \", \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q22 (E_IDENT length)) NIL)))))) (S_FOR (S_ASSIGN (E_BINARY = (E_IDENT i) (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_CONST 13)) (E_IDENT i) ++ (S_BLOCK (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"e10: \"))) (S_IF (E_COND (E_CALL (E_IDENT q10 (E_IDENT enqueue)) (LIST (E_BINARY + (E_CONST 5) (E_IDENT i))))) (S_BLOCK (LIST (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_BINARY + (E_CONST 5) (E_IDENT i)))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \", \"))))) (S_ELSE (S_BLOCK (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"full, \"))))))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q10 (E_IDENT length)) NIL)))))) (S_FOR (S_ASSIGN (E_BINARY = (E_IDENT i) (E_CONST 0))) (E_BINARY < (E_IDENT i) (E_CONST 13)) (E_IDENT i) ++ (S_BLOCK (LIST (D_VAR uint8 (x (E_CALL (E_IDENT q10 (E_IDENT dequeue)) NIL))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"d: \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_IDENT x))) (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \", \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT q10 (E_IDENT length)) NIL))))))))))) null)

test13 (unit, line353) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT runtime) (E_IDENT test))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT runtime)) (E_IDENT Dispatcher) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT runtime)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8)) (S_IMPORT (E_IDENT mcu (E_IDENT localhost)) (E_IDENT Write) NIL)) (D_MODULE (DispatcherTest (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT DispatcherTest))) (T_USER_TYPE (E_IDENT DispatcherTest))) LIST (FCNBODY (LIST (E_CALL (E_IDENT e1 (E_IDENT setPriority)) (LIST (E_CONST 1))) (E_CALL (E_IDENT e1 (E_IDENT setHandler)) (LIST (E_IDENT func1))) (E_CALL (E_IDENT e1 (E_IDENT setData)) (LIST (E_CONST 11))) (E_CALL (E_IDENT e2 (E_IDENT setPriority)) (LIST (E_CONST 2))) (E_CALL (E_IDENT e2 (E_IDENT setHandler)) (LIST (E_IDENT func2))) (E_CALL (E_IDENT e2 (E_IDENT setData)) (LIST (E_CONST 22))) (E_CALL (E_IDENT e3 (E_IDENT setPriority)) (LIST (E_CONST 3))) (E_CALL (E_IDENT e3 (E_IDENT setHandler)) (LIST (E_IDENT func3))) (E_CALL (E_IDENT e3 (E_IDENT setData)) (LIST (E_CONST 33)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e1))) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e2))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e3))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e2))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e1))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e3))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e3))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e2))) (E_CALL (E_IDENT Dispatcher (E_IDENT post)) (LIST (E_IDENT e1))) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL)))) (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e1) (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e2) (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e3) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT func1)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) id)) (FCNBODY (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"func1 \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT id (E_IDENT getData)) NIL)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT func2)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) id)) (FCNBODY (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"func2 \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT id (E_IDENT getData)) NIL)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT func3)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) id)) (FCNBODY (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"func3 \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT id (E_IDENT getData)) NIL)))))))) null)

test14 (unit, line421) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT runtime)) (E_IDENT EventHandler) (E_IDENT EH) (D_META_ARGS (T_USER_TYPE (E_IDENT any))))) (D_MODULE (EventHandlerTest (D_VAR (T_USER_TYPE (E_IDENT EH (E_IDENT handle))) h) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT EventHandlerTest))) (T_USER_TYPE (E_IDENT EventHandlerTest))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT func)) (LIST (D_FORMAL uint8 x)) (FCNBODY NIL)))) null)

test15 (unit, line437) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT runtime)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8)) (S_IMPORT (E_IDENT mcu (E_IDENT localhost)) (E_IDENT Write) NIL)) (D_MODULE (EventTest (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT e (E_IDENT setPriority)) (LIST (E_CONST 1))) (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT func))) (E_CALL (E_IDENT e (E_IDENT setData)) (LIST (E_CONST 99))) (E_CALL (E_IDENT e (E_IDENT handle)) NIL) (E_CALL (E_IDENT e (E_IDENT setPriority)) (LIST (E_CONST 2))) (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT func2))) (E_CALL (E_IDENT e (E_IDENT setData)) (LIST (E_CONST 23))) (E_CALL (E_IDENT e (E_IDENT handle)) NIL) (E_CALL (E_IDENT e (E_IDENT setPriority)) (LIST (E_CONST 3))) (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT func))) (E_CALL (E_IDENT e (E_IDENT setData)) (LIST (E_CONST 12))) (E_CALL (E_IDENT e (E_IDENT handle)) NIL) (E_CALL (E_IDENT e (E_IDENT setPriority)) (LIST (E_CONST 4))) (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT func2))) (E_CALL (E_IDENT e (E_IDENT setData)) (LIST (E_CONST 139))) (E_CALL (E_IDENT e (E_IDENT handle)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT func)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e)) (FCNBODY (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"FUNC \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT e (E_IDENT getData)) NIL)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT func2)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e)) (FCNBODY (LIST (E_CALL (E_IDENT Write (E_IDENT outs)) (LIST (E_CONST \"FUNC2 \"))) (E_CALL (E_IDENT Write (E_IDENT outi)) (LIST (E_CALL (E_IDENT e (E_IDENT getData)) NIL)))))))) null)

test16 (unit, line482) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Led) NIL)) (D_MODULE (BlinkLed (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Led (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 500000))))))))))) null)

test17 (unit, line511) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL)) (D_MODULE (BlinkLed (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT reset))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Led (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 500000))))))))))) null)

test18 (unit, line541) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin0) (E_IDENT Pin))) (D_MODULE (Blink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin (E_IDENT clear)) NIL) (E_CALL (E_IDENT Pin (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Mcu (E_IDENT wait)) (LIST (E_CONST 500000))))))))))) null)

test19 (unit, line571) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT P1_0) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Wait) NIL)) (D_COMPOSITION Comp1 (LIST (export (E_IDENT Mcu)) (export (E_IDENT P1_0)) (export (E_IDENT Wait)) (export (E_IDENT Mcu (E_IDENT reset))) (export (E_IDENT Wait (E_IDENT us))) (export (E_IDENT P1_0 (E_IDENT clear))) (export (E_IDENT P1_0 (E_IDENT makeOutput))) (export (E_IDENT P1_0 (E_IDENT toggle))))) null)

test20 (unit, line589) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT P1_0) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Wait) NIL) (S_IMPORT NIL (E_IDENT Led) NIL)) (D_COMPOSITION Comp2 (LIST (export (E_IDENT Mcu)) (export (E_IDENT P1_0)) (export (E_IDENT Wait)) (export (E_IDENT Mcu (E_IDENT reset))) (export (E_IDENT Wait (E_IDENT us))) (export (E_IDENT P1_0 (E_IDENT clear))) (export (E_IDENT P1_0 (E_IDENT makeOutput))) (export (E_IDENT P1_0 (E_IDENT toggle))))) null)

test21 (unit, line609) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Pin) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Wait) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8))) (D_MODULE (CompBusyBlink (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin (E_IDENT clear)) NIL) (E_CALL (E_IDENT Pin (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Wait (E_IDENT us)) (LIST (E_CONST 50000))))))))))) null)

test22 (unit, line639) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT NIL (E_IDENT Comp) NIL)) (D_MODULE (CompTest1 (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Comp (E_IDENT reset)) NIL) (E_CALL (E_IDENT Comp (E_IDENT clear)) NIL) (E_CALL (E_IDENT Comp (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Comp (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Comp (E_IDENT us)) (LIST (E_CONST 20000))))))))))) null)

test23 (unit, line660) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT NIL (E_IDENT Comp) NIL)) (D_MODULE (CompTest1 (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Comp (E_IDENT reset)) NIL) (E_CALL (E_IDENT Comp (E_IDENT clear)) NIL) (E_CALL (E_IDENT Comp (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Comp (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Comp (E_IDENT us)) (LIST (E_CONST 20000))))))))))) null)

test24 (unit, line681) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Pin) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Wait) NIL)) (D_MODULE (DistroTest (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Wait (E_IDENT us)) (LIST (E_CONST 500000))))))))))) null)

test25 (unit, line700) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Board) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Pin) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT TimerMilli) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Dispatcher) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8))) (D_MODULE (EventBlink (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT EventBlink))) (T_USER_TYPE (E_IDENT EventBlink))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Dispatcher (E_IDENT assignGlobalInterrupts)) (LIST (E_IDENT GlobalInterrupts)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT toggle))) (E_CALL (E_IDENT TimerMilli (E_IDENT start)) (LIST (E_IDENT e) (E_CONST 250) (E_CONST true))) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e)) (FCNBODY (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL)))))) null)

test26 (unit, line737) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT test))) (LIST (S_IMPORT (E_IDENT distro (E_IDENT ti) (E_IDENT launchpad)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Pin) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT TimerMilli) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Event) (E_IDENT Event) (D_META_ARGS uint8))) (D_MODULE (EventBlink (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Event)))) e) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT reset))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT Pin (E_IDENT makeOutput)) NIL) (E_CALL (E_IDENT Pin (E_IDENT clear)) NIL) (E_CALL (E_IDENT e (E_IDENT setHandler)) (LIST (E_IDENT toggle)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT TimerMilli (E_IDENT start)) (LIST (E_IDENT e) (E_CONST 250) (E_CONST true))) (E_CALL (E_IDENT Dispatcher (E_IDENT run)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Event)) e)) (FCNBODY (LIST (E_CALL (E_IDENT Pin (E_IDENT toggle)) NIL)))))) null)

test27 (unit, line776) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p)) (E_IDENT PD5) NIL)) (D_MODULE (FancyPD5 (implements Gpio) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT get)) LIST (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT x) (E_CALL (E_IDENT PD5 (E_IDENT get)) NIL))) (S_RETURN (E_IDENT x))))))) null)

test28 (unit, line797) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT P1_0) (E_IDENT Pin)) (S_IMPORT (E_IDENT mcu (E_IDENT ti) (E_IDENT msp430g2231) (E_IDENT McuLayout)) (E_IDENT Wait) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL)) (D_MODULE (Led (D_VAR (T_USER_TYPE (E_IDENT Gpio)) LedPin) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT bindPin)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Gpio)) p)) (FCNBODY (LIST (S_ASSIGN (E_BINARY = (E_IDENT LedPin) (E_IDENT p)))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT toggle)) LIST (FCNBODY (LIST (E_CALL (E_IDENT LedPin (E_IDENT toggle)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT on)) LIST (FCNBODY (LIST (E_CALL (E_IDENT LedPin (E_IDENT set)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT off)) LIST (FCNBODY (LIST (E_CALL (E_IDENT LedPin (E_IDENT clear)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT isOn)) LIST (FCNBODY (LIST (S_RETURN (E_CALL (E_IDENT LedPin (E_IDENT get)) NIL))))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (E_CALL (E_IDENT LedPin (E_IDENT clear)) NIL) (E_CALL (E_IDENT LedPin (E_IDENT makeOutput)) NIL) (S_WHILE (S_BLOCK (LIST (E_CALL (E_IDENT LedPin (E_IDENT toggle)) NIL) (E_CALL (E_IDENT Wait (E_IDENT us)) (LIST (E_CONST 500000))))))))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Led))) (T_USER_TYPE (E_IDENT Led))) LIST (FCNBODY (LIST (E_CALL (E_IDENT bindPin) (LIST (E_IDENT Pin)))))))) null)

test29 (unit, line836) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT distro (E_IDENT arduino)) (E_IDENT Distro) NIL) (S_IMPORT (E_IDENT Distro) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT TimerManager) NIL)) (D_MODULE (TimerManagerTest (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT TimerManager (E_IDENT Timer))))) t) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT TimerManagerTest))) (T_USER_TYPE (E_IDENT TimerManagerTest))) LIST (FCNBODY (LIST (E_CALL (E_IDENT t (E_IDENT init)) NIL)))) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY (LIST (E_CALL (E_IDENT Mcu (E_IDENT reset)) NIL) (S_WHILE (S_BLOCK NIL))))))) null)

test30 (unit, line860) - 
expected: 
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Timer) NIL)) (D_MODULE (TimerTest (D_VAR (T_USER_TYPE (E_IDENT value) (D_META_ARGS (T_USER_TYPE (E_IDENT Timer)))) t) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT pollen (E_IDENT run))) LIST (FCNBODY NIL)))) null)


Tests run: 30, Failures: 30
###################
### tst_compos.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 3 tests
-----------------------------------------------------------------------
3 failures found:
test1 (unit, line6) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_COMPOSITION Environment (LIST (export (E_IDENT GlobalInterrupts)) (export (E_IDENT Led)) (export (E_IDENT Mcu)) (export (E_IDENT Mcu (E_IDENT reset))) (export (E_IDENT Mcu (E_IDENT wait))) (export (E_IDENT Events (E_IDENT run))) (export (E_IDENT Events (E_IDENT post))) (export (E_IDENT Events (E_IDENT postFromInterrupt)))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Environment))) (T_USER_TYPE (E_IDENT Environment))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (D_VAR uint8 x) (D_VAR uint8 (y (E_CONST 7))) (D_VAR uint8 (z (E_CONST 1))) (D_VAR uint8 s) (D_VAR int16 t) (D_ARR int8 arr (LIST NIL) (LIST (E_CONST 3) (E_CONST 2) (E_CONST 1))) (D_ARR int32 arr1 (LIST (E_CONST 7) (E_CONST 3))) (D_ARR int32 arr2 (LIST (E_IDENT y))) (D_ARR int32 arr3 (LIST (E_CONST 2) (E_CONST 2)) (LIST (LIST (E_CONST 1) (E_CONST 2)) (LIST (E_CONST 3) (E_CONST 4)))) (D_VAR (T_USER_TYPE (E_IDENT Environment)) e))))) null)

test2 (unit, line48) - 
expected: 
actual: line 7:0 PollenException(Composition features must be one of host functions, export statements, or enum definitions.)


test3 (unit, line59) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_COMPOSITION Environment (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (E_INJECT +{ #include <avr/io.h> \n           #include <avr/interrupt.h> }+) (E_INJECT +{ ISR( }+) (E_INJECT +{name}+) (E_INJECT +{ ) { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+)) null)


Tests run: 3, Failures: 3
###################
### tst_class.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 4 tests
-----------------------------------------------------------------------
4 failures found:
test1 (unit, line6) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_CLASS (Environment (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Environment))) (T_USER_TYPE (E_IDENT Environment))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (D_VAR uint8 x) (D_VAR uint8 (y (E_CONST 7))) (D_VAR uint8 (z (E_CONST 1))) (D_VAR uint8 s) (D_VAR int16 t) (D_ARR int8 arr (LIST NIL)) (D_ARR int32 arr1 (LIST (E_CONST 7))) (D_ARR int32 arr2 (LIST (E_IDENT y))) (D_VAR (T_USER_TYPE (E_IDENT Environment)) (e2 (E_EXPR (E_NEW (T_USER_TYPE (E_IDENT Environment)) NIL)))) (D_VAR (T_USER_TYPE (E_IDENT Environment)) (e (E_NEW (T_USER_TYPE (E_IDENT Environment)) NIL))) (D_FCN_REF (T_USER_TYPE (E_IDENT Environment (E_IDENT fcn1))) (LIST uint8 bool) fcnRef)))))) null)

test2 (unit, line40) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_CLASS (Environment (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)))) null)

test3 (unit, line51) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_CLASS (Environment (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (E_INJECT +{ #include <avr/io.h> \n           #include <avr/interrupt.h> }+) (E_INJECT +{ ISR( }+) (E_INJECT +{name}+) (E_INJECT +{ ) { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+))) null)

test4 (unit, line71) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_CLASS (Environment (D_CLASS (XYZ (D_VAR uint8 xy) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) LIST (FCNBODY NIL)))))) null)


Tests run: 4, Failures: 4
###################
### tst_compos.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 3 tests
-----------------------------------------------------------------------
3 failures found:
test1 (unit, line6) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_COMPOSITION Environment (LIST (export (E_IDENT GlobalInterrupts)) (export (E_IDENT Led)) (export (E_IDENT Mcu)) (export (E_IDENT Mcu (E_IDENT reset))) (export (E_IDENT Mcu (E_IDENT wait))) (export (E_IDENT Events (E_IDENT run))) (export (E_IDENT Events (E_IDENT post))) (export (E_IDENT Events (E_IDENT postFromInterrupt)))) (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Environment))) (T_USER_TYPE (E_IDENT Environment))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (D_VAR uint8 x) (D_VAR uint8 (y (E_CONST 7))) (D_VAR uint8 (z (E_CONST 1))) (D_VAR uint8 s) (D_VAR int16 t) (D_ARR int8 arr (LIST NIL) (LIST (E_CONST 3) (E_CONST 2) (E_CONST 1))) (D_ARR int32 arr1 (LIST (E_CONST 7) (E_CONST 3))) (D_ARR int32 arr2 (LIST (E_IDENT y))) (D_ARR int32 arr3 (LIST (E_CONST 2) (E_CONST 2)) (LIST (LIST (E_CONST 1) (E_CONST 2)) (LIST (E_CONST 3) (E_CONST 4)))) (D_VAR (T_USER_TYPE (E_IDENT Environment)) e))))) null)

test2 (unit, line48) - 
expected: 
actual: line 7:0 PollenException(Composition features must be one of host functions, export statements, or enum definitions.)


test3 (unit, line59) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_COMPOSITION Environment (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (E_INJECT +{ #include <avr/io.h> \n           #include <avr/interrupt.h> }+) (E_INJECT +{ ISR( }+) (E_INJECT +{name}+) (E_INJECT +{ ) { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+)) null)


Tests run: 3, Failures: 3
###################
### tst_enum.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 3 tests
-----------------------------------------------------------------------
3 failures found:
test1 (unit, line4) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT distro) (E_IDENT arduino) (E_IDENT diecimila))) (LIST (S_IMPORT NIL (E_IDENT BoardC) NIL)) (D_ENUM (ClockSource (LIST (D_ENUMVAL (SCLK 2)) (D_ENUMVAL (ACLK 1))))) null)

test2 (unit, line12) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT distro) (E_IDENT arduino) (E_IDENT diecimila))) (LIST (S_IMPORT NIL (E_IDENT BoardC) NIL)) (D_COMPOSITION DistroC (extends BoardC) (D_ENUM (ClockSource (LIST (D_ENUMVAL SCLK) (D_ENUMVAL ACLK) (D_ENUMVAL SMCLK) (D_ENUMVAL USISWCLK) (D_ENUMVAL TACCR0) (D_ENUMVAL TACCR1))))) null)

test3 (unit, line21) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT distro) (E_IDENT arduino) (E_IDENT diecimila))) (LIST (S_IMPORT NIL (E_IDENT BoardC) NIL)) (D_PROTOCOL (DistroC (extends BoardC) (D_ENUM (ClockSource (LIST (D_ENUMVAL SCLK) (D_ENUMVAL ACLK) (D_ENUMVAL SMCLK) (D_ENUMVAL USISWCLK) (D_ENUMVAL TACCR0) (D_ENUMVAL TACCR1)))))) null)


Tests run: 3, Failures: 3
###################
### tst_module.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 4 tests
-----------------------------------------------------------------------
4 failures found:
test1 (unit, line6) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_MODULE (M (D_FCN_DEF (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT M))) (T_USER_TYPE (E_IDENT M))) LIST (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (D_VAR uint8 var1) (D_VAR (T_USER_TYPE (E_IDENT Led)) led1) (D_FCN_DEF (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h)) (FCNBODY NIL)) (D_FCN_DEF (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST (FCNBODY (LIST (D_VAR uint8 x) (D_VAR uint8 (y (E_CONST 7))) (D_VAR uint8 (z (E_CONST 1))) (D_VAR uint8 s) (D_VAR int16 t) (D_ARR int8 arr (LIST NIL)) (D_ARR int32 arr1 (LIST (E_CONST 7))) (D_ARR int32 arr2 (LIST (E_IDENT y))) (D_VAR (T_USER_TYPE (E_IDENT Environment)) e)))))) null)

test2 (unit, line39) - 
expected: 
actual: line 5:8 no viable alternative at input 'export'


test3 (unit, line49) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_MODULE (Environment (E_INJECT +{ #include <avr/io.h> \n           #include <avr/interrupt.h> }+) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY NIL)) (E_INJECT +{ ISR( }+) (E_INJECT +{name}+) (E_INJECT +{ ) { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+))) null)

test4 (unit, line68) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_MODULE (Environment (D_CLASS (XYZ (D_VAR uint8 xy) (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) LIST (FCNBODY NIL)))))) null)


Tests run: 4, Failures: 4
###################
### tst_protocol.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 3 tests
-----------------------------------------------------------------------
3 failures found:
test1 (unit, line6) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_PROTOCOL (Environment (D_FCN_DCL (D_FCN_CTOR (LIST (T_USER_TYPE (E_IDENT Environment))) (T_USER_TYPE (E_IDENT Environment))) LIST) (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT setHandler)) (LIST (D_FORMAL (T_USER_TYPE (E_IDENT Handler (E_IDENT handle))) h))) (D_FCN_DCL (D_FCN_TYP_NM (LIST uint32) (E_IDENT getSystemFrequency)) LIST))) null)

test2 (unit, line28) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_PROTOCOL (Environment (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y))) (D_FCN_DCL (D_FCN_TYP_NM (LIST (T_USER_TYPE (E_IDENT typ1))) (E_IDENT fcn2)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y))) (D_FCN_DCL (D_FCN_TYP_NM LIST (E_IDENT voidfcn)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y))))) null)

test3 (unit, line40) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) LIST (D_PROTOCOL (Environment (D_FCN_DCL (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y))) (E_INJECT +{ #include <avr/io.h> \n           #include <avr/interrupt.h> }+) (E_INJECT +{ ISR( }+) (E_INJECT +{name}+) (E_INJECT +{ ) { }+) (E_INJECT +{isr()}+) (E_INJECT +{;} }+))) null)


Tests run: 3, Failures: 3
###################
### tst_stmts.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 1 tests
-----------------------------------------------------------------------
1 failures found:
test1 (unit, line6) - 
expected: 
actual: (UNIT (S_PACKAGE (E_IDENT cc (E_IDENT arduino))) (LIST (S_IMPORT NIL (E_IDENT Duemilanove) (E_IDENT Board)) (S_IMPORT (E_IDENT Board) (E_IDENT Led) NIL) (S_IMPORT (E_IDENT Board) (E_IDENT Mcu) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT GlobalInterrupts) NIL) (S_IMPORT (E_IDENT Mcu) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TD)) (S_IMPORT (E_IDENT pollen (E_IDENT time)) (E_IDENT Time) NIL) (S_IMPORT (E_IDENT pollen (E_IDENT events)) (E_IDENT Events) NIL)) (D_MODULE (Environment (D_FCN_DEF (D_FCN_TYP_NM (LIST bool) (E_IDENT fcn1)) (LIST (D_FORMAL uint8 x) (D_FORMAL bool y)) (FCNBODY (LIST (S_WHILE (S_BLOCK (LIST (D_VAR (T_USER_TYPE (E_IDENT uint)) (z (E_CONST 2)))))) (S_IF (E_COND (E_CONST 1)) (S_BLOCK (LIST (D_VAR uint32 (y (E_CONST 2))) (D_VAR (T_USER_TYPE (E_IDENT uint1i6)) t1) (D_VAR (T_USER_TYPE (E_IDENT uint1i6)) (t2 (E_CONST 3))) (D_VAR (T_USER_TYPE (E_IDENT uint1i6)) t3) (D_VAR bool t)))) (S_IF (E_COND (E_CONST 2)) (S_BLOCK NIL) (S_ELSE (S_BLOCK (LIST (D_VAR bool t2))))) (S_IF (E_COND (E_CONST 3)) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_1}+))) (S_ELIF (E_COND (E_CONST 7)) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_2}+)))) (S_ELIF (E_COND (E_CONST 7)) (S_BLOCK (LIST (E_INJECT +{BCSCTL2 = DIVS_3}+)))) (S_ELSE (S_BLOCK (LIST (D_VAR (T_USER_TYPE (E_IDENT uint)) (x3 (E_CONST 7))))))) (S_DO_WHILE (S_BLOCK (LIST (D_VAR bool t))) (E_COND (E_CONST true))) (S_SWITCH (E_COND (E_CONST 7)) (S_CASE 2 NIL) (S_CASE 3 NIL) (S_DEFAULT NIL)) (S_FOREACH x (E_IDENT (E_CONST 7)) (S_BLOCK NIL))))))) null)


Tests run: 1, Failures: 1
###################
### tst_unit.gunit
###################
-----------------------------------------------------------------------
executing testsuite for grammar:pol with 10 tests
-----------------------------------------------------------------------
10 failures found:
test1 (unit, line5) - 
expected: (UNIT package em mcu avr atmega328p DELIM (module stuff (implements moreStuff) { } DELIM) null)
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT mcu) (E_IDENT avr) (E_IDENT atmega328p))) LIST (D_MODULE (stuff (implements moreStuff))) null)

test2 (unit, line11) - 
expected: (UNIT package em bios DELIM (import from em bios EventDispatcherI) DELIM (import from em bios EventDispatcherProviderI) DELIM (module EventDispatcher (implements EventDispatcherI) { }) null)
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT bios))) (LIST (S_IMPORT (E_IDENT em (E_IDENT bios)) (E_IDENT EventDispatcherI) NIL) (S_IMPORT (E_IDENT em (E_IDENT bios)) (E_IDENT EventDispatcherProviderI) NIL)) (D_MODULE (EventDispatcher (implements EventDispatcherI))) null)

test3 (unit, line22) - 
expected: (UNIT package em bios DELIM (import from em bios EventDispatcherI) DELIM (import from em bios EventDispatcherProviderI) DELIM (module EventDispatcher (implements EventDispatcherI) { }) null)
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT bios))) (LIST (S_IMPORT (E_IDENT em (E_IDENT bios)) (E_IDENT EventDispatcherI) NIL) (S_IMPORT (E_IDENT em (E_IDENT bios)) (E_IDENT EventDispatcherProviderI) NIL)) (D_MODULE (EventDispatcher (implements EventDispatcherI))) null)

test4 (unit, line34) - 
expected: (UNIT package pollen tst DELIM (import from pollen interfaces Gpio) DELIM (import from mcu atmel atmega328p PD5) DELIM (module FancyPD5 (implements Gpio) { }) null)
actual: (UNIT (S_PACKAGE (E_IDENT pollen (E_IDENT tst))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Gpio) NIL) (S_IMPORT (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p)) (E_IDENT PD5) NIL)) (D_MODULE (FancyPD5 (implements Gpio))) null)

test5 (unit, line45) - 
expected: (UNIT package mcu atmel atmega328p DELIM (import from pollen interfaces GlobalInterrupts as GI) DELIM (module GlobalInterrupts (implements GI) { }) null)
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT GlobalInterrupts) (E_IDENT GI))) (D_MODULE (GlobalInterrupts (implements GI))) null)

test6 (unit, line55) - 
expected: (UNIT package mcu atmel atmega328p DELIM (import from pollen interfaces Uart as UartI) DELIM (import Atmega328p as Mcu) DELIM (module Uart (implements UartI) { }) null)
actual: (UNIT (S_PACKAGE (E_IDENT mcu (E_IDENT atmel) (E_IDENT atmega328p))) (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Uart) (E_IDENT UartI)) (S_IMPORT NIL (E_IDENT Atmega328p) (E_IDENT Mcu))) (D_MODULE (Uart (implements UartI))) null)

test7 (unit, line67) - 
expected: (UNIT (import from pollen interfaces Mcu) DELIM (protocol Msp430 (extends Mcu) { }) null)
actual: (UNIT S_PACKAGE (LIST (S_IMPORT (E_IDENT pollen (E_IDENT interfaces)) (E_IDENT Mcu) NIL)) (D_PROTOCOL (Msp430 (extends Mcu))) null)

test8 (unit, line76) - 
expected: (UNIT package em distro arduino diecimila DELIM (import BoardC) DELIM (import from em bios KernelC) DELIM (import from em utils AssertC) DELIM (import from McuC TimerMilli8BitTimer0 as TimerMilliDriver) DELIM (composition DistroC (extends BoardC) { }) null)
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT distro) (E_IDENT arduino) (E_IDENT diecimila))) (LIST (S_IMPORT NIL (E_IDENT BoardC) NIL) (S_IMPORT (E_IDENT em (E_IDENT bios)) (E_IDENT KernelC) NIL) (S_IMPORT (E_IDENT em (E_IDENT utils)) (E_IDENT AssertC) NIL) (S_IMPORT (E_IDENT McuC) (E_IDENT TimerMilli8BitTimer0) (E_IDENT TimerMilliDriver))) (D_COMPOSITION DistroC (extends BoardC)) null)

test9 (unit, line89) - 
expected: (UNIT (package em distro arduino diecimila DELIM) (import BoardC DELIM) (composition (DistroC (extends BoardC) { (enum (ClockSource { SCLK ACLK SMCLK USISWCLK TACCR0 TACCR1 } DELIM)) })) null)
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT distro) (E_IDENT arduino) (E_IDENT diecimila))) (LIST (S_IMPORT NIL (E_IDENT BoardC) NIL)) (D_COMPOSITION DistroC (extends BoardC) (D_ENUM (ClockSource (LIST (D_ENUMVAL SCLK) (D_ENUMVAL ACLK) (D_ENUMVAL SMCLK) (D_ENUMVAL USISWCLK) (D_ENUMVAL TACCR0) (D_ENUMVAL TACCR1))))) null)

test10 (unit, line98) - 
expected: (UNIT (package em distro arduino diecimila DELIM) (import BoardC DELIM) (enum (ClockSource { (SCLK 2) (ACLK true) })) null)
actual: (UNIT (S_PACKAGE (E_IDENT em (E_IDENT distro) (E_IDENT arduino) (E_IDENT diecimila))) (LIST (S_IMPORT NIL (E_IDENT BoardC) NIL)) (D_ENUM (ClockSource (LIST (D_ENUMVAL (SCLK 2)) (D_ENUMVAL (ACLK 7))))) null)


Tests run: 10, Failures: 10
